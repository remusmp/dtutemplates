%!PS-Adobe-3.1 EPSF-3.0%ADO_DSC_Encoding: MacOS Roman%%Title: DTU Byg B.eps%%Creator: Adobe Illustrator(R) 12%%AI8_CreatorVersion: 12.0.1%AI9_PrintingDataBegin%%For: PeopleGroup%%CreationDate: 27/02/08%%BoundingBox: 0 0 166 26%%HiResBoundingBox: 0 0 165.9371 25.1714%%CropBox: 0 0 165.9371 25.1714%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0%%+ procset Adobe_CoolType_Utility_T42 1.0 0%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%+ procset Adobe_CoolType_Core 2.23 0%%+ procset Adobe_AGM_Core 2.0 0%%+ procset Adobe_AGM_Utils 1.0 0%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Magenta Yellow Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x205 R agm 4.3861 ct 5.530%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 20 8%%BeginData: 4200 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45936999FD07FFA8F827F852FF52F827F827A827FFFFA828FD04FF52%27272753FD5CFF68936FFD07FF7D27A8FFF87DFFFFF8A8FFA8F8FFFFA827%FD04FF5227FFA8F8A8A8A8FFA8A8FFFF7DA87DA8FD50FF93689AFD07FFA8%27FFFF7D52FFFF27A8FFA827FFFF7D27FD04FF5252FFA827FF277DFF5252%FF27522727A8FD50FF68696FFD07FF7D27FFFF5252FFFFF8A8FFA8F8FFFF%A827FD04FF52F852F852FF5327FF27A87D27FFA8F8FD51FF93699AFD07FF%A827FFFF7D52FFFF27A8FFA827FFFF7D27FD04FF5252FFFFF8FFA827A827%FFA8277D277DFD51FF69696FFD07FF7D27A8A8F87DFFFFF8A8FFFFF87DFF%5227FD04FF5227FF7D27A8FF272827FF7D27277DFD52FF936993FD07FFA8%F827F852FFFFFF277EFFFF7DF82727A8FD04FF5327272752FFFF7DF87DFF%A8277D2752FD51FF68696FFD09FFA8FD05FFA8FD05FFA8FD07FFA8A8A8FF%FFFFA827A8FF5227A87DF8FD51FF936999FD22FF525253FFFFFF5252277D%FD51FF68936FFD7DFF93689AFD08FFA8FD0EFFA8FD11FFA8A8FD0BFFA8A8%A8FD19FFA8A8FD11FFA8A8FD07FFA8FD0EFF68696FFD07FFA87DFD0BFFA8%FFFF7DFFFFA8A8FD07FF7DFD04FFA852A8FD0AFF847D7DA859FD18FFA87D%FD11FF527DA8FD06FFA87DFD0DFF93699AFD08FF7DFFA8A87DA9FFFF7DA8%A8A852A8A8FFFFA852A8FFA8FFFFA8FF7D7D7DFFFFFF7D7DA8FF7EA8A8FF%A8A8A8FFFFA87DFFFF7DA8A8FFFFA8FFAFA87DA8FFFF7DA87DFFFFA87DA8%FFFF7DA8A8FD05FF7DA8A8FFFFA87DA8A8FFFFFFA8A87DA8FFA87DA8A8FF%A8A8FFA87DA8A8A87DFFFFA87DA87D69696FFD07FFA87DFF7D7DA853FF52%A8A8FFA87DA8FF52FFA87DA8FF52FFFF7DA8A853A8FFFFFFA87DFF7DA8A8%7DA8A87DFFFFFFA87DA8A87DFF53FFFF7DA87DA8A852FF7DA8A87DA8A87D%FF7DA87D7DA8A87DFFFFFF7DA8A87DA87D7DFF52A8FFFFFFA8A8FF7DFF7D%7DA87DA8A87DFFA8FF7D7DA87D7DFF7DA87D7D936993FD07FFA87DFF7DFF%FF7DA8A859FFFFFF7DFFFF7DA8FF7DFFFF7DFFFF7DFFAF84FD04FFA8A8FF%7DA8FF7DA87DFD04FFA87DA87D7DFFA87DFF7DFF7DFFFF7DA8A8A8FF7DA8%7DA8A87DA8A8A8FFA87DFFFFFF7DFFFF7DA87DFFFF7DA8FFFFFF7DA87D7D%FFA8A8FF7DA8A8A8FFFFA87D7DFF7D7DA8A8FFFF5968696FFD07FFA87DA8%7DA8FF52FFFFA852A8FF7DA8FF7DFFA87DFFFF52FFFF7DA8FF7DFD04FFA8%7DFF59FFFFA87DA8A8FFFFFF7DA8FFFF7DA8A87D7DA8FF7D7D7DA8FF7D7D%7DA8A87D7DA884FF7DA8FFA87DFFFFFF7DFFFF7EA8A8527E7DFFFFFFA87D%7DA853A87DA8FFA87DA87DA852FF7D7DA8A8A8FF527D7DA8936993FD07FF%A87DFF7DFFFF7DA8FFFFA87DFF7DFFFF7DA8FF7DFFFF7DA8A852FFA87DA8%FFFFFFA8A8FFA87DFF7DFF7DA9FFFFFFA87DFFA87DFFFF7D7DA8FF7D7D7D%FFFFA87DA8A8FF7DA8FFFFFFA87DFFA87DFFFFFF7E7DFF7DFF7D7D7DFD04%FFA87DFFFFA87DA8A8FF7DFD04A87DFF7D7DFFA8FFA87D7DA8FF999A9AFD%07FFA8A8FFA8FFFF7DFFA87D7DFFFFA87DFFA8FFFFA87DFFA87D7DA8FFFF%7DA8FD04FFA8FFA8847DA8FFA8A8FFFFFFA8A87D7DA8FFFFA852FFA87DA8%A87DA87DA8A87D7DFF7D7D7DFFA8A8FFFFA8FFFFFFA87E7DA8FF7DA8FF7D%A8FFFFA8A8FFFFA8A8A8FFFFA8A8FFA8FF7D7E7DA87D84A8A87DFF7D7DFD%3EFFA87DA8FFFF7DA8A87DA8847DFF7DA8FD12FF7DA8A87DA8FD17FFA87D%A8A87DFD3EFF7DA8A8FFFFFF7DA8A8FFA8A87DA8FD14FF7DA8A8FD19FFA8%A87DFF%%EndData%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 70 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/set_gvm{	currentglobal exch setglobal}bdf/reset_gvm{	setglobal}bdf/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/thold_halftone{ 	level3		{sethalftone currenthalftone}		{			dup /HalftoneType get 3 eq			{				sethalftone currenthalftone			}			{				begin				Width Height mul {					Thresholds read {pop} if				} repeat				end				currenthalftone			} ifelse		}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			/srcDataStrs [ imageDict begin				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse				{					Width Decode length 2 div mul cvi string				} repeat				end ] def					imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put			imageDict /Decode [0 1] put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		DataSource 0 get type		dup /filetype eq			{			1 dict begin			/flushbuffer Width cvi string def			1 1 Height cvi				{				pop				0 1 DataSource length 1 sub					{					DataSource exch get					flushbuffer readstring pop pop					}for				}for			end			}if		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and			{			Width Height mul cvi				{				0 1 DataSource length 1 sub					{dup DataSource exch get exec length exch 0 ne {pop}if}for				dup 0 eq					{pop exit}if				sub dup 0 le					{exit}if				}loop			pop			}if				}		{		/DataSource load type 		dup /filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 idiv mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and			{				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul					{					DataSource length dup 0 eq						{pop exit}if					sub dup 0 le						{exit}if					}loop				pop			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 	dup type /dicttype eq		{			Adobe_AGM_Core/AGMCORE_tmp get			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			Adobe_AGM_Core/AGMCORE_tmp get exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{ 	/indexed_colorspace_dict AGMCORE_gget dup null ne {		dup /CSDBase known {			/CSDBase get /CSD get_res /Names known 		}{			pop false		}ifelse	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse{	/pdfmark_5 {cleartomark} bind def}{	/pdfmark_5 {pdfmark} bind def}ifelse/ReadBypdfmark_5{	2 dict begin	/makerString exch def string /tmpString exch def	{		currentfile tmpString readline pop		makerString anchorsearch		{		pop pop cleartomark exit		}{			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5		} ifelse	}loop	end} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for%% definitions of some fundamental procedures.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 201 dict dup begin put/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSD_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_in_pattern false def/AGMCORE_currentpagedevice nd/knockout_unitsq ndcurrentglobal true setglobal[/CSA /Gradient /Procedure]{	/Generic /Category findresource dup length dict copy /Category defineresource pop} forallsetglobal/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	//Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_&setoverprint /setoverprint ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse			/AGMCORE_gstackptr exch store		}def		/grestoreall {			AGMCORE_&grestoreall			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/setoverprint{			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint		}def			0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/sRGB ne					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			//Adobe_AGM_Core begin			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						current_spot_alias false set_spot_alias						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor						set_spot_alias						currentgray 1 ne					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						//Adobe_AGM_Core/AGMCORE_name xddf						false						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not AGMCORE_currentpagedevice/OverrideSeparations known and						{							AGMCORE_currentpagedevice/OverrideSeparations get							{								/HqnSpots /ProcSet resourcestatus								{									pop pop pop true								}if							}if						}if											{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not						}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace							false							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall								not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse			end		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	/AGMCORE_IsSeparationAProcessColor		{		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or		}def	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		level3 {			/AGMCORE_IsCurrentColor				{				dup AGMCORE_IsSeparationAProcessColor					{					AGMCORE_plate_ndx 0 eq						{dup (Cyan) eq exch /Cyan eq or}if					AGMCORE_plate_ndx 1 eq						{dup (Magenta) eq exch /Magenta eq or}if					AGMCORE_plate_ndx 2 eq						{dup (Yellow) eq exch /Yellow eq or}if					AGMCORE_plate_ndx 3 eq						{dup (Black) eq exch /Black eq or}if					AGMCORE_plate_ndx 4 eq						{pop false}if					}{					gsave					false setoverprint					current_spot_alias false set_spot_alias					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor					set_spot_alias					currentgray 1 ne					grestore					}ifelse				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf				dup type /dicttype eq					{					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end}{					channel get 0 paint? AGMCORE_separateShadingFunction					}ifelse				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					Shading /AGMCORE_ignoreshade known					currentdict end exch					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				//Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					/AGMCORE_SpotAliasAry2 where {						begin						dup 0 get dup /Separation eq						{							pop							dup length array copy							dup dup 1 get							current_spot_alias							{								dup map_alias								{									false set_spot_alias									dup 1 exch setsepcolorspace									true set_spot_alias									begin									/sep_colorspace_dict currentdict AGMCORE_gput									pop pop	pop									[ 										/Separation Name 										CSA map_csa										MappedCSA 										/sep_colorspace_proc load									]									dup Name									end								}if							}if							map_reserved_ink_name 1 xpt						}{							/DeviceN eq 							{								dup length array copy								dup dup 1 get [ 									exch {										current_spot_alias{											dup map_alias{												/Name get exch pop											}if										}if										map_reserved_ink_name									} forall 								] 1 xpt							}if						}ifelse						end					} if				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	/AGMCORE_def_ht currenthalftone def	/clonedict Adobe_AGM_Utils begin /clonedict load end def	/clonearray Adobe_AGM_Utils begin /clonearray load end def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/getrampcolor	{ 		/indx exch def		0 1 NumComp 1 sub		{			dup			Samples exch get			dup type /stringtype eq {indx get} if			exch			Scaling exch get aload pop			3 1 roll			mul add		} for		ColorSpaceFamily /Separation eq 		{sep}		{			ColorSpaceFamily /DeviceN eq			{devn} {setcolor}ifelse		}ifelse	} bdf	/sssetbackground {aload pop setcolor} bdf	/RadialShade	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/r2 xdf		/c2y xdf		/c2x xdf		/r1 xdf		/c1y xdf		/c1x xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		c1x c2x eq		{			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope c2y c1y sub c2x c1x sub div def			/theta slope 1 atan def			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if		} ifelse		gsave		clippath		c1x c1y translate		theta rotate		-90 rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax xdf		/xMax xdf		/yMin xdf		/xMin xdf		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			/max { 2 copy gt { pop } {exch pop} ifelse } bdf			/min { 2 copy lt { pop } {exch pop} ifelse } bdf			rampdict begin			40 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			c1x c1y translate			theta rotate			-90 rotate			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def			/c1y 0 def			/c1x 0 def			/c2x 0 def			ext0			{				0 getrampcolor				c2y r2 add r1 sub 0.0001 lt				{					c1x c1y r1 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2y r1 add r2 le					{						c1x c1y r1 0 360 arc						fill					}					{						c2x c2y r2 0 360 arc fill						r1 r2 eq						{							/p1x r1 neg def							/p1y c1y def							/p2x r1 def							/p2y c1y def							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto							fill						}						{							/AA r2 r1 sub c2y div def							AA -1 eq							{ /theta 89.99 def}							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}							ifelse							/SS1 90 theta add dup sin exch cos div def							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def							/p1y p1x SS1 div neg def							/SS2 90 theta sub dup sin exch cos div def							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def							/p2y p2x SS2 div neg def							r1 r2 gt							{								/L1maxX p1x yMin p1y sub SS1 div add def								/L2maxX p2x yMin p2y sub SS2 div add def							}							{								/L1maxX 0 def								/L2maxX 0 def							} ifelse							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto							L1maxX L1maxX p1x sub SS1 mul p1y add lineto							fill						} ifelse					} ifelse				} ifelse			} if		c1x c2x sub dup mul		c1y c2y sub dup mul		add 0.5 exp		0 dtransform		dup mul exch dup mul add 0.5 exp 72 div		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		1 index 1 index lt { exch } if pop		/hires xdf		hires mul		/numpix xdf		/numsteps NumSamples def		/rampIndxInc 1 def		/subsampling false def		numpix 0 ne		{			NumSamples numpix div 0.5 gt			{				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def				/rampIndxInc NumSamples 1 sub numsteps div def				/subsampling true def			} if		} if		/xInc c2x c1x sub numsteps div def		/yInc c2y c1y sub numsteps div def		/rInc r2 r1 sub numsteps div def		/cx c1x def		/cy c1y def		/radius r1 def		newpath		xInc 0 eq yInc 0 eq rInc 0 eq and and		{			0 getrampcolor			cx cy radius 0 360 arc			stroke			NumSamples 1 sub getrampcolor			cx cy radius 72 hires div add 0 360 arc			0 setlinewidth			stroke		}		{			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				cx cy radius 0 360 arc				/cx cx xInc add def				/cy cy yInc add def				/radius radius rInc add def				cx cy radius 360 0 arcn				eofill				rampIndxInc add			} repeat			pop		} ifelse		ext1		{			c2y r2 add r1 lt			{				c2x c2y r2 0 360 arc				fill			}			{				c2y r1 add r2 sub 0.0001 le				{					c2x c2y r2 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2x c2y r2 0 360 arc fill					r1 r2 eq					{						/p1x r2 neg def						/p1y c2y def						/p2x r2 def						/p2y c2y def						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto						fill					}					{						/AA r2 r1 sub c2y div def						AA -1 eq						{ /theta 89.99 def}						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}						ifelse						/SS1 90 theta add dup sin exch cos div def						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def						/p1y c2y p1x SS1 div sub def						/SS2 90 theta sub dup sin exch cos div def						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def						/p2y c2y p2x SS2 div sub def						r1 r2 lt						{							/L1maxX p1x yMax p1y sub SS1 div add def							/L2maxX p2x yMax p2y sub SS2 div add def						}						{							/L1maxX 0 def							/L2maxX 0 def						}ifelse						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto						L1maxX L1maxX p1x sub SS1 mul p1y add lineto						fill					} ifelse				} ifelse			} ifelse		} if		grestore		grestore		end		end		end		} ifelse	} bdf	/GenStrips	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/y2 xdf		/x2 xdf		/y1 xdf		/x1 xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		x1 x2 eq		{			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope y2 y1 sub x2 x1 sub div def			/theta slope 1 atan def			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if		}		ifelse		gsave		clippath		x1 y1 translate		theta rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax exch def		/xMax exch def		/yMin exch def		/xMin exch def		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			rampdict begin			20 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			x1 y1 translate			theta rotate			/xStart 0 def			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def			/ySpan yMax yMin sub def			/numsteps NumSamples def			/rampIndxInc 1 def			/subsampling false def			xStart 0 transform			xEnd 0 transform			3 -1 roll			sub dup mul			3 1 roll			sub dup mul			add 0.5 exp 72 div			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			1 index 1 index lt { exch } if pop			mul			/numpix xdf			numpix 0 ne			{				NumSamples numpix div 0.5 gt				{					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def					/rampIndxInc NumSamples 1 sub numsteps div def					/subsampling true def				} if			} if			ext0			{				0 getrampcolor				xMin xStart lt				{					xMin yMin xMin neg ySpan rectfill				} if			} if			/xInc xEnd xStart sub numsteps div def			/x xStart def			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				x yMin xInc ySpan rectfill				/x x xInc add def				rampIndxInc add			} repeat			pop			ext1 {				xMax xEnd gt				{					xEnd yMin xMax xEnd sub ySpan rectfill				} if			} if			grestore			grestore			end			end			end		} ifelse	} bdf}def/page_trailer{	end}def/doc_trailer{}def/capture_currentpagedevice {	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf} defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup //Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA get_csa_by_name setcolorspace_opt		set_crd	end}def/map_csa{	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse	{pop}{get_csa_by_name /MappedCSA xdf}ifelse} def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	CSA map_csa	/AGMCORE_sep_special Name dup () eq exch (All) eq or store	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc {setcolor} bdf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		7 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {					/AliasedColorants false def					exit				}				{					new_LookupTables names_index get 0 get null eq {						dup /Names get names_index get /name xdf						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq						or or or not {							/AliasedColorants false def							exit						} if					} if				} ifelse			} for			lut_entry_len 1 eq {				/AliasedColorants false def			} if			AliasedColorants {				dup begin				/Names new_names def				/LookupTables new_LookupTables def				/AliasedColorants true def				/NComponents lut_entry_len def				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	dup not {		CSA map_csa	} if	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			AvoidAliasedColorants {				/currentspotalias current_spot_alias def				false set_spot_alias			} if			Names {				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				/names_index names_index 1 add def			} forall			AvoidAliasedColorants {				currentspotalias set_spot_alias			} if			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx 					0 0 0 0 /setcmykcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				{setcolor} bdf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSDBase known {			CSDBase /CSD get_res begin			currentdict /Names known {				currentdict devncs			}{				1 currentdict sepcs			} ifelse			AGMCORE_host_sep{				4 dict begin				/compCnt /Names where {pop Names length}{1}ifelse def				/NewLookup HiVal 1 add string def				0 1 HiVal {					/tableIndex xdf					Lookup dup type /stringtype eq {						compCnt tableIndex map_index					}{						exec					} ifelse					/Names where {						pop setdevicencolor					}{						setsepcolor					} ifelse					currentgray					tableIndex exch					HiVal mul cvi 					NewLookup 3 1 roll put				} for				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt				end			}{				level3				{					currentdict /Names known {						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt					} ifelse				}{				[/Indexed MappedCSA HiVal					[					currentdict /Names known {						Lookup dup type /stringtype eq							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx					}{						Lookup dup type /stringtype eq							{/exch cvx /get cvx 255 /div cvx}							{/exec cvx}ifelse							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx					} ifelse					]cvx				]setcolorspace_opt				}ifelse			} ifelse			end			set_crd		}		{			CSA map_csa			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 			begin			CSDBase /CSD get_res begin			currentdict /Names known{				map_indexed_devn				devn			}			{				Lookup 1 3 -1 roll map_index				sep			}ifelse			end			end		}{			/Lookup get 4 3 -1 roll map_index setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_res{	dup /CSD eq {		pop 		//Adobe_AGM_Core begin		/AGMCORE_CSD_cache load 3 1 roll put		end	}{		defineresource pop	} ifelse}def/del_res{	{		aload pop exch		dup /CSD eq {			pop 			{				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef			}forall		}{			exch			{				1 index undefineresource			}forall			pop		} ifelse	} forall}def/get_res{	dup /CSD eq {		pop		dup type dup /nametype eq exch /stringtype eq or {			AGMCORE_CSD_cache exch get		} if	}{		findresource	} ifelse}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		/CSA get_res	} if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/wrap_paintproc{   statusdict /currentfilenameextend known{	clonedict	begin	/OldPaintProc /PaintProc load def	/PaintProc	{		mark exch		dup /OldPaintProc get stopped		{closefile restore end} if		cleartomark	}  def	end  } {pop} ifelse} def/make_pattern{	exch clonedict exch	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	1 index dup /ID get exch /Pattern add_res	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/RenderingIntent known{		currentcolorrendering/RenderingIntent get	}{null}ifelse	Intent ne {		Intent /ColorRendering {findresource} stopped		{			pop pop systemdict /findcolorrendering known			{				Intent findcolorrendering pop				/ColorRendering findresource 				true			}			{false} ifelse		}		{true} ifelse		{			dup begin			currentdict /TransformPQR known {				currentdict /TransformPQR get aload pop				3 {{} eq 3 1 roll} repeat or or			}			{true} ifelse			currentdict /MatrixPQR known {				currentdict /MatrixPQR get aload pop				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq				and and and and and and and and			}			{true} ifelse			end			or			{				clonedict begin				/TransformPQR [					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind				] def				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def				currentdict end			} if			setcolorrendering_opt		} if			}if} def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict /ColorRendering known{			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		clonedict		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/set_spot_alias_ary{	dup inherit_aliases	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf}def/set_spot_normalization_ary{	dup inherit_aliases	dup length	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if	array	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf	/AGMCORE_SpotAliasAry where{		pop		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval		AGMCORE_SpotAliasAry length	}{0} ifelse	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval	true set_spot_alias}def/inherit_aliases{	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall}def/set_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry2 where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry2{				dup/Name get AGMCORE_name eq{					/CSD get /CSD get_res					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	//Adobe_AGM_Core begin	/setcustomcolor	{		currentdict/TintProc known currentdict/CSA known and 3 1 roll		//Adobe_AGM_Core begin		dup /customcolor_tint exch AGMCORE_gput		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not		current_spot_alias and{1 index 4 get map_alias}{false}ifelse		{			false set_spot_alias			4 -1 roll{				exch pop /sep_tint AGMCORE_gget exch			}if			mark 3 1 roll			setsepcolorspace			counttomark 0 ne{				setsepcolor			}if			pop			pop			true set_spot_alias		}{			AGMCORE_&setcustomcolor			pop		}ifelse		end	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	//Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defend/set_def_ht{	AGMCORE_def_ht sethalftone} defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.25 0%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.25 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.25 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict /Adobe_CoolType_Data 2 copy known not	 { 2 copy 10 dict put }ifget	 begin	 /@opStackCountByLevel 32 dict def	 /@opStackLevel 0 def	 /@dictStackCountByLevel 32 dict def	 /@dictStackLevel 0 def	 endsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup /args			7 index			5 add array put			put get			}			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{ pop count }			if			dup /argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					 { (*) { pop stop } 128 string /Category resourceforall }				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup					 {						  /@shouldNotDisappearDictValue known								{										  {												end												currentdict 1 index eq													 { pop exit }												if										  }									 loop								}						  if					 }				if				end		}		{ false }	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end		currentglobal false setglobal	  userdict /Adobe_CoolType_Data 2 copy known not		  { 2 copy 10 dict put }		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.%%Version: 1.21 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 27 add dict copy }	{ 27 dict }ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {				mark				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put					 {					 ((Hex) 57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec					 }				stopped					 {					 cleartomark					 Adobe_CoolType_Utility /@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						  {						  2 copy get 3 index eq								{ 1 index length exch sub 1 sub { end } repeat exit }								{ pop }						  ifelse						  }					 for					 pop pop					 Adobe_CoolType_Utility /@eexecStartData get eexec					 }					 { cleartomark }				ifelse			} }			{ {				Adobe_CoolType_Utility /@eexecStartData get eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind def/T0AddT42Mtx2{	/CIDFont findresource /Metrics2 get begin def end}bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/AGMIMG_flushfilters nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/AGMIMG_flushfilters{	dup type /arraytype ne		{1 array astore}if	aload length		{		dup type /filetype eq			{			dup status 1 index currentfile ne and				{dup flushfile closefile}				{pop}			ifelse			}{pop}ifelse		} repeat}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	CSA map_csa	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{ 									Name AGMCORE_IsSeparationAProcessColor  									{ 										Operator /imagemask eq{ 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor 										}{											invert_image_samples 										}ifelse	 								}{	 									[ /Separation Name [/DeviceGray]	 									{ 	 										sep_colorspace_proc AGMCORE_get_ink_data											1 exch sub	 									} bind										] AGMCORE_&setcolorspace										/sep_tint AGMCORE_gget AGMCORE_&setcolor 									}ifelse 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name AGMCORE_IsSeparationAProcessColor not and					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	mark currentcolor counttomark dup 2 add 1 roll cleartomark} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/DataSource origMultipleDataSources		{			[			BitsPerComponent 8 idiv origDecode length 2 idiv mul string			0 1 origDecode length 2 idiv 1 sub				{				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch				origDataSource exch get 0 () /SubFileDecode filter				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx				}for 			]bind cvx		}{origDataSource}ifelse 0 () /SubFileDecode filter def			[		origcolorSpaceElemCnt string		0 2 origDecode length 2 sub			{			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx			}for		/convProc load /exec cvx		origcolorSpaceElemCnt 1 sub -1 0			{			/dup cvx 2 /add cvx /index cvx			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx			}for	]bind cvx 0 () /SubFileDecode filter	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	CSA map_csa	2 dict begin	dup	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi			{				dup 65535 gt {1 add 2 div cvi}{exit}ifelse			} loop			string		} repeat		end ] def	/dstDataStr srcDataStrs 0 get length string def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [ [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def									/MultipleDataSources true def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA get_csa_by_name 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							devn_alt_datasource						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								devn_alt_datasource							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get get_csa_by_name				}{					/Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		<<			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		>>		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		current_spot_alias{dup 4 get map_alias}{false}ifelse		{			false set_spot_alias			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask			true set_spot_alias		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Page 1) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Web</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2008-01-14T09:55:46+01:00</xap:CreateDate>
         <xap:ModifyDate>2008-02-27T17:49:31+01:00</xap:ModifyDate>
         <xap:MetadataDate>2008-02-27T17:49:31+01:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>40</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAKAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8AD/kD/wCTP03/AIx3P/Jh&#xA;81+H6x+Oj3fbn+Ky+H3vrHNg8I8m/wCcnY0l/LD0pBWOTUrJHWpFVMtCNsQrGvO/5f6D+V2u+T/M&#xA;fkYTaSL7W7XSNUsBcTywXMF1yJ5rM8h2EZA3716jCqUfmd+Tn5cab+Zn5fabZaR6Vl5hvL5dYi+s&#xA;3TeuIxCy/E8rMlDI32CMVZRqXlfQvK35y/lXomg231PS7eLXGht/UkloZLV5H+KVnc1Y13OKpt5q&#xA;J/6GJ8jiu36L1Hb/AGDYqyj835JI/wArfNbxsUcaXdUZSQR+6PcYFfLk8n5UWH5f6BceUDd2X5pS&#xA;izVL2F72CMXTMnrepJclbbiRX+72rT9muFX01aefdQj/ADSPkXUrSONJdJTUrC/ViTM6sI5oytAB&#xA;QhiKdhgVi0f583p8lat5oXRluIl1ttE8uwRylBdVYCOaV2BCKfbuKe+FURZ/mN+Z8H5h6J5Q1/Rd&#xA;JsW1iN7lLiK6mlrFAC0yJRP71UBIDAKfHFXrOBXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq+TvyB/8mfpv/GO5/5MPmvw/WPx0e77c/xWXw+99Y5sHhHnf58+WPMPmTyE1hoFn9f1&#xA;GO8tblbX1I4iyQvyb45WRfxxVjGo6b+an5k6/wCXE1/yynlLy3oWoxardGS9ivJ7ia3r6aIIlQqP&#xA;iINV71rtTCrI/wAyPJ/mHWfzG/LvWNNtfX07Qrq8l1Wf1I09JJlhEZ4uys9fTb7AOBVP81/Knm+f&#xA;zJ5V86+UrWLUtU8syXKy6TLKsH1iC7jEbiOV/gVgvL7XjXtQqoDyxoX5geZ/zRtPPPmjRV8s2GjW&#xA;MtnpmmG5ju55ZJyQ8jtEAqrxY7EA7Dr1xVnP5jaLf655C8waRpyCS/v7CeC1jZggaR4yFXk1AKnx&#xA;xV4rd+Xfzf8AMv5Y6b+WUvkuPSYbeO0trvX7y+t5UjW1dT6kUUVXq3D9knYkd64VT3/nIbTtW8v6&#xA;VoHnfRXVr3y1FcWNxLLKsbPBfW/1cP8AEQZGSQghV3q30hVJfzC8tJ5b/wCca/LnltqR31xc6ehg&#xA;faOS7uZDcyxyyVUxoCX+MEH4QMVRX5b2Vt5T/NDTtF8zeXuHmfV7WZdH12PU5dSiEMETSSRpHcH1&#xA;IE4IeJNSenSuKvf8CuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV8nfkD/5M/Tf&#xA;+Mdz/wAmHzX4frH46Pd9uf4rL4fe+sc2DwiB1nWbPSLVLm75em8scK8ByPKRuK9xtiqOxV2KqF7f&#xA;WljayXd3KsNtEKySt0AJpv8AScVUrzVI7W9srRoZpGvmdEkjXlGhRef7xqjjXtiqrDf2c11cWkUy&#xA;vc2nD6zEDVk9Qck5eHICoxVXxViGs/l7+Wmp+aINS1bSLS68wS/vYZJgWZxAFFSleDBdvtDFU98x&#xA;aNoWsaRcWOu2cV9pjLzngnQOtE+LlTqCtKgjfFWJflv5J/Liwdta8teWDpMzpxhvJ1q7xv1MTNJM&#xA;Qppv0xVn+KuxVjU3nqzS8uraDTdRvBZSNDcz20AkjV16j7Qb8MVTrSdWsNWsIr+xl9W2mB4tQggg&#xA;0IIO4IOKovFXYq7FXYq7FUHLqkceqwaaYZmknieYTqtYVCEAhmrsTXbbFUZirsVdiriQASTQDck4&#xA;qkflvzhpHmB7hLESq1vxJEycOaMSFkTc1UlTiqeYqgH1u0TXY9FKv9alt2uleg9Pgr8CCa15V9sV&#xA;R+KuxV2Kvk78gf8AyZ+m/wDGO5/5MPmvw/WPx0e77c/xWXw+99Y5sHhGKfmT/wAcG3/5jrX/AJOY&#xA;QqFOknWvOWvQXN/ew21pHZ+jBb3DxJWWJ6sQvccaj8a4FSiGTzJqfk7SLxHub6KzuJ11KGCZorme&#xA;FHZEIZSGZkA6V3wq35it9Bvvy8vb3Tbq8lS2cn0555i8crPGrxSo7b8aCgatOo64qnWo2z6Rrnlb&#xA;T7W6uWt5bi6MolmeQv8AuqgMSdwOwwKg/K+g2kPn3zCUmuaWBszEGnkbn61uxb1eRJkp+zy6YqhL&#xA;fUtRb8mDem6mN5wf/SebertdlR8deX2duuFUdr3l2zufPmmq091H9bguZJDHcSKQU4U4b/ADXcLi&#xA;rJvM1hDfaJdxStIipG8gMUjRtyVDSpQio9jtgVgmnWckOj+VdMtry6gi14h76RJn5hIYefpxE/3a&#xA;sTvxwqi9Te90aXzHpFve3EtoNJN9bGaVpJYJOTRsEkJ5AHr1xVlvljTRZaZE5urm7lukjlllupTK&#xA;1Sg2WtAo9hgViug/4q/SHmb9C/Ugv6Smr9b9XlzoOnp7UphVBaNcSWGg+X9UillT6vqctvrMZaiM&#xA;10xjkdgvwlUanHwxVFazqurNH5v1azu3iismh060oxAQxsv1kop29Sr0U9cVU9PhsbjzPpA0S81W&#xA;6jieR9VF090I1CpVDIZQg5FyNhscVS25voL3T9Ua71HU38yevcR2cNobgwFo3KxrCIl9Lh0rvXFC&#xA;Pu7m9k1q30jUBqklvYabbs9vpzuZDcOPjeZwwY06DfFLZk8wSaFpllez39mW15bS3uJGMV29m0bl&#xA;C7b1O/v0xVPOE2n+ddG02G5ne1FjcF1llaQu3MHk5J+I++Kq/m9rq51PQ9GjupbS31KaY3UkDcJC&#xA;kERk4BxuAx60wKkOo3Wq6DJ5j0ywvpXhh09L6zkuXMjQMX4SKsjmvxDdQe+FULaLa3OsaF+hLzVr&#xA;u4WdH1VblroII1HNmlMgVK17KaHpirMfPepNp/lTUZo6+tJH9XgA+0XnPpinuOVcCsS0O8Gn+aNB&#xA;VdOvdPhlsv0VO95EIlkeMepGy8WarFgcKrLbTri90DzHrEmqX63dhc3zWipcyLGnofvFogPelDiq&#xA;aQX3PzfpV9dvx5eXzPcSDalWDO22Kse1m6VLTTbzRjrttDe3cds15JMXE8MwavpI0rOXalU+Efqx&#xA;QnukSavaatOunQ6lFpkllKzfpbkUjuYxVHV3LUDftCuKWOrNHqWh2DWV/q1z5nuHiaaLlciMh2+O&#xA;rALEsYWtCrYoTjyX+RugeVPMMGt2eoXc89usirFN6fA+ohQ14qD0bMeGCjdu61nbOTPjMDEAF6Rl&#xA;7pku13Q7bWbNLW4d40jmjnDR0ryibkBuDscVXWmj29tq2oamjuZtREKyoacV+rqyrxoK78t64qlt&#xA;t5RNlpcGn6dql1ZrBJLJ6iekS/qsWIYMhHw12xV0fknThoWoaTLPPMNTkaa8u3ZfVaRiDy2UKKcR&#xA;tTFVVPK4afS7i8v57u50uSWSKWT0wX9VOBD8VGw7YqvXy0sXmGbWra9mga7Ef1y1URmOX0VKJXkp&#xA;YUU9jiqUTfltaSWcunLq19DpLszpYRvGI1LvzI3QkrXoDiqca15cGpXtpfxXs9jeWYkSOWDgapLT&#xA;kCJFcfs4qmlzAtxbywOSFlRkYjqAwoaYqktz5OsJtG0/TRPPC+l8DZXsTBZkZF41rSm46imKqUPk&#xA;mzFrqaXN5cXd3qsXoXN7MVMgShAWMBQqgVrSmKp/bQLb28UCElYkVFJ6kKKCuKsdbyVIl3ezWes3&#xA;llHqEzXFxDD6Q+N6V4sULDp44qh9d0nStL8q/oCHT768tblXANonrSiQMHDyMehL0NSKYqgZvLOs&#xA;w/llJpkcZm1a5AnvUPFndpZRJKAW+EuF2+jxwqs0aK9h1zTk0ODV7bT6t+koNSDi3WMLtw9UsefL&#xA;+Q0+jFUph0zUbC2v6WmsQeZZZ55UnsQ31OR3YmOtKw+n0rUVxVmUvle5vjY6pLezadryWscF7PaF&#xA;OD7BnVkZWUgPWmBUSfLKy29jFeX9zdyWN4t9HPKU5M6BgEPFQOHxYqiZ9DtptdttZZ3FxawyQJGK&#xA;cCshqSdq1+nFVmveX7XWI4PUlltrm0k9W1u4GCyxvShoSCKEbEEYqkeq+T7i38va2bOaXUtb1KEJ&#xA;JcXJQs6rt6aCioo41p7/AEYqlek299b6jpcWgW+sWsKyINSg1EMLQQAUk4+qT+88PT2wqzPWtDtt&#xA;W+pC4d1jsrmO7WNKUd4q8VeoPw74Fdreh22rxWyTO8T2lzHdwSx05CSI1H2gfHFUPbeVrK30jU9M&#xA;SWQw6o9w8znjyU3Q4tx2pt2riq1fKWnC7t7h3kkEFgdM9JiOLQmlS1ADy+WKpVJ+W9tLawWU2r37&#xA;2NmwexgDxr6LrUIwYJyJSvw4qmUOg6vbQ3T/AKYub+dreSO3huBCIg7D4GYKgqR74qwfT9P1XT9L&#xA;s7bRLXWbPX4zGs6SBv0ez8h6rOXJi4Urx474Vf/Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:D89B26FF18C4DC11B0F7C948713094C1</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:2B24B5FEE6EE11DCA9DBE848ED1657C8</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:D79B26FF18C4DC11B0F7C948713094C1</stRef:instanceID>
            <stRef:documentID>uuid:D69B26FF18C4DC11B0F7C948713094C1</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Web</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>5080.000000</stDim:w>
            <stDim:h>5080.000000</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>White</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Black</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>74.609375</xapG:cyan>
                           <xapG:magenta>67.578125</xapG:magenta>
                           <xapG:yellow>66.796875</xapG:yellow>
                           <xapG:black>89.843750</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Red</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>98.828125</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Yellow</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>6.250000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>96.093750</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Green</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>62.500000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Cyan</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>51.562500</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>12.500000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Blue</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>87.890625</xapG:cyan>
                           <xapG:magenta>76.562500</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Magenta</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>26.953125</xapG:cyan>
                           <xapG:magenta>81.250000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=193 G=39 B=45</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>16.796875</xapG:cyan>
                           <xapG:magenta>97.656250</xapG:magenta>
                           <xapG:yellow>92.187500</xapG:yellow>
                           <xapG:black>6.640625</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=237 G=28 B=36</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.390625</xapG:cyan>
                           <xapG:magenta>98.828125</xapG:magenta>
                           <xapG:yellow>96.875000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=241 G=90 B=36</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>79.296875</xapG:magenta>
                           <xapG:yellow>96.484375</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=247 G=147 B=30</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>98.046875</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=251 G=176 B=59</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>34.765625</xapG:magenta>
                           <xapG:yellow>86.718750</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=252 G=238 B=33</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>4.687500</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>92.968750</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=217 G=224 B=33</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>18.750000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>97.656250</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=140 G=198 B=63</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>98.828125</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=57 G=181 B=74</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>74.218750</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>99.218750</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=146 B=69</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>85.937500</xapG:cyan>
                           <xapG:magenta>17.578125</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>3.906250</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=104 B=55</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>89.843750</xapG:cyan>
                           <xapG:magenta>33.203125</xapG:magenta>
                           <xapG:yellow>98.437500</xapG:yellow>
                           <xapG:black>25.781250</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=34 G=181 B=115</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.781250</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>74.609375</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=169 B=157</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>78.125000</xapG:cyan>
                           <xapG:magenta>8.984375</xapG:magenta>
                           <xapG:yellow>45.703125</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=41 G=171 B=226</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>69.531250</xapG:cyan>
                           <xapG:magenta>14.843750</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=113 B=188</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>87.109375</xapG:cyan>
                           <xapG:magenta>52.343750</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=46 G=49 B=146</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>98.828125</xapG:cyan>
                           <xapG:magenta>96.093750</xapG:magenta>
                           <xapG:yellow>3.515625</xapG:yellow>
                           <xapG:black>0.390625</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=27 G=20 B=100</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>26.171875</xapG:yellow>
                           <xapG:black>24.609375</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=102 G=45 B=145</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>74.218750</xapG:cyan>
                           <xapG:magenta>98.046875</xapG:magenta>
                           <xapG:yellow>0.781250</xapG:yellow>
                           <xapG:black>0.390625</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=147 G=39 B=143</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>49.218750</xapG:cyan>
                           <xapG:magenta>98.828125</xapG:magenta>
                           <xapG:yellow>1.171875</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=158 G=0 B=93</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>34.765625</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>37.109375</xapG:yellow>
                           <xapG:black>10.937500</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=212 G=20 B=90</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>11.718750</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>49.218750</xapG:yellow>
                           <xapG:black>0.781250</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=237 G=30 B=121</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>96.484375</xapG:magenta>
                           <xapG:yellow>20.312500</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=199 G=178 B=153</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>22.656250</xapG:cyan>
                           <xapG:magenta>27.343750</xapG:magenta>
                           <xapG:yellow>39.843750</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=153 G=134 B=117</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.843750</xapG:cyan>
                           <xapG:magenta>42.578125</xapG:magenta>
                           <xapG:yellow>52.343750</xapG:yellow>
                           <xapG:black>6.640625</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=115 G=99 B=87</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.390625</xapG:cyan>
                           <xapG:magenta>52.734375</xapG:magenta>
                           <xapG:yellow>60.546875</xapG:yellow>
                           <xapG:black>23.437500</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=83 G=71 B=65</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>57.421875</xapG:cyan>
                           <xapG:magenta>60.156250</xapG:magenta>
                           <xapG:yellow>63.671875</xapG:yellow>
                           <xapG:black>41.796875</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=198 G=156 B=109</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>22.656250</xapG:cyan>
                           <xapG:magenta>38.281250</xapG:magenta>
                           <xapG:yellow>63.281250</xapG:yellow>
                           <xapG:black>1.171875</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=166 G=124 B=82</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>31.640625</xapG:cyan>
                           <xapG:magenta>48.828125</xapG:magenta>
                           <xapG:yellow>73.828125</xapG:yellow>
                           <xapG:black>9.765625</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=140 G=98 B=57</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>35.937500</xapG:cyan>
                           <xapG:magenta>57.031250</xapG:magenta>
                           <xapG:yellow>83.593750</xapG:yellow>
                           <xapG:black>22.656250</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=117 G=76 B=36</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.062500</xapG:cyan>
                           <xapG:magenta>63.671875</xapG:magenta>
                           <xapG:yellow>92.968750</xapG:yellow>
                           <xapG:black>35.546875</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=96 G=56 B=19</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>41.406250</xapG:cyan>
                           <xapG:magenta>69.531250</xapG:magenta>
                           <xapG:yellow>96.484375</xapG:yellow>
                           <xapG:black>48.828125</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=66 G=33 B=11</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>47.656250</xapG:cyan>
                           <xapG:magenta>73.046875</xapG:magenta>
                           <xapG:yellow>83.203125</xapG:yellow>
                           <xapG:black>67.968750</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Web Color Group</xapG:groupName>
                  <xapG:groupType>1</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=236 G=28 B=36</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.781250</xapG:cyan>
                           <xapG:magenta>98.828125</xapG:magenta>
                           <xapG:yellow>96.875000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=169 B=157</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>78.125000</xapG:cyan>
                           <xapG:magenta>8.984375</xapG:magenta>
                           <xapG:yellow>45.703125</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=102 G=45 B=145</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>74.218750</xapG:cyan>
                           <xapG:magenta>98.046875</xapG:magenta>
                           <xapG:yellow>0.781250</xapG:yellow>
                           <xapG:black>0.390625</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=139 G=146 B=152 1</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>48.437500</xapG:cyan>
                           <xapG:magenta>36.328125</xapG:magenta>
                           <xapG:yellow>33.593750</xapG:yellow>
                           <xapG:black>1.562500</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Grayscale</xapG:groupName>
                  <xapG:groupType>1</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=90</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>229</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=80</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>204</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=70</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>178</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=60</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>153</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=50</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>127</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=40</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>101</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=30</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>76</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=20</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>50</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=10</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>25</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=5</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>12</xapG:gray>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_AGM_Core/capture_currentpagedevice get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -25.1714 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 25.1714 li165.937 25.1714 li165.937 0 licpclp[1 0 0 1 0 0 ] concat3.57178 0.0898438 mo3.57178 22.7671 li0 22.7671 li0 0.0898438 li3.57178 0.0898438 licpfalse sop/0 [/DeviceCMYK] /CSA add_res0 0.91 0.72 0.23 cmykf20.2456 5.12012 mo20.2456 3.99316 li20.2456 2.63232 20.0464 1.62598 19.2876 0.892578 cv18.6494 0.276367 17.6938 0 16.5366 0 cv15.6528 0 14.6128 0.0717773 14.2578 0.132324 cv14.0776 0.162109 13.9751 0.264648 13.9751 0.46875 cv13.9751 8.64502 li13.9751 8.85547 14.0776 8.95166 14.2578 8.98193 cv14.6128 9.0415 15.6528 9.11426 16.5366 9.11426 cv17.7046 9.11426 18.667 8.82813 19.3057 8.19873 cv20.0537 7.46143 20.2456 6.4668 20.2456 5.12012 cvcp18.8691 5.06348 mo18.8691 6.18848 18.7358 6.87646 18.2515 7.36621 cv17.8306 7.79102 17.2261 7.94141 16.5366 7.94141 cv16.0317 7.94141 15.6826 7.92969 15.3643 7.91162 cv15.3643 1.20801 li15.6885 1.18994 16.0317 1.17236 16.5366 1.17236 cv17.1992 1.17236 17.7832 1.30957 18.2012 1.69678 cv18.7163 2.17383 18.8691 2.89014 18.8691 4.05029 cv18.8691 5.06348 licp34.7842 5.74707 mo34.7842 0.318359 li34.7842 0.186035 34.6763 0.0898438 34.5498 0.0898438 cv33.6299 0.0898438 li33.4976 0.0898438 33.3955 0.191895 33.3955 0.318359 cv33.3955 5.74707 li33.3955 7.21436 32.9868 7.95361 31.5923 7.95361 cv30.1973 7.95361 29.7886 7.20801 29.7886 5.74707 cv29.7886 0.318359 li29.7886 0.186035 29.6802 0.0898438 29.5542 0.0898438 cv28.6343 0.0898438 li28.502 0.0898438 28.3994 0.191895 28.3994 0.318359 cv28.3994 5.74707 li28.3994 8.17627 29.6504 9.11426 31.5923 9.11426 cv33.5337 9.11426 34.7842 8.17627 34.7842 5.74707 cvcp27.2676 1.05176 mo27.2676 0.312012 li27.2676 0.180176 27.1655 0.0898438 27.0327 0.0898438 cv21.2012 0.0898438 li21.0693 0.0898438 20.9609 0.186035 20.9609 0.312012 cv20.9609 1.05176 li20.9609 1.18408 21.0693 1.25635 21.2012 1.25635 cv23.4258 1.25635 li23.4258 8.7832 li23.4258 8.91553 23.5278 9.02344 23.6543 9.02344 cv24.5801 9.02344 li24.7124 9.02344 24.8086 8.90918 24.8086 8.7832 cv24.8086 1.25635 li27.0327 1.25635 li27.1655 1.25635 27.2676 1.17822 27.2676 1.05176 cvcp48.1768 11.21 mo48.0327 11.1953 47.9268 11.0752 47.9268 10.9473 cv47.9268 10.8813 47.9268 10.9355 47.9268 10.8696 cv47.9268 10.7378 48.0283 10.6289 48.1768 10.6074 cv49.9209 10.3613 li50.4028 10.2935 50.6631 10.1318 50.8286 9.48193 cv50.937 9.05469 li50.7622 9.05469 li50.4077 9.05469 50.0352 8.9707 49.7944 8.14111 cv48.207 2.64014 li48.1636 2.48926 48.2275 2.35742 48.418 2.35742 cv49.3555 2.35742 li49.4575 2.35742 49.5459 2.46143 49.5718 2.56201 cv50.8887 7.61768 li50.9429 7.84033 51.0088 7.88232 51.0869 7.88232 cv51.2373 7.88232 li52.6196 2.5498 li52.647 2.44678 52.7402 2.35742 52.8545 2.35742 cv53.8042 2.35742 li53.9731 2.35742 54.0322 2.5127 53.9966 2.64014 cv53.8984 2.99121 52.0005 9.61377 52.0005 9.61377 cv51.7207 10.5933 51.4443 10.8716 51.0293 11.1265 cv50.6226 11.3755 50.1597 11.4077 49.2109 11.313 cv48.1768 11.21 licp45.4717 6.34814 mo45.4717 5.62109 45.0991 4.94775 43.8247 4.94775 cv42.1353 4.94775 li42.1353 7.92334 li42.478 7.92969 42.9165 7.95996 43.2534 7.95996 cv44.7686 7.95996 45.4717 7.59912 45.4717 6.52881 cv45.4717 6.34814 licp43.2534 9.11426 mo42.3696 9.11426 41.6484 9.06299 41.2334 8.99365 cv40.897 8.9375 40.7466 8.81934 40.7466 8.44678 cv40.7466 0.655273 li40.7466 0.300293 40.8906 0.150391 41.2095 0.10791 cv41.564 0.0600586 42.3096 0 43.1689 0 cv45.2134 0 46.7827 0.564941 46.7827 2.38037 cv46.7827 2.59717 li46.7827 3.43896 46.3613 4.13623 45.5859 4.44873 cv46.3677 4.74951 46.8364 5.42285 46.8364 6.33643 cv46.8364 6.54102 li46.8364 8.50684 45.3091 9.11426 43.2534 9.11426 cvcp45.4233 2.42871 mo45.4233 1.43066 44.6719 1.1543 43.1689 1.1543 cv42.8208 1.1543 42.4297 1.17236 42.1353 1.18408 cv42.1353 3.89551 li43.8247 3.89551 li45.0811 3.89551 45.4233 3.29443 45.4233 2.60889 cv45.4233 2.42871 licp59.5952 9.48096 mo59.5952 9.11426 59.3247 8.93945 58.1523 8.65088 cv56.938 8.35059 li56.6733 8.62695 56.4927 8.85547 56.4927 9.38428 cv56.4927 9.49268 li56.4927 10.0757 56.8413 10.4365 58.0742 10.4365 cv59.3364 10.4365 59.5952 10.1182 59.5952 9.5708 cv59.5952 9.48096 licp60.7856 4.49658 mo60.7856 4.58691 li60.7856 5.99951 59.8599 6.70947 58.0259 6.70947 cv57.3887 6.70947 56.9678 6.60693 56.6733 6.48682 cv56.499 6.58301 56.4209 6.70313 56.4209 6.84766 cv56.4209 7.06982 56.5352 7.17236 56.8115 7.23828 cv58.417 7.63477 li59.8237 7.97803 60.9175 8.27197 60.9175 9.48096 cv60.9175 9.5708 li60.9175 10.7612 60.082 11.4468 58.0742 11.4468 cv56.1504 11.4468 55.2002 10.7134 55.2002 9.49268 cv55.2002 9.38428 li55.2002 8.80127 55.4946 8.28418 55.8857 7.95996 cv55.4839 7.74902 55.2964 7.32227 55.2964 6.91943 cv55.2964 6.90771 li55.2964 6.55908 55.4526 6.19824 55.7837 5.98779 cv55.417 5.62695 55.2607 5.19434 55.2607 4.58691 cv55.2607 4.49658 li55.2607 3.36035 55.9517 2.32617 58.0259 2.32617 cv61.2207 2.32617 li61.353 2.32617 61.4556 2.43506 61.4556 2.56689 cv61.4556 2.56689 61.4556 2.59814 61.4556 2.72998 cv61.4556 2.86133 61.3667 2.97119 61.2207 3.01416 cv60.3213 3.28125 li60.6304 3.58643 60.7856 3.98877 60.7856 4.49658 cvcp59.481 4.50879 mo59.481 3.85938 59.1924 3.35449 58.0259 3.35449 cv56.8413 3.35449 56.5649 3.88965 56.5649 4.50879 cv56.5649 4.60498 li56.5649 5.0918 56.7754 5.69336 58.0259 5.69336 cv59.1743 5.69336 59.481 5.26611 59.481 4.60498 cv59.481 4.50879 licp0 0 0 1 cmykf69.3662 16.9839 mo68.8135 16.9839 68.3081 17.1284 67.707 17.4878 cv67.707 22.5269 li67.707 22.646 67.5991 22.7671 67.4668 22.7671 cv66.8774 22.7671 li66.7573 22.7671 66.6494 22.6587 66.6494 22.5269 cv66.6494 16.394 li66.6494 16.2622 66.7451 16.1538 66.8774 16.1538 cv67.4424 16.1538 li67.5747 16.1538 67.6714 16.2622 67.6714 16.394 cv67.6714 16.647 li68.2725 16.2261 68.8257 16.0698 69.3662 16.0698 cv69.5347 16.0698 69.6187 16.1421 69.6187 16.2856 cv69.6187 16.7788 li69.6187 16.9116 69.5347 16.9839 69.3662 16.9839 cvcp64.1719 19.0034 mo64.1719 17.7769 63.6792 16.9956 62.5488 16.9956 cv61.4307 16.9956 60.938 17.7651 60.938 19.0034 cv60.938 19.9175 li60.938 21.144 61.4189 21.9253 62.5488 21.9253 cv63.667 21.9253 64.1719 21.1558 64.1719 19.9175 cv64.1719 19.0034 licp62.5488 22.8511 mo60.7813 22.8511 59.8794 21.6851 59.8794 19.9175 cv59.8794 19.0034 li59.8794 17.2358 60.7813 16.0698 62.5488 16.0698 cv64.3164 16.0698 65.2305 17.2358 65.2305 19.0034 cv65.2305 19.9175 li65.2305 21.6851 64.3164 22.8511 62.5488 22.8511 cvcp59.1421 14.4585 mo58.5654 14.4585 li58.0005 14.4585 57.832 14.6265 57.832 15.2886 cv57.832 16.1538 li59.0942 16.1538 li59.2266 16.1538 59.3228 16.2495 59.3228 16.3706 cv59.3228 16.8394 li59.3228 16.9595 59.2266 17.0435 59.0942 17.0435 cv57.832 17.0435 li57.832 22.5269 li57.832 22.646 57.7236 22.7671 57.6035 22.7671 cv57.0142 22.7671 li56.8818 22.7671 56.7734 22.646 56.7734 22.5269 cv56.7734 17.0435 li55.6074 16.9116 li55.4751 16.8999 55.3789 16.8149 55.3789 16.6948 cv55.3789 16.3706 li55.3789 16.2495 55.4751 16.1538 55.6074 16.1538 cv56.7734 16.1538 li56.7734 15.2886 li56.7734 14.0015 57.3989 13.6167 58.457 13.6167 cv58.7817 13.6167 58.9741 13.6528 59.1304 13.689 cv59.2622 13.7251 59.3589 13.7729 59.3589 13.8813 cv59.3589 14.2778 li59.3589 14.4097 59.2749 14.4585 59.1421 14.4585 cvcp51.563 22.7905 mo51.3228 22.8276 51.0103 22.8511 50.7817 22.8511 cv49.6753 22.8511 49.1465 22.562 49.1465 21.2397 cv49.1465 17.0435 li47.98 16.9116 li47.8477 16.8999 47.7515 16.8276 47.7515 16.6948 cv47.7515 16.3706 li47.7515 16.2378 47.8477 16.1538 47.98 16.1538 cv49.1465 16.1538 li49.1465 14.9761 li49.1465 14.855 49.2305 14.7593 49.3628 14.7349 cv49.9878 14.6382 li50 14.6382 50.0122 14.6382 50.0239 14.6382 cv50.1201 14.6382 50.2046 14.7231 50.2046 14.8433 cv50.2046 16.1538 li51.5029 16.1538 li51.6353 16.1538 51.7437 16.2622 51.7437 16.394 cv51.7437 16.8032 li51.7437 16.9351 51.6353 17.0435 51.5029 17.0435 cv50.2046 17.0435 li50.2046 21.2397 li50.2046 21.9019 50.3726 21.9976 50.8535 21.9976 cv51.5269 21.9976 li51.6958 21.9976 51.7798 22.0454 51.7798 22.1655 cv51.7798 22.5864 li51.7798 22.6948 51.7192 22.7671 51.563 22.7905 cvcp46.4048 22.7671 mo45.8037 22.7671 li45.6714 22.7671 45.5752 22.6587 45.5752 22.5269 cv45.5752 22.2983 li44.9141 22.6714 44.3726 22.8511 43.6636 22.8511 cv42.2207 22.8511 41.5718 21.9487 41.5718 20.3501 cv41.5718 16.394 li41.5718 16.2622 41.6797 16.1538 41.812 16.1538 cv42.3892 16.1538 li42.5215 16.1538 42.6294 16.2622 42.6294 16.394 cv42.6294 20.3501 li42.6294 21.564 43.0386 21.937 43.9521 21.937 cv44.457 21.937 45.022 21.7446 45.5752 21.4683 cv45.5752 16.394 li45.5752 16.2739 45.6836 16.1538 45.8159 16.1538 cv46.4048 16.1538 li46.5249 16.1538 46.6333 16.2622 46.6333 16.394 cv46.6333 22.5269 li46.6333 22.6587 46.5371 22.7671 46.4048 22.7671 cvcp40.1514 22.7905 mo39.9111 22.8276 39.5986 22.8511 39.3701 22.8511 cv38.2637 22.8511 37.7349 22.562 37.7349 21.2397 cv37.7349 17.0435 li36.5684 16.9116 li36.436 16.8999 36.3398 16.8276 36.3398 16.6948 cv36.3398 16.3706 li36.3398 16.2378 36.436 16.1538 36.5684 16.1538 cv37.7349 16.1538 li37.7349 14.9761 li37.7349 14.855 37.8188 14.7593 37.9512 14.7349 cv38.5767 14.6382 li38.5884 14.6382 38.6006 14.6382 38.6128 14.6382 cv38.709 14.6382 38.793 14.7231 38.793 14.8433 cv38.793 16.1538 li40.0913 16.1538 li40.2236 16.1538 40.332 16.2622 40.332 16.394 cv40.332 16.8032 li40.332 16.9351 40.2236 17.0435 40.0913 17.0435 cv38.793 17.0435 li38.793 21.2397 li38.793 21.9019 38.9614 21.9976 39.4424 21.9976 cv40.1157 21.9976 li40.2837 21.9976 40.3682 22.0454 40.3682 22.1655 cv40.3682 22.5864 li40.3682 22.6948 40.3076 22.7671 40.1514 22.7905 cvcp34.8369 22.7671 mo34.2598 22.7671 li34.1274 22.7671 34.0195 22.6587 34.0195 22.5269 cv34.0195 16.394 li34.0195 16.2622 34.1274 16.1538 34.2598 16.1538 cv34.8369 16.1538 li34.9692 16.1538 35.0771 16.2622 35.0771 16.394 cv35.0771 22.5269 li35.0771 22.6587 34.9692 22.7671 34.8369 22.7671 cvcp34.8608 15.0952 mo34.248 15.0952 li34.1157 15.0952 34.0073 14.9878 34.0073 14.855 cv34.0073 13.8931 li34.0073 13.7612 34.1157 13.6528 34.248 13.6528 cv34.8608 13.6528 li34.9932 13.6528 35.1016 13.7612 35.1016 13.8931 cv35.1016 14.855 li35.1016 14.9878 34.9932 15.0952 34.8608 15.0952 cvcp32.4673 22.7905 mo32.2271 22.8276 31.9141 22.8511 31.686 22.8511 cv30.5796 22.8511 30.0503 22.562 30.0503 21.2397 cv30.0503 17.0435 li28.8843 16.9116 li28.752 16.8999 28.6558 16.8276 28.6558 16.6948 cv28.6558 16.3706 li28.6558 16.2378 28.752 16.1538 28.8843 16.1538 cv30.0503 16.1538 li30.0503 14.9761 li30.0503 14.855 30.1348 14.7593 30.2671 14.7349 cv30.8921 14.6382 li30.9043 14.6382 30.9165 14.6382 30.9282 14.6382 cv31.0244 14.6382 31.1089 14.7231 31.1089 14.8433 cv31.1089 16.1538 li32.4072 16.1538 li32.5396 16.1538 32.6475 16.2622 32.6475 16.394 cv32.6475 16.8032 li32.6475 16.9351 32.5396 17.0435 32.4072 17.0435 cv31.1089 17.0435 li31.1089 21.2397 li31.1089 21.9019 31.2769 21.9976 31.7578 21.9976 cv32.4312 21.9976 li32.5996 21.9976 32.6836 22.0454 32.6836 22.1655 cv32.6836 22.5864 li32.6836 22.6948 32.6235 22.7671 32.4673 22.7905 cvcp25.6641 22.8511 mo25.2192 22.8511 24.3535 22.8149 23.7642 22.6714 cv23.6084 22.6343 23.5122 22.562 23.5122 22.4302 cv23.5122 22.0093 li23.5122 21.9019 23.6084 21.8296 23.728 21.8296 cv23.7524 21.8296 23.7642 21.8296 23.7764 21.8296 cv24.3535 21.9019 25.231 21.9614 25.6641 21.9614 cv26.4458 21.9614 26.8545 21.7573 26.8545 21.1069 cv26.8545 20.7476 26.6382 20.519 25.9526 20.1089 cv24.7383 19.3882 li24.0049 18.9429 23.5122 18.4263 23.5122 17.6685 cv23.5122 16.4185 24.4497 16.0698 25.688 16.0698 cv26.3618 16.0698 26.999 16.1304 27.564 16.2261 cv27.7202 16.2495 27.7925 16.3335 27.7925 16.4663 cv27.7925 16.8628 li27.7925 17.0073 27.708 17.0679 27.5879 17.0679 cv27.5762 17.0679 27.564 17.0679 27.5522 17.0679 cv27.1313 17.0317 26.3618 16.9712 25.688 16.9712 cv25.0151 16.9712 24.5698 17.0562 24.5698 17.6685 cv24.5698 18.0298 24.8467 18.2573 25.3999 18.5825 cv26.5898 19.2925 li27.5879 19.8813 27.9126 20.3979 27.9126 21.1069 cv27.9126 22.3335 27.0107 22.8511 25.6641 22.8511 cvcp21.853 22.7671 mo21.2754 22.7671 li21.1431 22.7671 21.0352 22.6587 21.0352 22.5269 cv21.0352 18.5698 li21.0352 17.356 20.6265 16.9839 19.7124 16.9839 cv19.2075 16.9839 18.6426 17.1753 18.0894 17.4526 cv18.0894 22.5269 li18.0894 22.646 17.981 22.7671 17.8486 22.7671 cv17.2598 22.7671 li17.1396 22.7671 17.0313 22.6587 17.0313 22.5269 cv17.0313 16.394 li17.0313 16.2622 17.1274 16.1538 17.2598 16.1538 cv17.8608 16.1538 li17.9932 16.1538 18.0894 16.2622 18.0894 16.394 cv18.0894 16.6226 li18.7505 16.2495 19.2915 16.0698 20.001 16.0698 cv21.4438 16.0698 22.0933 16.9712 22.0933 18.5698 cv22.0933 22.5269 li22.0933 22.6587 21.9849 22.7671 21.853 22.7671 cvcp14.939 22.7671 mo14.2778 22.7671 li14.1577 22.7671 14.061 22.6587 14.061 22.5269 cv14.061 14.062 li14.061 13.9409 14.1455 13.8335 14.2778 13.8335 cv14.939 13.8335 li15.0591 13.8335 15.1558 13.9292 15.1558 14.062 cv15.1558 22.5269 li15.1558 22.646 15.0713 22.7671 14.939 22.7671 cvcp164.651 18.2808 mo164.651 17.5601 164.326 16.9946 163.027 16.9946 cv161.681 16.9946 161.404 17.6079 161.404 18.2808 cv161.404 18.3784 li161.404 18.9067 161.644 19.604 163.027 19.604 cv164.326 19.604 164.651 19.0991 164.651 18.3784 cv164.651 18.2808 licp164.748 23.2124 mo164.748 22.7427 164.363 22.5503 163.28 22.2739 cv161.921 21.9253 li161.572 22.2261 161.332 22.5269 161.332 23.1519 cv161.332 23.2603 li161.332 23.9331 161.729 24.355 163.064 24.355 cv164.435 24.355 164.748 23.9692 164.748 23.3081 cv164.748 23.2124 licp165.721 16.9585 mo165.289 17.0425 li165.505 17.271 165.697 17.6323 165.697 18.2808 cv165.697 18.3784 li165.697 19.7007 164.879 20.4341 163.027 20.4341 cv162.39 20.4341 161.981 20.3374 161.632 20.1929 cv161.428 20.2896 161.332 20.4214 161.332 20.603 cv161.332 20.8062 161.428 20.9155 161.705 20.9878 cv163.497 21.4448 li164.675 21.7446 165.805 22.0815 165.805 23.2124 cv165.805 23.3081 li165.805 24.4624 165.036 25.1714 163.064 25.1714 cv161.164 25.1714 160.298 24.439 160.298 23.2603 cv160.298 23.1519 li160.298 22.478 160.659 21.9253 161.055 21.6245 cv160.971 21.5884 li160.586 21.4204 160.417 21.0229 160.417 20.6499 cv160.417 20.6382 li160.417 20.314 160.574 19.9653 160.912 19.7729 cv160.539 19.4233 160.358 18.9917 160.358 18.3784 cv160.358 18.2808 li160.358 17.2114 160.958 16.1528 163.027 16.1528 cv165.662 16.1528 li165.805 16.1528 165.937 16.2729 165.937 16.4175 cv165.937 16.73 li165.937 16.8862 165.853 16.9351 165.721 16.9585 cvcp158.001 18.9312 mo158.001 17.644 157.484 16.9702 156.425 16.9702 cv155.391 16.9702 154.814 17.6929 154.814 18.9312 cv154.814 18.9917 li158.001 18.9917 li158.001 18.9312 licp153.768 19.5806 mo152.867 19.5806 li151.412 19.5806 151.039 19.9048 151.039 20.7593 cv151.039 20.8667 li151.039 21.7202 151.675 22.0093 152.41 22.0093 cv152.902 22.0093 153.431 21.8892 153.768 21.6362 cv153.768 19.5806 licp158.819 19.7964 mo154.814 19.7964 li154.814 20.1812 li154.814 21.4077 155.367 21.9614 156.57 21.9614 cv157.267 21.9614 158.074 21.8765 158.626 21.7925 cv158.638 21.7925 158.638 21.7925 158.65 21.7925 cv158.662 21.7925 158.674 21.7925 158.687 21.7925 cv158.794 21.7925 158.878 21.8413 158.878 21.9614 cv158.878 22.3706 li158.878 22.5269 158.831 22.6108 158.638 22.647 cv157.953 22.7788 157.316 22.8511 156.509 22.8511 cv155.583 22.8511 154.947 22.6831 154.429 22.1421 cv153.876 22.6226 153.058 22.8511 152.265 22.8511 cv151.074 22.8511 149.968 22.2739 149.968 20.8667 cv149.968 20.7593 li149.968 19.436 150.726 18.8101 152.867 18.8101 cv153.768 18.8101 li153.768 18.3296 li153.768 17.3198 153.408 16.9702 152.469 16.9702 cv151.687 16.9702 151.111 17.019 150.629 17.0669 cv150.617 17.0669 150.617 17.0669 150.605 17.0669 cv150.593 17.0669 150.582 17.0669 150.569 17.0669 cv150.449 17.0669 150.353 17.019 150.353 16.8745 cv150.353 16.4536 li150.353 16.3218 150.437 16.2495 150.605 16.2251 cv151.098 16.1411 151.652 16.0688 152.469 16.0688 cv153.456 16.0688 154.105 16.3696 154.465 16.9106 cv154.91 16.3813 155.572 16.0688 156.425 16.0688 cv158.181 16.0688 159.047 17.3198 159.047 19.0269 cv159.047 19.5327 li159.047 19.689 158.962 19.7964 158.819 19.7964 cvcp148.265 22.7671 mo147.64 22.7671 li147.519 22.7671 147.423 22.6587 147.423 22.5269 cv147.423 13.9526 li147.423 13.8315 147.507 13.7241 147.64 13.7241 cv148.265 13.7241 li148.385 13.7241 148.482 13.8198 148.482 13.9526 cv148.482 22.5269 li148.482 22.647 148.397 22.7671 148.265 22.7671 cvcp145.427 22.7671 mo144.849 22.7671 li144.717 22.7671 144.609 22.6587 144.609 22.5269 cv144.609 18.5698 li144.609 17.355 144.201 16.9829 143.287 16.9829 cv142.781 16.9829 142.216 17.1753 141.664 17.4517 cv141.664 22.5269 li141.664 22.647 141.554 22.7671 141.422 22.7671 cv140.833 22.7671 li140.712 22.7671 140.605 22.6587 140.605 22.5269 cv140.605 16.394 li140.605 16.2612 140.701 16.1528 140.833 16.1528 cv141.435 16.1528 li141.567 16.1528 141.664 16.2612 141.664 16.394 cv141.664 16.6226 li142.324 16.2495 142.866 16.0688 143.575 16.0688 cv145.018 16.0688 145.667 16.9702 145.667 18.5698 cv145.667 22.5269 li145.667 22.6587 145.559 22.7671 145.427 22.7671 cvcp136.415 14.9146 mo136.378 14.7827 136.306 14.6978 136.186 14.6978 cv136.054 14.6978 135.982 14.7827 135.945 14.9146 cv134.851 18.8706 li137.509 18.8706 li136.415 14.9146 licp139.433 22.7671 mo138.723 22.7671 li138.615 22.7671 138.542 22.6831 138.519 22.5864 cv137.738 19.8208 li134.623 19.8208 li133.853 22.5864 li133.83 22.6831 133.733 22.7671 133.636 22.7671 cv132.927 22.7671 li132.807 22.7671 132.722 22.6831 132.722 22.5747 cv132.722 22.5503 132.722 22.5151 132.734 22.4907 cv134.959 14.6616 li135.164 13.9282 135.729 13.7476 136.186 13.7476 cv136.63 13.7476 137.197 13.9155 137.4 14.6499 cv139.625 22.4907 li139.637 22.5151 139.637 22.5503 139.637 22.5747 cv139.637 22.6831 139.565 22.7671 139.433 22.7671 cvcp127.684 18.2808 mo127.684 17.5601 127.359 16.9946 126.061 16.9946 cv124.714 16.9946 124.437 17.6079 124.437 18.2808 cv124.437 18.3784 li124.437 18.9067 124.677 19.604 126.061 19.604 cv127.359 19.604 127.684 19.0991 127.684 18.3784 cv127.684 18.2808 licp127.781 23.2124 mo127.781 22.7427 127.396 22.5503 126.313 22.2739 cv124.955 21.9253 li124.606 22.2261 124.365 22.5269 124.365 23.1519 cv124.365 23.2603 li124.365 23.9331 124.762 24.355 126.097 24.355 cv127.468 24.355 127.781 23.9692 127.781 23.3081 cv127.781 23.2124 licp128.754 16.9585 mo128.322 17.0425 li128.539 17.271 128.73 17.6323 128.73 18.2808 cv128.73 18.3784 li128.73 19.7007 127.913 20.4341 126.061 20.4341 cv125.423 20.4341 125.015 20.3374 124.666 20.1929 cv124.461 20.2896 124.365 20.4214 124.365 20.603 cv124.365 20.8062 124.461 20.9155 124.738 20.9878 cv126.53 21.4448 li127.708 21.7446 128.839 22.0815 128.839 23.2124 cv128.839 23.3081 li128.839 24.4624 128.069 25.1714 126.097 25.1714 cv124.197 25.1714 123.332 24.439 123.332 23.2603 cv123.332 23.1519 li123.332 22.478 123.692 21.9253 124.089 21.6245 cv124.004 21.5884 li123.62 21.4204 123.451 21.0229 123.451 20.6499 cv123.451 20.6382 li123.451 20.314 123.608 19.9653 123.945 19.7729 cv123.572 19.4233 123.391 18.9917 123.391 18.3784 cv123.391 18.2808 li123.391 17.2114 123.993 16.1528 126.061 16.1528 cv128.695 16.1528 li128.839 16.1528 128.971 16.2729 128.971 16.4175 cv128.971 16.73 li128.971 16.8862 128.886 16.9351 128.754 16.9585 cvcp121.136 19.0034 mo121.136 17.7769 120.643 16.9946 119.512 16.9946 cv118.394 16.9946 117.901 17.7642 117.901 19.0034 cv117.901 19.9175 li117.901 21.144 118.382 21.9253 119.512 21.9253 cv120.63 21.9253 121.136 21.1558 121.136 19.9175 cv121.136 19.0034 licp119.512 22.8511 mo117.745 22.8511 116.843 21.6851 116.843 19.9175 cv116.843 19.0034 li116.843 17.2358 117.745 16.0688 119.512 16.0688 cv121.281 16.0688 122.194 17.2358 122.194 19.0034 cv122.194 19.9175 li122.194 21.6851 121.281 22.8511 119.512 22.8511 cvcp112.069 22.7671 mo111.492 22.7671 li111.359 22.7671 111.251 22.6587 111.251 22.5269 cv111.251 16.394 li111.251 16.2612 111.359 16.1528 111.492 16.1528 cv112.069 16.1528 li112.201 16.1528 112.309 16.2612 112.309 16.394 cv112.309 22.5269 li112.309 22.6587 112.201 22.7671 112.069 22.7671 cvcp112.093 15.0952 mo111.48 15.0952 li111.347 15.0952 111.24 14.9858 111.24 14.854 cv111.24 13.8921 li111.24 13.7593 111.347 13.6519 111.48 13.6519 cv112.093 13.6519 li112.225 13.6519 112.333 13.7593 112.333 13.8921 cv112.333 14.854 li112.333 14.9858 112.225 15.0952 112.093 15.0952 cvcp109.724 16.9829 mo109.171 16.9829 108.666 17.1265 108.064 17.4878 cv108.064 22.5269 li108.064 22.647 107.957 22.7671 107.824 22.7671 cv107.235 22.7671 li107.115 22.7671 107.006 22.6587 107.006 22.5269 cv107.006 16.394 li107.006 16.2612 107.103 16.1528 107.235 16.1528 cv107.8 16.1528 li107.932 16.1528 108.029 16.2612 108.029 16.394 cv108.029 16.646 li108.63 16.2251 109.183 16.0688 109.724 16.0688 cv109.892 16.0688 109.976 16.1411 109.976 16.2847 cv109.976 16.7788 li109.976 16.9106 109.892 16.9829 109.724 16.9829 cvcp104.494 18.8823 mo104.494 17.5239 103.976 16.9946 102.917 16.9946 cv101.883 16.9946 101.306 17.5835 101.306 18.8823 cv101.306 18.9917 li104.494 18.9917 li104.494 18.8823 licp105.334 19.7964 mo101.306 19.7964 li101.306 19.9653 li101.306 21.396 101.872 21.9253 102.978 21.9253 cv103.675 21.9253 104.565 21.8765 105.119 21.7925 cv105.142 21.7925 105.154 21.7925 105.178 21.7925 cv105.275 21.7925 105.371 21.8413 105.371 21.9614 cv105.371 22.3706 li105.371 22.5269 105.323 22.6108 105.13 22.647 cv104.445 22.7788 103.783 22.8511 102.978 22.8511 cv101.595 22.8511 100.248 22.2017 100.248 19.9653 cv100.248 18.8823 li100.248 17.1636 101.198 16.0688 102.917 16.0688 cv104.673 16.0688 105.564 17.1753 105.564 18.8823 cv105.564 19.5327 li105.564 19.689 105.479 19.7964 105.334 19.7964 cvcp97.9272 18.2808 mo97.9272 17.5601 97.603 16.9946 96.3042 16.9946 cv94.9565 16.9946 94.6802 17.6079 94.6802 18.2808 cv94.6802 18.3784 li94.6802 18.9067 94.9214 19.604 96.3042 19.604 cv97.603 19.604 97.9272 19.0991 97.9272 18.3784 cv97.9272 18.2808 licp98.0229 23.2124 mo98.0229 22.7427 97.6382 22.5503 96.5562 22.2739 cv95.1968 21.9253 li94.8491 22.2261 94.6079 22.5269 94.6079 23.1519 cv94.6079 23.2603 li94.6079 23.9331 95.0054 24.355 96.3394 24.355 cv97.7104 24.355 98.0229 23.9692 98.0229 23.3081 cv98.0229 23.2124 licp98.9976 16.9585 mo98.564 17.0425 li98.7808 17.271 98.9741 17.6323 98.9741 18.2808 cv98.9741 18.3784 li98.9741 19.7007 98.1558 20.4341 96.3042 20.4341 cv95.6665 20.4341 95.2573 20.3374 94.9087 20.1929 cv94.7046 20.2896 94.6079 20.4214 94.6079 20.603 cv94.6079 20.8062 94.7046 20.9155 94.981 20.9878 cv96.7729 21.4448 li97.9507 21.7446 99.0815 22.0815 99.0815 23.2124 cv99.0815 23.3081 li99.0815 24.4624 98.312 25.1714 96.3394 25.1714 cv94.4399 25.1714 93.5737 24.439 93.5737 23.2603 cv93.5737 23.1519 li93.5737 22.478 93.9351 21.9253 94.3315 21.6245 cv94.2476 21.5884 li93.8628 21.4204 93.6948 21.0229 93.6948 20.6499 cv93.6948 20.6382 li93.6948 20.314 93.8511 19.9653 94.187 19.7729 cv93.814 19.4233 93.6343 18.9917 93.6343 18.3784 cv93.6343 18.2808 li93.6343 17.2114 94.2358 16.1528 96.3042 16.1528 cv98.937 16.1528 li99.0815 16.1528 99.2144 16.2729 99.2144 16.4175 cv99.2144 16.73 li99.2144 16.8862 99.1294 16.9351 98.9976 16.9585 cvcp91.1479 18.2808 mo91.1479 17.5601 90.8237 16.9946 89.5249 16.9946 cv88.1782 16.9946 87.9019 17.6079 87.9019 18.2808 cv87.9019 18.3784 li87.9019 18.9067 88.1421 19.604 89.5249 19.604 cv90.8237 19.604 91.1479 19.0991 91.1479 18.3784 cv91.1479 18.2808 licp91.2446 23.2124 mo91.2446 22.7427 90.8599 22.5503 89.7769 22.2739 cv88.4185 21.9253 li88.0698 22.2261 87.8296 22.5269 87.8296 23.1519 cv87.8296 23.2603 li87.8296 23.9331 88.2261 24.355 89.561 24.355 cv90.9312 24.355 91.2446 23.9692 91.2446 23.3081 cv91.2446 23.2124 licp92.2183 16.9585 mo91.7856 17.0425 li92.0015 17.271 92.1948 17.6323 92.1948 18.2808 cv92.1948 18.3784 li92.1948 19.7007 91.3765 20.4341 89.5249 20.4341 cv88.8872 20.4341 88.478 20.3374 88.1304 20.1929 cv87.9253 20.2896 87.8296 20.4214 87.8296 20.603 cv87.8296 20.8062 87.9253 20.9155 88.2026 20.9878 cv89.9937 21.4448 li91.1724 21.7446 92.3022 22.0815 92.3022 23.2124 cv92.3022 23.3081 li92.3022 24.4624 91.5327 25.1714 89.561 25.1714 cv87.6606 25.1714 86.7944 24.439 86.7944 23.2603 cv86.7944 23.1519 li86.7944 22.478 87.1558 21.9253 87.5522 21.6245 cv87.4683 21.5884 li87.0835 21.4204 86.9155 21.0229 86.9155 20.6499 cv86.9155 20.6382 li86.9155 20.314 87.0718 19.9653 87.4077 19.7729 cv87.0356 19.4233 86.855 18.9917 86.855 18.3784 cv86.855 18.2808 li86.855 17.2114 87.4565 16.1528 89.5249 16.1528 cv92.1577 16.1528 li92.3022 16.1528 92.4351 16.2729 92.4351 16.4175 cv92.4351 16.73 li92.4351 16.8862 92.3511 16.9351 92.2183 16.9585 cvcp85.8921 16.4409 mo83.9077 23.3687 li83.5347 24.6675 83.0903 25.1479 81.707 25.1479 cv81.3706 25.1479 80.9497 25.1001 80.6973 25.0396 cv80.5532 25.0034 80.4443 24.9673 80.4443 24.8472 cv80.4443 24.4019 li80.4443 24.27 80.541 24.2104 80.6733 24.2104 cv80.6851 24.2104 80.6973 24.2104 80.709 24.2104 cv80.9736 24.2339 81.5146 24.2827 81.7793 24.2827 cv82.4644 24.2827 82.7651 24.1011 82.9702 23.2603 cv83.0903 22.7671 li82.9214 22.7671 li82.561 22.7671 82.2485 22.6831 82.0322 21.937 cv80.4326 16.4409 li80.4204 16.4175 80.4204 16.3813 80.4204 16.3569 cv80.4204 16.2378 80.4927 16.1528 80.6372 16.1528 cv81.2983 16.1528 li81.3945 16.1528 81.479 16.2495 81.5029 16.3452 cv82.9214 21.564 li82.9819 21.8052 83.0659 21.8296 83.1499 21.8296 cv83.3433 21.8296 li84.8101 16.3335 li84.8335 16.2378 84.9302 16.1528 85.0386 16.1528 cv85.7124 16.1528 li85.8315 16.1528 85.9038 16.2378 85.9038 16.3569 cv85.9038 16.3813 85.9038 16.4175 85.8921 16.4409 cvcp78.2559 20.0972 mo78.2559 19.3042 77.8589 18.5698 76.4399 18.5698 cv74.5884 18.5698 li74.5884 21.8765 li74.9849 21.8892 75.418 21.9253 75.8389 21.9253 cv77.3301 21.9253 78.2559 21.6011 78.2559 20.3022 cv78.2559 20.0972 licp78.208 16.0688 mo78.208 14.9146 77.2456 14.6733 75.7788 14.6733 cv75.3696 14.6733 74.9248 14.6978 74.5884 14.7104 cv74.5884 17.6929 li76.4399 17.6929 li77.835 17.6929 78.208 17.019 78.208 16.2612 cv78.208 16.0688 licp75.8389 22.8511 mo75.0454 22.8511 74.3354 22.8149 73.8789 22.7427 cv73.6021 22.7065 73.4819 22.5991 73.4819 22.2983 cv73.4819 14.2886 li73.4819 14.0122 73.6143 13.8687 73.8667 13.8442 cv74.2637 13.7964 74.9971 13.7476 75.7788 13.7476 cv77.6909 13.7476 79.3022 14.2534 79.3022 16.0688 cv79.3022 16.2612 li79.3022 17.1509 78.833 17.8364 78.0156 18.1489 cv78.8452 18.438 79.3506 19.1714 79.3506 20.0972 cv79.3506 20.3022 li79.3506 22.3218 77.7148 22.8511 75.8389 22.8511 cvcp0 0 0 0.56 cmykf%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5[[/CSA [/0 ]]] del_resAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 12.0%%AI8_CreatorVersion: 12.0.1%%For: (PeopleGroup) (PeopleGroup)%%Title: (DTU Byg B.eps)%%CreationDate: 27/02/08 17:49%AI9_DataStream%Gb",KCNC^ZP2J!ls1g:J(e7hP$AE,P0.qjPUcI>SO)TGhB4GGH6WUPL>3jS6QH%t\op:NZ"Am(3=B)aU;PkpI9dKfSO@UYfKu=d7%b\upQhd0Rf4MU^T?RAs18JBmt":LiklAI=ppVdZdO8Ui_g,H:p<4-QFV9QBMgAkT[WV3`PH:KpWpK,Q(]C0ZVcBfV;/oE:[DEn,3%o$,k6!'HbKa7Aflk1@`Qo'H:@lAO?Ip<C^ujmqKpp?M!^!pq4+2/hXO(RK'T]taDXH2Eq";d0Cj2mKX&I>"Ks15VV0r:TaYjo*rq%pX&'nmFPG/ogeqs^PSRi0CS=:#g`e[h-59u+9-P)s7,O>.Q.8lIfAu35:h;upiq"0G'@qIrEio0dm#Ig5$X]8/L(<j>u*<Tj8ZXm%F?b5Tg8UW"C(fe951m[.B7)91EO#EV0l_Y^I<Y;Q4UpTOMfZbQm.Tl?`P5ekb2<ZeDu/UOqoe*ghl\X#BFM5N>H7PEc.h>+TI88S%\NIcLf'uW52\l,Xm.TW(*R*fnjZSXo0@3_u$8?mSp=o-r^Yl^7bNg6gr[mj=<?#=6Y#b$r9nT#ckM2keIm>md&jPoThkoBP'fCo/%?k^tsLC*_sVW>ADMk;Z*rt;\?;fA+:nk(i!_!LAfdEMR^p>TpDE?<3F\!'X;_A>t:QJOTD(-bXQ!=a6sbA/.,:t+Engf@]V^NiO,%q=-TZf_*o$i(tS"f961TS-'X6+._5Y_1Xa$&c[4RccQ*o4/AhoI^I,PcJe6#`SZT-5deW3[Dm-m`c&8^Dbj-42UugX9*#A?rl.j]%@4CA7:8H.C`A2:gAQnlFg22bEg(m??-iAt#((2\$=CBCm!l%khYft2qIX?+p*7d;6_=(/pW"/KfqFgd\2q#0;;ngkpq>u.V.3'$#%`_ncC)(Buh,Jr>?#"O?]ESQ-PWf(B(htS"J#_->WKI:LP7teWsh"X*#ED6.&_Bur<9B!DM2jQHa6(#k,p7-(q=<oHVDlQARVqtA0%WGhEPm((?&Pb9*LL#^).fFlFONLISV)8lKZ'TPt$R'8o"EI@O#s2*12r8V_\3C<3oQGW1NDjj+h'#H04+5\J'J3=_FOZB39&_=3$%iD&f.,H'C.c`(:D?><X*Mb;&$QGLrTA`DpX2N=0>`UVo*/4K2jj!1'j?2T[nE-0VH6J8Yf#]oVBU2HZ5TbX7Zlo@oMd=SG-R8^sa%oo?7Omj5VTcXfRVCt*Y[-#]^4WBP`+5LaaXR7,:VkCadhi?\C6rT;X*FfI**[H<`#GfmBhe1Gd7kmqQB)NpAWB3DI/k5foTR)I\r%)q%gPYIp4UV4($,nH](AY,M,nC$;&a5Q0MPL-PK`qPh35Q6?!QqXL0VcMu?h#kW<Ho'X:XZPe1Ts/2LbSGph6dnfYUd1J\8s7CA[%9Rl7*l).9@`6WGkn2JTBr@NNHs"M1,/<"F'/t8'"g7OnZ_F\G=8[-I]$2f^R)aD7?:[m*c5WOJS<F7R(+0/1t/C&-`G#"tNItVs;%6L[M8<<<-:[^d.*Co*\Wh`?Z+IZ?:ZNEO&HcoTU5LA#9.7sm7\_1%uGd+b@_pi^?l^F+9dYqHAKRY#uIfR%>i"kT'Ra*+D)^\=rq%LYR?s'OaY`>Hl^7->6W&^:2O7Y!'AbpicM"YnfQ6.2Ycq*W"T8nW%N?nLjE`o:9*(MKo7s"SnNkDReRbj#g6Ep"LQeNtG-SN%JhB%MakFWG>#[O:Akre[h2\3[I*q]M&*=F3,ZP6oc:<m_(X/Rdh(*3VB4`0Hmd>\]oa]Wqig4mnCrufJ#/M6O6S`R_O^kB'mNTmkIMu<%`4g5>l8d*YXqe]1#dI*Wc!ZEf5=0\*0G5,!($mrpcSi-CC6r*g.d/A/)mF`=f?3BpT$nWj]^Fe6:?4&Zjc>d,:?_*7s0:KeYg;e!%<cdZ]$*V^_>,?$V2ilX8lfQNmf:dlH]/-8;[Qc6UT"\^iC#VftmC5bMT;=2Ak<;]]1uIr?i'mJR\VDdtdk%X*q3HKi\EWm./%H@&%S7WsB`<j5MhOSH)*(_aXe6SL7%BU92="A3SGN[<CHNk03<(K!8E_Kmgj.#lhmjVs:C1ODW5+]gOV%B>g4<EKtdT/peH#<q#g\sg/%GK\bKQ02#fHh6$Z.hHK+];q0!d^IAuX;Uhua,U*$7SbckG=I'Uo\tp)\t[nLLZJl!YU5F#`^YHC1QQY7SWAr"=(bhf[ToMXpMtFi%D7M.eXHhf^N\'tJF5!aM,L7s^q#n@ZI$\V0cUhHhb[hFLJ]Z6"hgon0F2&AO#N96>m?G;H*\t.mm,L=k]VX[44=OdI`*/b-P!4U"%;Yc!&j1M7&I7oFpIgKQ]*n)'[&O&I)"+Bc#F0^t,i!B*08#jIji,:9U`iU7i.t'IFnT,_7GrP,<6>P*f?Q<Ff7106H>23AV!U6B3%-GI7.\\.a+^.Y*Y2m8QlpE.KK'*!FPm1#;o\44q;okjUR]_VQt*kqL:mEPTbYHQj><.C@M^%lA&q>TaKrFCAf]RKbJb6c)McO&,%%kip&NQ3<\K?$uG<_=i>j76B,IPOEtsn)a?c<+\Dpo_SRHDRm<OfB6hl\Xgr_mm"OYr-3:(RJPP6.Wprk&W5[oiuR$t$J40@';ejg%`!-!URbcifgfpHDqDZ3V]A38Bm.0`,kM*<Rmk;tA?81ksH4t_9`QM"/cYf)[If*.D+$l4-?2\kdH1CDS;e#k(rp9@Hir!imqR;N0%bH&mi*A-1)gg1_/MpUMMIk36k4qsP]OL+8^PCGg/rU<Y43)/ioY2@)'M<d0sn`K*=H4M@+hk,=!`pV]s5D^[nO!*K+Zg4sP8VEug%Oo5:Y!^H"V,_Dj^m2KGl-0opNl2dL/W6+tKq#7J+B5]GRh>V!V-i!HU]_$LfHU?XDX'otSK$W=Ts&o<HWh.c4H3"PT/bOrej%,rP%1<M'OO&nWTC8U-.ToRX-3bdkK2,0hb"58utWa0;lB%G1q7<?ru=3ZT)[F1&cg1[OXp,_D<ch(Hq2!d*r`7.8E`b8k@29pF[9P\6P%DAMBU*1IUG>D67M2:br4=`6TV[50nR$[ZEFm>7m;CQ6fg3:!++;$<E"\Q`&5$]!g/!)Eti.gJS^P6')C/J!sJ.Dq)H9g`bI*\E@1%n9AN_0]k?*)70fV"ti:+_;k$c3.A\oi'=LhG[O4lO;n[Do<;ojb.0#-[`AQOY\]iLog;s1d!.a0"t0!L_lI0e1:d(nn77^B1t.OM%o?Tc5WlI6P<e^QTV']Q^RGYm&!8T4LhSU%0R#FM.l1"m'l3O8'?I.X#&]eAV,(9\k)e[j%6;W@#*d*>_3B/EdkP#%\2,'jP+NacY%*!%))!T>W'hSD#cR#hNLV?S5,L<3W7]Zjgg"3dTo=Z%nF%Erl&F++O=^SlYkAj?o@c>c)n#)K)VZDiD0Ne*K35ZKWXDG+0Vm;\&`%9kZCB.a:T'dPNmhV=s)29L1$M<(BQYKosC&J%+,+DO1RH_npW@Rhu!7R7PqVF+O$BPh,=;=[O3r7;_)FiZmb,=1#'n\>lShf5Y5s%V4Dm4?JNJfM)c+;XgkfJF]TSISN&LuXmX'onuU'<3t/`)c`r7k[Mlr=i'f=E\1+\Hn5FI+7'(<(@]=u-_N`uY`)a`VQ1uMs/0h9L%[UOaPZc*[!=>9koLGMCFIO[hB3fM:/(_M.;kpBnN4[(&Z4p<%KSNSZErRJKM66GldcRd?oE\n$=27R%V1Wibdj61?u#^quPUbCf0%o#md+3*'1tBaGT'F]!0jiA";.F]^T-h_oQ=I_.a,0;C#oo:K#G22qt":?nfZcI=I9"uq4a[;H#>-G`J]276b#[F`qFDmlc+rs3P#%@#Y=.&$%X<J9_GUqSB22[Rs=h3sAHE?aNh8p`;]4V&GB+-6KH]4jeSUN)TNe@k5LKFV@`,_o,l+q>`@NUp0DgTPU6)+'SbM:B;lh%9Q=o;CtdCilITN"l__h6+Z@m'Z&"Z;r.<9".K[JjNbpMH;`;*JXus'S5>$fgBEZ4&78Icf.*s>B@F/[4b/DEDammL#al6i[1-92G%_MLKs-hbK/eCst!WK0i8O,o?^(WZ.-fl;?YNr?4E[NOjMi#i@BcH4K(dF$A$BRVd"C6(](jH&)Y4Ye-b2SbjJ`Q@+aEO8h!k)7oe%?%do=\:n3*&?d$\@.jG.IQTi`0BVm%Cu3ITgs=g3JkW<0%IB7#2*73Hc]2UqfmG]I[BhRY1H2W_QYPGk$C:$MHe][MMg!t&g9qHm%Dd@-_"++JZbd%^+iA_g27@8iJi&=WO#8\p^mubIp]gi1&?hh1(q:5f>^%3!B?k'29!B2uXa6q##5[0X:1gYOU?n>tH)WVLllH5]K%MK8p#c5]fT(/uAo*U#fTANTprFB>RXn&@nB*C5uo>W'I[HCVTBg^_C-='T$t98XlXN/IU,hkn/t+k5uLDa.JZ-U.Uhm'>,if6dTL%67;`@k$;*\Sh#t,f!DZJV36"<HE*`r?m*&S,qp8ac+`sqPf0c,.h;qo8(EJ*Al_mN73RIujZ0?eW'-%E,/^cM9H)u>NUlQ86gH6%%<A>na-pL;rY?#fGD,c!e<6+;=b>%8+o?^EYKX5f^g$mYl<952b.<"&&]2)5m$iIC%RDie[ObRO2MPpX<7J%`)&VZ$/6mEo(``Or`%-DIiK!2G3G`%'[[Ss/qU'W)dJZ@JXbj8`t:)!1lq$g_a89Fj+'oR@h_,<Q!0'j!q)T`bY^C@MI()LpK)l^.c)>l[5T`om\i"&U7Z%JGt*N?msYFfXG>fedPY9Y^Bj(Y]Ee2$*6l9>oV_WBNMFbAaD_`Y!)sU4pN-Y"MF_YFoh`N!qtNe-=@B8YU+PH)PB5A2M]NY[[RWt%N=uln:^h5L2_g+L(r(joiG3)1j"+U$J\>i='$2\6-"<aeNJaD>Ln,/C52rJuTju#;Pi`_'dm7'FS-ob5&OZ/G+iM]H%mMu3#I+qg%fK"eWJZ9PGQ>o9ZR3g(I,g6g+>f'.N8jZ-<8JNs(36<#RkQ=d))W4X#Ls<d6#M?b'd)#i/P`ALhJL]=3JH`i$DZOVp#1Q[-4`eF&%&P*'QW3i3m"k%ukPTi7u(I=L?qBmXn+375[H.q+2lTFdu=cff".'uQkNf3'G596>XJ"#BE'e>o`8!p)oalCh0dhC0YVIq5O(&@<g%\aUfBBh(`t3u4*@T#A*Y\+1(!k),.InlU?GH9=DWQ/aE<j6^@\6[e1O`,'ee[X+=u%R(E/gHM0FU:U$ia%nQXN9^ajSo'>a=m.6A%T))Lb8\M-njKD*]@\q,<IM`E7",m#TDF&^"G1tY:2;+^!Hq./?:g!i_/ui)4endoDKGcTeO`+e#D.LAP9G`tX<>`C,TU[!dP;UM)%6d!Fr`FV0*0&I06jbBGT^(Xt(fJ6fAB-_ApFiGlH:#tpo6U/U9Stk8Bl2_\!Vu,&#g?_k1GFht-^`'3A(I+VbG^A@R)1t7a[dSk$%k^pmq_2-Sj1@O;=8Z#'"G;Q&,,dA_dC=e*l\'0a_-/'(!;qM^Fs0EW;]:lU9lElO(/3C4>A6RZW$4D7W*-ImR-Ut3D;Ze5oWb>Cg%=B.l:b#\N0@g3u9n,P8F$<_1F-M)l\=W!CRpo1iV>ORu`Gnt0:fMJS7coW-[qGs5PLRr7Egsnpbi)BPQc))T]cpJj:G)@)jJZ`]p%5%r`U*W&*1+fG_m6"q[eL4X(g84m)eB="UmC>)qBZmtCHXMihQ'"^n-dt9,$W+d"2YbJ$a26Bj-86'G.<@cVP;NWP1[YhK$=Ze0s%1q,fF-'d%,"YQj`UrK)P(KJ#Ebgf_Ck"q[;NK/*A(S_m9eEg#@,OKA7B2DFFMcsF-afn@J*bp%pmo<6H6_uHoaDj<bAteY%M#-"+%4L/u?[D9j"U+R:2Cf)E6;(G&J0WNmC_P;]"N<\nrk"j`_C_F$rj=M\VOT/o%?[U4jomf?/l<1Iu_c_^b[P2H=bZYb9[=hdb@9[[Q%UtV`qCeA)&91>/4aQHXl#hd@@PjA\/`0/@NKo)YkfN;+.1juYVO?I$W6C!uK/RhZZR]JOqH-FinCgS:mKC)J[dGhg7`Cu+g,fN0-%.s*1==O80hU!R2.!\5H[VS@9'\!H_/d\sY)U\cC\a6M(THM*@h]tp`En5G<D]>rSgf`M#CMS;YV+*ag1>5T-H/=l&,IK)%J]G_@"%[WjjmhPXRc3`!/k4ab.'A0^""=Y]/g2UWO;J6S1G26PSV+sc8"gH56IO1rl6DtW>J4kT=&U$3e*5!$-5T(Sjos!THA>oQ=m_MadI%Os)+)5tXd@BaZAl+k[o7=@B1+-rQL&Z=0P_4cq9?ff#"q,M>8t(6Y[OP),MO)bS%J,/t6MQUHH4mMKap&Xu@-",=1?iIjlP@QYh*%#oQR\KL/-B18BpS77XtlMErmCd@`gTY>;Q=p!$XiJ3@[@McSH&<CPSLS5&;MX&bb%B\'37fX9:5[YAU&KlmcGLZ@SMleAoF(9Xg"%X0co4G-5=shMS9_>B@)57r='?/>Em#.WNmpSbb`,]?59:(4Ghhn;5J?2RlWQhX#akN6cAu81I_+XPdMUCgCR;;T5X[\7"u?6!kMq%7Mp6t0ilAq_Db6`KDC&r5b,O@d6#Zln;^BN4DUJ[5TJ^R<O5h02.P_VE)[9+^e5Jgl09PuX`T2^NptI3*jr@9fa^W03,<9q!q*"%%8Qk?r&#s/)kZSM:gCJUf>P3LUTs):tG(`bS.r5Ng2'F6gEAf84VWPV[HA(s6p!CnbQA0-A*;2b\I55>KW;7)_]bh["-#q827,>n?%\sl!L_e^<,=+/dtB!Gs`/2l6j(5%0=M6^4-&''O2ZN6e5Jljmg<<ZqAD4>'l(c%%e+RP&#]5*YPAr04:ff66/h?AI3.l8kXSgh@G%pZ)PC`$O$C%gp3Q6-+r2Z;Zc:7PAL47:PJ,FiRO=*oj,;)"L<;csd-aVJ+ac:E'l-EjH]X;TuCh?:dVolqX]2Y*j#Iq'+I9;b<#5%Kr#HXW\Mj=?/Vr]l]tf6\t.i$S7j\f>'3/X\#;aaGlVQu9s%;'O>_7<1ug:GY=*:@8%VZf.Y(.X3<WN4bl.iQ7^V6#N39IGqt"aX%f4S1.\!*FW8,WGWi;>\s57c&cKCe]mr&cr'&'iLRoCLo<4?,P9cHh.7oAKO/3'Rr!c\(i\i;>\s57c&cI;JE;?&Q>Pi5,57E./ju%T*OQB_>/@qING#OIj!pPdY$s`!1-3@UM,#f`T,u(+to[X9S,$Wb&)1Xq39.NE]->uSJr36.nOXr+7eh?ELoPfo$((H6h9s4ZtY[8%bsX3`6OkP6#qS)tRQ(A0;PLNYkGjd5DWDW+[A7jgs.IH]/4IPO34iBbG?^uYXjc/3:1I?9BQ39Z\.pTU<Of!G<<HF[RY0:/oJkSg%Rp?bT*2TG-I/5C&UO)jso\m.@e`.1<&"cS"b/<J,OtW#-8W5utns"U7r);7-M,LC+@#k]$c,;,.BgBn.aO85\0jS@K=(t&QX`D<?%A>pEaN_8<aRb'm295t0O[]uD@U%KNijfEC#F.Rf%GrkCX2;V225*2sGlF?g2pkMIi,&]<U][:hGj,1GkA$=BCLWoBXVTm!K3#i)U%jS'`g'pIGLeJ`B*ORmqB;8;+QYBk*]JLiO.54u<t@]Eb3R'jJ6pfU<,;l5HRJ\EUT`phHSB9o-7H5>a*.\:-q.c11Ra_JMX^hfM4%ASX&f=._9o)/:;E)JA6SjCK>bB@JrAjQ%jtS6=Sph4$o+cY/L5h&!&aU2j*WQb2K-Kh<efH3p:Vl(C)ZTL^0-##dgI8H`%hJL[uk%<S]K.lR%)0e3>qg<AT`GIV&@7'0mamC/+-mbs\dj%'$_lmSuU+6jf%nWZc-@`F#\oLB3"*H5'6'`8e.U<F*1<ob;>2\SmIMEZ7O:%#cCe4dET)M5rp!"2XKO1%6,:43ZH.G##DWZphXdIg2IU,g;(^^U(%@&%0iV.h+_fnnuL`^=-E,Hj;aIVVJXRlV@#&uX(_rO>8<1<%<;K#)`XYX"[[W.r9^q"Q\k#WIMb:o6Q#[EWFn-(**MpqMqR]@D?NFJ2FdNKsj<)4F[bAF+mq@#RT^Eg;X-\0TDo'MOnrHoR;GFk2%,An"I2!8]g>S]n!3D%?<`@`f`Wj6X>'J@p:S-XS8D?2bTmP0RrX%giSUZ#E51hV*1BL(9c*8dLL1&F/2I\l+QO4qp8GP&tkX+Gnh%/3NCeR>GQ7cAXmQmlB`jUYc,koWr)Xb;!r6=<k*)XbI]^1NXq/BH$nQ46[Re^k*O+&)0[fiIg_95'T1t-j=uu)f2A(>+4fSCb`%p%BQ'&,+?gNE:JG1UlH7)"Ggm=e9'KGGUb!e1Rpkm$0\K\aU=,KPrr^sRq:_<[1JGA!-Jo;C&q0YAcaZ^D`)%<0,/sa*nX+ki.^o$E%<9'3J4mT"Ha#*99>4LaLA4C);i7+Gl:ra*oR*+Pc&)G4#LbRQ2>.I?Z1(JB6qIJFk/bUQ(qN#>(dJDTnd_AMQ:YWPSYZe22eFLqg%SW24Fnk)_0qrK*TO1dEMXk):/Z?gGP0,(2U-.B"WU+9DjA]LrqR&%R$][nksPQG(8TeT_mb-lXgc.TXaU#Y_];>/IPXW9SGe99.C%ENh&cPY4d8j?)ZSKm&(lj^n!m>nu,SqY\C7$I5m,$`q(rT_K"s^(2MTXuHN(/Rm&$PF8SY(fq`An[aCN.ot[F]5b+r=1t!0Cd&U:%Z:%&O4B/[3ZQ5Gba^e%6CN<X>rH$dG-b=TrGRMd#Lg*%!68NGNW?,uO))fi@O13IEPA/Q=e=EJZ%KG)+P6BZcBLQtB+U&J;6[&)M%(03.4ieZXE(,9c>-BX!:@a2qO-+K&rf%,Nk"qmeg_Ujg&01bsk9CS"5:O!u_Dbmn-6/sSOH]5@2&9d[kkUEUN_Ke68-/U:`m)3ZN%pp;\Y0;,ZWdMr'TZ+Jpr'&=QLKIu+J+9G7<'88_\kf_:pa2uK$fF7/39h-N\XR)S@H,^&L`]_ippitk@ZMIOs)e/:S[XYENpZ%l<%5%rDlD"5$\j,5:\Vkp<N:ap\PkumLsPb-oOGpoa)FgB:]$UiN$6?LH`5,i:&FmU?+N@h/@mq^neXO@V9QF?l:\)[#hPO\pAcM]'>%g'^UF=[re^>0-Xg79EXcL(5ksQL[.@mfJ]idb_[.UORUs>MQ8cpgX8.fn3?"ThW8D]0%+lhTr#]EZ#Cii+i/.qr#UseVIekrRnD]%X-MeXZ<.?5C4DeO<EaO2WEO'a>[=%=<bI\`B3LhEg6@k:3\.OAQRf,B.Y9.n27[b(d->os=H1_ifaT04FB2kWEfX$UMR\.'%P5FG%XhYB$G#-$t'!S-U>p];-9@k@lB-iYXC)3gPUaCX2`G#s^8X.dCjb%S19$u%Dn,tKALB\7umULl2Ga)]KK26sZq4YVlKDX8nl@qQQ%[cdC$YSX%u3NaKQW0J"q:JaujK:ODPot\n2=G1O+78&:M>C7B)j4[':-_IPo*k[DHgPVV8V5OXD'QlA(@7(T!5CV^FBU)>Ob&BJc%:o*3-lhIJWEL&,3Lt7>_<\(G?rOC"!5\30IZ3[7R3*'cR.dE_sfG*&h%q=foV**\(8s@cJ@9$&lG8a*7QdMp@Hl&/&UKC1MQ?Y!$%l8qi`D$Q,T_e@,eB?"S`gN^9.O+p@F%0e/J2s!$3MXfPD^:HE@hmuWQMaTaBXkBM`k%&jJ]@OrXl[5P_]IIf!/+6L(hQ5;;=q>8m%Ml3\X[J-`(]jYc+*kcH!cCS2f5#[)p209711WS3&2k!(5&U"b3f#76(N?m%X>KO+/ZYqd*Z#s)1F(a*^d^>lmXXU+.1YYkEeXurM%0S1'Pd(YJcgK=kf9?"o:Q+3oe;,drWA9nj:B\,3nnLP[_WT($FpP^i'TsS_f-*n"!Au]Arbr4$eTZLfpY2Q`EeW@$_>l\04giM8H%b].Gfh.NMD-`koo7`bm:j3SF?euZQmre+"Caf;\a*qU_:1JUs]q@K));2ftS4BW,<%j!K%l3GRtYS+mH^[B\E_)osb1/M#*KsJA[%I(jV:Ho3<:oGn*KU9('ldLQE3(^@3.$@n9^p4E@f&:jR[,NZ":UspB6cVAt?ZbrEjrTNT<:Ofs;HO#Nu0;cSC4d"!dVjG0dZfNIe%2BUVl,\,YXA=k$1=S:TDNCSZb=.MR2cYa.?^2"6t<.ee>25`>j*8$(K]6`D"7R!>^0Oc(A4>aQjK0+"i>[+!CA1pM/l7!!!RZh^C%J,rPB-cCI$5ruD2`ou[2Zo4f;dSq^(-tpfSFJ(.TmFl(q*F7]hN2)$95W"3Vqr1:O%U/<+d>nR.miQVQ55gji2i+ork*Rsl+.FMG%]-k,2o3;0$I(#m6=T#tpSJ<N\nlZ^@EkGJ.^;u(/WoA\(cH"efaNg0G+aqL!K3@p[%M#QY4D)q\)BXq%>aE_WSBU<33/#2L>(:cP%a`3cAI$am3R:2N_[qF8s0ksV;OdJ-S?Z<jTc?-rm.`AkcNflt5N2"%0?%ZfDNFnSHZaAh[QJ;`66)fa":kihsF%(`?[\U=d*k/X&%';t*P%T7/V*i)Z?0[_rWmku-BmF%YP=SV<aB:Y?FFM0W"#=O=rD<Q4>WMaj!jbU.5:=UD`F*6;;Vg39K-gV'5<^(M,o'(PaWBBk'%A_*pK]#1bQoc/<lBr_991b1Vc?,9:Q:XqbY]MNUZ#F/7tJf.W9[M$<S`".pISX*#Wj\2)uF1NZ%>[`S3A>FR55t'_1@`5CdaK1/Z%XPT6;a;A'@O,/oo_8j?:c"c'0ToXNC7hU%]f-St)F*&/m]M//OI4=EA,i)>sZ=q"o1M61j0)4_+jN>>LqNhb)%c(abgi%Cro;\Dh%&DcADXON+;[nRge2jZtKi$U*IR_J:LDc_q)mdW<e](%hY+K-6HQU%j^RVJnq`:QiSDH2VUCs6dpMrT,sF*h(dQ#UAIKTR!YlWT=C%@P9ilTJNQp.aUtBZ@-V=C^%sR`<R/ETZ=GPZ"[:c1T%@r@+Knod#prWfWg6t9)O:f;UUB&*\aBg2RbiPr$SHWKBI>N2prnBOj3(.%=&4d5Wj-k^4EPa'o"fN.Zu1cQ^(d^WeRN8W4/u>i1p\BWQ^>m+>pLeG?-*tkh1=VlEX$s3KMg8%\)WE0NjqhZh]rYl#[,qnZlWp@%?=uCWdb``BUB<`/pSUEUYOhXmnbcAQn6DdTL5n?e::VOKn,:?/lFk(ZeOl'PR1d#V?DO&mV103lT5:ZV[h5$7ZAX!K%'AZ.at`8%%\`PA%M=OfslmaL2M]OOmcP*S3pB%OiV9-3&FYS!naYqTN?*-+_ZS#s4^8NLQYf!BQqh[S\1a']6CAN]uHcKd"+u/X5nl_e7hWYSg%2>47uG-5\n8EJgC;CfJ;C=*!b`m`;n)8kkF>s0$22iu1$34pm,0rtQ\m+/$gHoT')bU:r0"GUeBcu,B4A%^K'A5N)6+5o]`hNmm:%Fe=FBo6GusXVr>%[;N<n$,<@OeUBK#KmZ>K-d.U=g,atrMY)WlrD^6K%JLD,DG_dq,>_!t,4@rmUci6O*`r9gAA,g<@K8RHUO0L@%pMc2]i?$gm4h?DqF:\-0*q%E=gnT5+7sCIDk\uUNQJ0[#F1=a7nPjS>8,"g$io(s7_`bSdHZTemkT90>I;o^6e@RZOofhEB)\!kV%d669[HalSTDeV2dUO0L@pMc2]i?$gAH]P<M]I1M7CB@E1j#*Ehp!3i'86*5eH@j5BDr[NA'S1O1".=UmZM]q9$;s=o((52(!)8Ee%Ih>OAi]g'j^A/P=m]A%oPddrC$7-4QbX.gJ=U;%VWI,#e'2b\Y$l.bueMC$g!H"Ze\t<J^m6sq'8j_C0o%Ma`Smg4k?c"hCJ%+9?%[urAD)B$oMV50e5(+,Yg?#HDp[$).rj:i4I_Pp"$:;4uN7l`)Q__I4?E`>Xi.milSg?JLo=PTiUh/RHhBA9&6]TkpUds<\;i.:,6%9dRZU*k9(p9.(_]=\fsdW,u*HJk5,t3fJ_`TitkK_h>7SJ[j]E=X8U!E+c;YO"L`p@r#)u/-qmu14Acds3<"D[Q&7"OK2r`VYdSl%huWl"Yap-B0m^Vp>cg%2*f/p&.#+L<%HZa9_HqWKqXD@:FcCN>.U+%3-q[(0QNen`jLG*;bDf!C+NZ@[2^tCa+-DZ.--D^ea-HZ]%WG(c(!'n#XMFPO;A?)c_83a/\cd8gP+SJcMUn6Uh;GWGGBTQS$&'@#82pp`XCY%TMX;\/)_4>AH.eRn:*l#S$NiPIVVgH&&l4o`u%>VK-ZGib]@4C0dH-O1*:5h0$EB\]HF.tUR);=`u?E3!GDLNog6\S!bd%$OFD+SYMH0eDCW0(fX0bghU3e(sdk$5-91:\<n7:c3&_%*%r>7ObAJ-T]*gD%jtHGP=p[-Wh/j(1*HPfF+*`g,EkQ,.C3G[p]5tK-&7'hWjO&?&/uL\3E<.AKiK<fic!`.[M"O"`:rKd(>dC_%J4GG^%u<0p3_<t;J29fjH!#l*n(CGK9/Uf2idm:)X)^gNAQ55^d&6k,h2e6*9(`i(YG_6i3Go5%=KP;>>=_=\U_4n!U%EoBX/sH8%>LXN6.A<T`C`t7(nt.6X[=aW?4*7<5^=78gEntQA+3Mcic1f6m3SV5PG:7;)AFS6$%bgo1Y$)k:,A_A"EBRNO6m13fSi"H*]'>3&%m%pWi?OY]m2U.+fF6HZS&VWH+>2<R!FVg7?Ro(!kY,@1Xb$`r%<[b>%OLK>-Ah*%,;_tPo`4=R]eFnU^#OI:qP5rcqe]R.%mR:ON%b!f_:X2'%<CocP(U[4IlN_ojgo6JYl3qLIk)JeL)%=>@eph>^-<fKj+Ebs-eJ(jP=3mW3HWR?R((r9BV0QbCHmoE\[LEs3[`QE9Y%F/[Y`G:<o<RdB'$&6;fo+Rcn@hDio.SuX`tI$CKg:NCrB%A.(rb\kt!h#=\'6nXA[W:M#'T.59Q>]SXGL1euljHBRCjJuFIY(k&m%8lEi/hN:s(aZEs':E\m-iDjnn5@f4jaI?$6j.**E<7)tJEAr15:t">\[iSRaG?CL)49*t*'_g+SPi#?sX&A*KSGTpj"$Ag>#9M/&%?DS/ChX%ILk[#34oRJZ9qbs<@VC:%._5i41=!'W_]L?;\bsB[VB@.cJWWD%hS?AWYF9bDU@%HilE;2d]FJ8If&=ikGjG]2`X^q*Z%oHVR)E6M`>FZPd2kCt6M_PJpmM#ibf+Gp9\J-cRNW&PcqiItoB:f&#l6/`Ii*(8aO8D%_G_gZ\Gm-:jb@BVc7?Tn6DC`FK$GF%3Y%h#L69@W.<RH."+`ZcnZbi-gl5jHVaTP7I'lV.rX0doML%dZNC2#drYjW14gkTlbLt5u]l,>>T6f-*/`&eJ1,aBRH'qXR_KRp9Vo=%#3&J"6rR]=7^3*V0t<tqSkP4CbkPoJdX-<$rYW@6JM(M)r#KCZMG_XjM#'maP";if%U5hY7M3bSB(XRC'.&NN`f^_5?-7pH]++.c%&l(]=3k7fGPV\*dkE,-fkdq9#IV_Q)%0'YI`I''6]GCWU%>=<`#P4i9E2(NnE[-^%\jGpJrHMl8T23W.;a#B"D_Unr%4pu?\g..+%@fHlX&TCe;D(GGWWkt@8RZaj)%(:l#C99Ht(%P`j9s"bTl`<rT&(c,bU>M&iT"g//3kF[PZd'ck9IK'C`>qAVgq'IDaq_Y)mHSP0%iE?VjH4hb5D&'<WO/Yehh`%6g);$@=$8tMW];@Khe[<eA;sTW`'>Y.2-3.6G*4Lepa_#eH'Ddp.?ZkH./F+Z4^C]kG[umc&.(NN&%MttLY,fDdrA?'l&8]=%m2$fd<ri$+.=q!MM*!tr<S]>gnh0Z^LflWb%<B!-00?m#]kG[u'3mV'&.fMBm4DjPD'!f$V[P3/J5-8+=%8p]hI^0Wsae?(j,D7d7QPZKWFOB0nBD`$%s>-3X7h6J*TlmZ<XMRLC2SDaU*A;hnZAcl:+Q.K,U=77<X"+W>fhHYP[HZ=IXEW,L0%<s:r@^SnmFJDY&:k52Ks]B/E;E2pnSjnURFP8F@+WXlq==.JZ7V2u4a?ur:d5OfS6>^I=8IGB2aDa/aO/cPQqi8]:hnCNMbHo(TE%s/IGb,Q.!p^jj$UY6kh"4#mIHs'8nQ=$Bo,%meh;D;ScUaj9H\:O\#TNMV5!jYpt_;Yd+:C0+&#D(,fR(FSNB)(_1hlH(]a+$Y_>%hu7Q\0D<o);s2jM?]Q0f^4-XmS=ag:9*tR#$D7GeG--WBo4ElL!@A-Wh'dl,RG,)l,mZ</JpIuDHJJV\)kr&cFQg+<r+UC*Z("3W%<NTaU1qi[nU0",M$EIArKPe=D&*j]p>n.!G%Gk>d^:J,f\jDVng^;>k$<+r,%gg"%r_/:Yh0&s(G!ORYOQ0!@`>5l1/$R<'8fV8m%^2BiGCatNG\'QfQ_RU6:&Lg`m$lVc@E>)h+]jssTG]s=m,GW^`)F'5@bGi,S-@>tt]MprVRORIX*fgsk[LK4"r@,9\1NTU8+6Xr4%O[i(Z0HjDsg+'FhG_]s[Lg4mMX[@<5NamY-.?1/om8q2@,(dJrF9l[!7MIq%)dUf_+%EUMlWUto5A#VnHHWGkAYR1'"7_&A9@HF_%d`\]jgK"&!=:HS%'/7j6)iB+08/XU2>C6maZrNdb:0GFq(:M]#DKH-PLcp,)XL4"3lT5PGQjsd2j"V%/0b<UlkJ(lF^$ib8o<G;u%*KP3@"'=3#-<Ie1=VB@U3t6%B\k=6Na0j)+@B^&GQPs4-/GD9rdYWk`qA`oipBF=2iRA%TFlu71<&p!AllpEmCZ8s+>]50\Qb8rb%(dc+Xkb\cn*0)_:#]i^p_'EK:NU;[.?6NU3RiK:jJ+(_lme]i;1*$hNJWN]"/qTl3EC1!I=R8q$3i"++mB48l%d>T4R3nbf7G-un%LLNVT!ZT\S6eXuO:9;++K>85Yd-%>O,4mna&Fg/@g!EV;=u/N>Eep+nEVqebGbpLq9`uj]q[K$/*B@j#GYP4UGC@AGJZ&`=(G3:g%2fW64.[U^I1"4.O4BA"]\>@-@ND4O]o:\?]-h$9k9DU_>UAJM8p9.*H3XY5k<_92Z:[b;8`5?_\(;`*Fd@fRpY1UWQY8WRriW+QL%KFJ8q/$J5TdcJ3VM6=jT_1K7=Kp8WMKtW3acmD?I?'XIr&Y6))Fb3g3Q\SrN;HF0N=)Q@g_?Msd@=_jO\=6'_O=`MH?"0aC(Oar/%@+*)bn.FVF<s<DRPMENbp=nn06*XKr<Ps/PB1qR,LA%&76L>-hV%BnTL[DoYKT2Q'P"D>Yi3'*ZISuMI:4M.>.2'?.elbB!L=koo%!CK]kN>X$(*J-l=dt.5R4b'Mmad@'qrKb\BO0XKCqIY2's7*e0PH;,@Hs,!`)>sC/YLPcu*=KolI3VoS?>3dN5]=HPN.Xn,0?:R(%E);qf\1POp4YU80X!WGA7b3)g,M02Ihk;25"]"./:9OP:F<nIf/r2(<Qdo.Mq%:,6n=o>$&Id.5@*HnPe8M(lGOZ%tP5p$L03m7X%DB6MMP_rk0gEm"AGpRR"g21&p(^->nK&:/Aa;OV.htY\-T=V+>j1,??r\OYNAS//JkGc'C=Nb'Ebsf4%d7XnN@4N^uELpD.)WV2+%>#ZdR(grIY\,g(JO2I[8atGQ1F:G3rYQkR$=p'uEaIqSZXos^7,mK.W#QUD+<e)l%#,XD4IP82lCr:kr`]>`?&a?.2hV5SF>#42+%r^_Z,0oRi/3uR&bN'7T;,2Gp%^Fi3*1,PX4WKE+ML`7?t0jLrVpG"Wec!Zdp:3dNlj[*jZTe8EgkShY5!n*.F\E>QM[]iUB)Yj#!%!]sngXHfL0D/Q#sdOMQ%o@SQtYtn"qYG_\P)B;Iji4gN%W),'u6?);qXA'pN^%Tl!-1*/;a@ht,5J$Uq.Ftr4/7?%)\o0/Zd%I4/%hLsVf25"o\&27:a(g%%-5cq*fH'lsYBm;p%^as5'+/,Om!Af;7#j,l*ib0$>KeQBqUu_X8>#k^Gd1)Gm_+E<\?q/\ZE+,/:Y&E5-%W9-RPA3G'#j#'D3esqrcjfEVln&D3sC"l)m\8fA3K!L@9PtMRn_>mjn$QLkdK!6NP`"`MB-n<-?%+IOBM>&+n8HYC0=X4(.BfNSZ%RkV[U-Cet25nG_"OOS0c;[ZE;>/:U\2DtmDWP".F($cfAi>.CTK%bIW'r0@-]+!&@i&b,o&87um)rY&3d80o\B!dkId0RR0Rol<C%7NJ/>)(?u7"2MVc$s7G$%U/<fDo+Xg@]sgI<5/SF"@9+:i[bj3_)2\OZ3"h^:MjTm\;[L!UM1me%O3X4M*WIPm$1<Cea#\lY,`3l%eVV&0Y`?OD\1P,k(a3ni[NKde$-O=;.%<+U@hZlk_$D,:XY=3\GObM_Sua:0%#op=b;'8M!`?b7NJmjo3&3T-hLhqQ[fM+cJ1M2W%U>oq7F7*T-"6RiQ6Z?4"YVA\r`#dnT#T2"D$oK^DWXfKWb=W8)[LEU\fS87?ZNc7T3e53MC&l(aC-n/_&I^g@'/MHjRQ*F:OSBU#%$SndCJMH&Bm5g0K:UYkDfWbhRZF24)!mh#a.OVhOZC9DGK'ONgi#WUp#+CGP`JdFp>4paMN=/=/Ga*-)71W(GGsQ+_b8#u2Es.%J%O+p[U0PoU/K2:J6DUXJE6>3Vc4]r+K2hh/^Q8RO;c(f-;-DUZXGg9N_2Do(Y#R&<5I2[DN,&VtD,d@e;H<s?`%GI:CgM@fFF'D/&%N*g1,#MNiOYIR^Al;;ujhEc3['DF?A/Q4bs`U?;4MSNnRQ;2^;-4t'Y&;N-7"`XnYg%p<;#j>]XA^#n=(g;VGZ6W?Sc!]4j-!C;L%TX\9_rYIl1D?DiV)TNJH_7R;ckh@@9$1C3"0S14FU0S/CT]1;1UNCAi-mqT,L'@Z)[Eu$B$=7ZRN@+YJkZupm0Zr0#C;&$qL3,2"%S)>ZicSW&RN[FbSdWgFr+f-bmpSgl])VT-BBU.qdTsiCL8t/g;fh)@7=0Y:;26''&+FGPEd_:6-W76>.64')eQ*?VO"(WQ#!:!I^%BnIu+L7Hp"2U'RY1mb=5@W%9#EChSaHobb*2>f33)\o+iaF[b6N>r'(nU^5s][)e!&[VV"/=h<B(K/aQ"=QU@F1R`<,s.qlb:6Eo%r:G:8q_u*BWI[MRjQ_D@3qA[nEBB<DK:u;+,(p\S#UClb_bq2C531gZ=_4E?NKtl.7%0,oD.3^XnZ"!/%HsSf#1?ljfDm]?ESf6g%0sL=+?Qf)"EP%0@Pq3a\2Ob7:C0f*?El??MMb4@(MQM_V[DL9qlSY%%[IE$Dg'fgD%)$C2lYC6E1%K?bf.nW31p]p2el!<-/?Xn3%f\-[fNN-l#[l!b7/)D3LC7e$>YS7tk9)*!,CE[)L?KRW3`0)l+;0A]>E/pc#<jn.\la3XC<(*iLRL:I.3cG0:.8F2='EG`O/9+.%%$Q:8m9dB=^oQbT0+Bb'SrB`mb:^+[b1oVT/V#Ehd.4OqZJcl*A]]O4+9+3l(S-Z2(e]TI4$q;Oh+kJ(.L_um8KGA57DqgSr6>D%i%'`_FaN<M&*FY<`Q/L8"<pZ/o";ZdU7/71p_l'Em;ijQ_05fS[2EXO[2AFHsuZuH6"7e#Rl9BRm7Rq8q5MG^/Ta`q24Q:Y7pM[+!E%P"An1)dhBH:Dp66>qQ0]U(AY^Cj`GqF@fBW\@GPMO\T+h`^(M^7]9.iU)QFm^.4hQd'SCBk2n'o!J)Oo,lpF`%\t7F""8sPenlaL%5uA#$ACikB<aN:RoYVmbpo&=lfLUSs?oHqF01%(='-E/'#3")JEi]uV."[Xg#6%'](4dShaW.*?A;YB/2G#eY(_>@THm!]n#18O,%j=SG@@MjsA58'FP'Eqk3Qkk;f$I*Anj!GBu/R/rl5Jk&Gm)4Vr.(+[Ec+GZ>B&5OEC<qg(6q`3`ag>UfZf26c.ktr;/G2(T<.L97%/nq+lSmAOs3c,(iaO"Qu.C*i()!G5iPdW-a,<0Q*`mV.]TFtZZ@ZZ-a&M.h:UuNT<QO^rb+jcu]2iX+S2P:MY+R:Eh\'rHXK$$dB%\Nm&eg)K%*bQ=qB`X3E]`+4PZ+R!Q*TkEaE8tMc@O]WCg\nEJ(]>7d4e3C2RT[c`u"uJm4ZA"Dl"/'F50ABQ,.oB?R/Q/u?la9kG%N"&V(OA@5eglYcS&CJ?p`OKC([NQn(I%CRZ4Q^iY(0/BW2Qku'b*'mV5`kYU+X%K&8MXB'MB6YCQ)8Dg?.u+3\$["k7;GH/8"9l,%1u%X2MF#,Z<&/+f(pnSiHSIV_3#[_]9WT7BY]<,l%UsT0WhW"C=p8l==HZMlJMu1lEAo.NS#"^S2*_W#:t@#f6%l.?'Ga,AUhS2L%fZ%ErA5>M%1+g1CVEou(RYhG*fi)Xo>Thi7;q%nr9Tu?.i%-rKaVk3<BS4BjQb^_+>aX+p.`J]_dL)##*`KfAeWA<f]F6;;k,SWn%"6Su?[[ms_2;lF*Jmb&^BAY%_[[%@HfprA,h!\@WYXsM.'%iJ"dfpY3"pVNahfqoX@C<!FECD.bBNC@'-AgJ-4[?L(hl:kjV_9EI%s7ag:kYjUXIbXB@DK7R'.#(r%RZ>F.[(jujAu@W%'2Xl,Y]bq2lW;r:n7R:AAajCM*!HNc\&Ye:2;m92oet[HfRuS/""aT^]f!'A%#dsjD)"`@jN2'5SJLs;*GP_Oi"3K[.ehd_M'I5dBi^KsPFNE&<?QY+4lJP.r\TDU$pC"q2-pG[XGa-tpW/4;J=fl2WTJjTk<`IMG%kdMe@`>Ag]gI=b;D(LaMDAX/,i?CtG[*dl85h<'J5#F6=JR[#E(kJ+f#)X&u7gX',i!-EDL-(<[YL$7CmY(f!_%$H^'/]G6$LSKC%P`j;n,NO"[X9E$0GDa27Kb=q-2D>]NG4#CsPgk6VBnC3?!d^ElTV[2^5T$9gJ2g/S>$XcuPdD<qOUtg6&K#_&l2]gJ)MiBje,ZRi%_@5_Ok\2B&j*!o-[],\3g;ZU@UO,KmT(;)hUNQZs6`6>?$($1i*_ns/0OnL+<.A9o^"\J_P!]7`aF6BQhK#eN111<lOYoIR)LsQ$%6VCi@e5moCY+LN.,qFSAB8oJ`;14NS>,b:I=TfX249:Ro;Zg^+PQo3>'nL5V1,*I8#Qt=f37#*hg#*&gAhQl0C),&'qJS4*Y&.&M%OZi;L);D*%$+?V*S(csEM>A0+BpU,BC:C&4)!,>n0A.NocrlbTlWo_.F[jrgF*3]#%2^T]bQHnh#oN%8e3k!I!=7o@>#onn'+*%R%gJ/V+%4`<1":WKU>@Phc6t7!TJ@HVN@23g,XU<L,8Q6W\B*<<'c_TOi2@?sH9S??OF;l?L@p:*G)D/M=AI-lW6o9Wd3pLSB,8)[3%e(0+jAF9j715*X^%2^Zq('U67Mu*q!@N7Z:ie:;.VH283Jq;$!3"XWu.3FdO\da2hdKl>jBEY(7/9R)@:*B685YM\2F?n'aZ,C]=%[\X!ekf,dD9a$#:#[_*"<@Z*R^hXEX"#2Wj)Sh^g"JU),]c]36NKGMr'+3CThI.&t"DeFVBNIHdd=N,[<!;,MlI9PfUoa&WAr-f3%J3kE)UQ&X]V.8P^/.jf@X\$-!6[T5k+LjJPCQ.>15c5N/IV<P`<is$Wcut6g%%=!np]SdQ4)ISa$t#*]XGOnQW$nJ7_RpD0+S<-3%T;[<+?<UYR,dni"OnB=tG5Oi]MplBNe^rS/1'!LD2Kh@G+_qrqj>?C4\gGgqS#,tMU5cdsO"PY'`[RMuLbU)9L5'"=,#Zl86&%cK%oHJWj00qB#5g`%o#@_3g!C>E)Thn6HLb;f'1_;>J3&>k1gXKqSj)Gkbg")_mM]+jIVT_AD=r(*-F_I'a0q]!(0hh0_&sc/WqBW<o%=WH(s$6gGYI]o4d/8+KDUSkHk+s&&[2K[f.qA\hP!7Vi4PP>6T<`?d?TdD@0!(Yof:TcKYeiVmp2'hs*"-&Vg`E3=Z!'$lJ],Ij@%;[0#KR)+eQAs06Sbb*rS!1LiM]PZBP/uE5h;R!RhZIT?8P7KMP6.QOOY;T*i+DPGt@gKHggPD<,NhR*$F=dnAp2hGrMi1[kj.4]G%>Iu\u.:T&5D4l/l/94$Z2p+ZobiBlUe,o8VpMk#&+E/OpkgDM'E9ie8iY]O_GrA8280jjCABJDX/iDrCcDir`:tCP<!3ZsXi0B6F%9W=*lLf";.7$]FOY^jP:&I8e:\eUtE)(:(FJ/rq9\,kUR#],`hDUgKF)h^pS3F3V;9jA.[/rR7Y"3'<'#/E]_J<;LNH_<B^Mnh71%!5O+;c"1C,(3N8+S+'rMUK?]eDU@`_GnNG#d75>J'i7q!C-3o^.P]d%<3+M6o_1-f1'_\G<1S?YdNAUViK@B$r2s1!U#D`2Kn1?\%EN9q]5sUf!l%/Ol2.3d^>p>?(M2Ht$/;ofi!rCIb_5mni)Fps+[lX0^;t+c//Dss;XV.9=!F2CImC7^,(]^;lN0lIHYpJgLP__G(%d^RGJ&59r0)pPise/Q_&>m<cF*W[4PWq1t%eQ[(Z6u_c:F12jkJG19G>aBM@'@1t[XD(S=NMqe,>l=F8^.tU:`;#98UH[4'qP$9&%Dp*'[e3H_tM]4P<Lu8lt#SB"PF(2>/bBCLYBc"8[(<4atC+U*RAm\UB]AU1"S];)CJS7K'`1,CE,.Ag;)%DL0VF@Ep%CORS/q^s&%`[,Y@D/)>"N/^11RPtraCKV^e-F(nT`o]oF&C@:3P@ROD,.GZE$%[j!GTbFB/H\VRXUn?>S4X6t8]5Jb]S0(uNLmqWl.F@YG,N.^%T>hqV'9BpUXX(rs_(@JU2]EVGkY2ttCfUg2D*<Iqb9`f?R658!+Kr=H8^r8*XXK>k0a!%_PsUA&CDf<Lb=b]c2"UrR=lP01.L(mZ%_@5GL9u*^7A1f;?JB03'd+hhQVP7PMiK\)^&n;W!Wo(sr&l08TcthTFnXr&H6RrkGK<TG#]36OInJ_#_"t[;D!MbX6\#Qh)30o?@%55ORNL^&'8P"`2q,*nB=1aY'[lV8@kS_XE'3o\AX6^rT\RO.D9<1c="4Ba+Dj5G;raG^pom'3kH)3sL!<[F4L8bsc1/d-V>pBpS8%@4*PXKFI,IM7AYjS2*'1ftpsY[,A>-MUc6227QFA6'c@^C,WZYGtT:>6r-l/X<Yl_"K[5p[!8`82IL<XHRV$aJc-KqPFbKK(`B>a%dH7PD_/1*.9?b^?W$VngZ+=Vr]pa2DP)[U.WtmIrB\h`MS`eBM:HMSCJOl^o:bqc1-))bc"La2j:;RC>i<W,IhOqPZH@RGfK]n'\%<h%#=RIB&FHm;>@M9L\!aWO'*R'qQr0d`'NB8j2#TGC`9%T\KQNo4*=AOjoGJOW9CfG%aOl,l[(g85(Ko:B9C]],0lD3@#V?%[Yk%(u]mZX%-PJ;dON]$T6jr3bmMVXeCS`)3n_mMe40t6.UT<>2PN3h2!/jRUWmlPm9R@pghWaKoMu66U=>mDQg.KbL@Nb:Ff_'m8M$E%G&D*CmOo$BFslZhfi'd5m"84\NW^pSA!:CJ4#+FgrX*[T&f0n$g91o8B<_\U6(2%#o+,tT=)7'=HUmk=<fBWpMbjKkY<.i&#d(b_%Bp5t`So[Pu\-01EgI/:4!JWIMbTUD+m9+T:@4$`Kp_@7k^!VOSST:d5'bmkpJ3]8-KRp!)<8I6r'H7<l#A@&F)I_4M11qVu(?2/8%kfP*[A$ZRXD!E;CkuOYW.W$@DVF85,$cfrChkW^;C_BN:#!4)6nb=4`M0Y60,]MU]\[.;+B6R5:`,Hi0-ngKalnVDiZ#*DhG6DI2%@$Kj&BK`F>@0iU<"#-2H$rS>Oj"Yj,DNRL&lnWjq/IsC8&kbj8ZPdW.9.\!77W_ZkpqgFl?6dQgZU*A_#UZOeL/LKNc,^)D;m_ch%E5C(1,CJ/uX2PnqYsh.E83l&XD'Omi!#ER#(+@pp_62&*X_eF\`:;6,#W?"68]#6n7f'RU-q<YG$B$ZD=V=&?P#!Y'!.g-2D[LBA%^b!r)%jNs)0^MuIh3*%;#6'E5TOkI3CW$a<-#8XA!A&Sj==:AL$aL6[JI(ni5/<l-&aXV1[P3klj%0`cf!Xl8EYu)44\^hBTsa-!%_4@=/-#qS2[[Hb(0>a[*<,TQE@Q"Aml9_!nJ6?=+1)#C;Bj$6h+69_eN7QIj!\F2^BO6l=%#_!rd]gUP$q5-r[7.m.9u`R=U7EIl%5/$9HT`o#cDD,C5ZYVmeb6Sdd_t#e&@Zgk[Ve'uq3(QnTS,`t?ihhV,C'5kh/abCD!*TS<aa;lCSLms#303Uf:-rc=%8-dH/%:75%97XH?G*K?FOE8U6pP+OB(06?f=]`]$Nm37Xbg\'WH0<-2/+OQ8i$f;0`ZXji`!b0H1.NRn/Ot^LKc34sVJ%9LM+LkV*!>)d^5.%r%G*>e8Sp<^sa!.Kg0?uRo^kl)'f_jf63ma-n"#lmD8;L^aE,9,sd=ML)?dj9>67mPMn8]c']^c>;!sidm638$LI4[X684[U8^aR_f%it7h"_(9;5/-=0F'ulH?&d'Rs!%N?bI8/j=`cir`j"0p0O:A?FWAVCB<j(Uqc2^o)TI^j-%Q<!t'MJ9d#4/Z21u%F]0-LBAMGE8U%/ii-_Vd[3s"_)s:7?`UU&l&Cap!rSg]bp3B,u]m?q.P4\n?AWWLIOPW7N?1&B<4K&&0ro3?:sDWGu*OUjRI'"OJ\*Y^8OW/-2LlC%^.A]3$"YNAa(_kgcXTeGoJCKDYld0=\&A9NCb8,J^fm!V/XUAf@:JT,Cau,R%7luJ.uFQ9K`Iicm=FO3MC7sEp9FKa4A\SPGm520%XqAJoFF2fX7$*]?T9q<+<^t!I1Er4BSrr#2"5-Er#!?^p5bZ=0`%tLXhn6Nc#PE4K,Z6ju5c5*&)UM%];Nr,XJU)CE\/2?/'qsA0%Mm^USiZ\Lc[O6>P:*G"Q<0*.dR4tJK9C[/47">8:p2=(8W9MGo0A\LD-SLF31*e)A((n\'J@dAIKq3f$1;[.`7.C9,jou-RNGFR!%E#@H'jQnjE;VA:><Dd:!q<DeanlZT%KiP"K:)Wg4k'RT)^nPXD_*5-S<>F?m"</Rs,rEE,,c@^(!V%"u6#)NSW]U@3]<YoN_+MQ\%)n'Q+OKI"^0cqp+q8h)42uo!Ve:sC):AZ>fA(D`*4L.^5mF48mA/PJW4QF]`A[&.>j2AIi>EPEU*.n\;MnEJ#$9%*=51ja.bID)a%pNUX_Q;:_K&]pf316'n*a#J&hO%_qU!&kV;LEf12ML\=\/^H1G/-N!B=(&A9![+sD"*906,$+O70&;`_]VEqAH-_e"Z_/Xb#65/u%-CrE:Z(U69<+ULHA6]Q_jZOYV$s"Vn''QRIAE7SrL[dP??(DsWfP'$^]*sPXnT_LHKn@+6JOD8&U%H&1TI$ZrB)YH1dC@ta6>Lf)%h"MWnS^^lNBF(!Cm%W3)_AfqB_.0k<jo37J/[ct&%0fVL)Y%:C=ifW#k@AetO@0)W.57eFEK<"MiVJSD@m#o*P)Hj*4eI!jdn'.!%Z3h=&(.?5X.G%l/[Y8:p+IUY[*nZ8+0u-O$K#4I8.Ojd>bXWq94-hb@USChP?Ui=Q>Tg?>@3hE'#-spJ2NTm5LS%u"7PE5[ei8Gu%KVVdB"'UUc.*@n3C:<_S0HbP^,h#-Ol=/El-A\>qb:4)]`Ia,R8p5VCg(M5<:.:.E2X+7/U_.:9='c1^RnNu&6_39sc-.*>h(BRE%8GDft)p'%d:\@qWlF06e`R0W]G*%Cp&g3?)nlPTe6@bfET]KIqa<np#-P>Ko6R6Rk2Tn9/7:u?o#1p#?WT@X5&^94=Oe\;n1\N"C%nj/$lq:@U+?J`Z;\T)-%D>IGE&CIVa9t"qsQkE4O'!1jB\J\4/mdB'/qPGhi(OgQ>K2/dXVCj1`Y6=-#O-9#`YbM1;D3M7=g,p^S%$jsk]j3)g*e;t2)-urbE)G!`g!7"%SM,FeqB6Dc*!n1o+!@e*C8Rn!53N-J_kPZHQk\Up-WanC_Yf_;'H)Etr8)qe+#@KSA4$H6Y%TqR^R*A/F5iBV,1WeFqW$R=dkPnDYL'OeuCT7C&ED).ht?t+iC.>!qlF`K5?S'WHI<@hl0$pEPhB[u2?-DXIWN\\IX"c5\`FTm<.%:Bs'H+UtY(=9O-X<JE64#nVYW_AG$M$ApN-?sUs'EO8i;@oi)$Bp,0!@"M'=bbn,2A0@b'^nb4l$5$*m9"JF<PQGgJNlmPN11/C=%OmE^dVR(!D8]cDcd(E4G/I6p)[+fr]9nFhfSSSI`#-p1NZ7888=)!j+]KUHnMkSE=Ahe+P6HB_^DCI-+,.0gO7:;V/3HZo:0Zg)j%BFEeUL:5.HEEpTu*nb`%JJJ'IbZALuPct,j.LBgKmU#..brZ^\5(Y587h^YD2de\cP9M5*ohB9:*R`LTZL3eU&VDZEFJ=pap!Kuk%!Mt@\*5U$+m>+aBN!\(FJOBZ*qkPV3G<?\3_[Qq)(l:PcZB`Fni$g"@9b(:_aW_EN*)"^h_-SJA4<t4g`YBC%Z,5P^a`%q.ZaY0/%1W:X2il4o^aVuh?4"L`5n0CNrShc\@X>gK"22<iCM]..A`YC'7dVKCi[DJX5>Wm4f75?E.,V2)*'T`NXQZ4Ht;1s0$?Ar,M2:/5q%eeg_+%ENfBmO\mLQ0>P&0N5Ji$kmP*Y*q:[,dAU]B3s5bO'LOr(*u"U<so`I5%0Sh.\snCaPGF3C,#s;'+jXb6SjR0Oh&Z7XcNVM%@aqTOQ`2tT"/e#qCb$kX""bpld?$_-fPHFcQ&sdWdkp6(KuIe5@N/e[ZS]IF3ehkM;Cp3Dk:tu=&9<dY<ht9d+]Ab5CrJ%A,JFIi%d<%sB_L]('Bg@8&K,AB5(pDms?dZO15c7LG3Tu7kq*[dspB=KNNJ:gD@^I$Sg%16>]IgUW4c*KW>?N2QP4ORYqB6P&Ls7=<&8^G6%@sV9KkJfhLP(JUCO%4>=JENTD$RUuN_5B)$JW<DX:Z3OPl*O@XPeJf81%t^pNm"G"*8hnu;%X&7f9rJW3Ph#'=p@#j[kX&0R1sqt%@S)i3?lB?::AZ^0^?I%rac+Zjfg26*^.&$:RUU#GFZ;EA8PKId/:iYh*Ec/EQmF(0>B!7o_OSoKq"t2,BS.R<(3n1b-H@=*WdQ?Y%?oe?<l=\mQ)`d<,8f@\83mSA.F0YrcGVDi)>Y4],#"uaVOTUlMFVa*(<p?>a"P2gB9?c+RFDW[aBT`l52,,T6Bt_t8Pn6qq=cLk4%B5.b7\Qb]#\DsjG2X@r"jb\3+LB>*#$__-_p>EG1KH6^'U6[U1ieTrX#^L3)?n>Xc:aD&d;HkpH"Bcug<d1it`<46`:KFq=7Y7Kj%0+<D!0[QUc_1@2*1$SN+1'nCURpbWCXRREf6=[DSdWBRSRRUj0-.3QZnP180nf!AL#+^]'Kg)3PQ`WFpS$$ioMh[]^RjKs\;fJes%[R@;!$QbnH9E]sYB<2al-BFQ71\;C8RbWOCp`[^9&?hhkP@I@L'<tGc5#No[=A-"%-DAt;kWRU3!,>YWiJb[P$t_pB8&8&gkRn@p%$PM)dMhs9T1n/;okZ,'E7nNUjJO21W8UBU"Y%``;3rCTOE/n5@0j*.c&]eU$]f77a0CKn@/$nmc7aNhK[%naQ^k%XYKH(3D2C'[A%71[gsS?;>B\NFGB*'0.I^%_jA9JrOZ@(Ue]3##[HN1+.JNie$=bj.`T>J*N4eU2O[3(406eRq%neRHOXJhI?a@#UUgg'GeD&6$aT%T!@A@7\uJ5i9>n>!>Q]"oI1;HN1=mq1a#O[b9@Xa<sfOK[34P3^BC\Cj,R-R*;\-"TJhY<K[7Uc,GFtt"F-S>X^r8Xg`&-/e%p-u%\@m$!A'*44j5NDH,Y.Ne3,aFFnptXK"C`?C:i4EE6SMZe2B<J<?LIJR0RFe=<t`tcMnKs!6_^5NY'/ScMIXT?A5Zq_1SAl/Ed@g0%2(=-rfqA*&T_UK_cCPY.]V6flmtI1&#D7Q7d><U2cQ]la`SoJ*AV('Y"[9?>5juCfg2qon7A;#HZNK'/Z/?D)M.-.+fJ2R-VQbCt%CF4B,#jAC`5b,[soYRQm'EEpU>*5<n`TK1MS7BDWaC,YcMdA=>'Es&39[t:P3C;U8"(3lZ*KVMD(hbRM#?)%Xg"Onh'hnoS#[JEZ%K-tGTYL6`g<3bfEFBh9F,@a'E<_agC#;0s>)Q>B&i\<"rD6+"Z)ArS!\bR(Agt#bK5`on@%ZEdIlZ>g^;[a6lcTsbP)RC/=@<$<O%WD;[^69_VP;mJ`%VV\0S33Fb7EGsk$Y,!I:]XMcWU(U(L'W^PcZIEH*iKV1F1l-K<`N8B%BL!d-CG2CRjf6AMRU0#b$q,S6kC-X/%bp^6<MT;FD!uQE*((1YFdn(qjZR5a:%8[`^$M*Q"CK*T(nX'P=JEA<6-KJ9?'+`1*;J_:;7Z[_d5%R!;?sb8sf16ebT?5HUbRD4O%&S0!d[:1o2IaRH!KFb2HQDaoljQ!qf3-l1#,KXON^0/Ud.a4E"nM0.0joOO>EQg">$SRVe"peb'D\f(OJWQ75g:K%7L_gXk-`$s^%VWPFKrXT&,>37!il*.s4Uq[@o4Xqtr"%b[EYA5Q-%DXTQ0pq+60sWHR=E_pqalugiTLJ7e.jh8G!aRQTq.,;`/bpe4\$E!_3gg8$%MVY3G$K'(')N)u,VH&L9!ZOCD8@#R8kc:,,rf'egTs:sY*]+>(9&cMV;!-CrEt=hRNQH.<jgHecml=>o>$I8jq&GA9h)$=MabjEl%!G>%4(^cF8UDpepKtoU;);uG*B`1ZaakS`VV>tV*S?1@.%`K3YFL'c33Kso&:;R<S$IK.Db^+B%3bcC:?K/t/0rt%<+@Bq%cun*]%Rm@qY`>Ok#Ti6=AHasF'<etEA(J_QqmO>nI,uc:u9O9H`BdBLKZ/R!BB_RO,/Zne=N,G-cD0C$+>Si#uJs;N;I[),5<]dNV4_(<^%i_lRbq07KeSZ#IPDt$'Z!,W(pbGXmO/L=-rEFC?=o+FDZ`-p-^5BdNg$plISUIuFAXHZ+geIn\9NCm%k?@X$98H)LafYrnS`+0!3%lp8?g[LfXV?M]r)<>9W`%74B+^ie*"@q'+p]f6<_a^2M/6(i';KrWX=99*R^."NfEq4'[(7jY'_fdA,WG]HW.*.0h'$,(Hgr/E<m%3@%_)E8G7K3#umi>LuU_Hf5d^TWT-%?,CW>'Cud2pp6JGJPDGIGn:a\F].,&32t(GX5_3)m/YInY2rVg[,HA/)pN$>$-X8@#ok4=%7Jq6ggrO2'!r.TYs7@Zar"C$]E%C7tlo*((3a`sVR-:nj@0i1"e%K3T<9%jK=3tNkAc7ml8@Z_O1%GrYi)LR5pdiLQla(sG3_BOd%l%;,Hg:jXp_cp^p3;m6t(K=+<0L,<Wa3\e<FWD%7ekSC<NWodu,Im#iI7dQVN+BZnFZP_=^-*E()ZcP:h42g['P6%1gE?I>mldiW%@RCW88Bl[^/Wk>SPla(O3o)=0VLau6Xpk0>qC0]9i\'BW!5.9C+k\TklBb,je7#E\`BZLRo#_]:ZaijaVFO<45!G`s:oA[FdjZ?F%lq"$XqHM5Hb24's)'Y(gq)`\6U`f#u=$"@6T#qW.A.P8-B`tNb^)Wtf+A011XopgT3nEOL*cT5>+?HN8aYnZ^ZnT4qLHjN/nXe.K%'STscLER9e`5<.h:)OY=1W]%oLn)4@!I_VFZSaG4oa&WH_`m/1iUILd)BBiJ6r_<!UZX;JZdC/!EpCdr::*E/`ON-Una@;mqT=M,%LDMG=SRg;$b8NEf)1cgY&VD%d#U^OaNHcs/*eL4_l60m\U:j)U`$I,J0h+=S\J!hS68h;n]&3V<P`%B@_4Fe\j>On!.IDJ@^^`/[%FOIHGb>rI:i6jMC7#HnXk]VI`f$d:nXspF+l0t'94/m@ZeW7j.4+<OU*GVuT,Sm2g=os-fm1G59HIs3SR"68!QGFE\c.YjRXc#ba%OKQm^!6/H379RN"!'@;p@&F5I>kBq`>)[53#NsW"D\LDb3=5m%[)NH2UM[ko2DRX*9uif6b$bHPg-gK1o)mp^"!G0A<Ks%aRO$/s%fO2RD9>KcJ,T@2))Y6&laduukP?.lZ2N``4L5S;)lqm2tZ1;QtX#Uno;R]@P%QN:#_&_ofQEdWQ,UL7=6PNRp/]@`u?;J:f/)%Km%=qXcu@#@LT+!e+DBp,3nK,cKK>brE\S6%EHU[dfCD0M9SW0g2tl^VoB/jdcl,Iq;\kB%+`N6ml2\-"^d`*:5SH<4n1@A+)tB+GpA%cDqEl%jO[>)Cl\,0`]si6OQE%[WPRiUl-+[aI/c#=J2YXP+DrDN#*?:W*c:\8WXdMY=5ZD:l&7H&r*ZdD;C\8^up$hX3QZ4PcV9U%g5`'H"+A,iR]$3RP++iDM-r#lS=T#7[*Y_p8oUXo+3<k<A=+drLW"?lD+>>Ikq3&HX`ka2<\,,12:F)lMi5K/McCV3,P_n,"TaeR%KQmiSL2&G0P,upb8B?m0K/DLK3Jh5J0j6_D>&5]TKbj&7,aDb<'=+SGn:ARIPoeb1U:(d9MlMs3l0Jhq::maoZ-aSWBE5t.o@;$R%2kOH33YQR[[;oZp-M<jPOVi?eVla1.qI&g'BQs^5kp#A%!G95Hg&2CSJtdQCi3=F=6Qbeg$g+%CdLsi%FKUN;'R<ps_lkb/S9GL0%F^i[kHGXp?l9['-/"_"$hGIfa%p\,2@SduT_hZ'>,6bT)AH=FHIAPOPb&PmJ5pbOs1r1Iem:_5n[YO[1(s@1S3joN'2DU4!LY$_H%\jos7Y?U#iB`h!P_baZW,UuB#%ua8b:0lkn>"?TiVId]aJm&:4W@6m0"'(X!fm5YL-FL%grU14SK/pF8g<m&HS^mK)crPq,IQ8cX%fo$Ku=jNHjOSjUGbIm2_G+@,-nBJF$fAGIl>i/gls8;-sJKk7L^SnmFJD[;o^3]`rIm(?PKP%5KViR%V<.FoE2lGQi]NsO;UPn`U%Mjs%=gYX(KiiC1nrcrX3%:?f#DV\XsFFUdtpuURd<.CLqhOaC4SA2hKI!`K<`p]D=T>/+SbMV9^]AGe'n[h$1^4%lMr:'^PNV[\d%kJ(;0SAU\sU%R`D]+t<bG'Qk@0&Aq:Td%#4?jZ$$QMDUu4d>f$Ys\<L_ZbsLr::fGEV%Y/0@0+L2ttpBTkj7h%DC$(H5DDGMV`b$%4hsg`-Qf@ga%tEm(N8d!Nuf+(hI.W+D=gqZg[U\W^V'@;rS?\r8Fc^7U?fG.-L^A@J%EC"?Crmk,)*%W7#AS>WJPb$gTff7l0RI$%jECA!mK!XS8[hdea[^T(oD7n7mX,,oaJ8YM9E06V\K&p^4*@-BK[&/C?/K";GCFc0O"Eh%<dF7eiK>-A[bKoaqoeLL8;`Je5\ms6%*pEI)GZ=%Yb9'B#no/4`_#"d@aQo>mg[jN6DpLV[^Gm;e/RFL0Q&Fs@TX%;jb9ORnYe3-2]=AqFSm5^%f?VA."r>XTU?3=pc/RmN%_p-5[].o6+pZOjVPrHGScUZ0&PHT.7gG9(ODdX[mD/X'/MM&@HX#'>Pd.Z>PSq5O@q<cGG`ttWANOJBue@j[;pI9)V#BfL.mN'fj%K=Z8'p\rP)hL,-[jlPh&B5_^;I/tt7=3XB8qilA?]$N?VZfBcd(3B'Pd"Y#JS0.4V*\ID3EJ>Lf6C]YY4o&?HPS9$c01EnVl10:U%e?ZiPoO#r45CU7)]:RIgpI1Ah]nG7&kDX>OK/JZ2aS>/sm;qX/gFSLn?gp#ChL/Ycc!TtGs"9=NNu%ZWY_nM9\*qVfQ`n`]0#sFl%]9Sso4rQSo&'OSAbHosBc1T,hZg7,a[p&;>9]Ffeo(\h!DQ]=e(hKlFjJ0@UE>50NcYkFSDZB:nHW%=CML3*T6aKbg_!"!k/4_JP%h/=F?-fOX._Il1!KV,LTq:B:br9H?WBY25[G2'Uu8o6@9>?V-#8I#"ik2Q7*PdUJQYX^<Qo6t]%9RDi]Te/:VXu#((ksfo^/S&X8%_JW</^1g'k3(\:I)3!DhIbA+H-mf"Rm]Ic+bP5*.bB#4tnM@IZaQ5\::="_;57md0]_I2+hp60nmbV;&n&CE%T=3(JAXm&`3\N/S%^-B6^AC1+(n"'?N.rT>QhO:'!dmSYk]`!,4R+ro0B\UN!''J9KlbFZSk`KC9qteRsk2p]5]3P>NZmBs@j+Zh90>jIV7lhrj?<h$j%(@aeJaJ_7bW75q]l0I*1[hnf!Q_5&M%iaGECRoAs0$hOa2>9]&*'H`Of$&;[5Z-MX8TSgB;]<B\rUBgKo&f,mp..&dJSa_hb]]SG%rVi_0G'-%TB(ihDh_-;LG)ISO]?S6B)XXBSS#*jTdAf?3l['Ffqbkc,Da@Pg^?k1U@c\d1^q)6aDt\b0@I<rXIGh$n)UH-68Y\e_%03ck2Al8>3[/XS)rp9K-H22c3\NJb=AQu;3jKu?=QDWSbgDt?\VXlCGdDl%'cIlsOK3[p\S8RLWDLNM;PkJ]2)EjgCfnYS?5(:"(%4'u;GYOB1cqliS[dFB*k2;32c&)'lDO_:uj;0>'_*Hh9:?>>bb]=b:iSUZ^/d-V:ggFg2)*q6fG*Y83=fZ1_q]C?,kpFp[1(.>Us%$t-GF@;d!ukRmb'$t*.;hn-""#iAom?>^FMG52QqHFo,fhq0*C]mY6IGO^aa6<(,WoTm0",#@/EgCukYqT8/tjWMQVDI1PP]`-[<%qlpgcXnD<p%@=i$rAJuaJ0!L;h/:1qWVl0*j*GorF#BP)`59i>N95G32YtY:q:Xm*2`GZqdpT?J$kA?an]^M#r;Pu1F7;f4\r%uL%lfu!l)6Y=C4GSeVRQp_'pD&__[Sc:%;G#0:0<WTl/N)n/k+R,:%`'h\VYlt!\6t]o,MEt"`uu:38'JYNOOfFFqnpsBX#@J9MhW+A%,&lGV@Er4b36_.0mE;AK#_s:fP8spa)(fA@_I4e'&e=MR,`=66h9LenSA2RQR.2ETQ[S'/%Pod`]+PUKr[?_Z>HFl2kMIpF*+o,)%p4_ZM_I81@nRi;dfn.:gSH6C5E1$/?g(st_\bn\h'@!l&*,`C&SnS]/0l,\_JRsU>pt]Q@pWFnh#F"ZSFl8ZorZ[L`*lYcGDmlu)%]Wcq8n]%:da]e<\PCPl+#,CA@VVC1R3H2?\3L]giF0s>I5B*t37lt[s*Tq+V[fACDBEs:#lO7WeKR2Qh#C\RcT,e'A"$\m:ZNEGH%IstEZFl$rtZ[Q>!D=laNMl1eaI!CEX1M5>85Ou)t4nuq#q1C=>>>OVL(d&`*%pO_G'fDRH>l<nHhd?;&H27F#fl(f;3sms)*B`k2%T(D*HrS`.5bH%+,M,*apf8H)rYF9d3/GuXunF%n&%0(e\?VFd0o]ur\Cno#55M5qY2C!Et6X#rg@?Ag"f&kutbQTeG>_c!,]9*E^%G>Fn&`8eD<I_0uOEIBRuAI7,/o'GdX$hd]Pf_GY)]-9U*XnMN@G3'N_YN/J`gn_Y;Oo!gkl&QU\^WTQ\j%Er^s#uY@ANtQR4+HJj%k3Bk/7h?3F]ALE/4p-:]-D%H'1%#W@(i:r(AV9lWQj>8>oIB\#JW*qc^HBP/)*]>bL0P3VmIZ?R#iI0;UA'=bmJ>sjG'e6'rb?^;%IZN0s9ls%I@%XmSh`nm954>3Bj5P=5S/r.?DUX/h48If0mLQG[:>RU[hnbk2E$t+34#sH?F=9*@='MfXK*usFE$6<.aBL/h0@Y]'%\4gFRE$6<.a9NOPi4L%7a?;Cga%^mc(\5Crr-Kn6UY3K^m5km9?Z29l]Mn(:l0Pn@jlOaj@n1chnalW>q#8f(VX>Ee`dY>Ooutd/%heiW[F`qtBD_Kt\]DoBGgg#K]I6F/*Y123C?F]$B'k?j3D-'pOlNQ1tqso\`ZpfB8oBgRDr=uEQj]A+b>l9!@eNY[(/sgchh(IT6%F`VnQrU]5M+09IGB=GmoUoTB^&PET\\V!KA@$3U=j:3NII58pD0\Y'$p90CTqn!:R-C3sfb!.nk\^=nj?G[dg=W*,9cXuW+\qh9b%.IPL-'bPLTMTI;?#l@$\0A>hNrmoDV+-u)o^"mRC\6,m.$rZf-UHJP=#7q[m1!3bk):YGklMUW#&7:S,8gn:1%]8S"]7"sJ)n+1V%h1gnKd<p#>g[lc2KAGZt[lN)X%X+=oh.Ce?#J86sDKE&:F9_DKG+7[INaGu:d4Q90?F.YZLK:?D.#Y^?s1[PN)DCF[n8=XDIM^j[%aIt>6^)S'O#I<AM1rcGbf^Tq"j(DoCF(i5-.mREa&rga\(jCH+]Y(cOrp4*X1[2,fmO!S@n\+OUIqmU/c52[oC0SDpfJ]@CgO,6B%?sg@f6f+e<_u6`S]3EVE+m7?5*I+HJmsiW^g"1.K^H['loBY@uT>1=ZZ8.Eb^3.LLYS4n.P@PJSVTiUH:ZRSN=S(ouj!14GHNr1B%5EH>eZlI.OGC5P>qLZJ-p[7)4%[Y-$o'KJZCu:QYGB'F.$jGSZZhb:lJR+\/Vt#r:_1We-ZQ3)kp-3!R.qQI44,EF$`cFZhc`(G=%[6<EsUF5H\Mmlp/:3,Ti-H#AJqf><r8roU6pWLg4Q,R^<pc]QQgqfrZBd1\0lYHBpea084,J4_c`qY*)N#I&9rpJP358Z9WW&jRR%bf[c#EA2.oZ;KZMCl:i[SMb+$]Zm3(._.](^H9(*p?#h3?o(e(M&CTf'9DJWpC$&-lL<9ekTiGYSUFb7gb/WarUTf4]FrSlp#H4f%^3P-NEHf.53`VUSYk3tmQWp7(l-t!)A'jENip6KBmpJ<X@uI%G<M"Z-NAc4R9;_"E,<@*LhP4UO00&(>9?R%9`=@&^pp5O$5#]=j%/``1@[l7CK)+Q7U%"\D5r'bt"^M#\)P-2Edn[crh1CWB,]''HZ7R,bercEVrS'F4N&[r<OG?i0OUg/3C_7+'_o58V5lsOQK,*1F/%D_g'mZf0!m*Z//&#J;$#aEAk]XF=jqAE1_:j7-V`bfh.OIdF5%cX)QoU7Tp@g]#HHg\+--1[UZG+.(bUN<.a+F`3`U3@K7[L$ph$%R=iBNGnn'@49%V*4",I]L$t](rLjq>QPu2k:IjSi3,!]OWUYt>^k9XNd.e(hha-;g:Xh\jqZCP[s*f%\p?12:n`7HklJ=%6;#'`[%iNk13iS0(qG?j7a@W)/F.c4pMH@L!(]Wg]cSg6tI%Zb=2m^V$#N#.7+Sdu:kOR_<DKtsV4Gk!=0Htggke+7cG[41tc<'\%3r%C9?%St5oPeV$1H+3r.bmXG&V(,k-4GJ@FD[rHKRVa!PZc#rFNZC83?e@mK2'-tLZ>"dUE_N+(M0@M3C.630,rRRU-0/J!7)/U0COk9!\%D1JC6KKe8M^,nD`^-4d97R$$8H?*3dp&,Y])DCo(oN*9GJ7=?5C/8d/gQ"X;2h@M\]/qj`3-B4^rUK;le$XV#Nn^a]:j>35/6cFf%].Z7s[^YhAgoN)"O5;M7rcN4'^P0!AQ%/AhFea"*/MH(DXaC1=N@,fLgmFZhf?it1@i\iC:4::1Woo0VJ3HAUE6:9B6/('&BlCAc%+SWim/M=,*I"j'+D+AmLcOVtdb=@LH=$-cV#LW"H?buY%#'fPC]045.q^*s:`21f;LY'`hp/#(AeBRQrc)G'I:Z,s(Uj&I-p?gAJ%5+9\cmsi)gn@BDLJOQ41W7^<bN*e$K4NBc+Xnhq$Tk$.p[F6q;+e)On&H-GCpk;/3T&!`.]t[`gEHfAcD5#^Q\T`N"]Y(cOrp4*X%iT%.dmO!S@n\'#AQF#UukP,qJn\'#AN9p>r\Ll]"Cn&b]D*H*1E7d3Y^t-%\G3HgqNOpSHrU,&^&*DmGlbFPR_FmTloE)3J5NL;\%NH5')/%s`Mnp]@TL\8C'D0q[]l08\G)P$n>*uMVYeGK`'8s$;FNh==p0e'gAlYG+]ZbJiWO.0YWp6T4+F%5'.!o+TPnHVTantMqs%-U"[-9IjgQ;gc4r/[+VhNfR6p-HX;l(o!UH9]&#3_;/a5"FHIV@r!6#f4jV`L@@?T"ms#g"oSliZ6*Fm!p"b<7o86LP28]+q_;Wj%lccOPe*,8?qmMga<7lY>4"V*"hqp#(:G-O/_*kRZo6bcUe+br[#D6VE)=8,oA,j%*/=)hfc^0OTrqcPJ4lReANln5J;G[9/FS=;g%SNS3gWBU_ORm0u18Q9m&E;Yd+B@e6_NOVDdGNeu[6HuY@C+n$]o#O`dqd9l,U$[Y@IB\Lrbf%T5g#_<*bfR#\jDi+aLt1:X"4-W1%Xfd0M@eR40h]-"<:"MWRa<K]i[l;pr6PD2DbUWb@QTnh^QX<_LIc*-D=0I+cqW[.JqU>B/p<0J-bi%C9J$&.t^[J0B9_8#9i/dm?%+9!3E^J<#6S&p0Z=$:heV15FMH/CI-d-,'SN,PUdX"_*LJc4*oVO\i+:YXT;"M1RHlQu]#Zn\R0J.$$5=?lI:KE?N>_<nUINUJ\9%>Wl*DL!Ik6+EoBFS%uJ`e)1;:>Cc*?2dT5$QeC(eD;Bq<fs(Zb<&>#]I9H8#K$@9H.Wh-#aK`.@[^u/qTUm(*4L_qShpZ?>'9M%B%rcX8HnojTqmFg5%&-OAsI5uRQ:MU,&)jmp4/^37^DAq@%I+%KZcP755*uLlXVlk`_]i%<o[FKH;hmqC?3q^Wi>AMaLmoQ(6cr[.$%`nD>CbJGgVccb$m*G5E=)rKIFgCX!frg7mK+/W3lL$sHqF??,d`7+u&'25@&3[D:2?pJr'Q"CY/[56<3>mHfd(m,06!#",)1^?s2%:RR_?$[jUr#W;ZT^$WJ6!(t;1>lc0*S8tnV1)Ld.'E"YR=er70M2NX%/-1UAA/GW#>*VH-R`NQ!?<.-<@uFdnY,,?4,Md+`Gc_V7%lHjj`Nc(OPg;Ec*@Atad3)D<acKmL<.qO7G5_Xf-Z$&24ib17$[P4Q_h?(%d*RdsKC:1U<dSnu=X8ornE2L$s_/-8S6_D$R>4@kr%oYsM2!lbC"d9RY__.4c(HaksfcmaoN3nd8E'C(Q*7;?[EE901%UD+TT`sKl2&N1X02%!AQ%1Bj-Y)RRPJ0fag1i++p?]a+R0Yu?#%(=Hr*cFdrq9N,_C#sRa-h)#rL(QGKsVafO^0C72U(0O4BJP7r91m]$Jg1EC*X9%KRhXt'];qpT&OUATWdPZGU#>U8kX8Z/-P<XIU%q>7qEV_?nWfQYr0DSLEp:]<Jk\[e7.$)@k*4\1FQg[!m8[)Mt9ro,M$MdO+/M5Vip!sfkgmr"m:njaIU^3J,.(;u/][s,@g83Llh%YHe-rU<Bbp1\p1qro8$>FS"hkWa%>;_.\lKKm($6$:!a1!8KN8CFkS#62K8Kl0$l8gqMOZm9=M6I>=N`3t-&b@<hYZUUP0TB)?J<%F8ONqio5O^`*51)E8rNd?0c&skalq$]CT'3eo#BP$e>$Dbh3!)CTBAE#5PJ-ZDP=I*rWCS(N*CRPl^E`fj[?IX):c/g/&1<S>iou%9=:"j`c&!`=T8?e]a&dm=*ZLd?'ejOX*%Paf<n+[Uf!PJgPbo-oi:I'1c(;,24>CW=kh%7rW)tbO:V[jE=*j!?]kp$"I"q.,YfJs%JNkLNOFRZ59demC0mIEPZ,$VDVqaK1hRP+Om2F5Qo'"m'SG,28H-b5?\R=W#If__H.b=a)(N4E'*O6Xl$S.+)`jPuo_D+mS&Prr`%'@-\:bePPbq!?A5?[U%G\_?XQZ'a(rnIeYbJXg8r.14"S:t%[&/d^6l$oedrHO;6G&I:)sV6Ct;MZjfO+>JXYJaS<iT(;CsJZLo6%7W@(u3#i/)r]r8"=93[.1meBV<],Rd"fMHu)!YZ5U=H]pK#bY@YrW5V6J-f\XVOt%Q_mar*oP_0s(rs/cp!b(`A0>#`;lAMMN#J#%JL$=[Uk)T4$O/L\Kef,GJgPWETJD>hOn5?VW[ZH(8M5`<U.!G+D%oH=/B`#;/kLaPQS>[J=J]5:UF$t29Hpm-G/u$=4or\iQDWSp%W=M:XCnl$0cepaD![+%E>hCGtJ&mj`D(K)s2G4]\&u<UcHig63?k6W<q)'XRPQjk_*T6!@QTB)aR,kNq`.Ag@%3,V-JE(Y=/UOn@%Cl1&E`.7)!&CN*DH/RRYPZ/(9!G"=fb)2A6a$OPk'uHQA']>+/`NW/=^-.*G_);n-,`8'?4apK]lQJqP,n24LOB@XESHZ-Y2!m'[%5R;>Xe8G&:@YIOi"mO4#9BM/S"BP+dE@@C#j\kTf?!VG0<Ie+>JtD3,^Im]M;!d\$RRuUI7bR-A.\1C@s$.o?/65"bn7?!$^aSo,%DtD,E6H10+8\5aD5[bl,RG"g!JOLCcrt[FhaFJaC`9g$M_m*[PeO@qreP+kC=7#3N.g12("pYBZK0l\Dl=s\I^[=&,^Z->QHdh9g%o53#UEQpcFN=UI4mm$X#A"WVMLEHBcbrupn^*Am=c2[aIJ,.fB^AHaTI-k9)p8;h&#4@$'oqV9[mU(D9lPH.<rqU1ZI/PjNq-\3\%%En',cMc$qrmTK5pWUs4p<6HBII,p:'[G4Eo%Sd9^]'h>rQLVCrT'1"rpj\cqX-;DG27`>p*>.LSaZU58,r*$+8tLiHi!oG@@<d8%R%E@l^[\FEJ,<H!mG(<u^.6X,:Kt2UE3LuHeF/DP=$SA?Nr\_f8k-!HjIf0an2'3)8ZLX+k_b[Tl'EH15rmIT*q!V'#V#2^nk:k7%"lSu@`RDXT%&PeLZ?3OK#+#cn@J@[MMQu\<&4E7M;fXNFKG$8H#=E/*8gp).5h+Am;oCX]jQW?OHkNFnn8$FjLb>"/PJ[G'(1AWh%>B%Ec/1G8qL3@0b!^Z:(C7'K7rk\>Ya2uYVinTTU;n=X$54&UB#M#0!62N1_QWJe4MqOGLTRT3'EKKh]7m@KPp:^1[TP<7u57X.5%^%UKZC#!Jg%[sj)kf6!<[F[S^1emkpO+X<BYC/BD>5"^5#>N6I+"hL.?S-[cr&O[8r&O[8r&O[8r&O\cfKY_7ch(uB]at!Zn3<7d%9`8_LCKunu0VeZudYH#B+*R9`%fL?5s/"M3S^;j8p1$&R?V::L$iQDY5PBa/KC$X-df2r6j^QX:9(_51UA\Qnje-:rqHP4$+&P5I%TT<E)j]1Mcjcr=d<W^WL?ZZ.VlVE&Wp"*Jrm-:X3g/W^^a%tK4lQ(3*IJWTlGMVeXRnm@7ltV'k)Z8<Q\(pBE1.#b\>H>R7)I.LA%>]nhrb)rH#+0W9KSgHW^[]l3*?XI#CSETF;)G]/kWgM9qEof11T/tdR%P24!qjZd+q;?noI+t,sIr9\G=(jXClM>;!1tFX,jft#Y%fCSsa`S^HC&,c+@+8s,**rYlk4T*7gGf05a5@8p;a^^&D8$4t'j5&SM>lHZ'qTDZ`rla3oepmV<^OP8o?i8-g++Er'[qC?M]5Kg7%Wr_0TPC:R)^$@=8orm8!o(tY#qBnLQqStgJl8r@&r0)X#Y1FusaO@^=J=[]U;hLQXHLLn*pp\!3j8],Co.PX?o07TiR3-nPRudTe%Hf)1j8=dIlV<Z.LCJN_\%W;7=LE??XP<XBeB.q!kF7abB`>=!sm#Rb9l=1q4mB&\FmZZ8D]K1B3os];F2LkVATDdo+B-?umdKeA!%feXGYq:Q;Yp1Brkp?SnC,'VsEI5(Jo%t4.U5Bul*'cbhNl%Nc"n?(#ckY90,r@+]b8$B'Vc-O)k]oRU5#L=:H;2safnBK#1ql;O>%h']?hJe?edeA(sbJ,&;_B4!?EUFIoZHf6Iss1M+5iT=XS(ItVlEAtZ-lQ?,CIm*D?9.'-]^\lLfchuD0r;#ZVWB788]f:?)-?h<D%Y"sH:7mAN!8#GRL5Q'6UhQbr%3XKI$']&$pHgM&%s5\[!&ql*fju]42j)b/?5SL)8h&X_VDgq>8n,Ln-+B[UAkJ$]0LL3:1J'GB&%*]\8kolg`4o,mkLO.WmJ!.+1A++E<ihR(AZE?2-"ipPC*G<Yl*V_'>!.%^J/2a75L\8W6$4&FmXqtbr;plD'"<I!KeIt.*]CMe9f%O=G)Ec6k,AprS#5ikb<]dlXPuakte(6\W[2d#iEo)rT/ZgN#m;BfHT@qmc#Qkh$54HLX^Zo9CEqb]9Mq_#6M=\1=b2NGmg!+8Y!k%Spf!aQ<nt4HXH]tlR%!U1k;sigsBDSc_nPV'2+dCrqoR+rTX'@qVd*XoAScD*Qdo6I/3Zc=eGc#p\ca0E^&/r0,/=QY.#))^[g7-%I/E0k9ddm*?[D_9Dh$o_^G8R>IN=s.8&,P5$`p!#lS!\\^J1W]9/$5;GJEe%kLTfY2k_[H"^p[;`5m?;4o2PoAP*'*N=0*?oV).O%LcZkF"8(6*Y1CQN]^O>,r4]/!q>N<;rOt3A[^p@@2;++mY._df?@1.V54]5baQ,CF,5]Am54k_[Yih<f,t/#4ab`*,rL7a$F0$iu%OE@=n.f]DuS,L&_:8hb..9?R#j*u=OS)=2'1XH$dH)!,A1o_:kmi,"88DSddnZRH*W?21iY>b26ko5X#%E&^kTZh;gn_F_*r%h^X%auB=uht738L>uhl#b.p7m5M]<O!"??@'f2oQ=:P^hWa]SYCG$UhH@rK8nRg`dg]8hs2<o3E\1G1lq2^le]i<J)LTo;=#B8AQ"/F:%]_OG#GIY8jl[YuT3I96+a0%kfM$)oD=&Jl;-gm$nakFR/O(c<2)Z&J3B/IXb%hH_Je)<8U]%@<1,:.^o$]j]Xq%>+XStb@8[d;5.%O!@bKfN[hWn>Mc;Mu3j'LET&l](U[j"jI?7M^-+Uq<6E_c[)98-GZfR(JDABo<VaQ$nT87pij]`?Bi71qgG4#(&DaZj]rD1#CIS=%f:1)IXRWanJ*FhVcbJu/M_@3mm"Krfi*4e`<]U$^?bGm&em?&be.WpO].LbiGQ$igbK]7/5PW);=JO&(p&fA[i8l&.Z=Hh1n@@^6%lFd&c$_KA]<VX57CBI9/BC@d[o?VT&J5-#03A,Y@(tX0t`.MfQ^7aZD^Jq?<\FGV`cEI9.$P)I7r:5PcBe'(TebBtGs-?[MCja'-%SX5so[o2I-hfi8gjY%n@8fr;_1:6]LhHOOU^>ufLbKp-t<9YtNS6(%4s-'tlY%MrTl)?W%8q1A'guY/@Iiha<O0atfTB@<5Q2[+k%joJ>*cRp]\\>r7%lP6JmSm?;2B#I%u)(1j64-BkpE8S;Aft/A`q:U8R6)DV52=U_1SG;?@acl4rhfE&ean'PLKQI"h-)E#HLRrZk%kJH\e.W!;mK`Bhn7e-H6;i^-*WE#6c,X1T`/cYI,.;bn3m^"W]o&n!<kR@MK23mI>oXT$E(dAQ/ZTYIX5%eImMmaQ&V9^#RRY:"5%cWShEiNlSIIJ^8k=k*9Hs')k/F2\l`n+soqb-=,(h1'm_Xfmq9l\D),JQ?Ern@d0Jg%gk<(%b)2ir`Y9o''e:qU;'#qr9'=n:A&.%FMt=QrmpQ<i?/$G+8t0es&N\NQf.&t3Q_jQJ',SfI6rEYT6BJ%))<2[0+3ES__?=r@5,E0%S"8;BSpD-kb;1:@;P?j-@$]P!Y"Z"%eN;%&SLGOf/te_d[i2:*n)\ob#t`<aRP5HRcSQE7[J-8#3;d.&=IA/0rY:?F*NnrR3MNVD<EQ95lKW/F+$Y5A[E"=M]*>.XXPo1H%H[XGd)fE1EjN/(e?[LQ0p;iM#+2@6^%6**jlIOSBHL%Q"D`i=)g1+3RU_AeqFj7<ADRfMng[;TCcF`MUo8_RD]Ci$?:0`.j<Cb44%O'Ph0e#g+:H2$QMmrc2/^$#%DG66Esl])iJO'IAoLNhU'O/o.d%X`#,>kd$5;i"N>o;gIC^t\:ga&Q>Fhr"O-LAJJ"fBGA8"/*6T%kL$?6Xb))RFnM?g(9c?EdaI3UYH,D#Y1m>&o;DlfnImjpk0A<gg^VL[5!PQ5IU>`H!s$%+2)h)Qi'2P\FZ8*%a6@?JVqL5\.2mR^%ddM#WTVq7gonI7I7U_K>hfcK0Y+aN=:c-ZC/43?h%tM7Z^'unK;gRNiCN$]ti3%"h&er4a[3P0'b><l$WP7Md4&2>Go%cg>\c*r.%Uo20B!J0qX7=jV=dbb*E^$@O7??aXkM+,H[gjK!5d%l_u=^Gou$aZrZcdJI`GP0e$/*I#%-VrQ<:MiHTC_AAY[^W`RM#qA?f8S'X%*PY3t]_0QsCE!7ofH^G"TV,/:ni&MW6:)DXfHDhWB.&:A.6qS64a1W`S[Sph][J$p<B&fDg%Wt)hlQGjE64?:J4pL5kOnCb_I7p'%+OjkZDEW:4eadAToVZTYO#sD&qopLK/#sIf*kVD@,]l;;#Xt&,boSg,-&jIngcZ50HQf=hQ;8WFmM[4j2h<:j;21:p#(Za1R_"5#%,kKlYAktd"c+QC)!L9,<EV-9kf)ni'4_id^SgNss1q7>;jLG0<%G0pC**bQbE?bHHI;a7FSJutAC9-e,'+P!`f2#lZHGc`6g]:eg%e_oK!pG?+[5_-jSO/n=KJ+=qb6JuUph07\#qe`6KK!W-a21\eh!HiGscq:e'If!ukh$W(j@PZD@8C_!iioCP-hK8A62r/^GeHnl[%#:R+Il=7uVLuZOY^</jm8YAS6!oRjS@6JD0Q0%r^=&o<bJXp]Uf_ak&nR.,rHJ=\@h4jW,DBY?<It8?\3:`'Z>M_e7^__$LS,dKk%2S#WE(P,pD:tT4*Gg8o9cf5soTejjf802'+$G9)sb;s@^-$c6C'52sE_$U>*UNqmM[Ak[?.DW*q=q&eNDS"8r+Q+1>FVMoNfQC5n%e\Gq2X0u3WKD=PV9coGa*!WPo%>$:Nr0feQ"r:W,r4A]8b3e@tA2iE3#)_<uG26EskXLoJZ[[@KG'82=^U'd5-LJ.'0!8h:Oh:Y$%^\Y"7]g%jNl='.`;Cf0YVDdl>TBC\?K_k0:h7*C@pMETI2p9`IGX?K)f:DrZp]&3>5Oulcs5MA]IK!;(ZQ[X$r:I/CWNFdej%o[6%A"WUqc[G5R55"Xlrfah+/j1Z?KcXRPe.]Iobn#6tj.H=f^HM,*QTkH%`u]]n\*f=M1a-2\9Fe5?p?hnWs*XC0s6ZlEq"e(,oXRcq%eXsSS[HiGjlIjG#@.ICUp8<E5M9gV7.pr>1=8qm!O+-.chY&Hkl03>^aAV7]s58NjI-Pd6J*BUeJ*p6bqgiti7VO=2_-F^<+'JUc%Du%9]I.SLEp"3cHqM5+Br]g1[?X=i5mZ`#sf/gKlru3&-chfs)OcOnbrI=Ib?U'koBrsNAGPGLQIrXe@J*efurnd*,psrf!?us&K%\OU5^'fX["rR::Ql2Co[g%\N"?`.BjTY.k4Z[ZLp@\gK8V7M&=Y.3K@]lj#@Fn_E+0[`]\Q^*8DY%r6%>G7uoqkA4*";6Y-LID]k%n6e1X&D4oBo,sug4_6rV5PC<LEA(rU1qNT72P<eIIBGi7Quugt9Dt%9*G2Ss,dOJmALJ#*X+b*`>V`QHOF1FR"%ei+qi)GOIsXVM%(+IT<6+Ykk^MbruheE=%'%nj<+fUSeMR$o>L[EHaGrrN7/u>l9j_6Jb)\BP[)\A15#Z;Ol,T??.d$H0qA!qR^)/>&j^+bqH\c#s$%9^c<Bfr&H)H4InIEdoiNK!">6T[?O\!7,13n5`i,(XVO:qKV<b_C-:*0LpDjii6s/497C(T^2S+$;Bh=IBc'5cq@uD)?>f%aGZ36%&uCMeiQIWk7T1_uDeYeTFg1?RG`ib4?)sD\R0*3,G[-3b1-tLaD6#3Zq05rNX;Y$1'Oi^pVH+)*oLmZ5#nNP:E%(kW@tM15U]5Bf%L'QFpK!1@LH($8<`^E0:GTek.6;Yi)^%)9\(P*qn9FA[OEk$m7[?n-b_&ks/07eZNbW$*H0S"do'SJ+j15lnX@NG5i*`DK)4NAuP%pW=#BSe*`29cZS-L'uc1HDN@U)[l8o*;n.D8n/#+A\C+s^IhQG$dASt]e>MC1_i6AgG,SKm0MD,G^StFTR":dIjJgc0A6qgk.T2l%O>QElp4K5d2maY`S\(ToT]t2?m0?A;DJ;=KRW_'m6.</Eg(0X<h9^SsFSql[/^o0q1`XqlpiH4OpiH4OpiEG7>d!r#OR>KIS^Mqs%d=/XH4-pW:YEjG4EhM6Gk0'1\99o3C1gc-I4/MaNU4&pr?OF1/QKEgqIBPKBd^8HZ]rr^[(Q7F67K4l(ms`Z6&P+p&j='pc3luC6%b2XjFh/^[jVbS;:F@>34@jb(.hU!u24>K%Gd;\t3P=rVhf]/mb*J;h/oC%&$iJ6<74u5@SiBChc6qmFs4a*hhS3$\aO*orDs*X+2%VuH:E:OM5Ok>U@9;oahEo>'P3'/cK5K7EX6IpMj>F"b9"dRu5WpYuY]ou,`NQjVB6\?[+,1O&h\04/s!\X<o`[.`:/00aK+c=7!l%njMNd6]XHC]YEmt00]-[it!_!lG4Y5HiEDHPIp73ro2E,p)Z@V#6'Iu4cqtVK-*88Ym-N04XVN#*'%%UpQ.6d!e4mdjr!7XQ)?t3%++N#<@\'D=59Dq?BK:+G54uuqp=FAups^N;2er95;iq="r1*HYL%+^*kFOZjGlt]1n<c<1aG!5FJ%YR;#KL`bU`;DJEW1e%9`rOf%o]T>nnKV*T4Z2`Cs/^IE#UH8,,_3U?jPd!d?NK]VJ%fjZeBoeL]OUfA/i^B<kG\uOgiE&.nV578IU%_G#lQH1G19)$g0#d<kZ`d+%oK<HR>jS?TS^G,,Sj7aS`%f$Ca:C<T>T-7JKZeB;#iBt#8!QVjnU`S<Y.SWLKE"s1C6kJVpZ2W)BW<)dU#XC)YaNCLe+Lc/Xd7#-%kPsW/5II7kD&TDfDs$M)V_O^[\7mp`D[G0u#`XG7W.(Bd<0`N=g<>d.B_\K%b:8Co7No[(J+E9I0@SjZZIclZFoTtOJ!)7i%[%u$%`^0I6ptUq%I,^:[oA3]o/Isa;_!jT&Kg,P4`1qg2*gn#^X+kLCL.:Q=l1;X\>N;8l;j/QG]:iq-+)##"]><469#gWAl%<i^,qOYg%/qJ^`@"4T?aZUQjFcn(5CUYpIS[A^;]=@Fg?KjLB8n?o&:4Sr1M%&X##@gliji)$?s!'O!'R_OMM;TmQF$>>T8T_WM5YHoPs#!OG%"HF)D0?OsT3s*c#F836Q8!'8/H:debOQfeqO-fR&%*=C6k$1>/(l64*>@Z>q%)V9>3!!R@7o&TR*YX+P5M27Bi:B-Z&fQ/iBhr1_%++;jqi)h$^E]t8Mj!-2VR;?jo):.FY5l0F!8ttDh9?,CI0nA53FOVlVkj+@aFoi^F_2h8bQiNSqM[uVIb:7stTRB$ZAN6m191PFD%BFF^A1A*PbqMGNaN+FCQhmP$(1d6ei.:r!jJVBhZ-5fbg7Yd2QR_eC_Up^gV?3VW+E(3qF*ehtKW>&e%\?9)V"+8MtA[OP7a7'.G%5V3^[9rX;T_J2--[T_7+G\Hnn\mcFK6D&XocaDtg#9Z^d.N@;B0nRBZ.poJI<B.2[;0_'Qc[Yjiq#-!#chJ[]/pUSQ_XGq?QqnlM%FNs+Frta48jMDEKYqspsc[")IhV%Q/9AD_$OM><Omkb^AkmaqriHK#ppWNSHH_,uL>;tDXrb_],C`E:I0>7)(DuRLP)#4'dmZm2,%jXq@Ph:1<<oF!6r3ao6Q)Jrq1N9.Z*'W?joRgNDI&&n\F?n^[%'g*.HYjfMYSk/7nDC'F\:pn>?ID@M2TMJ;gU&_l0i"beOb^#U<%;;m2.k_$@1@-<Q'"10@[1*Z3M3e&Nm1OZ??:fe(]F@#sK)(l,'7$=??0g$O+#e1]\3[HXM;`'2c"X%G'9@4YME&$UP);,6Q.gBlE%#PoUO:&@>IibXK4*sj0Y6-1S7GZ(mtei"_6JE\%f?*#@!KX$0FO-(Vcg$aQh0g;0@d![U\O.g4f%fg!!cSD5lGYh`U\4@2S&f]=Z%@Ss3bZ6kV@9l`_!!e^M,+B=>BXfIF`'Pih3%,uFk48L_ZbK'.+IZcNnN-PJ,8I=n76O&4D,U5(m0S*]!QGs$`>:+&A&5SFu:`q%>%$#D1FOSD3obCc[&^R1kEI2,RP=FkL$(()lE(!8I%J3on@;'?%1!WcG/$49$IC6un6iBdl."q*F5a)\P\OS9'G6@i;KjIW#H#oU>9%'$O2c9O1hd/;O:TiBdbB&4ZqtB+0ZH#oIJVP.%7o;(;YWb8,WFaob%rPT\k^`:ull&[7SZ3!$oh('Y?sn=ifOTUV!-+[r_rdXYRR%W4-Ut5X/YE"ao>98h's=%u30\d6+Uc2Dd]lN$3an,T/L;,Ugl';.Qrh"Lq#1g-XQp%puD()dihWn7XC/I3BS?<kVK?(IOHY;UUi*%TO0s"@1u<j;?Kb(6r?l2NrdANZlTtm,/Ho1S01C.a8qhs;KrmDRa^%A-(/D57_hS%0_&ii>6,=?!IZ+%AsHV./HsoDV2PQC,=G;T%JNQM]&ckPf)^b]kj$9[*8])+&a9!]Fkcubd6$P,WS1C=qHA9,q'c''&Ul]m<ID"oQ0FYeU,*LsqAO%pt<imp<!YGFrAPhV8(_4b%%8M2D5:LTeD'e2NUF'<ll7;79QBpN<>Kg;'T^gd\=/!r0EeSn^0Ys[-jLb+p9>D?U[,J_r';[dA#:^EQN8Vpn%IVPS3AK">K%4n%/%'MICc)+p&:[1H/"d=S+(jC5tr$S8LE)8(BVQ'+rtcc'Z-AY'JB11j]l[9l2&O;..=jT/$^1elu!KH,Y^41-^$a]La@@5'6)hI]!C%0AnJA>MBFDPasHMR'aY%;@aMMm$8b24@<YS6;o-]R:)JJF/^?68<X7gams\_nBN.5)/)<tLPt:3>+Q2Gr*j>R/q?Mc@0%*nAg06,%$@%pLQJEW\jCjm%aW)be4=C#1!!,O9;B[?,,#0bB?:bg&#J,s2-'898n5Vtdie*Y[KbHHYVX+Xmh.K5K2pf@&FiC[k\SN^YE"t9?%\YO!kRn.;,pPPOKl+F.(=KSC=CJ]'0DqXm&M-L]#^^j*V@*5K)[YC$T%1`Z.#N_^j3f`<30""t;,?!9n!bEj,AQ#NdD0Rb54=D"h%P=\V8I6puYL+QV#O9aWe`e&JA.?D.EnM')@PhQcPkVl<oVTBs%-%]lj<=gB2<?_\#]2g9L5jr$M?kQ-IML6T$*`S"ZIJ0=5//&:N%:b0Pjp5HqI)f)EH,+3Y7QVte5UGU%J,Q"-Wp<+jU=8%d!orBL2,$j.Wfo4tL'+>)Cp`Y71ZBFO2YO<'R%nVn(pjh@GBuNXh,i=pi%XB$rAAN>LaSg2(Fp]DiF^i7\'m!+8^UfKJoM]?^.H'24@Dr>i'f_(u4]8/TnF:B^CkQFLukTi/hK-)3KPTU.uaFV6M"3:Ls4^9$h%AL<t/UZG(80-n2=$;DM)rn*Bs%K\.flDhcK^_()_M(XpRm[Aha%U+cXW<ZIP9*7Q.dY)-Z7Z]Sscod0&5`lU3B1VC*+c7.,ENh]I%$)WSJ1G<>+3+\oun5I%=9Ca6G>f+pj&lseiRY`^RK$1H_SmZ7]3orn0FtsLhO?BoK1XCq,'!<rnE?D,G_#dFtpUN98d%TZhM/M9K%FR;N+YeQno=XE<9Et>M^]89tH9CrOt,h4SG6D3*$5QoB]TFAGm-6abhr*9\qlnRj1XQ81:*bH/Tg7IFAG3K:N:/_Ia[W:_/7ch)Q%+Jjt-]6cQ'f4t"5>;<ak`;Lh7@,83BTgr@jn1PO84Q%*GdEN+6otN.(or=Ed)4S0VOeMk(hL%`saNWPnGsto?T@A5dqn?)e^6-B=%+cQ4RErXa*^kAH0li_k]`DX!/",jFK117C\U'i86OKt],>W_YR<'8!:EhOmoWDEYdeJ:f`%udgL.Oup$$nkPp$VCM7.0tX-1dT3e%"AMFL/dkjE.Gu'm/k/_jqhcZ@d$eFS?V1;L18;sV#F=h,n=[C98J$;3g,eIeM11=*Ur\u0%Z.K5-l2uf-rC5`;N*$caq=N`.0#?p%23^Efs3K.<D1E@O1.@WtgT"F*;'>bRE\RaI"sL0qafVR:dnl]KY_H<jXP,=%X(=DD$s&Z7.nrct$S=soXi\@MM)HU]N@(kRUF@7K%2u1mRLm=>-'.i^c/4C*aeq>:P9?4l5l3C8JXON][b=`S%TWI\cgb`3"Oc*X2dg+%B_JBci`eQ+,i>K0),<[.e?;=kF)mTW]fj>FA%#/Ns]<a+l'8Y3oD)HetDadXJ';:kV`H#86L,^>FuGVr%.925\9A8MWeSWJIeP1/^'ZsEd7M*Nj04L@<m_aroTKU3.krC3h\C,(B#%]Z%[rET^d^7SLa$%@WL1?:W:#e;_8?!2c2QD`cnIWpl=g=G4;(6nDVY0j5uYm"0p"Id%<q"%5JQ_*Z:7^tlP9+^-SX@-Wh#28r+$%=YS'O8EuZ%=UqV@CQYTM$=Tl=[92k:TR#u1iVn#Lf0bF+,@VO<99JoE+@1q$rLmLZgdV<$^@ZqFI27doB"#'H742(Q\25eIJoNJ4%2"V?1VJq8@\-8n:JA6'sfN3VWXJEXJ6WN'-*QaJ0W^t=kW!W^.n4]Z.E%Mp*,#eXQ/&q[9W)*TE!otK6A%oe@C_?Ni_74e\^jaV"%L%H<*W:I-AYcAXlgeY7:J0+&o(>pN5k(,rs#E^C7mSdVlKGo$IJG0,Sq?*X_U[bs&!/(X-5CB:D$R;1d.a3ALDfc'*U?>al@]8^/%=qmdsW#!k7XC00V>*S^g8rNTK"ZI8*g-RpH7:<^3fo_-sV:dMB"J]`6"?BjdBMjOY>::)<gQd\^D@E!.%e#ZDe=*\o`:%pq7/2co%_W;N[4+'GNU]kNKlD9U&%Ho:6cu:7@npr4pC.GHp]g*H3'\`Ct>F>[_:')D+N=nu`+\f@#BJ52>"V,hG4/t[M:pE>5[&$>.e4Ps]%p+4nK!=kT.%D3s4aW"0`&j1T];0oqAOOnHH#1!sa61Z-IgN$k@^&`MO?_Jb5pru='j0oKbqR&GUSaT4M)t6FF,ZZHCo9i,RSquSZ%V%Um:=Y`hY)?V%#TpS=^l,3Za.Chd1"%M_)Ab/>*AB3PM.\/DCpCE5J^`\7QG%!BunK!6;J-=St7#G$5(CDJr"]M=h#/LP"jdu-b%:rKfbM[>ukl<5WkdKY:IdA3.aieWQugsq-W#0(+$S2;m"-lFihE"K,n6-k*+E)>kq$+0"+mq`$PLLb'IC%;<I''<*$G)4/,&&;Ad%!)V/<TK,VX`8N-]&<TVm8fOsr4%\Fr&;XY$b?MPe?-<uhG;r:#&X!qe-jS!G_,R0D!ottW_LP*fcu+V5o0KbBXsmkV@VM=7Be^lh%+;rI.DV!<?!@aj)1^s_Xh#LDIUb^BTdP=ReEF[$5DCWh@.+R/JJ1Z9d0IJ)@B6c/E25+UA@jrjA,8S6ZMKYC25\HXRcX\gV5cY]P%@eY1+Y<LAuW&g,p:B^T+,[CJdLKDeKj2ELi8d+a^_M2hSQAM^ko<.&",+3AVJ*+TY6a:_o"h_b.7Og#V:&ri4G>YMJdH;E3(B`R<%5oX*9d"E1+[>!4`dKgOE&P^<'(#a/]-D7:DX7jSA,/7UAW!U2N!Z95A%*\2+TL0['Hp"HQ&OE*;b!8I[R<U4Ko"$/+;Ao@4K/(kD%-3K!XX9=ER."A#8LID9cOA6ql=g0Fo#6[R4&F]o1qVaXK`;D6NL&X^ke;hg[TqrK45\Om$:B^].Ur5\iM?H>`8eM:'dJVaC]WAiR%XG`?"?K/pnWXLFH8g8ppT_W7`ZK+Hib8ZhmK7>snnpX3Ff`VG"8McGr1ViIB")JAJ^g4&!-3$?H--rg:W:C"B]I]);iG+ApX&(WG%jIb7hVEM2K-*ahK=GeCm!PQ\t#-J*QZ1).!95=%WdOOQ`93Nd0<_.i"L#e?f;&>-7SI.<;71/2,32:'*E[p&ro!K9f.fVa\HX@!U%!LsTn9$i%lcj+#,IfMGQkE7TR59qgt7oO+5@)4mSiMhbD"5m(I:\RL)/S:9fMm<&SIAL>QOG[ghjKk=IgF<p6SfZ0MYb2T?HU[iL%9^8(iq6jCiip__eCT]QsQ-5q:#"G"t/qhd*<orn5`:??\^4`e[6n)-Ck_?P*Y1RU,#'jZb_2_/\O?Qf<7a<;9_[2QJ5b(kX2f'Q$%>43pNY(GWdiG&eD0r]P%-ud9#?oj]Im%+f<<+#$ue&=51@'p"CMTrnBjF0'-[N5%8b-0l^ci[8!6J$13]&li@*/Lb;^4pWA.@uGO%@4t7sE3rZV6W)P8+IAqX8R7\5jLm44aoS&gI5uPSO/2_:g(aKRWgKrf<"r(BjdK*$)eI<[Vg,HHh.iZ99s1=D)`]D`_Agui+l)4F%>TNu',_fNSYO.XJ(?2T@Z?J;IM\i^FZc6TRNNrm9aa>(%3;elg4e0qaA>B?W%_1-D'J9K=Na-!CHOdn/A\*gPl0)$GoZC1p/Xi*U%<[aG1-1tM0N=;[>9!OC$iT,;KM'!blD>=7F6b@b<f^6l#"O!4"i.e3g[_H'hD[*bHg(*;P3S4$q/<RWL9Q@s_plVE8el?pq]<Qt@%aQ@sY.5[I_\QC>b<EH6c9LAW#]TA1a%B([?GitTNNT:reYA\ABg5$'=<T2oR&`JAS;1Z"-K8hG#e!O+,+Hqu5`Ssd>E5?;#PfK5"%l#Iu6h`S-1m32[M4&MKaU"]F`<h&mA7<D3R.Qd#tLB_%>*_"Z2J1kQ7m%VU(E<EMeRA,<M47e\!oq?#$Z>u]m"`c'%O-\T:\Z[Xc%:-;KTQ\_BIS3h7J!)<_-'.JN`6ZS;&@#TOOMXNP>LHaM=6LcgUD6Qb$/.hQ=UhLq]e)6Qb*.B=R&C-F*\4l)[IKt9HM3G/_3uWqO%7%-OP59Tr8`-kCt^.OXl\^TUZ@@*M=ThZ`S;fd`j5jM5ZQ\%""'*8"!:EJdTUr0"X'fnnrD\IZqT>?`M'S-lM,(!0df`C08e;VlE%ZW<E3cAL>JSCO=03OCUJ@VH>/d*NRRCN3K\).3s$q(iR'!G.#:UubVA=$@<&e]ee*,]bT+cK:9BTGCe]Z$ahp'&c3U@Yd^O/;b;9%<%M<A'Uq5Nc/qs>Un.4h=QuVj@F,`7W!JO7l3b=2RFTc&iD^teN]hpmeBMBX#g)$&ibEF?^T!bQnM5?KR\k8<P#!j13ZRQ'5#gP\%8RN$7NPg!,i!qX?7>_o67LA(;hVh(5>[.2B?%0DU6lWkV':r)Ln]=Z=?(l8*W8E@nF6lYS-"DWlm?p&k0kXqE`.M5m%46Y,m2F<R%'b?X2%rb\%QKZLsRIA=jGa:b`0u,EW6).R)](UjM;*<$/PUtrI]G\[k14Hta!-`R1D68mN_D?ueAUVPDi$6FJlDcqk#U0.p2H.gW%C.!o]FD;1!.-ne([=Zlcpp(NF"r$02O<dbOp:,UGG'XBdX/iIa6\BMh#4!)E(0-0Y=n.d5-?)O/&Kf-scC`GgZekQD$W@QPoQHZ0%5*UV*,T/R@\4GS!`+>+8L)91E^T2`bb(,PM#T@QuVF:]m6VD?V3f)n\=+$p/f?%&>ZGKWgi_hgFVhFL8I),1#C=dh9]i3BlXIq@d%oY-\N,?:(dFaNeZ14&Mr#@(rC8N'KM/F&@VRjP[#T%_>`Q/oq[/?-nm+te8JLq2K/Vu$`R,"6;$a$?E'0^7X^OfiBb_[Ot%#3f#i%W4u;Z(!9$e4*FXqK<q:h`5Z#Ti%"d6pi[#`h0FrB6XaoVri2=%ZUQkW^,F$qWN],;Q!Ys21_32gV0$^^Jl5Yt`L%n%e)C^\P<P*E%$6<Cj)9F/R.jHS$4#m@i'&_(ZE^s02n9pUub;6?8[XSmLdnHIX=B[QpfC[NJ]`I#GL^G/Jg0d=!.?Ibr:SHcB\"9jrTF2T8WB#?/%5<>Kq2sAC,ZcR;-9OA3^JM[i.!1,/[4_1D4f[6aF=VW:U5YM@oG]`=3TUq?UAZ-a,'T8Y5:>.7Xh\<!*%)peK4cW*AUtf=>8,IJF%(Q(W$CXIJ9#nBu$J?Q!:l(CIHY_-BGh@_ZB_rP2XW'\loW'Uf`$I($dj$cSWa"`/[4$m>0"Mhf3ciLJOEV).!"V*F_K&6Qi:]P5*%`<cUdPCfGmZ`mGmk5[=hb%*:@Q*@;5VhLuj_).mRQMI;k9)OfZ8^obXdDAM+&iV)U0a&afKT1#Z,'FZt'&F*gBaA<Jmm-8J#LCK/%c&29g1(qbY;Ql2R1p2JbB4)N9\VlX;_TU+NquR%!^=Ne-0p:&;,[_EjGt`M](lab:2_Zf-.$VR(L(^l<9/Yi)3@H[/bKIa5V%SY'%a^?#u?j7,V6pOV>,3mTVqCG)$TMa12*RM/98AH,uPd\UG1n7;n78tuc%b,&$<=Hm"H)eM]JAN>Ij,A^1MC"(4%AThWVKtX9Mh`RN%3&)sN,]enVQ+@U5"Fd\4+tgMjcU^M@(Ku4f!\H22r!s8cY/C[?&gU@S`0Ng_!%"j[PS07Er).RU7!0EiF4(;iL,-t`)KC<PAc4qe%q?#f0Ycp\s-Yj,&%B+f3?g3G!R1(Aj>^9lQl@t#XL85\4DR/W5ZGL%H]T\C$=?HYh&VV5N$Zud:TqGA=K-m<2,UOJE\.Ou[,`gi/%!NHJ</WrD[2>35g",:S`?_jBZ\dQOY8fJHZGp:[M"!g8Y%l[;-j,Oh2<1/@o8Kr!q:i]iehP3)bHn5"B6A[%KJjK6%R:MCRBOWH^%PVjIp'lcoV'HC2M*G)&T\:Jg>C*or)'N-#L<=ok&4"L&jOUVRl9@H4h[1BW!Jq.X2Y0q"G@St#4,0W$bnk(/WLPo3LU'\K^Q9Oo!%ni(:Gc'H8J,f65-J@8?k-8j<H:]b'<%@U<PmJ'4$%pV8aTg'9\\#9EAJ?UXDhZWn?&o3K<G4<7l9r!WL>^7@CDm6t&")/_"kVqkJ%d-O=s41GG.etkgSp;3/k9<-CI?KE'OfF&<.aElE-iP,QlD]8Z#bC;>CDbg;$`IG5bh]2Wb;="no>BYdL!re[Prt]0tjM0d\dGH07%`Vl+9m%)r+4pW-FD6T^MnZbhEfqcoXoT!g9CK\T+ORD8:HMu$s?o(kLJr@TaVG[?P)Tn?Q+DM.t<29)+>Yd&>a1i&odC[%R^"G"4%^V1+M4QCWhCL9^%)$eVJ^<pVAdgeich$o4iiG?06"dfC!Lk]6U-N3<eIDag`d,:=.,&-nXc/lKc/"H^%]jO1h;lcahr'iMm+:lNR%Q"XVKg=JU/2cAm.4t406>i)#"5D?k0b,a5YopN\f\QHSmVE*\7"[+4T.Klu[]O1aF;k"UtU84IZlS@Qs-C[Rf?q`ThFh/73aH.tY%gTT.,-34Au*V9dHa*=n7#'HY\s0U/M2#M^]"DQ$c8,Z6"QR+[)r/.7q^_8k;.MT3n(Mg$X:0OalSE%m\;!4R#n`6p^&;-rSB_0"R%F"31dI9lnW/g4,!%C<FGG2FT^N=U7P'[iuUjfXMU;Xb8\V6&<ONj,;+4_WqMEi`'4q+@3g09mr'39cM-Gd*a5"O9Mp,#tUD%lih$%!sd[%ejo;rbn*pHfgr!k2k4Q&"nI0i:L:cClHj8]7'BgIagL,I4pBq8-XA7+EsW\5V"Ma6V0kBCKNefoh"h*lFjMCM-&]#2H6`:C%kRdJZ7r:T84ueZW%BrTZ"+;HZ)Ta?7ao&]FCEe%Rd1o6KMQt]23`VF:LV-1f_($lEi:N7SY/+4P]bF[H\jj!9P4Ue\j'8CFXUD[A%,,)B#$.qSBE-+O&>de;oMPX77eFW7\9]T)8>f=dS-*hcj!e-hkT.<_fAmJoO68=mpp)*q7bmu*6WR@)J/6U&k9@@"O_EY@Z_AB6g%POK$LLegI+)J'OB2TdRoD.Z&?SLkR^lhRX+'N3a&&a0m66cm3"66"'GBdf.G25.'*>Unl$PP0,U"Gs9d/-gt`Up`n[QjU^8/BoXh%._9*bibCB;:UgE%Z?[8N>";6DG5Y&7Up4CW[0lXu8CoSq3YOE/p3u.55h=s+J-JpY5fPH'p%,@,\MTfj"'lTk!\&Y#Sc]]n21;G0%S!W^k'fi'&:_?Z@<6InN[AM"Z&<h2cPB7PUeAIB,VEINETPTXS@W4rN#%99qHkr3Z=[8J$jGBY[W<:EjJb#C*_O[^0eQ=kuM&YiP%Th7G<b(1VNW:58__f[)+"nS^s[o)2-FDn5dVUo36*_XCb<'\dSm$Rn_BMR^e_HKLtis?QQ6*0c*k@><o4dXCU?uEHH=)O^Z2AaF^%@sAAk)+>ThEJ9'YNPWZSo-3F/V=0$4?!u(S7T^*90Zla_f16oZn>b;CG$4L6ZX>o8P.=K%TZl:Opf,r+A72rf#F(5lU+;F-qsR-g%ckp@&WFAcOMd7e.En%B]n>i.=5JH4]\<AA$+Yn]'!qo8bfTX$hT5-Kul3_*Rc:PM]4QFo.,7BL6Eti$EA0r#rYd46d1m?*qf2Ck/%/LjmYi`cq0lIfPGR)OhFXWV]N>FRf5rE!KS<QOZcQ2q'G9d[/]CVFn2XlpV3R*@XGc)Vnl").%T9$5BkHn1N?/Ej'V!3B#a!*2Ip%")'::B#D9I.JaZk<N+-]%E%8tCY:K!?j&!E<XV?#J&4Z+n'Ceb=pLc16U$Vcpji)C`["C^C9<_W96Af27F8;5-EBnREh;8;-'_U]%1g3Z6>QG8G@YIK'6,C%!JpP6K,a2JoWS5o)#jNflo*SYC`uH^17&qXm0PM0.(+Y\2=9c:P7P'\G-Z-d%![Wbd=XpIGR@;#E<M:*g%C_-rEj[Gu5607\BNt;&OAru=J8..Dm2n5VbofpYIO:$bk$@Bj9.VFYpRu:o0!#05R&cj7M`]0qkPjtc+4AVebEG.uB;lN/?lQ=9$%-mr/+\cPS9%hSgpWc#RS^C/#f07ctCo.$5c$54(RPMfHCi1s+#!S(=6j-ZcM_K"V'ECp[=q9S/Fr&)A%@3k3&@jA:V;ZsmMP&CCh%=[?cN5GVZjQ.c:gMT.JQJlM(LbObFh)QP+pk0mUee_29n7kJ]$'<]jj>i@flG^90PJ?A$o6oh!OJSWh%>,Kt0PslK#<G]kZ<phA%%-kuY`_jnuS!l6:\eh`c)eBH9)5VtQ'V<!hGM[3/>n(GRs$EL/c<m4$/5u7u"<2:7@&?KP`iT'18ce]Oj&@00tAaTC-#c[UkX(ZiB%Ag_L(SPT$dH+:U:AoAM/i#9u&nqe)=b@6,k!JIm5'?NOBf6t*%.`"Z6Stro6L/@)5Utf!>\9%@l/AuVop]EDT!eQ8A$?dU(@#Cqj%OpJ>\*uLnt/6A5M&tBEuaT&C+,U01=I"8&fjPnMiBm"P:3N3*K^'G6:8X*oVHnGL)"p*j5oU<snE"nO9$FKA,RlQEmE^1SA12Ach%#6N(a%]X3JLaYCn_rZCWmo$J$Q*Z=3/'qpq6.G$I&8VX7<^K]%APARt+cN)3;OV5bES[-q2^9R-:'neQc7$Q6jWmjI&X^1K854_F%"(l*"`k?q2L!<R,W4e-aljgl&+C</+Oq=lmljb24_\XgMbs\3h]*^J4]$/Vt\hP)39"cArSAb(riLF+KQZLX<M(uBC!ubM,Nt]QW%WFB*=mS%d-o!f=TlPh@:#,6h]RB^d(W7X*=k.#UPI&Gf<[<C%aM0qYqrP=^LQ@\R&?_>,gP>KN?LJ6<=rHr\`F@S]&Co4&$Xrm?A%]CS0i)m/FolMbI>Ml.__MYRU%ggk>VX)76qm-,L!\lo=T)MYipV)TQV:d]i(A=-PP."op$f3='Bm^=EK;g3R]Y0^GkT_qgXm^Bss%]F<:s%'K>b%X,<;ami3-UGEtbq&7i-:^na`!Br[eFgpp_4iQpD`?6u"D$b#i#7H*sn`!#Z-WaN0L7,X;i7W4iFHnr#7eEmQ2HIkV%C])]Gr'Fd8jI<GEWeG4olu(^>/p=]>Hs=kS(3_4mkt.sV\Il0B/'Gi,nClkY+&$mVB3No=)o^/.5=b"kYu2[(PCqWGm9L1M\/dhT%+geVjPQft0\&3WN^?V@m3*R19pXWq1%5Y7WWQHfaoea]6EH]hFg0g6$g&l6(^,^G8AYlq!e1_aL,tgt';uO*CD=Mje'7NS38(Il'%0P6L;a7t%^DP]4ue=R#Dh-CKHI.KZR0K<CR%I%ftDX62QX5$t7e7*VE'5uN<mMK^1o32SC.A$8Mf'#@_hFBJB[ZX7@nSitd$F#M.%8Fk4dO_@ICr%Tn>jA:WPgQDuBq2m8aK@rP7GGq^YFun%qZ3;p7IIg]\-QgJ`27H@-k$+h8g-sM-B>tBAeB'Su_BG?1VRb(_jAT]1%Z]XiOU,eJU,fmsYTs-c4?6?:eT$'JP*.4uD>!X92DIU#NO$VZm4/;2k\+](-!!WtA6rn8:e1B,T7!FB!md,n>:uSSM%]Q#`NqTp"%feZ97,SbnsHc&-M_?,7>r<`R`.KQ?C@giDb)-"UV#K+`@e_t&4MrEg.Zgkh!phY"rbs/EQM8^CuK&#YPBR=ZB\MGqE&MF>XlJb0^%$&Sq^+5drJCI+N0>\%HCX/)s*9<Cr_QT!C6KX<Di.hC9K2S:ph8K`J6An-hFS[E=`G_BJJ<URp`ffU![B)8:Yq>A5XdlK>AKgnU@%;gAi]?;jL<0Inan=fLl"QL?T$nA)o<Wn_I9*@4K<S0ikV5MHNooaiS-:+*N>m;ACAec[>rMktGp)FdWBGBr+Zo$ss\!pHn+?RfIE%;e\p!7QpFT`m=oK2A]LBg7,t$I(k;*Nc_WWKOAsObS][Q/GG?!g=j4j;)hJZI,VfGHjn>L4J9Rdp=;K:GUYTd%B];U+F.?P&Ig%p%As)X@)2"MgRd6>AgZFBG*HT'RM:rFA%97:27<1BCZft3d<28hW_pH>*lZBS*=sI8lHtt2)jD%^aZ+5iSA)Km^?Qm#s8ek5De<\te%&ZW+EY?1*k>I(Yc$d@\:7OVS1boQb(rA)go"e`nLnC0VRe5KUIC^%g[qSW:H;\QtVX>TWjJVg)eHM>oW?S!*-7VAaVX[C?tV?o3d%XDD([U=&)Bl4'^NYsLiD,a1QPZFshXX!b\9<>P^)B8K^K,-1_=]"gj0f0#oA.cr3>;U*qYhXjWk95SDj0JQG^U9Qm-Z!*#AA4G^H%ES5)e9[34P#,S:_]G@0()U5HJ"f!_6O)0LHo1^as[9FEWC#8n4?CT#WiVpibnK)mM5=7gT\nUpr$Z+F@.2n#gYCR"OfENJ9ZTroL%1f$DE=p&7lW$(@;\]0H7AW7!$L[%$[P%nn-k9JOTfO@/M6JUB+IYB!8(S"aXJGbC^:IC\WXBSaA%0CCGXb.d^MP6,0&UbTaFd1Se%>ZCM6MS`_1n5i]riC/DG)UY6F5alj-Q>h*_.e.85Nj)1d-7OUO_,u:]2`hbK`oSu2=@g7`@`"ji(".9D)pC%h@]2q$],Ns&J7Ta9%'*/9H>N+S?NWkfBB9ZEuC1"=MAN.!A#Jr/'(lLEd4USM^8m/(/-TsP1YLGdh8p@$7)DDq</.I#I0I3SLrYF$/ebk9.QjZApYo)!`%8emUHR714/R>(GWe?MBikA`#Ll=XZVW_.;72s!*qS'lt@R]&NL47u-AHeipO<-C[Q7htVJUsKr%bbkg1407#,9F<>9;0DMNZ]82U%:gO^V4#*$5V2d>#RQBJL`Ee9CP3IL/oKruR@HH7RdLAVB)=36&D%oUpmM-!(L:d%GpK1h9jK?lLN%FJZ$Qa2'/$]>k52ZY<q_tfu%Np)O?LS1Yc$HGN-/`:^U2hBp^Z't06'L?su&EFa[UXhE)ECqSS9?gY(VhLTC?=,8'RR]qQGH#(IA)ig;#?`,_!l.X:"W6X;G$TlZ%g?tpE&(!#h7!`f,)J8.\!uAUfDD2u:]D[rP?;IFV0JGS[d63I@E;@o<na:QR?PDjGY%;_f*saKmK;J<M6!1's9Q5,;S8=&kl?]IM%2OZos19hi:l"aN0YC[nHU]DJ7,*0:WN@BMM'O/Y;"gMuKbkX_t];B&lZ7d`Hp>X7^hbs#W@:S?5q\TeX,BF1c3jmDm'uiuOoVgMG%g8!V43p.'4igqY5MRk,pZt/Vl30rfsL0j7Z1dZdbE1@RjK$;dZr'kN9n:]hj'`Z5k=eMXlgeqX7>VOkQ=n!l3MpFT"EZ/3!VYDW"%5Im.$#d94'`r2m!q4KQY@'=:EB&5^XF;-<%T*6sT,SQC09dpCB%hY7OD(AK0g41hAZqnnCNHIn]ZGWU%;g@-QfS'K>Phs[i#,Z%u%_";>1iY)?@d>WX):n]$8GlQ/V32t-i0kiHU5GpTUl3%YWP62u,@>5E>d?Wfg0cV1'h)$8hL+2H[dDh;j)k+HTPi(1jGs-moeTaE?%-?,41Qd>qmq+*i.0+n/PZ!M1AX_@o%-!CsdB`_s@Z6(MJ]6Q9MGIJ%*eps-"UKSQ6<Y-RRh-IpLnXd[%+CcF;WdD$T`"SrCc9L4F%.8`YJ?Ic7<#E#a\(n#41KLC7@B8hDrLp"0$La=hl,1a\/T9MGdc+4"p\R9?;.0U$`A[7uQfgR"0S+B8RZ#.:W4ID34e'8]"T4gh0%rOk(*JD7g#[aiq<*au3lS)N4Bbg;5Uglb2HP:Y5=Ao23kTt7YBZY+Pdf=#T?\2i&DfA&BlVTutX3!)ah9raslI8K$+1*9IT=Zq'X%Qqdk-:o\iU!N=N+BUGaQ#Xm[Ag\#5:`3X_D)I6O)1dhG@I6bXCN8cgPTX[8#Un)/pK-1M)(&^L0$N\m8Xj-O(92'l#+j\R`NB*NB%]j?4X[Xf1UYF(>^f::&k/Kn$Y%^7?Y51pSf8/kbQktOrf-^m8e$>n"B^c^e7<m$m`Ni9:n\T;r!8K&CslJ14t$=LQYHb1f"P_ZN;%'G+;dlTVUuWWgP]"H:fB_eZu$(A"l-5@5Q0k'Pes!u5P;O0/8_#4:Ks&-16KF)T)#6g6A><:<.@?m7Ei*qkR>]\T]&2H-Wp;WSDO%;sSeNAmeFt+)/h,Pld[Eh4uqT,lqH@mMX;D^^S>TG6QWueOe,2S5O45"<#Db!?%e:_?0nn[a<0/O9+bP2]V7D2iiQr#u^<t,kN[^%oo5md\7_BO@D"0N(KpDElbL,7p!9I<c`FUP,-)CMgNlAE_jRfeqRZ4\Ec(bWFEo-.KXpAJF5kg-Rpc04)OUKi"mnb2@%&0S#!,n0%Dm27]g-+8;Y?2-j2MKb7hUZ5_J@(RUWm='PB1IipHQj-GK>H]1JMW.%@S:N70n]IN4@$o\Jbj(7M;&p(UP96X7WN33DBc'*$HB9I%)U-@B;YP?rC]isYY)R\,I@RQX$60n2!86&:()Rmm"G.bEgpXtW.K`8'];*Q=?nRJ`pFeqo?1i#YTW`ZH*-%U1Fr0u[cUp3"8]-cc%;(,FCa%=aa2$.Fsk$!_L+Y?Ue2nGp<-A-8nF'A$/C'onmcQ_91&$Wa*I<lu8)L*D?N('&,e7;soD;)+3Ju(aI4lQCW8-[:TcI_+E%=]c/EH7!.Lp)_YW2MM+7GtI4IM/I<C+clnl3'7llS*8_[HJT9GIc.jK2?il0[SV26oQH+aVWhW!,*4Ai3JuYJ%^M'6n<3sBhPT[R%HSf'U#YSe87n_)nE7r&qIkKr\UoVgH5e,Md5XTS*S'0C-J6=ntc>qc8bCnkMFjP\rWNOM6p<MH]^ncIQ4gNeW>(TEK6dSqc[P4AQ%,KS$ag1Vn=\.3t5Q`JohnAl/@hF+'646rI$"d>g#_`05!H`AV(BNpl80*!Qj&bZW@Fm"K?k!1:)9S>=Vi^h_:P%tDr/T.DlD,5@0%^d<tp,0`j;RasJ(^V%,=i)9;K?*U?V"\-7:@&5-/oZo+(3Xh9-m>c+).]\h^qB/\GJaq`I._Jg>RhjY(gGE)oBhL(<Cm`9OO>1Fa%qLH_&WfMmd@M<k6c2bU3OH7=\juqE!NH^`+la7,,+SbHE,B9lk4[=,_D]**#/NHDA_u2rd1I.<#H@\c9pAg6<-;Z3b`*sN55'(<F%d+qV'^?*R2\A*Zn,"ohSMrD(#N)+:+/qnD@i"?lYep_?'$\SkeL6U[6d+F3m(s^-BiYcpM*t1_Q%(MagM#]2hXm>00=mQ?DD]=Rd%"WODr%+)tjE*t4Q'TT8t/U*Rj!C2T6*!Wj)(lcJ3]*747,76#DgtZ"1$og!O1M.DSX,.>:_\!0.qlA<S$S:XLC"U"Rc:K>q@(Xto%URm#X;%ktCbZ%1#ALr"VY9`#gP+biFQ[i+!Zn#26l:hGl$+LNMDn)t]qEOse3h1"nWW=#MA9@5Jn;;fb>,*GL[X`EQ>pk==dUM9B%@!ji@L6mRlNatu8;b[UNm?lop>DH?=J2bW<`b^:9>Lili'CKSZ+<t*I+&&8[;.if67Z0N2]$CjUQ]&7eWi)Xu8Q>'b_?.Yt@0P0K%blMhA%[K*o'B>R4:J;d*4U[b,V<f'SZK_m$HN7;`/ci=*kZ;,nX\U\.><CCb!+.BVD[SK)V]c?[#+6Oj9_q`4dcdaA`SkNW#"io8%n\GZoc)^H]fMcH[6>%M%8g(`#gsk+^QkO$o#1Y)?Z$_NOT$bR2i93`+)1SZp[9\d6&P."(mH9#C`hg<CRIs*9kU@5)qR8EKl1[r,%aN:Q9\cekK$sZjJ^$;.iabMTqY_/)X3u[Dg6^oCUek4&s[.LK!j(qZHYGn5>#M^,UgEsmZ&1ET0UYY7lBcpn!$&LCln<>CpXkpJZ%]W,aE"HE2,=/S*iBaTf?qbU\5V&QoUlV/6K(:Y:6&;c`gQ32`j<tk#r1ie=jC%"W+P!N\9Ol3)`(T.DM/(=qQU.3R^K>"r`Or(gZ%^fY_#XlSg!`9G8M%>\J&!Hp@?gJMg>D?Am`7`T,VJ5*I[-"O4a0WN.gZ%D'.O46+4FF,qLTN>?DHKKm;"^lQVe)>GX5)$sFZ&=K#%P#[mD]s(42U5_Pb%X``4IL(aJhi7n1\oXu@Ki1sDR7*f.(64/ZS)L6/5L-aeO^r!?XY6EErcA68'P!O!^``=n@6eUU,BNe$9!:Gt%/d:1-jk3MhqDNT9d7dpR`X\!Ec*hf!jFGm@$FANBAP?i\Zj-;8;*Tjf'!:-cY]"c]?2&`@2VQuKS5=Gh)&UO,Y&KrdNLQC/,iWgJ%Tm\WCZ5<_<2b0i7Jsk0G;HcTlNcf4uonQU]P%2>7B01HeAs[QhH4+2uH"Crj1`-ejG&O`'k%20ACCOSBWZm]!A(7HT)"mO?g:>=f%KHEcZe4k8?T`DJCbGX_.#0r@deFm&Ga^*CZaL<)A<e0//B`6_4-G5XMCdn^NdnD\X\kie2(DHqgU#8=7ad63=%*UR9lKB`3DFk]5%V'e[BV8"UngbRDpk_mm76mN-sUNb93BM(?:cic5A<Gt/nZI2!ulNq+2$\#Ut@lV,gRKY`T1KrElKaUTtUn/K&qle1gNrmXL.,*&.%NqS&)4rbf"B`[u;'@V(fPT\Re:)E4?n^Wp.N01$;/u`rnVB-6FEd>NNOmd0lns2P2c7]9D2c1*E\i1DG#*MiK38=l.$++ia/PZNG%9]#sj?<gh?nU=k.h<gOJ""Ik-!Tmah*HYDUfT4VX%-H(,8A=A8EJifQ;sW4lGBT"(<-s8sND(Ns-a$8.!Nj$V2/rc]964$Z4&".L%1FV6mX$]T,nCG'`K$<TBC(JOE\k2b+S]X\s$LV>E%HlY%\Ul>jDD=DGpiqqJD?nZXNN7itnOjQc_GP%).,=Te`F-]&YM'cAh5(j0%K:;2L9P$-2Kq^5l/]hWpj\;.kR8"L1\5C!_;`QpV35Cu@A`OM?'r^WGpSH=bZkk]kGA6L5hhP].O>h]>bN$PY(tH:Dp1DrG#WWN%%:\NIZ?^;k1YsNFk\N6!JhIj12>_Wa*h:6!MNeZbJ#LsJF2H4)2Phh(!)0@'pg)>QU3%KW9i.9UTEhM!D!+hXtF:a$Z41QI9_s:+W%%ANWXZT`VS-a9%&B0Utp2$[$I7--J.(M8p\QE*so?>uo>713GTh^i.cB(uoU*0(?e&e`["MU(Z$W%:g[o'ZG`V[VX#,J?h2!R2?!%(5E?X1,c6p"m$:5^2X7hIg7!5kt;"fP$1N#)p$:MBZbRTZC,NV,G3daWoIsOU$Rl$E3`;6iM09cQ&?n@prI7oDg-k<R4mbl<tp`'%i:"kO2`44DFooJ<Ntmil)l9[e9IuHpjsFAb1=-X#m4tIh)okUPOLT,(3!L7./'!HKPD(7pjU(m:*,DC-"aNFU@7fQQ5R]Mrb>-B!%`bm&k:<ALMc$$$f6L(7W<Cp/]:-n8-Ggh;](7N;mRJ-I_;Q*YeG&eea/u15%n;8AC3h]Xc?Sn!>3aa8*Npo)k9Q:2Bli<r9QE@cg%fTh-t84P;!FK47VK-ssY@U$+sbq2\X)i3[`X0LYlm"&[N)bFc-KEhnnjeB9f?(iZcc,gHD77VPBfaFk;e/IZ@N8R#!)_3K*"Y3h4%+`g\Ibe?aj8@sG\%KsTDC7Ru2Lm?IENf94%_Pua_R+ARQ<l+;H<fF.35a&5i[N-fI10%e1LsE_;XXsS"EHn:fC%$]nPjqM]:bt$t%*=C-2#,&j;baPTBO`X0MnQgZ%W.#,Wq_jTT=!;_sp*c5HBu;"5'3D78Mq+b%^&cI@!bN3+$%D1ZHQZO5ja[a&!X"q1=rsBWc)nn8%&Z0Z+>$M&q;DeQ8R&cU.9uN6u'Y:(gk"<Z8J@DKY*=V'C(7IQ=^&c@AK.DeXoo.T5`g-Yb#N$#Q>uT.K$Ed9='>BmZkLf<^k>OCs%M,7$/#</GHI.FVL5Z3$FRf:8,E:E?)"lR3Sq,nFN<,IKVagC2*2S9@5rKU,%;*Wosrp1>GlcuL@kb(0Kg`3d\LJDTWFYHOthW88r%TC7_MHI>`)=+`"jUOb['2VK.=%b8euHNS<kJAbcs.hnQ<@V34M`V'A3h7lDNY)J%&]/GO'>9.GuB%faZWTL@_<Bic+ed:hJ7m=<2%ZVVYZ?CI7?[RZ^kpo2#RY`R10KiiKhS>X-5\S&O\g63Y,<UOVjGh5p&=7?jQ/K8=MWkH5OL@BE2H5%p*9S$mqKAV8k;d^bVem6e!%6M4eTQtkid#oc.0gcg3Rkb5S&H^?u`:E$HS2QWaVXY?#I8.,NQT,G\:29cIkmMWT_eDgS[aGd"V*FmkoIPK@%m@so?&fd70l?]<m%'o!9'KTsT=NG#>S0'*n92o[G2G-%q&9f^(@'X!B]ZqK30#XW<Y['qs,lCTk&g0QpLW1B@t0h4:YdEpPbRd[G#S+X2"/^C_-+D!L#%lFN?+F/7%H$kXeSL($TR(50+CRc*K+Z,SS38;ZQKFP$XD=6gnF%g8tqXq3b(F-?T^=^Prj]\O$FX1fJ#;-c.#j!:EF%1S%HV;$ml%"@<FuE]&H167gQ`cK5qBr\G+"A,3)"k*_7':btAZABRATWBG!QPYD\?'[b^fU/d;pnk8ZD.1;s!31"@;BN(^\^`mV\.VT_F8kaDW%2J\>[]uEuai9TuH8FrYmdbX-ORU7m=g>(Nhf.8NMb15'\Qf`O6Us/0f&KPO,1$r[LFA$^3B>UDndOM_,Pd79;9;M5J_oWrMUe.:n%[!'`b]k=4!.^scR5;`qtni9'E$Oo8B14s5Q*Wo;`HZOQC,E46j7Wh8b3f1[:ObQDr&5mTs=m9_jju1Ng],3?"`8K3MdLrN5'NnVI%6Fm:FGrRrLY+jGj*GCfZnG0A8;l&G@1iJ4mY_O*(<2;e!ZtSV?@\ReRd/n$]3'PtNc^Q,L,)RgBUfHi>j;IuP7:56TLoI5*:334`%@`+G.qFm5)dV8/L]o!M_M]V8-^sc>"Keu6B[<*sf,<aMB4BihEnsCR(j0H0u1M#1jc.6u(^BN&>/n/ND^mH>eDQ_)=!Tf?'_DQdj%?WZG/O!W5Cfqg%13R[Wdl?kcVZ3cXO)j"+2$c4UJh-;23`rXoFD51,]OdRX)l)**D5e=YQDrhR/@-p+j\t1g?1q.(T&Vq-I8nE'd%_XAO@%?1Cah$%:a,A2%MKXBC^Cp9mVU2CiE)JZP0g92^&E^L!b8jjke;2Ee)XpX"8%7q'p$]mhN7TJ+"pJ,4o?0$OfJ@&p_Ifc[+%.Q?0@3B3sYVi$mW.TD?oUdS?]Vs&i@1ZA$SJ@*)FaPM;.dOa/&Of^D-U7)_lf$'`GVf]StC\b?JZQksJGreiq=#>F&F!B&(BT\pI%Qh^]8h7`FNdj_%l+U5t6QIVnpP!#+6M-JRQW_TbP4D!f*Aks_5&]:HiZduP)VaSqpkscq3rH)L"403J(m!6=t6HM^!B=;&.:@d01%dfnbg,Gs$Z-1tt4a/8/llE"bsEsj%YVnF$XZ_oS!k1KKAle78dSmgr_9-.]bk3;_?;WV$6F(!id40>,1;r3o7dgk9hU^bAcTZAh<%[EisC=mN!'gT><N*,D\&AX=ua=4]Bd=S_3%hY=HqW,kmd\n]`BeJ&VP;E9K(k6qq><&8$irY__+:HNWWm5^i3L,+qWM2_\8D_(cl%8o2l/0bN7f6U?2d]SiRDffpPGC*&uY][c[$n?$=+7$nFWkfc@MTuM#DM:r.;hl-+Jet;50D$5Jn'*7sBCJ:Z%nhjB6a,!gV(lEDl%II4,4)c.N4PUh]7AlXQN*tg=<+S;0Q5r/S]CTZD$.F@7[Uqn.:cq7UkLib20Ej[UH=gUFT]3pB#b)Q:%'@"p:IDn`cUgo5q`]<??%d[mf]BmXtI6E9fjb]o\E_':M-6(4aUY>p]/mpA@Ql]ACkd/-TXOMWD;@dp,#YBm!%d?r5m.J!HiOFh]gGlK:o5Gmm"1V7IU[&8qj%7LHhY"&]gZ8YQ?9MO5.,0l*T%R=Qf&UsPm`Bc)B/%R+f.^3M#KWN!f(#`]B,AoOt-3_3_VWAWV,7HA9ag&bl((en%%2fTe4kZ(@$%FG`4;+f_5ok_"hf0lPU"SLos>c**5<.AR+45UXs%UTeQ.SP=X6/=8*8_//'=V?2,Q_n88<@5b&2J:;MAr)jR%&>^]k!VX/P"<)#E%l>n`%Gdf:5#LsmCcaqrtYKiXc0d1hdW#^$?!an9,pGN5<&PrhN62sD0m"W8?r1\/.8ZRm5%YGhHLWNY(6a+?l/a#2W,AuaIb>?cQ%,aaA'6q%Kl7+IGPP@P(!26Y98kgP*=j^"J!J:Zepa0\N1^LB!-26Jk'+'mJV0Nb<(n/!&aPe"(>_1ikN">.Y)cHg3A9N0e4Pj9:A%E\N(T`fEZ^9hq+uB9h5/=a#c>2Q(aElr_/mM0kPI//ER*,$D3V[J?iXqnm^?gfX-\b.TUVYD%Aq44anf^6g=@a?jO'?M-^FW^i8U%YGccs$jl"hCeJ*T5_Wa^l:I$2lEO8gcFX@@V>C\Nk\'!tW<)5VTb`?+*XggV7B"1'E55^q>Kf^0OXh6T=`;RA]@PLn3[EAp)cj.!%etY695tFXDR:4[[6?@XL?5e5*EK;Z(]mK/Y_D7V09"HbeFW.+urYi*_-=Vt9RC-QuQ.m`tm&Y<U,7.)bOC.E8:?e-=EfLLPM>b&&%bW+ot2*K2tf#a=dn3+@LH)IKNPq!Y@;XsSEZ%Rlm>0noo$_g&s'=!AD/D!iB:@r<qTB@kkNbFgre2GlP,`@lc1:gNN7LQgMWu7W_%"kLGND=/hH_JFr0qh^1S`;Wk7,qmKIl:LW09u4/5K3:P,0@"r7c1l/`7=2@Oi1dNs=$F?KpncEQGY^I6MdB>K1TO)_GcaP0el\%;%1quA<';E]U3glf&0kJWKa%u4XF<ao0V/nbJU;jo,)F6Gs9mQ,[Tk[)Wq0"#dC/au1[FCRnQ]7Ci7I2DBaSk0:[@\G6pVJZ,/5(TG%,&)L3i4@c<,T:-S4aY4KE$h:+)d&/(LD&b@T\*93fY+_^Q0Z,0)o)8Q=mW/h,\(D:10T_rj\F3?+(eM5i(j62\7<Mtd$J9ZH.$-*%@-SS\^+<?Qa&Pl*fh%!48k>3dP#>`R3[)H">NuMlI*5,EWA%81O^Y>gfV9?5NRud?;V+!eadZ!_)9JA:4Q/Dii:A+oVaN*Per)UU%@$T5$gLh:*.mAo[qQQD2MhQ"@)fJ?3Ub0iIg*[%(49`3hGi+>Z==ed`G8BXO1S*s&RM^(JZ"9*@mE8sIUV]\_9!*dphhRNiAD_F2%6:It5CsUaLL+7W0@hFn,kqDHYXf*1'D3P0k`U"PMZkL*8XXmtJ@>^9I"a,\IC?R]5=#.]o)@a$:]\Z](IYq??8E<HrS5[iD)I:t[%WO!$PSH]i-aFADq+`WU,h<NVhn&DM1)*;KY29)thoENHuDY4sno$6hj5RpE_OAaQ$._")ER<M3WVCf]!qn.tZ`qn*BmN1s`J1YQ=%SiPP1T.pSFMs0ihZ,tU^Wre)GQYXr0e,JnqT\P(SQ*,X&flL^[#$mG;[<pt?DEp(3G[/DUEG>b`7iNF=7$SEQ#eJTup\Bskd+c>C%>02@-2egsG._!*e.jPY(Q>bq,;C*4%NksrH634HR<pQk.D<6gY@LVF-\.-0R`ZNZN8+4WiF2sCr$^[m_0'G%WE.cT0cTAIn6P\Bm%M"l.Uo+$=[@dGro[WXWOAT.$FA$$4XM"@`\DML\/_o=`pHdjQ%j(ORLZ;.jS`PYR-Z,oqOV4eoX+M!CV'A/0ts(&<O\*_hM<2cou%\LY'dDY\HnpS8O1isOb*)UkV'iA.UWi,?K6_V(a2?>2AnTu!T3Z_jP^F[pEfCok`jdDo^UcbbNhHT<+O;X8e#C,C3:6K:qGd6QC!%BJ_\$L!;caie>O`<9Wt/Pdthu_8F7sNPUGRNFlp4?t1G3HduenW^badg]sV::nu^iIFuj%2&b71]Q]tL;6q?[YG`JT7ais&N2ip<%B"ifhC]YY5]-Ne^l-MQQQIAToQ,[FBh"]+CIP&A/bi[D/g<(A<kaB9G1t@Os9")lJ6-Y#$XHuSN.Ton%K>r'R1hn@YA7<;2m(mJ@%:8d\_fqp*/9#2oc;gWNOFff=95[Y+GGO7@#W%G?NW#_A08!R>">uShVfXG*ClsI:TKY,_-ahJ(,beNn.0*E!2N4f7u[Y;;@YYnuV%pJ]_A'k(%A[JCm0D?Oh1beN&G'a%sVkEM8hqYOY0!B%<od&@b4m5X_+c!!sgER`;%XeBaMm.8=\[t`c1jOVP6_%pce7<`JUQh*+,%AaS'J(<t-5bPoi'6s["8OD%dr:.X^$[h(g:C@>"\p2iT!)mrEt^Q[=[)V_XFTpP/S[c*U;.;fr,Wfk#bG;RY5<_q[Rn<p,Ue_O%:%\'sT\bANK/9eJO\[YAM(:i;Y$$Tg+:crO<gVNB+b($T8lRQfS8/XW@8c)+QR;467\h6rt2_sT&0i#.T6e`mT[N#W\iT+&hV_,3C!%FYV$_+Y"`$2qr^q[3feM@_hpFet0TN,.&V`Y9kBd*(kn??<(];?pApu2ifM3kN2KHq)(>u(S)K5p(r@6Oo/+tZ?h8NrWF7kA,C8#%cMdqe^/JV3BB[R$W[I"pCsO0Kd+P%aP>A"BoaIC#?VF8BW>Ul4SY<AS6)U:igtN]-q\+&eVZh9lL9B5'"J'jBE,TCQoODVua!T]B%Ze%!Tp*]&\-g^PKL<d`R%,%dbmck4Or<YOGo@n.R[QY#IOfKJolM&(uT*1VUp/o66c:L@o-"J+KfBO'_p$ohLjXq?\?_>6B!ldp;%*M4flHG`3f^[%R4YGna%aXNjfH:)VVcYP"6jmXtVG\1T9dPn"Z?c$AGX53NrYdmPZr^H7KZi2Q/*u!1dA:O0T5$N#JT-KMhA?KbD%jRC6\m62hO!ZP;+ZTKG,h)Sa!!*,jQY_lXN'G#B<>J94,Z.u`iA*V6ZQWf*Gm<gETfhP(_fWBE@%OUJ<hC^Utn?CXWQ>N_K^!=(I%Cj^\E$P&7M`cDoU!YMKQ.R^gIDYqHG>HjR=SVUCT;G?LT-V)FuhAld5C5a-jmc]b3bn8E)C>1G'of@A2YruK\c!%P69qpIC@[B&b%b4G@s6Jg.]f\q]&kgbXbP+U3%@*1LD8oC!eF*o;rN:l_To5e:ScG)W\or'-=Y4<iaoQqU$Ao_NS$cQ;=4n.ap3BJ1VcX<4.JTlLO%d$VXk3.C#QpaVhkfmtiM>7bn"Inu'W*Ke0bi12f-@9<EQ3+dMLAqtK9HKOp\A%#G^<9BPknQYA82JdN1Jhp%7gd[[AEo:=A4%i<r%]2d^nid!Q]-=?ojDA%N/Eb'nm^FIIqi68Y&m'^9d0Wp<,3Y1r.?*R]lojH!I=)+JheL50_T^eUqB1=?mQ)cl2SH[bhiqf%_Hs4<1%DO'@u.5MC1dMrL34$+[bh:JP`E)rP<m#_12-\gR%O;lgKOX@-"BDX0LMUdKMQBL%4_t8tqj)LqDL@jH)jb]p,mCrC+Ma_iD6`gh6%2mGTu\&7iuoeF)@"uDE!4,=mI.K'4tG,=M%lob+OqAp7lHdX?E\[DJ=&eY7&&=*<)$P7?/6Pd`uhgBq9g..&;\[oAaH=>s(1\@.d%QS$CD/5+Q*"8>QE"_p2%%u9i!oLid`O%cd]Crht!>oL);.pB#MVhXfaoScPKVSs!7VpHZPgaIZS<q#I$1anfrR7AU7Z$*6-@V;Vf%[?F**H=XTsi*k`k:<"L\6W8&97hD4RC?gr?SOLj]ZiRFlK0:uN9H<C%da/2EA6Ou`o>^IEZt>CRl1!pt4fD;OS5\P1AuXp.]9h&1%e2r"5]jkd3N<b)qA[(="O2q_r_E8moWFI%LrOCk8WUYs,FR$Zgk*lhi3Or30>/R#Hromo:mUD^!\gF,dXhf:*A)A7!q_?++NukLf%$.E6`]Bn7&:/I`]52tj=gThHl2d^WhqJmQE(YfG]1?'XO%p/Gq2iajV.N`QDrF6M`LVpMamc#1U&(`X)FhE)]+4hkril2m:c2&A.%>B&eR\6^O-PKemCgp_#fgnaQ#.R)LI/\M)YE8`AL6?c-\+"m1h=$nQ0bD5CIp$J/#G'D_G#r)1rg(D$h`L=h8mPTfWCfO$Y1F@.G%;,$&d[K$)>m.>T<6;%b4+U>I)o3.(7-bS6[0NX\7mYs$^8'g85G+.8Vg)@U40tFHr6Yp^&!A)+WL3Bf7\sFRJ6SH>\DpN$JW.mbZ%;*E-KGN3f:Ab^SMct$=5rGo!Z=GEF$Zj=^Y`_hLEf.Fm4.t_^AVKR]$L0_DmDJ/<I8?MO<9/jWOL>$@+*StYcG=rcfXS9!c^bG?+%.m6C(!`uE&@$4T(^uZ2g:7iSTpbS%k<-><e9ZPKtWTmZ^,gp9BWToonHg:a_5,q>g)(m0,c%IiMhb5:?p!&.F;Vt.r,P=e&CS1pC%Zo2,Eh:Fms!=ON)Q7C(^EXfDO$D;bE'j/@bfI%DoU7m=beeoVGN[Rq(bR(/`&]K2U\C52o<4I[3b:urSHL<:2RL7Y>mnYhV:>VSu%/4Y&O<4GuX\D5?O28Xc062-B.2&^bH4l21fi?1Rti2BM[U9VEeJUn7d+=[r/fD8fa3/e<QfcJ[,ffbN(m7+R!oa>'@r51]J:N/_&%Br;ki7(mWF*dGGKZ"dMq4.A7gMW*Hj=&,A09J=0[Zo,O;0DRH<nu1?4L(2?RrbJ-aL;SN/:+mWr+15^XQg_]A`;a4Bc16UYd+M$X%c+ekCZh"P^,7E[g)+sa/]N3/\eK>%^g2+N7\+Y^?Qf+W3\)Ql&lTRoYG1lQSHbYX!pI]UUf.YhEhgQGds#b]ISFV=^@'f.G_-sO.%Id<>Y[II.BeE(/MH@.r;]MP],J?Aj^ET0Gk9m5:[q,&:'m=#prd<6BjmIATjqMc:=nY]^8D?DZ\/p,oO9sWOEkLVj]MUc*aoZAIr%pW]qsm`bA%kkW3SqK1&E:>c#[ng^$UUXJr5l/-q6(,k&u4/k>FqqS*MPLG*/@27ohT=3T?)u*t?_sj3oSX=NkiEjJ7[9f<tPDVE?%Z#!e?Y*.9Wj>OAQCJK]Bhlkn9127j>m_H8X\=M]K7AHSaKBdROkYa;#l@.7h*][5:HdF@h@o\\mo.IEt;+[pa([h:\)!Zit]"(qP%iT_H82aS+e?=(.\T)6[H7HBnuDe79Yn;YIIYgu)2:,S%_X`UQ%<>\t*Y'H@e0;uUjA8Shl_ecmbT&'cbdl$X49H]h-/se2LJY,=g%?/<k21R$+]lgDjmV.SnU_dq5USG>/<0fIkC1=9pL3jR[G-C[^gk_>2@ACEE`aQ$p^q(DJkF'l-D8D/*-IMRrrSRaWa>qTDgCsR@Z%FEN=HOIIqdCq@2_]%VKG`lb0Z'<PTX9IcO7Y"PQt-CRZ\a&8@62I2kn8q*.aB%,;Thr"i?_e.BJ2)Y:<n"=L.\u,>b=,rYBf7RNG%cDI'J`<I68r@'X]Cq@2fPaZsWa3:E]bGD8=OZI)4?!T'grLI6SACH6JRrdfujB%A'9ioq3n+bs@ZfqOK*3<3=acjlEX#"I9Y5OKh%klP=]K@;0Vd#;.Jc4cu8L;PaPl0>$*YZ'clb:q]O`ZHkJ[_iR46b`YDX)c]X]$omJCtKXC[QhMaE3W(%U=Pf$13oVel3@&m-<%+N%/f1S/W@2k'DJV@R7OFQ=%HZ4B(AQ:MhJ:#(2&6AO?)gqlCV6/BFXaNp#2aIPLJEgFF8rj5Yu;\A@;(c@mY>[eG$"^[UoH`N7nl*e%ZHV.Gd832q\MKc2b9VQoHotk6#rAO,h:Q<,7/b7oM0*7_$#UuCq\Ha^]?FQiZlG<=3(fUNMFXqccs7GrL+RJuQ]iAB5;am22sS(q%O/oh]UYKnoQK\BNA((m0Eb@%tCQ^4%_!$7&56/2r/e8A-@2ppMTCP)c1%qi78CoYsaR(Js(8r0(p/gNObb8g8!BW!MYUepV5`O9"%"uI+a)^:oQ]>@N\s.YIBlcLUOE\N"].Z1BQ]]I>1em6TAWX2-^6"?+:L>"d.;;5),*sVp,2p6SRW$_7^Gnh7+ZT(p&lEd*,WcU(S%;(X_all+YSPM0Q,,.k(a!=<su,M.C"Z#H<O(:lB\gK,'$'bD:QLkTL<'aV-XPpUg?o%S!9]1u,)HEV`q)7hJ2`_=%Qrl9B9STrHt%lITZYB9[A#R/s(#T!<S2X&aJ(<l+:b=/.f^"4k3$q07kJJN[pFN)aA$YA#1Js3k^tBC&h(hNCrKr+ad3S)1!LmNR]$Oii4E'N*3T%pBW.ZF#B'pR#/<*T7BX!n3N&G0bV+:R-Pt@)DB!_(%*!jXWG*kS^2\bYAlL3k$npkIeZN\UZ<*=<QZ81)-/9CNDh:0H%im0^2[n(%!Yt-N^"<*!G@N#OqWt*r%Bd_gR+Ts8bSf^&;(O(RP*o6mmjL(PIU_]"5<d)$XN\_M#)Ta?m^]'8`qF"A.kpk\b?sU1ha")?j*(8=%CCEmG$@PNG/oSu3G'OXYBi2AG.pi=!,0LNep&;8+*#k!Ze4%Nfq'LZ!p?qRh).DP.06U3/;HK>T;h!IbMVg1b=>m.,--YK:-C`MV%8PJ1eU[!\qd[1qrWQGh$X"Zl#lc.]XQ&9#&'q/!DCK%PZf<5ubb<7c2aSTJ6H^+4@%.dR#D,KnFO4BVW?67'T3Na<>0,s\\)qcqB%A!_OaENkhq3IZu=et_Q-nu>j=K6(:k9>d!@,Z<14.=%*t_eV=M2;^3e+/UJ]00[+L-q+ZqqHcoM++/Dm^%gl!LB#u(gqM@`oZH3H%1g5>).lXKkp=V+P4mQA\F/S/IkJJ%HX-'4@_>,sG:j$p5DOgZkW\16f2ZNHiMdO0?h"@d/pLtrGO&aWt2R6sY5+5clELPZFk`phq%WU`oPafZ-.FP?Ve%j%80]8p!Vn?2f5Y!2JM:&ES3l')#=r3!+G(oF/^h)sQ[Q%YM'=M4NCn[JNHN$T<Vn(^,MnFrmE8#,I442'&O%0e7,'fBV\*]lO.eo_I^'BW^GfcS*!s]'_f*Fl-^JhM:FM?7u@5pD`A7fufiEdTiKlF#NlP9u=R>f(2K/gp?<:9qJujm.PPbkO7s%%q:3<b)5/Bsb[!]9?+BClnpElKde9YQmAFSMC2S.W=+jt*p7u^IjF*rd=#'U.5K'>:6de'rkAK<0?ZfXp2hUMC%ZGFHQ>KX2!u\3r%bO4_InC!1U(MCKaU<_c3h'O:Y"/g&)g;L;FqF593Q^,!9'V0VMh)2a9Z/l:OcUDP*N#q=A^35,]M&P1J3n:hBI%r<^dtI^LiZ[R9%*MqjnXIeh0=.6(DX8V//Wjiu6@r>C)AUh77@WZ*%m+0+\OZmX4D1?>=3,Gf"hI!fOeBhr+H+#&='CGeiDsu9rfft5eBhe<G"7ESR%RY5;kEr]X$d'jp'1Vtuo(E9l"_8_)&U>[a#E?7Q822er_Km(Q2f_#`UK_]ZUD9kk#L>!kjf/\KLD?FcqlAZ*o]jp39*!,ackT4&q%m@K['2g*fa<GA=MWB5XggOk'd/i9k(E%Jb]hK=."9dG(8=_Ef:ROQK[!=)oD0LUrO:k_@7FQrAAURlJcK<=[J97aaZ-3CW1YUG!d%2b$L&m';kKo;DNpnI..%?0D)p2)_,1nTAjOf\jaR<RL'a<&Gcn6'kUiCQO0iH%p!K^rb\W'H:"IB./WXeOk\PFQ)*-@?:S)oZN%n%J5((blgH"]dDX*@opjPk;ANZh*5GGMahq-.X0jMuB)sp8!?=qTCd8bDdi#11'lBHEfL$6mjT,#!Z5K#5310)[ghK#P(1>T2^kR3s%*iErTEr\pQ>[60EMZ)Ta0qk=h]dg<^[O>K]0ALe@q-#RKXLW>/nc]c]r`W15r[3Pd.`t8*h"@b!2lWO!e[UOP;j=Jg>1Vbmo$u6n%*2=ohV+[)C>=.YDq_K?P\5Lr)Ame?oDQ'.LrJ&PWRaBke@9()4mY::TrPj]&D-khtDq843=uM$!qMfn^<27$R"7Lu586s"0<W-*1%VT5\%f0<fn7GNl*f<;s**^gR!;:j-BYI:H<[FXrJFoD0W1K".p"R>jVYNe'DhpU'JlT_C8'gS5=p$4gbqT8s+qXq&Wf/UNc5[D/(%&SKXa`,RETmTn@=A.4Gtf2$"CFBA,S0e9B,Y$Z\Y6LPklL9'Xlf8eR\fq1N8^]%jp_pm]c5NdIM\pgB=)O36b4hb@jC=_L*N)J92%:R>Gs4'5ZEX6\BPWaDCBa6$N6ruMWJE82?U9<;K+^]%73lK2ZB\pjSZY-A=TGM^4cFoCT+]FR.C2_2#`_6>oV+02POs+;pIq8]N$%kG_a"^Q29RYA)i\+4&JnFo?&ZR6VdnUS+bss&Su-Eu]>Qoc#OPTb;3(J\$<H1@2%+BC)l0/]1o(.hA292H"olD8sp.Fo?X\X6V+G%;3moTlSkCmhR'HC^oZ^UeFi-7eSiNTHmA'U!t2QLY2=2ppo7%gDU]Q=Y$X$o2lu:GS,#$1?,+eKfJ%IHqO9Km]BT*5rER*PX839L%CK']5I`(9\N`t&<IoX7'lL?ah>5,5@2h!ME=7pA%4Gt%/kG`r2^IEFF2lQ&o^T(Y3#C_oKIf6>DeS;?$lMC1Wl8RXmX6)E<IB34$%Hf;uEldsL%3G)R3Sho&JoAg0;:U[F`7%snkf(J?I(nr">6s[S,L7pTe)lp,K(Fb!:IU+<G,M)PRIpu?uXrY'U?iPB/8p9UCFo?&'%QM7**Lir[mC\(TqPh>Y;lMC2BP0`,-YHD543J:HFgTQ";ptjK%GaB67TM%rpU@,gO\*qGDgH/oDJ)GaB[^]U_Bl-Haf&rI]8tC/_%g0>%@$YDbZ"[SOKFSF#.Za(7`gp`h`AU=&blcmG=Bu"'Sp,Q/DS*/tDj,N`FO8JOt1T.dTSm.,]V\dZc5+dke?9VN'H+^Sj[!qoM%maBtP+*5i\e)*a(?#JJX[Qf5rM&n3T]ne`F`qu_+rnV#TAFZB7]t?@l7P>;?TP_76n(2L*labIddHchh'>=DDkXP4,cI_s@a(N..%7isD=Dkhr?/#UeX`>:>Xk?FPocHi,cbai+rqj<p]SBX5[^KS6sIrYG]`]rjd;d>a7cL5DXle1(cPJ)sD3,d'cJ!iCP^&IlaX7[F0%kH!@DYs*Cnp\EoSEUD;O_j.'"gUhOmcYjh89.gruDWg6$ek4eer>2>ABcGOX<i42mIU&Fhp@HB61A>QI]e[?EiTG2@]l^?J#:1Lt%Sto]F?b1AqAZ_8#6jsq#D"RPFr:A'%>;MPL0&8Y>n9/nd4kbAXAik<XrG;6+U3Q9h1.bblkc:Q7X"./-nf$[:DJf?aH@GDClm?2n%]5BOh<T:-]p"R68mEF^Gn[E[6GpX3YM*)_!\$*"ok$'I1\btO5gZeO!0@sA`Qt6("s)Sj3C@4j#XNl8]ZE7WEbn!oKZc)9WWB/5R%bgGP.K')@Ta][fdhW$P54tYStT"3RHhg+u.p7E]S[LX/15DBodT<\oI"!n@l\3F>-iQ^P3qV_L*Xr8IRm``4kc!pplA+Tq5;4X7H%cM@]m]o51Bc-OXX)h5<PIQuXk?.sW'FpIp9+h@4@pVu@A0<6R+?.\\NUE?7LoCHbk%r7+&%r1FZg+E2W]?C0aT\_`qoEXH^p$K3_%e&SLbGO7J_aT"PTrk[:iNc[R9q8(l5:HSC6#MUc2)?2(iVuc:eZ=[3en1;H2i0KNFjiJhHgl&H)7?B$dV.jC_EsWpkLB$>4nFPUr%PpKM%\cc-59sHkG16o*Fi'i;S>JYg'iQo!gCi\^hBq+:(iC80F2MKQDr^3,Gpr]JFBg0-.XA*%n2N"<?H1Yh0T?SJ22V9]&a2R^<%YbXq4jMo'mCLu*(c+[;^CUVY>AIB!ulsAbBc1Z%YD;O$:^%lsF8,i;X]iXr'hpArl2r63:@SU5hI/C6-F8'9ZqA^@><T4k_Z^g9`%*R?WN@$.ln!.3*_@P)(VcN=.4bI,qPoIh?db=2E^`k,ad(]?O"YTL&d4fmqa;!GeX0[!JsX:6f_@-oU0I5_ZeILZLreJdQ(mn>Af%gj)mE!35^5%56SpT-rKGU"u1cI^)Q@j_oMFZMNYnL*H''-=Bp$8#r!J\7uO,\$t?EKj"*ddsUfV&LMnl/FZ@41\ZZR_LM:*Lk)_g%]K?(SAcpZa1@7;_<+m_o]km;+qWIG'&d_>frO*ct3CdJoSj$a=EW<j>m(lbD=DR6uJe/:%L=U8rM,j?`B(-tbp@V.K`d*ra]fT7%%4C!loYE)Pe56b%4J%`2aq:E;u'mY>RpB7BH#;.G>;t7]\HpK[jpLb3k-/;YI8rJV[\][KUf,BND@D8s#Z21Z/PfW?MNio4Z?F:>&%US$Cm*dsM<]ap0r01c8)R^dM'V.efGLZN^3^lS0%K>fG5_n<Lto$)Nt2$I75q786sB&CRgKNZ84o%(-!f>."G#-PH:;c@peG%Z!=%>B<=KcF,+J$hiK,(pEB1?<l>i_LJs6[d#Q6YiV4$O@dd-%Y+F+UM.C?:08==DU^ldB5UFn(57OKN4$8BiWCljIK4jomD*tC@^S0<%]mpnXJ9A`*TC6."N)mCuVHYjb`\Eh`h=i3ti<f)W#19p1V>Bc%[KND<>/FQWn33p&Cl?m7JDQnG?gWBp<7#Q`UfPt59$(hj9gGSd%qL"WI4E))u!3shL"\N#5c:Ifqm3=<cSiqp2T,h5'WqsC#V!WNbRL/h=2t7Qd0Rr9a`uYn6pT"6]<2K]9;On(U>-^kMOA4LmH/Y3:%gLhl//;Y==JPR4[%\)\&%"&lJOF=(o?g&i?EJ?c.O"O>I=F(Rc]87UmAcql@nG\4#Q00.+.ZClad">c-/KVIJ;[mm@>dXJ)eo%]^%?Jdo8mb)'E611=OF.YK*TA"RrIi*EWf(VBgcJ&:@4!ef"M90f[r-Wc.r&hP!IND:??eKiJ4MJFW(B")V*rPpJ1q*;I9)dU1#]@l>%s8",(Z2LGjZ2Ga\_9ZISg\[mWgZR&%c`:j?]Y(k*?2jfgf:XX$O8`8I#r`TcGEu(gAj^EJn4q&46h=Bf1O.%UChWgjFp;cME's4u%[PJcH+)GWib'(e]Wo5imIq:^jRd%TYR*9_cls3Mam0qP^$T9hkANN8!I<%\"[POkO]dJeU1cBaumhKo`:h/A>4YmN;p=GI5E1^Mb%IpHinrk,[$$hH\)!s[H_Rqf!<S+#;\T.p2m$Zp5HFS%3b>[(+1HWoSYkLLB\nN,Z0LH\6;,B$K`JpQpcrQ]^(l9ctD,4]K[UV'b,%LWB!s$`W7OoWtCa@p\kDH#r,K_sH*tK*GTXO5%O2ZMa[plMX5^c6?GMDH!7I,7c^3A@u8O:S08NXV)-A_`b8[3;^J`<h>YXSPBog%rnm"!X5fuHBBMLos#ciUDV]-2hKu3NhW_MUmIR*J=%E:;H2m7#lK%1$Eb]H+p"mm:LC]=8rmB]X\"fqaTJUr=AScr7hdn2(DQS<C%50Mh/d5Q@;8/mEY0;f>@?iU"Gj7AJtp[0W*WfK+-W7T#eleejQqf%%+k6(1gC/,.MU"k;9ICX@tTCTh%Sa.qHJ%>ST[(fr'rm(Ik%o`qt@41LoR_;").:G9cC0;muW/mp49m'E9p03dYh`m&=LfBmlBZ[$]nh=f6#lM'G]#;=qG:H-$o]=WB7ld=P=Mf1OY1Y_$a?b9N\%mO"QD^?_;@5(<J(_nDUWqCArEqG4ULk1.n`*,br6s(#9oaf/L$#C`q0QoO6iBEJmk:)h0@h.`@4"O"^^9?kqf>=P9_3Op9pbbd;3%^!,6uNOS@B<2Z4&qqC`nD;'847$:L3IN1>=?BBXb0>G"]/BL+uQ4D^m<ob>dj[\qJqT@huq5<,>hq^AZ<NsOP5[\s1DOEXnQ@J\4%^UZS9nLL9%5r.5T=;(#&CuZSrWT*$NF6<`+HnO1QqL&Z!qj^`k3kUTY)54bAjG]-3%TdNuHt8KF3@s[;3tK`WG]&s5I(i+qiam5@%Y*8RqldUloFC@V5cfC?69Y>?-mS1al0/ejFh\YbK*raX!s7kRF96npH]23?#PZX4#UlBV-BDYa0(@0]?5*?[554@;#X"qBD]lE]&%j1F=J]pDeZIVujr[Yp=BQ1Fi'm>_'?M=h1gdP)G$o_WiQa"2.0Lk,$okF9![IC!\5Y;ai%f8j$UjGgH;j:*+\S`.<rr`A;aWJ8pJ%#0Yl*as!)Lg;di=o36,kSik_/3'Q4'!Kc]!Eo2c.YI^(6P:L/.6ILN@QG9I.8J>,,&LX^h8JC[Ks%BrMSa0\iH>p/k3=G0\Pj)?`%:PFtBZ1TQJo2_"6L`KePdc#=N4K^ZVVPc*103f1&>n/O$pn4a5m[[IpgtAEGBok&CT"1+6hD5toQhsA4REMa/cYVCHDjr_Vm;hT2%XGR53p=fhpSWdqfcorA!\+f&W-a!AQhqK=b7DJ.Ln[-8As0:5Uq<H:=VdSNA](MJM:\):*]It9:[;M(T/dQK<>.9]73g!nX:Cl.Y%KACX0Tjnst`oV>h\]_pBXs$J^rC6cqiG%]0UH>*5n5@V%WP.(u^P^pVrN8-'k\b+nT'F%-QCX3i@lbuU?]OB@j@%$s-UMF(>l7bj%*oeTue5C6AlkeDEH_kp"s31FECs[sg9V3Z][AEEiYVs6i%04@:D.9ibdZg!3A$o%tXf^/4+YVLPh?P"%Smii^i[/5XAuSXcF=$9]%-T)`_;5HE3Q@M_Y3(C%*Gc8ia*pd_<:Ec;.M!%#`/D)TRX1W4/]8fB%T?SMe(rl*c^3[:7Dlau4,e"r\J(Gs$SV93uqhlf35Pk;I%-99>oe+R-,aj"8a?T-$fKf4G,,d1D3J&`h4H$Q7dSk4t=-$?A)^>aQ`QHiOuMbd(WcTaKpj=,(]kJT#UD&][N:*XKr\asG!$Qg-+%I5rFblFbf.Tpd.NX*;Lb`qNQk0@<+-X(d94LK5@KOM*NHHLQ0q"=D%GX&":<+%BMBijm0BYmE#C\j_&(Y'=etU_SY:T.J=EIds>Z%8UL"#f>d?gdqt>k+@E8>r(MB+.l.R^p;-,bC[ODm,(m^9_Z.+%]%NN<hp9-ikr7l$C!Fj%o()#8l8Lng*c)gEs*<>oo&$56QC?h5%NSo<V^Nhi9iaOB4;tuJ!gA0HkVe;pW_Go^*206!Jn,2bUcbmquB;]+^s#[WCd+]q=]nc?[eu&5q"*jP%e3*@M3e4-e:CHB&3e/7m%[%aOHn:,BVe%09G?K&*Fn=O@_Io3h25.'nurY$YX^KQca)*Ik)q!eXhnLm0-RF5#0VVZf]VS6J+03UrKg6pOV<2*>R/tuh?`+*da%['M/PV`LqJ(%!Ein^V%8h+g[kS^p$-`P'i/X.5VcR!SW6H`j76[j"2M?`bU"gM*,;;b<4]MbHti49kg^.\8sPc;FfOHrahJO$%2J%AW_9!&Dkl$$6;7*gDRXt/a4GZbieaYLZM[-iD:d8k=%[T(=Ya:[^/)WAJYbq86q:!*]t_QW$8$t7-Jue2.SZNdR?F$,VRk?>%mn.%Y),=DapWHp,I+VHj@[g4as>!p_,rH-d**WbiO#^CV<(Wi446tu8=j7^@-G-jEWT,Q8O4BJm50TIdSiT+d8RWP+^drg)Brl8Q\O-&%9;74KRmjQ5&5d!N1T:bQ0TlE3j*MY;@#==um6!sshdD++RAGQ_,n:Zg:mOsP#S5H1$5tKPC.hr[=Vca@#)f-9V5?1OWe'KZZ<bIA%61e):pAb^ONY<]\8q:@0OrI#M!uqAJaE&\\^n@;+FhqL+43bp$hFt7\o5KR\'2k\2%p>rhGmBp5Z])+><Z+&cA0k#RUl-KdFK/g!%#ENHciD,1D8u:<u3+^*-H-C[bd`eq!&Jq;TApRA5'k/(p.7mG"Hf1Y1+gs7VYS_D)7ma_CUP/CcMD]jeK]1iR4=;'N]25rrP27us%LG0aHKm^4[i?1R^Fa,qVOWoBpEE`p*<Esf!dm3^.$(jg7RP=MC;KCZYZK1JB?3,XWgE^)un8C;%U==qrngI?\W:E9q;dr&U5\427%<Cq-8,,/,AbU4==.Z3275UStl57:Dj0/(Y$Spm<#hq5G_#WhD8O/"Ak6GY(52E@kp_QT7=!QFFcV0R_(Q+4O/d>;=((rmnnj*%TJ%g^"[_4^P@sY#qP>0bR\3!P+:(DZRnZ<(Y$0$XR<QU\3(BZ+/<FPS!he&/22$EchA?B-!8BI)lgX:5QSG5dFh)Rj]\SP70FbbZNP_%>*VW.O+B-<q4C87*3'34<M5is;D3Y5BpF#J\s5],aHGJ\#WN1'!sf9'5[kFo#S\ERpbdY"\`H(>TF8,5nD":#!C<$-kCUE<Gnu0+%SgdhG>pFGP$,-J0-2'H@6ClLbeq-]G&r[IB:VjLr6@a=jOqX=\cuqm1".9Hs!$I!4`IppIW[(!6i,om`,DY7:5WtuP=:r;NAr1,X%,Y%;6?&/kj(PH<RpRq_$TB1_lHRTOG,TF4WjKR@WZl.qd#S\(G+TE-HbnPj=oW!_q>Tf/+0_h6TniS&ri%\3cMVHRtU4C/gatEHq%Q549^PVGkQ-G?="`'OKX^S:Hpk4'._/MBF99!mu<_;N3c0t"f+0LCk2i/9.5gn]*f4\?k1*Uml;+r7opikR)NLZKEX,;LL"#jST_%Rm=3Z5pU(^W$<GC8t@=68lLL6--]Xs&>pB<./I]jC`S8.<Uc7=-Wh1q8gT(4T.8':#Y4(p":.72*lo(]73jfJ[.dINjXJUf-DWIo%`?e,0M<HojkUR:@_$!:q$WnNcUoLV0$!QK@!Q>[+-f1-E"I0tUHbaQ9OMRYW-&.():f(\]j_2p@6<4oEaTV!>5fuV8WE^.EOKoLg%@!5+@>+2mW,csDEL]iHg@N.!j]nm$IG$3,^"rr_&=4%e]k-6iWm6_FX18DMjS5_a]HjT+d0HUVK-)i)@*7D'6N,mHX*Q$5MHkRd?%U(pasV1Ap>EQD<3a8eS*YRM&sP8\V`-;lbE\5>X$APBS-?j&rkHXr>s"6#q9L<:!<[#E[G-t;%KjUl93l5:P4+EE_549/r_a2,!$%;PCq*o,(.GS-8k$ga4J+T1a0)n.@EH/`F7:1+2;rekAi9%bM\F@a+*O']qRg-YN#Uq?sTh#+_ca\PgmM!u7Pt!O2,c:BO%l&s`ro%eRcl3(ahQN6F)t=,VB_\miZ@$b9=\_lr`MJ_,f(ulO2@XdQZ,i^uf>s1/MG[7)939co:L,>"!UH>6M[1J6p?]dUU=N.30r/-6Q0K%YSL(>g'&+_5&a^11OVCr1"-)rF[-XYQ[Bk`!c<K7W66CX=@Zbt@F:6#%PaLu`<"()'TT[M2=_>%H(6CG@/D\BUq#pH0k#?i`q%C,%/5C#PQAS)/&)7q1ZEK;>#3.^!1L`j,B33JYl'cP?;b7nfetjVuT#D$#.#61Y`&%OPnN<X]aGK.M+H(6c.@;4]!_!_`-7mCdaZb7=%bV5:(;7];O]"i/;B"N@?1"[>LNJ0$MR8IPBPQk>=9AOMg9,^i+/fm9oW_=?LG1Io#9/mY%'1@s"'*Sr1G@G9:G`;6E-lR8U;'+'e%TJY92Hk/VeDTjl5M*rmh*%#@Y0sE3$@Ku$rS1%gQ32/C%"UPG)+YZt<DqKfU\E2*&q]o[0(_%1`cP5r4a+._/>aU&'MP(E%W>P^[%``?.Tn\-j]`=5J02+<OH#tS;:`ib.qlQk1D,qK*B!0$kJr[Cf2W>>1=+LKN_+=2B^,.LHgp5]L]P<Ut""fKL#m<0SS!u<nmNg"eZ%&#DfM!htWDbOPoq99up?T&AJ?j=QNEEED8dB$CC<^eQ\G'(]F#E@9G'!Z*h#^i::?ReBjD)\%sL*^_6.WsB959OE%2QGDN``5>!l%flT3^Hrt,)AtES%0`+"Ur8n!Y)Q1DM+>F5(2J@O?8Wq09$g\M?#Keubba'PAM4C5jcAaM5%2g9T)iWt1@^rtgmiI6$Dm*I,.#1f"%MCtR'2J/KF-t4nDa:6.k(=/+l9d*q9a8;cbG_t,0V&K:\8E%3h*i4k3+jGt'NR2,bbKgo@8^P'5RcQp1/X%jCHBc5_cHrOq69>PJ%;!>,Y<Cn_BR"Ao6Z(qL@6l&@6ZW;ZP"3(X/\mtH`!LDj$3577S`#(b.C4;%!$Q^bE/"W.&(b>29I\d]E$$gQqnUc<+GGj'ooH+YV%B:9aU)9OdG3AM]c"jF6'O:6?4-$nWk]EZ0\;KgpnB9;W<Z;S2K*<;N`@SaLa<5aeG#O-D*p1=U=&I]C>d'0A7A2(ec',&?eFRU`5%&&lNp?08f95t$uL/.mSF6CSHE/BS<'[gkdbC0WYV2KUs;WN8k)gQb)q8AhrGSk'937uEH:s/9T:Y_t.*J><B0,ShR?LNj/\=6AWo%o%a@6DKJ3#hX>eB_*\7of)n07($?`pRNNE6kc"cH6*GeY&'`L6bo"Pg<MHWF1/Hd@M4mA!l4:Xt-q4R7a8;GG,T)*K3WaqZ+mmi(%$BZc4=FkW:dL>kVK]k7TF(GpF<ZTQoPC(IG'TbGP3>UWuhUnnIUYV&J'IB/Zb*Bd70R?GW`JDjK,4\;LPXV5eTFl@_,,-jbkSNI4%6sBk=*'%mu*J,<OIO7+'ML5JYjJ^'j'G'gt8bfNd7'Vn07%;r:i6;fWRZ%6'Up4&;!X"_0e9;b2B/7r@EKq5sA.c:G%TeF)>BuZ=%T?8\!$^HKciR1(2KG_8B!$SZhOf1Mk!sfbBas2[,?BE6"/hf\$doI(oj1HSP,G!2W.'Pbr2)bd.^_'p)Oio4VQ6bHt&s4G?g_r^a%7MO*-]&o4#dPFM'k7+;d#"cd9MUl9fO<;IekhG5%%#HER]3sqB[1;nmar*J`f\]@u3i$h!LKOtc,l(c'%T'L_ag[$29HX!/:Lt"^%@:0.E;&cs(X?rZ,&4r)&+I`+r(tSg_G&8",9']WT,7mXqk^,m=YqjH75@Rl5Yae>CF$u6jM&\<\Zmui#VH$6P0Acn`RY@k*`)'`I%Ao9p\V1i0>!2pPfHItkZTE^jJ==EuMKnO8Iclg_h79tgR<.[tB04lKp'/gp7,UuD)UrQ:f`3F%"?m'9k&f1R@NtP[;@u(Q('Qe[n%U>I(Q86kQQR>fsm,QPYO,:&<5oFZ:A3Kj[GJEEOl+WXC[`!JAU?O`):HY-Tj=ISJrau:$>6\)n:'4XO[mY@t\X@J@bauJKS/_dO*%R3>G_+T]Z=.+%\u`:j6QZ-m5N6;\MrL2IEn`DOQA[L@QbLl`'sA2=;&+?YfL0r!>`V:h2+/YTH`L_)TKMcIS\&QjT3bh.4](TH"c%RPop0OL4+%Uh3'X"Z$0s$IL+G6D:N:D3sJE,B@Od]E$(6-o\j1(coGn'#S:PEN^'FD#aW%\6$&*6A.=V];6]\FG2(E$%F\T=kA:/%?A8_?Yj"Mklk3e"Nl99Z@CRe@-feHS9^SYV/qtWD""@V*g:aH3X.:37K.RAI/8oFK@<<cA*+HL0%5oCKrM,&(JT$k\YdPbH=/&6`%)883>1"m7R3]N/QegtcaMW670aau;uZeR*<?)lQK8V]!r@t'H8bHEsC9.*/a`9ar?0]LZD`,aY[ZZr-K-0\TT4c@j!O@'p^'IBT'%b)HrC8!TYQ`_;;1Z\CAOC!fgK7Wk5@&n2$E?DJFWBomki1W^IB0YQrYffoPuKB:&2(0sN5@`>Ii]XX5ocB=>>UGU.^g:<+O(kb>G%l(raLN<Js]\BtZqqVGfn%@dm-E^#5Bb!orieefg)$kuO$8nF3]]i@[9,7pbh*%$o0_lU.@R?:THOXNr%Y>Wt#r(`[$LG0,];F9+d%p^5aI;VM1@>CNbn'KQc!>c8Tu=EPiC<]@`=X)A\i-B^L<2[W@@dQGl80Yf)3[*U`l7d_O"iAa5=*.^,8j"RNTT^ei)6Gm1IBJQF0%;6ee1q55n^/k^oDnVGdW'!jVh@]XXDon\9idl@b@(M8>$l)9u?AQ%hB`Bc+_lR9_ni3eS5XO[\3UNJ\2[19XjU=F!!KoR6bI9<VH%n9cq5L"=)+,,oYe@!.K^]ZP5UeMoPJW5tdoYad9Z:<mL8J\n\@lsI]K,\*VhNT1SDE<PD\NkgUn!<`q?KZ9tu!iL(#GKVfR<0"n!%jX;fs@'_Lc%Lb1H8I\W/X;BSf8X4pD(*a!qb&JrXW>pasPp8#aE]dr6%^&X\.gfkI(Pc'Pf_Y`Z8H(%s6E>.fR'"NqU(+(A,rEDo%qoO^b@F/RhGV.qM_<Dj(10Z4$OdOHK]V:OE'=A;`U/k['BTUrT'ltkCFhm;\hb!Q=-<,p:g2&PbY#?lk!b=[)'UK\T;ihP:0.)Hs%6Au\Y`)%_PSj]C(7[UE)M/e5>6Jt,<!Fn'eHRS"f=m,h$DQ-O=+AS%P%]QM1HS%]XS7NGRlkdTU,b9OBN5qc*4#9,MWf,c@(_5-s%[*4O>QRPSZ*(:Tj4Yk<;4=1R>N\+8^_ha=H*'V@)3"Mc,P4L[X.5=`E5GSW>PZ:2Yc6@F,n26!?p<[/S\rBT*gEs[uoCD-*ifGAC%_Sr+Qcc888G`+qSBd+/\3@:94'K]ug6S'`aLW,,C8/N]>Ajn*$OG:,"ZsPhU(bAf!9d;u"?+1mRT_t6Ijcp/4d.9-k'QPK359u*5%5<<5Nl7dP9YHtm4QXie+LG<]+KJ89]E#;^LCnoBOBj(c[Hc]rg`c?'dA]7E#&aLUWilQJQima?l(;[FW%]GT*YS^.Vo/(hNb"KY)%$C!f+:`m2!`_b"Clot!-EACJY/@;LuFF=_3(AfRE=?OMMdaC&g;clpE)g@,&Jg$K"nlTP%Xdn2f\D9TmMNa1"V;ueYAR\Bpee@,9%.P02J**j7$;3@%9dUS`B^i>1(nFUQZG,R/*q4/-\DrlTQEhX[(TmMh?m0;kf#(0X$%$<rOJ"\]bBRlo$ONV&Lj&r1T/Vdp$N>&E]%+&ULF4rE?WFO`VsK&EPS&J32n5hie:W!hCF_+[pk6];92>IT6f;Tk2!/&Cn5L09nH6DI68F$p<sFr)Yp+DrK-9WeMR3G,\$H\StW%&1bTi<@e:n-D"*02j9'8.t-_)nOp],[]d^p`ZoN+]2<e"Ml?tdha6N]+<mE3gV#bNXTX9U=[ge2YQI^9).V;b0ct"L"GD%>1paW%%\+8nK`UZ]Q`k;8X%r(['B!NS@R'4>Q*]'?J(7=R$D;>`*634!h0RbK$rARIS"H'BNq]S7O9,#b`aJl3c"3HYH8'iKCYTZM&-N`hU%nX(1h7q*&L:"4E&N$YpMgi0p.QC)IinW4b]`9*Elbf;WRL[W`cc=#7dLJDp+P#@ch)a=O7)12=a*s:DZbUFq:0dL4fCQEc$g1/]p%Tn*u5EBgdf66g\"`KYITBG7a*SkAeAaZD734tSMg;sVL)N)$^m,=BMabOLT$M-*9&`7U42>I'7tN,,1E.,i7o(dDHa`n$9GEMK<B%n&Wk#MB4;,aRG"0A4Xp*1-B.h)*5+P^q(qUHq7E)aFLF^4f!Es=]^5uA9c$S1*gHP)%pFL"pPWN=rdM#pJb`oBH7t@;:)RiA7.)8%`q=UI"sA"Ol5^`TZ&XbC1QDm)=[r\)cJBu8aM9tfj6X"1$uJofSKe5,L`8SIacM=$AU)Gr1-B0>)>M2/fMJf]f..\3QfXoIEHCO)%6mlBZ7M'o&4Q=$l'!pF'M6SuA>>G\ncAXAii8ge2N?;(Y1F0uc%#l-[73S0=)@\"Qe?dF/>d\Q(2PhF'N%?o#R-`%9X3^2%,\!;^%'!ojlO'-*"Y0nR1?4+G2]IuY,P9'CZ)kV7aa:VWX7MfXWQ%A6ac&*t7c]Au*23;.$dAj!;4C:(56P6f<fHHq"@]u-kC.Q8L?AAj'%.kp[3@,oZem_A4])SVF'.5qh(foV#4Dfh,W.@h/?U=(g$p/9iJ;IUZ`Z>e]RLe?@/itqb]aF5LPWLus887jB:@>/K'Po.un@HR\j%/>(b1#."OijpR(<I7,a8>:I.@T+%J2dKk"hALZL;+be$SU0W>scjs=]`X=1[cq?ZA8!uB5_N3W%5iO&Laf<@`FU4`.$*r5=ZjDj=%;EhN_Vm*-p$P-W4g?ulF1TAb?fF4`A5]go;2HCU2N)J/ilViSC>fhHlh`N[ggPt&5L-iFn6THVs3QDH)'ST`9>7V)=3aiF1@VL`e%+Y'J"IKL85-"pZt-A!uTF:WB8Kl"gY&bEP#@PQn!LNQ'#!/Z:nM!fJpO)@BoqGFI:1?[Hc9SEe.P,5IO>rR5-+;)6YEL;gU&stS_%/rT*$`pRt(].,B9Jo*sU1s7urZ1[*>:m`0BI##OG"V]Bp_EfA#G*$+7?6%0IH6;7k_PRYRU*<ZC@DYh<Rfu=8H.#7%P/^p>=6MBN%DbEeOT@^o^%mkV1?er9$e_ZO<=N^T<-]Vuu+b!K@0m(W_M"1kE@%)<`6t"Uj[oO@b0k&]^10.Aspd%;gD4GQ+!f\W?(DZ-gYq_N2%iA^BQ.N,#s1,A5h0ki/[6YW1OWCL3%n'k!Ndo^>nIfD]b3!Qi/8gm],VAtgIBO#'-7:bHt*l7Y)=QE;#eRBQ9FBZa%1EYmT5s#+A%%G`f^8F5Of0]mUr)`)$DOK6;D''<Sgffco0'Zad6p1=g=,R-mp%C!][=(t@l:[DL&3nH7GdpSpeXLgV#L.TNS5)%aMbe-HD!]^J.%Q>tj>#L"0$=ndA.iW@WJH^G-Z5,E=#6.3';^1ZGM`)C5^i\U?h5pC2o*[<GNT@Vdc,YF#GU>lA@&:^4#f+h]#Sj,t8_A,Kl]FpUZ%0#Q0.29beP@a$q;.ohk6:k*aaOlNf9N7mHMR<]KPL-<>cIZC[_VG!eWaE*IA)Wp#3F(]qO6XQb^B"8"_YDY[lpm-\Kn)"]g*^6?[%'U)$91'Mf*(@h,nS@_(sgP([+;]U]@e7J\p5(>l:KK<7E"jNrK81u#)F+oro0]"!.Fu@9?;a9ZcD%^ia+_Do6Aa6NALfG&X4laBL%&+Q'o7't+:YGJM(1eq+S"Pn/*8MGV>@AV,k1`.WPQSgX<O2?m*OGXH0l@ohjEco*9Ug:&XTcY8*]b8F%?\T^FMV5U.*JbF$C/UFi%,;0H6.>^bE0#_fScYG*i(>Tg+K\sXSTgZKjo,L46.EN;7_'DG"!Zprg>S?'a/jM\#MBf6@dHW8Tc]*0T"GpC(g4XR(TX9tB#SEH[%AEX.e$]16NA>[1P[+ID@6O-J'R+S"Q-CC9XT@\d:PRqlV?-8/]`B:!,9c'_r#D,^;KJM#VK0(tp`WX<$X<:7`L1ruaq#g.V=42mN%BkPgH8Q7Fq#@\`pWlZMO#fM,YYSCR>$r;&I%\n6=-!_d`Q!AVO`X-'A)sP^#'%RiTTo!^Y:<,CP-"?W!*qT8DO'.6M!IpnqH0;1Y%'RrS51lI/Ck7LKY2D3-51io%j-k53enT#Ne^.&#p]UOXcXfXfd,1`A81%o7kL9*HM^Le^uX?.)A:0/3&G@hFKhB["d:k5]en_Qs#%G]0ItX>eU<escsOLU&s*AYJHnWqU,bjZC,'YYX6.3tur.]U9i2hFrc/Dl1J*Ru)@_,UV;t]p\@Q'q5e=De<;oO.,QMk,8ZH8]9K0%*7G0;FrI\G;^-Ai*FQmVkqVMK`7B&XK7WQ5.k?1P2\Vgh;M`#SfMW@#AP'gd1Hjm6R3&]k9H81!'*&/Rqu%)/#r:\^I`TdAIoH4M%0(rn'`-X9dB"aTF@rE^$?96n6m`[:di++q=Do&[thOQ)MG%VRF2roB&"`B3WCYu]Zo?o"#=Ec*"k,LT1c?+ujgQuKjY:c0?E+aL@%\his+3-(Oid]X5NcR`P3,P=jC&R'se*4'd$G0u&/"0VDY#m7O[`X^5pn+a-_(3q60_`9PN`h[3IkSY?_kBC$`VF7NDop?Q.&n?\D%2QeeQJ`V7:?(/KsmO:(/ldD#RF_Q"2_;,`fT_5J+:@<dUD3Hd`69,V;(jV$:hQBRpU.oNUQqaa(0PM1&,<I'G0ai_>=%-Tl]fB^/%EuurR./I\`%UghA^-V@&@Uk>DIu*oL&tqL.>:+""m;iAgN([nkCH:T.\`aBUV"FXg7msRsFJ2#FK'ZS03P$mh17H/n;':mT()*[-%*^a!GFg`un>&nXl6<o].oHo2u>8S;o@^sW\);eKV>[`HX#oL:kVE!\m*/ZaP=F_98A]>/J"&.)aW$T7kKD>uFo>JRq($k?`'I88c%*cQceOS=BQa<['Jb>Dek]I:DLIbu@);OJeua*;u/QBq)97i9jh6_#)H^t9)cf.P!"-'-L:.'6k2]h-0,jADN0*oWM_<L/K>ZjfCM%ju,F/ps`CR$/QF/;c?1E/QV@MaMl*P)YKe_+$:\t/nN`tSm97c.mRh7)L"!*nHZ>`6asN=``5<R6:>YB"5c]oJ5VTiiuta+kQDG;%gPM4V9oqO\RB6R(&eYnVQ"RUb!mmbN??--hT1X>Als);t6I&.)"p@c"aQ-9gDa#Ao;dik36SJKaj4$e[;2RI9m(+Vj:B!_9*B0?m%S=07Rn20%42[Zk,&jEQY.L*5R*7[k=BJ$0Dl77aW,W6MpG[C^t]u=t@)%`'='XF^8Hf5#a`GdsR7MMWh'bM+iBbJ;nl.2B[UhB4t%^dH5f,\0enVa**%Ab'UH,?(9L@_c2q!Di+reM1ro\r]@K8%>Zp(M2\WQO`&;33Bn17lKE`_-8EP%G]*JPVU<'/KGN#iLYpd%hfPO%;i-<e&Qkca_D$tLjLA4/%$fHI/j+G3PaRquo"-Wg5,U!.+G2GY\HQt(\J_\?*-59lNCZ,k;'?%0]#=j1EJ2%D`mC-%6:aeLS;:mn%&#Uu>MhpG.&N#1X#JhZ5ngV5M,EX1g!75`V0_/EViAR.l"puO3WR6(q*5rJ&"4?L$(t]Che\HSI!6*,'[KMnb<pWVGHgTRq>/YjD%Wuoq\YC.C$U7+CsV2O-u*i1:JYY3\1+i<)S7$?'V[UeA`1V6(#Mum067S$B'&h1pmjoB3)[h!a(5,8O4.0Z=&"@sI&2&.2("&.)o%<(4*C%#EtaA7HWWiHiEm>`$ki`17I7c&cVpY^u+kq&T*+Y_p=,7nLqj"gn"t_I\ld6Pi>T!Uck,E@$!>,^(ZH^+k!Eqe_O;'@^(a%&u/+=N7b`#.0AEe`/$LSnPYr=<YqLDJBXBE/e/`',W=8:QoJKl@(2JK%$@JB*(!tu!(hH#-SPtGbu<)W_t_Luh`;gUkM2BfK0]uY%?O_a,-.Yb2DrNoD3g$NPK_fZ?&t%qLEJU"p\^n`u6[CaB7V0)l_@]`V?,5)4olC2A.#eLBgIrgBe9.._FZnkf7pIop>p"a,EIF*f%%o5!5(NJnBQEkLcLo"`=@;AKZ%*17X`uJ!8BaE]L2YUoF7?N4)8kQ980Xr<.+u0uIXlJ@#-qQ496]lj*$j<&m^m`+`6</9S$\/r)%2bHYQOeUfC6gdNKUu\Pt]X!WL<>HWK9e5q8;&6lO2\#38@fBU[`V_a?lO/QS_Eap(d[Ck>8su\jTJ/''8XDJ7(l6j<KNRdiOs`g)%_#S,I0ebeKY&9@tJYeY?N?Jn70g$f&#l64'Wf"W.>#MFe^Jc9nf-,`c"m0o]^l6QXXZN*4qV\c9n#Kh7LO$#\0W-eVS8UXci]lUA%dA5>AN+<W+_d)!b?Rtnp4eX_9ij=HXK[p^%d2LAV&]q/"f=Id.MUsuR1<PS0="a%pP^!mk+`GJr9;?XfooOupGTJY"R!%V]A7m4:%[Ls0m?M]AI.3G3m`;t_jP_#Ns$;[R[8P#+1Q8XWr7TkcYWE]5Z5f6rBWQ"rLQ<5c6#Z`P67\6S7i*O&K\dZM0+QgJk[dFaR]cJtX%m0LpB\q?5dB6/1B&5k$9Fm0LPH9.%&^]ZlU_)LMV*kIA1:'F'(b39M6nQ<qOAt&WSP9q<U#_a-edTBP5Us\b1Nf<E8c_E$6NC*h_%/1*3:`!jQ2?%Jh_asoJ/PF!g8V+SW%ODV]YM0ca&3FG.3*RnfEJpH,-fk2AKnbTh!-mXQRL#asA>;C<,`PLsGYM,"r.uY2U+GEN1%ia)u-.O:(OVNo#p(@d+7Y$Esomc.dU>URMg3Qs!!M6TCicm>1"66Y;>fSNHL<ZtoH7MZ<L_DcXZ"X'^F&1Q$7:hE&gE)Y,9141Rs%9lqWG,DfNNj=rAWEV5U4njk6L!+;]I4d$iu>UqM/N[2X0a>IkCOmdkQ7_YdP@iXX=Oi*\I_XIu"V+.TF/`P@[A[E%uYn['T1ZYVK%>G$kW>t]l0P).XX*qS)V@]YRQ[Vfe?G-+;=Vc`"NR6>H0a6-Q@,>3pH@i`GM6?%]g;33Q=]47rn8At8FHH=Dh7VQCY'oL148inLr%P)B$)M,;C`-VSp)r_86#mDglJL@*3sYPX1NSb*Ta0]BL-)#N]AoYY6<jl^k5JD<2+q]Mbfi(#8:P%s5NVP7$m/6`pH<UL?\I8)EW%-'i!L/,`Qr_dX'"2!@,&U_gS1-">u)a&:BFrFoo\2=+qtIGN((hb,]E%a42bWZK;WW?Nm%Q(+Nu3]'7E@kDJY6XiMc'E0G)<K>nY%ilo$MG'#_]Sk2TgX\QESQUu<RQO!a#q=s_BLV^]e1o&+\B"*T.^t0S$'iJ=A[,Qt!.m(k*!@e="2dKPT.lB3khr!`2T=-1&Qa\Ct%PAf\(G<TWj"6#*V'@NV6j\q#d0X`-c\4fDD\\q4'\^%h<h#P'ci,3goB4J&4537X>9^ZLj?sNh\Z[cl<!/Fh-.C(,b3S/\R1.IeG%R0JHhOiL_pVSGmn-<5gNQ._>I/Z4%cr[q1:APr_.\WN9G9nBhHc#+H0F(^@:YR0Ps:;k7.L.\%Eigll6`(tqe!d^Y5c+U%S('BU(%&LT:K63R]QR@&Lq8l>"C`"e_n?_iJ[XIrdqr0s/DhtH3.7')2cQnXUbArQh->m5i$og&j-lmlo\Kcn5EBk]EQW3qoqZ:DR,+Yei]%kRd+pD9cGNE/%tW6Ohg;Z;W)N>AgUDPn.GJhb%T8,n,m68F:1$\P!>4N(STp[N.G/GfF!th:^^qQs6KGW+>#48o&$NpWN<+=6Eq>%*Zpr^^0c9`T;/A=Vl+0o?S7Cg_dB:TT-%?DSt-rt?2Q\Z%jLM#I=,X=le-IIrrMX]48]~>%AI9_PrivateDataEnd