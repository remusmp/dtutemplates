%!PS-Adobe-3.1 EPSF-3.0%ADO_DSC_Encoding: MacOS Roman%%Title: DTU Mekanik B UK.eps%%Creator: Adobe Illustrator(R) 12%%AI8_CreatorVersion: 12.0.1%AI9_PrintingDataBegin%%For: PeopleGroup%%CreationDate: 27/02/08%%BoundingBox: 0 0 218 26%%HiResBoundingBox: 0 0 217.9302 25.3174%%CropBox: 0 0 217.9302 25.3174%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0%%+ procset Adobe_CoolType_Utility_T42 1.0 0%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%+ procset Adobe_CoolType_Core 2.23 0%%+ procset Adobe_AGM_Core 2.0 0%%+ procset Adobe_AGM_Utils 1.0 0%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Magenta Yellow Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x205 R agm 4.3861 ct 5.530%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 16 8%%BeginData: 4356 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C459393CFFD05FF5227277D7D2752527D7DFF7D7DFFFFA828A8FF27A8%FD07FF7D27FD0CFF7DA8FD07FF5252FFFFFF7D2727A8FD09FF7D7DFD10FF%A87DFD1FFF6893A8FD05FF27A87D27FF8452FF527DFF5252FFFFA8F87D7D%F87DFF5252A8FF5252A827527DFFA8527DA87D52527DA852FFA8527DA852%7DA8AF27FFFFFF27A8FFFF527D527EFF7D5252FD047D527D52FF7D527DFF%A8527DFF52FD047DA8527D52FFA852527DFD16FF9369CFFD05FF52A8FF27%FF7D7DFF7D52FF527DFFFFA852272727A8535252597D52A8FF27A827A8A8%A827FF52527D52A852A8527DFFFFA8277DA852FFFFFF522752A87D27A827%A827A827AF527DA8277D52A82853277D5252527D7D27FF7D52A8277D527D%527D5252FD16FF686FA8FD05FF27FFFF27FF8452FF5252FF5952FFFFA852%A87D7D7D52277D7D527DFFA852FF597D7D5227A87D52FF27FF52A827FFFF%A8525252FF27FFFFFF277DA8FF537DFF52A8275252FF7D52FF27FF52A827%5952A8275252A87D7DFFA852FF27FF527D5252527DFD16FF9369CFFD05FF%27525252FF7D52FFA8277D27A8FFFFA852FFFF527D7D527DFF7D527DFF27%FF527E277D27A87D7DFF52FF52A85252A8FD0452A852FFFFFF52527EFF7D%52FF27FF275284FF527DA827FF52A8525284FF52527DFF7D52FF7D52FF52%FF527D7D277DFD17FF686FA8FD05FF7D5252FFFFA87DFFFFA852A8FD04FF%7DFFFFA8A8FF7D53A8FF7D7DA884FFA8A8A8527D7DA884FF7DFF7DFFA852%7DFF527D52A87DFFFFFFA85252AFA8A8FFA87D277D27A8A87EFF7DFF7DFF%A85352FFA87D52FFA8A8FFA87DFF7DFF7DA8277D2752FD16FF936FCAFD46%FF525252FD1AFF7D52527DFD16FF6893A8FD31FFA8FD15FFA8FD05FFA8FD%0BFFA8FD0BFFA8FD17FF936FCFFD05FFA87DA8A8FD0FFFA8FD0FFFA8FD07%FFA8A8FFFF7DA8FFA87DFD07FFA8A9FD0AFF7DFD07FFA8A8FFFFA8A87DA9%FD08FFA8FD0FFF7EFD08FF6893A8FD05FF7DFFA87DFFA87DFFA8A87DFFA8%A8A8FF84A87D7DA8A87DA87DAFFFA87DFFA8A87DFFA87DA8FFFFA87DFFA8%7D7DFFFF7D52FF7D7DFFA87DFFFFA8A8A87DA8A8FF7DA8FFA87DA8FFA8A8%FF7DFFA8A8A8AF7DFFFFA87DFFFFA87DA8FFFF7DFD05A87DA8FFFF7DA8FF%A87DFFFD06A87DA8FFA87DA89369CFFD05FFA8FFFF7DA87DA87DA87DA8A8%FFA87DA87DA8A87DFF7DA87DA87DA87DA87DA87DA87DFF7DFFFFFF7DA87D%FF7DA8FFFFA8A859A8A8A87DA87DA87DFFFD04A8FFFF7DA87DA87DA8A8A8%7DFFFFFFA87EA8A8FFFFA87D7DFF7DA87DA87DA87DA8A8A87DFF7DA87DA8%7DA87DA87DA87DFF7DA87DFF7DA87DFF7D686FA8FD05FF7DFFFFA87D7D7D%A87DFD05A87DA87DFFA8A8FF7DFD04A87D7DA8A87DA8FF7DA8A8FFFFA8A8%FFFD04A8FFFFFD05A87D7D7DA87DFFFFA87DFF7DA87D847DA8FFA87DA87D%A8FFFF7DA87DA87DFFFFA87DFFFD04A87DA87DFD04A884FFA87D7D7DA87D%7D7DA87DA8FFA884A8FFA8A87DA8A88D69CFFD05FF7DA8A884A87DFFFFA8%84A8A87EFD04A8FFFF7DFF7DFF7DFF7DA87DFFFFA8A8FF7DFF7DFFFFFF7D%FF7DFF7DFFFFFF7DFFFFFF7DA87DFFFFA87DFFA8A8FFA87EA87DA87DFFFD%04A87DFFA87DA87EA8A8FFFFA8A8A8FF7DFFA8A8A87DA8FF7DA87DFF7DA8%7DFFFFAF7DFFFFA8A8FF7DA87DFF7DFF7DA8FF9AA0A8FD05FFA8A87DFFFF%A87DFF7D7D7DFFA8A8A8FFA8FFFFFD05A8FFA8FFA87DA8A8FFFFA8FFA8A8%FFFFA87DA8FFAFA8FFFFAFA8FFA8A8FFA87DFFFFA87DFFA8FFA8FF7DA8A8%FFFFFFA8FFFFA87DFFA8A8A8FFA8FFFFFF7DA8A8FFAFFFFD04A87DFFA8A8%FFFFFFA87DA8FFA87DFFA8FFFFAFA8A8FFFFA87EA87DFD10FFA8A8FD51FF%A8A87DA8FD16FF7DA87DFD64FFA8FD19FFA8FF%%EndData%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 70 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/set_gvm{	currentglobal exch setglobal}bdf/reset_gvm{	setglobal}bdf/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/thold_halftone{ 	level3		{sethalftone currenthalftone}		{			dup /HalftoneType get 3 eq			{				sethalftone currenthalftone			}			{				begin				Width Height mul {					Thresholds read {pop} if				} repeat				end				currenthalftone			} ifelse		}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			/srcDataStrs [ imageDict begin				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse				{					Width Decode length 2 div mul cvi string				} repeat				end ] def					imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put			imageDict /Decode [0 1] put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		DataSource 0 get type		dup /filetype eq			{			1 dict begin			/flushbuffer Width cvi string def			1 1 Height cvi				{				pop				0 1 DataSource length 1 sub					{					DataSource exch get					flushbuffer readstring pop pop					}for				}for			end			}if		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and			{			Width Height mul cvi				{				0 1 DataSource length 1 sub					{dup DataSource exch get exec length exch 0 ne {pop}if}for				dup 0 eq					{pop exit}if				sub dup 0 le					{exit}if				}loop			pop			}if				}		{		/DataSource load type 		dup /filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 idiv mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and			{				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul					{					DataSource length dup 0 eq						{pop exit}if					sub dup 0 le						{exit}if					}loop				pop			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 	dup type /dicttype eq		{			Adobe_AGM_Core/AGMCORE_tmp get			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			Adobe_AGM_Core/AGMCORE_tmp get exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{ 	/indexed_colorspace_dict AGMCORE_gget dup null ne {		dup /CSDBase known {			/CSDBase get /CSD get_res /Names known 		}{			pop false		}ifelse	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse{	/pdfmark_5 {cleartomark} bind def}{	/pdfmark_5 {pdfmark} bind def}ifelse/ReadBypdfmark_5{	2 dict begin	/makerString exch def string /tmpString exch def	{		currentfile tmpString readline pop		makerString anchorsearch		{		pop pop cleartomark exit		}{			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5		} ifelse	}loop	end} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for%% definitions of some fundamental procedures.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 201 dict dup begin put/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSD_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_in_pattern false def/AGMCORE_currentpagedevice nd/knockout_unitsq ndcurrentglobal true setglobal[/CSA /Gradient /Procedure]{	/Generic /Category findresource dup length dict copy /Category defineresource pop} forallsetglobal/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	//Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_&setoverprint /setoverprint ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse			/AGMCORE_gstackptr exch store		}def		/grestoreall {			AGMCORE_&grestoreall			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/setoverprint{			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint		}def			0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/sRGB ne					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			//Adobe_AGM_Core begin			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						current_spot_alias false set_spot_alias						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor						set_spot_alias						currentgray 1 ne					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						//Adobe_AGM_Core/AGMCORE_name xddf						false						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not AGMCORE_currentpagedevice/OverrideSeparations known and						{							AGMCORE_currentpagedevice/OverrideSeparations get							{								/HqnSpots /ProcSet resourcestatus								{									pop pop pop true								}if							}if						}if											{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not						}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace							false							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall								not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse			end		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	/AGMCORE_IsSeparationAProcessColor		{		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or		}def	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		level3 {			/AGMCORE_IsCurrentColor				{				dup AGMCORE_IsSeparationAProcessColor					{					AGMCORE_plate_ndx 0 eq						{dup (Cyan) eq exch /Cyan eq or}if					AGMCORE_plate_ndx 1 eq						{dup (Magenta) eq exch /Magenta eq or}if					AGMCORE_plate_ndx 2 eq						{dup (Yellow) eq exch /Yellow eq or}if					AGMCORE_plate_ndx 3 eq						{dup (Black) eq exch /Black eq or}if					AGMCORE_plate_ndx 4 eq						{pop false}if					}{					gsave					false setoverprint					current_spot_alias false set_spot_alias					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor					set_spot_alias					currentgray 1 ne					grestore					}ifelse				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf				dup type /dicttype eq					{					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end}{					channel get 0 paint? AGMCORE_separateShadingFunction					}ifelse				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					Shading /AGMCORE_ignoreshade known					currentdict end exch					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				//Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					/AGMCORE_SpotAliasAry2 where {						begin						dup 0 get dup /Separation eq						{							pop							dup length array copy							dup dup 1 get							current_spot_alias							{								dup map_alias								{									false set_spot_alias									dup 1 exch setsepcolorspace									true set_spot_alias									begin									/sep_colorspace_dict currentdict AGMCORE_gput									pop pop	pop									[ 										/Separation Name 										CSA map_csa										MappedCSA 										/sep_colorspace_proc load									]									dup Name									end								}if							}if							map_reserved_ink_name 1 xpt						}{							/DeviceN eq 							{								dup length array copy								dup dup 1 get [ 									exch {										current_spot_alias{											dup map_alias{												/Name get exch pop											}if										}if										map_reserved_ink_name									} forall 								] 1 xpt							}if						}ifelse						end					} if				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	/AGMCORE_def_ht currenthalftone def	/clonedict Adobe_AGM_Utils begin /clonedict load end def	/clonearray Adobe_AGM_Utils begin /clonearray load end def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/getrampcolor	{ 		/indx exch def		0 1 NumComp 1 sub		{			dup			Samples exch get			dup type /stringtype eq {indx get} if			exch			Scaling exch get aload pop			3 1 roll			mul add		} for		ColorSpaceFamily /Separation eq 		{sep}		{			ColorSpaceFamily /DeviceN eq			{devn} {setcolor}ifelse		}ifelse	} bdf	/sssetbackground {aload pop setcolor} bdf	/RadialShade	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/r2 xdf		/c2y xdf		/c2x xdf		/r1 xdf		/c1y xdf		/c1x xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		c1x c2x eq		{			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope c2y c1y sub c2x c1x sub div def			/theta slope 1 atan def			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if		} ifelse		gsave		clippath		c1x c1y translate		theta rotate		-90 rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax xdf		/xMax xdf		/yMin xdf		/xMin xdf		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			/max { 2 copy gt { pop } {exch pop} ifelse } bdf			/min { 2 copy lt { pop } {exch pop} ifelse } bdf			rampdict begin			40 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			c1x c1y translate			theta rotate			-90 rotate			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def			/c1y 0 def			/c1x 0 def			/c2x 0 def			ext0			{				0 getrampcolor				c2y r2 add r1 sub 0.0001 lt				{					c1x c1y r1 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2y r1 add r2 le					{						c1x c1y r1 0 360 arc						fill					}					{						c2x c2y r2 0 360 arc fill						r1 r2 eq						{							/p1x r1 neg def							/p1y c1y def							/p2x r1 def							/p2y c1y def							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto							fill						}						{							/AA r2 r1 sub c2y div def							AA -1 eq							{ /theta 89.99 def}							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}							ifelse							/SS1 90 theta add dup sin exch cos div def							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def							/p1y p1x SS1 div neg def							/SS2 90 theta sub dup sin exch cos div def							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def							/p2y p2x SS2 div neg def							r1 r2 gt							{								/L1maxX p1x yMin p1y sub SS1 div add def								/L2maxX p2x yMin p2y sub SS2 div add def							}							{								/L1maxX 0 def								/L2maxX 0 def							} ifelse							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto							L1maxX L1maxX p1x sub SS1 mul p1y add lineto							fill						} ifelse					} ifelse				} ifelse			} if		c1x c2x sub dup mul		c1y c2y sub dup mul		add 0.5 exp		0 dtransform		dup mul exch dup mul add 0.5 exp 72 div		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		1 index 1 index lt { exch } if pop		/hires xdf		hires mul		/numpix xdf		/numsteps NumSamples def		/rampIndxInc 1 def		/subsampling false def		numpix 0 ne		{			NumSamples numpix div 0.5 gt			{				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def				/rampIndxInc NumSamples 1 sub numsteps div def				/subsampling true def			} if		} if		/xInc c2x c1x sub numsteps div def		/yInc c2y c1y sub numsteps div def		/rInc r2 r1 sub numsteps div def		/cx c1x def		/cy c1y def		/radius r1 def		newpath		xInc 0 eq yInc 0 eq rInc 0 eq and and		{			0 getrampcolor			cx cy radius 0 360 arc			stroke			NumSamples 1 sub getrampcolor			cx cy radius 72 hires div add 0 360 arc			0 setlinewidth			stroke		}		{			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				cx cy radius 0 360 arc				/cx cx xInc add def				/cy cy yInc add def				/radius radius rInc add def				cx cy radius 360 0 arcn				eofill				rampIndxInc add			} repeat			pop		} ifelse		ext1		{			c2y r2 add r1 lt			{				c2x c2y r2 0 360 arc				fill			}			{				c2y r1 add r2 sub 0.0001 le				{					c2x c2y r2 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2x c2y r2 0 360 arc fill					r1 r2 eq					{						/p1x r2 neg def						/p1y c2y def						/p2x r2 def						/p2y c2y def						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto						fill					}					{						/AA r2 r1 sub c2y div def						AA -1 eq						{ /theta 89.99 def}						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}						ifelse						/SS1 90 theta add dup sin exch cos div def						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def						/p1y c2y p1x SS1 div sub def						/SS2 90 theta sub dup sin exch cos div def						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def						/p2y c2y p2x SS2 div sub def						r1 r2 lt						{							/L1maxX p1x yMax p1y sub SS1 div add def							/L2maxX p2x yMax p2y sub SS2 div add def						}						{							/L1maxX 0 def							/L2maxX 0 def						}ifelse						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto						L1maxX L1maxX p1x sub SS1 mul p1y add lineto						fill					} ifelse				} ifelse			} ifelse		} if		grestore		grestore		end		end		end		} ifelse	} bdf	/GenStrips	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/y2 xdf		/x2 xdf		/y1 xdf		/x1 xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		x1 x2 eq		{			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope y2 y1 sub x2 x1 sub div def			/theta slope 1 atan def			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if		}		ifelse		gsave		clippath		x1 y1 translate		theta rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax exch def		/xMax exch def		/yMin exch def		/xMin exch def		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			rampdict begin			20 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			x1 y1 translate			theta rotate			/xStart 0 def			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def			/ySpan yMax yMin sub def			/numsteps NumSamples def			/rampIndxInc 1 def			/subsampling false def			xStart 0 transform			xEnd 0 transform			3 -1 roll			sub dup mul			3 1 roll			sub dup mul			add 0.5 exp 72 div			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			1 index 1 index lt { exch } if pop			mul			/numpix xdf			numpix 0 ne			{				NumSamples numpix div 0.5 gt				{					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def					/rampIndxInc NumSamples 1 sub numsteps div def					/subsampling true def				} if			} if			ext0			{				0 getrampcolor				xMin xStart lt				{					xMin yMin xMin neg ySpan rectfill				} if			} if			/xInc xEnd xStart sub numsteps div def			/x xStart def			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				x yMin xInc ySpan rectfill				/x x xInc add def				rampIndxInc add			} repeat			pop			ext1 {				xMax xEnd gt				{					xEnd yMin xMax xEnd sub ySpan rectfill				} if			} if			grestore			grestore			end			end			end		} ifelse	} bdf}def/page_trailer{	end}def/doc_trailer{}def/capture_currentpagedevice {	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf} defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup //Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA get_csa_by_name setcolorspace_opt		set_crd	end}def/map_csa{	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse	{pop}{get_csa_by_name /MappedCSA xdf}ifelse} def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	CSA map_csa	/AGMCORE_sep_special Name dup () eq exch (All) eq or store	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc {setcolor} bdf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		7 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {					/AliasedColorants false def					exit				}				{					new_LookupTables names_index get 0 get null eq {						dup /Names get names_index get /name xdf						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq						or or or not {							/AliasedColorants false def							exit						} if					} if				} ifelse			} for			lut_entry_len 1 eq {				/AliasedColorants false def			} if			AliasedColorants {				dup begin				/Names new_names def				/LookupTables new_LookupTables def				/AliasedColorants true def				/NComponents lut_entry_len def				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	dup not {		CSA map_csa	} if	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			AvoidAliasedColorants {				/currentspotalias current_spot_alias def				false set_spot_alias			} if			Names {				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				/names_index names_index 1 add def			} forall			AvoidAliasedColorants {				currentspotalias set_spot_alias			} if			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx 					0 0 0 0 /setcmykcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				{setcolor} bdf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSDBase known {			CSDBase /CSD get_res begin			currentdict /Names known {				currentdict devncs			}{				1 currentdict sepcs			} ifelse			AGMCORE_host_sep{				4 dict begin				/compCnt /Names where {pop Names length}{1}ifelse def				/NewLookup HiVal 1 add string def				0 1 HiVal {					/tableIndex xdf					Lookup dup type /stringtype eq {						compCnt tableIndex map_index					}{						exec					} ifelse					/Names where {						pop setdevicencolor					}{						setsepcolor					} ifelse					currentgray					tableIndex exch					HiVal mul cvi 					NewLookup 3 1 roll put				} for				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt				end			}{				level3				{					currentdict /Names known {						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt					} ifelse				}{				[/Indexed MappedCSA HiVal					[					currentdict /Names known {						Lookup dup type /stringtype eq							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx					}{						Lookup dup type /stringtype eq							{/exch cvx /get cvx 255 /div cvx}							{/exec cvx}ifelse							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx					} ifelse					]cvx				]setcolorspace_opt				}ifelse			} ifelse			end			set_crd		}		{			CSA map_csa			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 			begin			CSDBase /CSD get_res begin			currentdict /Names known{				map_indexed_devn				devn			}			{				Lookup 1 3 -1 roll map_index				sep			}ifelse			end			end		}{			/Lookup get 4 3 -1 roll map_index setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_res{	dup /CSD eq {		pop 		//Adobe_AGM_Core begin		/AGMCORE_CSD_cache load 3 1 roll put		end	}{		defineresource pop	} ifelse}def/del_res{	{		aload pop exch		dup /CSD eq {			pop 			{				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef			}forall		}{			exch			{				1 index undefineresource			}forall			pop		} ifelse	} forall}def/get_res{	dup /CSD eq {		pop		dup type dup /nametype eq exch /stringtype eq or {			AGMCORE_CSD_cache exch get		} if	}{		findresource	} ifelse}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		/CSA get_res	} if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/wrap_paintproc{   statusdict /currentfilenameextend known{	clonedict	begin	/OldPaintProc /PaintProc load def	/PaintProc	{		mark exch		dup /OldPaintProc get stopped		{closefile restore end} if		cleartomark	}  def	end  } {pop} ifelse} def/make_pattern{	exch clonedict exch	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	1 index dup /ID get exch /Pattern add_res	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/RenderingIntent known{		currentcolorrendering/RenderingIntent get	}{null}ifelse	Intent ne {		Intent /ColorRendering {findresource} stopped		{			pop pop systemdict /findcolorrendering known			{				Intent findcolorrendering pop				/ColorRendering findresource 				true			}			{false} ifelse		}		{true} ifelse		{			dup begin			currentdict /TransformPQR known {				currentdict /TransformPQR get aload pop				3 {{} eq 3 1 roll} repeat or or			}			{true} ifelse			currentdict /MatrixPQR known {				currentdict /MatrixPQR get aload pop				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq				and and and and and and and and			}			{true} ifelse			end			or			{				clonedict begin				/TransformPQR [					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind				] def				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def				currentdict end			} if			setcolorrendering_opt		} if			}if} def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict /ColorRendering known{			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		clonedict		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/set_spot_alias_ary{	dup inherit_aliases	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf}def/set_spot_normalization_ary{	dup inherit_aliases	dup length	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if	array	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf	/AGMCORE_SpotAliasAry where{		pop		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval		AGMCORE_SpotAliasAry length	}{0} ifelse	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval	true set_spot_alias}def/inherit_aliases{	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall}def/set_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry2 where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry2{				dup/Name get AGMCORE_name eq{					/CSD get /CSD get_res					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	//Adobe_AGM_Core begin	/setcustomcolor	{		currentdict/TintProc known currentdict/CSA known and 3 1 roll		//Adobe_AGM_Core begin		dup /customcolor_tint exch AGMCORE_gput		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not		current_spot_alias and{1 index 4 get map_alias}{false}ifelse		{			false set_spot_alias			4 -1 roll{				exch pop /sep_tint AGMCORE_gget exch			}if			mark 3 1 roll			setsepcolorspace			counttomark 0 ne{				setsepcolor			}if			pop			pop			true set_spot_alias		}{			AGMCORE_&setcustomcolor			pop		}ifelse		end	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	//Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defend/set_def_ht{	AGMCORE_def_ht sethalftone} defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.25 0%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.25 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.25 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict /Adobe_CoolType_Data 2 copy known not	 { 2 copy 10 dict put }ifget	 begin	 /@opStackCountByLevel 32 dict def	 /@opStackLevel 0 def	 /@dictStackCountByLevel 32 dict def	 /@dictStackLevel 0 def	 endsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup /args			7 index			5 add array put			put get			}			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{ pop count }			if			dup /argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					 { (*) { pop stop } 128 string /Category resourceforall }				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup					 {						  /@shouldNotDisappearDictValue known								{										  {												end												currentdict 1 index eq													 { pop exit }												if										  }									 loop								}						  if					 }				if				end		}		{ false }	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end		currentglobal false setglobal	  userdict /Adobe_CoolType_Data 2 copy known not		  { 2 copy 10 dict put }		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.%%Version: 1.21 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 27 add dict copy }	{ 27 dict }ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {				mark				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put					 {					 ((Hex) 57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec					 }				stopped					 {					 cleartomark					 Adobe_CoolType_Utility /@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						  {						  2 copy get 3 index eq								{ 1 index length exch sub 1 sub { end } repeat exit }								{ pop }						  ifelse						  }					 for					 pop pop					 Adobe_CoolType_Utility /@eexecStartData get eexec					 }					 { cleartomark }				ifelse			} }			{ {				Adobe_CoolType_Utility /@eexecStartData get eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind def/T0AddT42Mtx2{	/CIDFont findresource /Metrics2 get begin def end}bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/AGMIMG_flushfilters nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/AGMIMG_flushfilters{	dup type /arraytype ne		{1 array astore}if	aload length		{		dup type /filetype eq			{			dup status 1 index currentfile ne and				{dup flushfile closefile}				{pop}			ifelse			}{pop}ifelse		} repeat}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	CSA map_csa	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{ 									Name AGMCORE_IsSeparationAProcessColor  									{ 										Operator /imagemask eq{ 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor 										}{											invert_image_samples 										}ifelse	 								}{	 									[ /Separation Name [/DeviceGray]	 									{ 	 										sep_colorspace_proc AGMCORE_get_ink_data											1 exch sub	 									} bind										] AGMCORE_&setcolorspace										/sep_tint AGMCORE_gget AGMCORE_&setcolor 									}ifelse 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name AGMCORE_IsSeparationAProcessColor not and					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	mark currentcolor counttomark dup 2 add 1 roll cleartomark} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/DataSource origMultipleDataSources		{			[			BitsPerComponent 8 idiv origDecode length 2 idiv mul string			0 1 origDecode length 2 idiv 1 sub				{				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch				origDataSource exch get 0 () /SubFileDecode filter				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx				}for 			]bind cvx		}{origDataSource}ifelse 0 () /SubFileDecode filter def			[		origcolorSpaceElemCnt string		0 2 origDecode length 2 sub			{			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx			}for		/convProc load /exec cvx		origcolorSpaceElemCnt 1 sub -1 0			{			/dup cvx 2 /add cvx /index cvx			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx			}for	]bind cvx 0 () /SubFileDecode filter	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	CSA map_csa	2 dict begin	dup	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi			{				dup 65535 gt {1 add 2 div cvi}{exit}ifelse			} loop			string		} repeat		end ] def	/dstDataStr srcDataStrs 0 get length string def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [ [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def									/MultipleDataSources true def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA get_csa_by_name 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							devn_alt_datasource						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								devn_alt_datasource							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get get_csa_by_name				}{					/Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		<<			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		>>		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		current_spot_alias{dup 4 get map_alias}{false}ifelse		{			false set_spot_alias			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask			true set_spot_alias		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Page 1) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Web</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2008-01-14T12:05:44+01:00</xap:CreateDate>
         <xap:ModifyDate>2008-02-27T18:53:24+01:00</xap:ModifyDate>
         <xap:MetadataDate>2008-02-27T18:53:24+01:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>32</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAIAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8AlX/OMNxPLqGviWRnAht6&#xA;cmJp8UnjmHphuXq/aOIEYV3n9D3/ADMeUfKNj5b0zSvyTk/MzTEmtvOmnam7pqEM0qvOp1QW5hlT&#xA;kUdWRqU4/wAcKvQ9X/LPyS/5z6bpbaeTp99pF7fXVv8AWLkK9wtzEBJtJUUDnYbYq3plxIv5e/nQ&#xA;qSsJLbUdeEXxHkijTo+FN6gVBpirO/IUkjflH5dkLEyHQLNi5JqT9SQ1r44FfOunD80l/JeXy/bp&#xA;cPoF5ZSa+PMVW4w2kMEtxcWLPWod7mBePirmuxwqz7V/zb8x6Lb6FoGkzW1q8Hlqy1KS4u7K91B7&#xA;m4lj4x26izr6Snh8Uj9zirI7T8wfPvmjWdE0fQYrPQri60GPXtTk1GCa4ZHlnNuLeOJXtyOLox5M&#xA;dxT6QrEZpvNfk7zX+aWpeT00mz0zRf0be32ny20gEp+oLLIsPpSRrEG5Ox2J5HCrIPzI/N7WdCR7&#xA;/R9UsWe3sba/m8vSafe3UwWYBv315bt6MHJW+Euo6YqmureZfzOn/MNPLWg3ulRW97ox1mBr20nZ&#xA;oFWZIPS5Rzr6hLPXkVXbttuFSLT/ADfq3me9/KfzHfwWZj1aa5U2wjmDwXUdvOkk0UomClXC0CPG&#xA;1PGuFWR+R/N/nbzDo9x5yv77TNM8rH6+beza3laaKG0kkhWae4MwX4WhLOAnTpTAqQeWvPd55v1n&#xA;VPKGuSWHmPQ7rQ5NViu1027sUYxTpGE9K9LrMnxq6yJtUbHCrMPyL/8AJReVv+YJf+JNgV5h+Vej&#xA;warrn6cvPJlzqGrvq9+485yXSmKNkuZAjegZkbjHTjxC4VTa4/Mv81rDSPMWtzz6PdaZ5W11dHu4&#xA;xa3ENxdIZreJmT9/IkX+9II+1+G6qn+YP51+atK1zzPp+m3+k6dcaBLbwWGjXcM1zfai06I/KIxy&#xA;Iv8AuwcVCk/zUxVOp5PNEX5rSwtdWJ1g+UXubTVWspleIJeQCWGS3+tmN1dwz9Qy1A5ED4lUF5F/&#xA;M/8AMbUn8jajrX6LfSPN73Vsba1hnjnia3jkdZTI8rqeTRGq8aAe/RVAeSfz281a/r+iSNDbzaTr&#xA;l7JbSaXBY363FlASywTveuPqsu6j1OPSu3fiq15c/PTzZq+v6YUS2l0/VtUk006XDp9/69nA0jQw&#xA;3cl6f9Fl4uoMiqeh7b8VU70bX/zO17S/Osd5qGkiy0C5vtKWRbGf1J3to45GZ4/rIVUaNyuz1qa9&#xA;t1Us0HzH55stI/LPSfLMml2dn5n050jtbm2uJEtXtrT6y7rJ9Y9SQEV4q3fqxrircv51eaI/K2nP&#xA;dzaXpupS6/d6BqWtXMcpsYfqgZhMIRIr/vAAN3oD19lWYfk35u8y+adM1i/1i6tby2tdRlsdNu7G&#xA;3eCCeKAAm4jaSSQurl6DYAcTu3YK9BxV2KuxV2KuxV8+f84uf8dHzB/xhtv+JSZh6fmXrPaT6Ye8&#xA;/ofQeZjybzHTP+cffKdlNbrLqus3+k2ly17BoN1dqdPE7SeqGMMcUfLi+45MfeuKs1n8q6dN5ttP&#xA;NDvKNQs7OawijDL6JinkSRiy8eXIGMU+KntirF9e/JPy3rGp6neDU9W0631tg2taZYXYhs7tgApM&#xA;sZRzV1FG4MtcVZxFp1nDpqabBGIbOOEW8USbBIlXgqr8l2GKpJZeQtHtPIDeR45bhtIawl0wzMyG&#xA;49GZGjZuQQJzo5oeFPbFUq1T8otEvJdNubLVdV0TUNNsI9KXUNMuUgmmtIR8Ec/KORG4n4qhQa/R&#xA;iqprH5V6bqV1p1+mtavp+safZjTm1ezulS6ubYHl6dy7xyK/x1eoUHlviqJu/wAtNCu081rLPdV8&#xA;4Qw2+qMHSqLBbfVVaGqHi3AVPLlv92KpJr/5FeVtZurqd9S1ayW/sYdO1C3s7lYobiK2ThC8qGN+&#xA;ToBt+z7bmqrIdG8hWGma5Z649/e3+p2WmNoyz3bQnnbtcC45SCKKIGRSgUEU+HqCd8VQekflX5d0&#xA;ux8rWVvPdtF5Rlmm00yPGWdp0kRhPSMch+9NOPHtiqGsfye0CxbUoLfU9VXQ9US8jn8vfWV/R6i/&#xA;UrP6cYj9RftEr8dATXFULoH5I6PoeqWWpWvmDW5p7KzbTVW5uYJkexZg31ZlaD4Y1KinDiffFWYe&#xA;VPLdh5Z8uWGgWDyyWenRCCCScq0pUEmrlVRa79lGKsa0n8pdP0fXDqWl+YNbs7NryS+bQ47qMacZ&#xA;JXMkieiYi3psxNV54qiLz8q/Ll3oWv6LJPdi08x6mNYvmV4xItwJIZeMRMZATlarsQT138FXnXmv&#xA;8tfzIHnPzDrPl6CWK/1W4im0nWLPU1sreBUhSIrd2TRuJz8JLGjcvbCr1ZfJtnL5hi8yXs0kmsDS&#xA;W0afgVWBopJFmkcJx5B/UTb4qU7YFS7SPyr8u6XY+VrK3nu2i8oyTTaaZHjLSNOjo/r0jUMP3pI4&#xA;8cVUvL/5T6Z5f1SO60jW9YtdNhmluIvL63S/o1TMxd1ERj58OTFuPPrirWjflNpmi6wt9pOuazZW&#xA;C3L3Y0CK6Uadzlbm6+kYy/BmNePOmKpxpXknSdMtdftreSdo/Md5c398XZSVlu40ikEVFFFCxila&#xA;/PFUJYflvoVkfKRimuWPk2KWHS+bofUWa3+rMZ6IOR4bjjx3+7FWEeePybuE07T4vLkMupW0euXe&#xA;uanZvdiyu3kvI2Qi2vERfSVGb7J+0OrbYVZb+VOj+dNL0S8g80TyOWu3fSra4uVvbi3s+KhIprlU&#xA;jEjBgxrvt3wKzXFXYq7FXYq7FXz5/wA4uf8AHR8wf8Ybb/iUmYen5l6z2k+mHvP6H0HmY8m81i0+&#xA;3t/Jn+IbcvDq9vdSuLpXcFwL5o+EgrRlKbUOFUym896iNTuUhjhe2tr76kbMRTtcOqyCOSVZh+5W&#xA;h34kdB1xVEf4o15XkvXS1bS4tUbTXhCSCcKJ/QWQScyhNSCRwwKqQ+bLz/EFrZC4tbyzuriW2rBB&#xA;PG0ZRWYfvmZ4pCOHFuOKpbca55vvfKdjqwuLS1N3cWoVIY5uQWSZUozGXoT9oU6bVwqitW8z+aLK&#xA;TVPTFjJHpC2vr8o5g0j3AHLhSQ8QCdq1/jirV/5x1rTY7+2u0tXvre5tbeCeNJRABdIX5PHyeQ8A&#xA;p+yd8VWx+c9ckgMUKW0l0b+3s4roxTxW8kdwjHkEc+oGRlodziqzW9d8z/ojU4PWt7e/0y8tYZpo&#xA;EkCvHcNCyFKyVT+8o9SajwxVkWt6pqOlaEJyIbjUWeGBKBo4TLNIsYYrydgo5VpWuBWO+YtV8xNo&#xA;/mDTLl7VLqztVnNxCkoWS3mSQMqqZKpIGTryI9sVR+pWbad+W93bKIo2hsZafVlaNBUFtgzO1d9z&#xA;y3O+KsY1X/Eg0a20+4WaO10WeBzftUC6SS4jjtlVh14xyHn7gYUJ1P571EancpBHC9tbXv1I2fpT&#xA;tcOquI5JVmX9ytGqeJHQdcUphDqmuanaandg20OlRG7t44uEjXDCANHzMnMItXWtOB2wKgfLmtaz&#xA;Z2miWuoSWpsrzSzPbzhZFeIW8UbVnZnKsOL70piqhL591SCK/o1remGwa+tLiOC4gjJSRYyrLK5L&#xA;g+oCGVsKq+vatq6Wms6ZrENpcqumNexrCJkQ8XKGOT4wx3pupXAqaadqut6hqlxDafVoNO094YZh&#xA;Kkkk0haNZH4EOipRXAWobFUvi823cuqw2QuLW+s74XMcc1tDPEUaGNpB+8dnjk+wQePfFUVpE0yf&#xA;ltBMjssy6WXWQE8gwhJBr41xVJtIuV0vy9LqtvoUtteQacZxqFw6vHK/BW34yl/jO/QfRhVMbnzT&#xA;r+nNdrfw21wyaZJqVsLYSJT0mCsknNm5D4wainfbAqW3vmnUbu01a1mm03VbFNKlupGshNwD1CiG&#xA;RxMSKgnpRj7YVR995m8xQfpiWzjs/qWiJA7RyrKZJFeBJnUMHCqRyNDQ/LAqjq3n3Ube+vltI4TD&#xA;YNEv1V4p5J5+aLI/CSP93HQPQBgcKuvfPuoJqF4LaOF7azuVtvqZhuGuJgCokdZF/dJTlsGHbFV2&#xA;r6zql1pGvy3UNrJptlcm0it6TLI7Rzx0Z3WRaABui9T7bFVVvfNHmKFdWvo0szp2lXotWiZZfWkT&#xA;91Uhg/FT+960PywKoa1521a3uNRjtZtPhlsrhLaHTrgPJdzcuH7xFSSPY86gBT88KojyF+Vvl/yR&#xA;NeTaVcXc7XqokounjcARkkcfTji/m75VDEI8nY67tLJqQBMAV3X+ssxyx1zG4PI1lGI4Zb67uNPi&#xA;mNxHp8jRiH1DIZfi4IjOObVALUxVFR+WEgv5bq01C7tYriY3M9nG0RhaRiC5o8bsOdPio33Yqlul&#xA;eTpjc3E+pXE/o/pOe+g09Xj9BqzF4XbivM+PEt17Yqi7PyVZWl1aypeXTQ2Mz3FnZs8foxtKGDAA&#xA;JyI/eGlWxVXk8p2DeW4tBWaZLe3EfoXCsomVonDo1ePGvIfy4q1P5TsriG/juLieV9SWAXUxMYYm&#xA;2A4soVAoJp8W3ypiq6+8qadeTXk8kkyT3clvN6sbKGiltRSN4vhND41rirY8uB47dLzULq8a2uY7&#xA;uJ5TECHiBAX4I0+E137++KtX/lTT72LVUkkmQ6s8Mk7owBR7dUEZj+Hanpg71xVE3uiw3+k/o69m&#xA;lmB4n61VUm5owZZAUVVDKwB2WmKoKPyhZ/U9Sgubu5uptVjEN3dysnq+mqlVVOKBFC8j+z1xVMdQ&#xA;0u3v9Kn0yVnW3niMDshAcKRx2JBFfoxVbqekW2o6b+j5mdYKxNyQgNWGRZF3II6oK7Yqg4/LCQah&#xA;Ld2moXdrHcTfWZ7ONojC0hpyNHjdhzp8VG+7FXReVoIbi5eC9uorS7aV5rBWjMHOdSHYckLjduVA&#xA;1K/dirpfKWly21jbSNK0NhZy6fGvIDlDNGkT8yF+1xjG4piqDPkKwkjlS5v7259W0awDSPFVIS6v&#xA;8PGNRyHpjfFUw1Ty1YalNcyzvKrXVm1hJwKgCJm5kiqt8Vfo9sVWp5ahh1Nr+1vLm19Uxtc20TR+&#xA;lM0QCguHRyKqoVuJFcVQlj5HsLSe0db27khsPVFlayPGYo1mRo2UUQMaBzSpriqa2mjWdtosejjl&#xA;JaRwfVvjI5tHx47lQu9PAYqlsXk9V06bTZtUvbiwlga1WCQw0SMqFHFhEG5KBsSfoxV3mLyx9es7&#xA;qS0b/T30+XT4FlI9LhIVarfDXlVBQ9sVSzTPLWqS/W9PuVubPQ7q0aGaCe5juZfWcgcono5UKtft&#xA;Hw2xVO5fK+nywarC0koXV0RLkgrVQkQhHCq7fCveu+KrH8rIt7NdWeo3lgbjgbiKBoijtGoQPSSO&#xA;Sh4gA064q3/hhI9RnvLTULuzW5kE9xawtEYnkoAWpJG5HIL8VDiq6Xyvp8un39g0kvo6jcNdTsCv&#xA;IOzK5CnjQLVB1BxV0/lfT5rLUrNnlEWqXH1q4IK8lekYonw7D90OtcVY5e+XfMseq6jdafHJHeXN&#xA;0JrS8iuEW2WMqi/vbdweTAKeVFq3jhV//9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:3C6DA14A2BC4DC11B0F7C948713094C1</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:93685653E6F711DCA9DBE848ED1657C8</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:3B6DA14A2BC4DC11B0F7C948713094C1</stRef:instanceID>
            <stRef:documentID>uuid:3A6DA14A2BC4DC11B0F7C948713094C1</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Web</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>5080.000000</stDim:w>
            <stDim:h>5080.000000</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>White</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Black</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>74.609375</xapG:cyan>
                           <xapG:magenta>67.578125</xapG:magenta>
                           <xapG:yellow>66.796875</xapG:yellow>
                           <xapG:black>89.843750</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Red</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>98.828125</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Yellow</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>6.250000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>96.093750</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Green</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>62.500000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Cyan</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>51.562500</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>12.500000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Blue</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>87.890625</xapG:cyan>
                           <xapG:magenta>76.562500</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Magenta</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>26.953125</xapG:cyan>
                           <xapG:magenta>81.250000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=193 G=39 B=45</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>16.796875</xapG:cyan>
                           <xapG:magenta>97.656250</xapG:magenta>
                           <xapG:yellow>92.187500</xapG:yellow>
                           <xapG:black>6.640625</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=237 G=28 B=36</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.390625</xapG:cyan>
                           <xapG:magenta>98.828125</xapG:magenta>
                           <xapG:yellow>96.875000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=241 G=90 B=36</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>79.296875</xapG:magenta>
                           <xapG:yellow>96.484375</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=247 G=147 B=30</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>98.046875</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=251 G=176 B=59</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>34.765625</xapG:magenta>
                           <xapG:yellow>86.718750</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=252 G=238 B=33</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>4.687500</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>92.968750</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=217 G=224 B=33</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>18.750000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>97.656250</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=140 G=198 B=63</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>98.828125</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=57 G=181 B=74</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>74.218750</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>99.218750</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=146 B=69</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>85.937500</xapG:cyan>
                           <xapG:magenta>17.578125</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>3.906250</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=104 B=55</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>89.843750</xapG:cyan>
                           <xapG:magenta>33.203125</xapG:magenta>
                           <xapG:yellow>98.437500</xapG:yellow>
                           <xapG:black>25.781250</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=34 G=181 B=115</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.781250</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>74.609375</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=169 B=157</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>78.125000</xapG:cyan>
                           <xapG:magenta>8.984375</xapG:magenta>
                           <xapG:yellow>45.703125</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=41 G=171 B=226</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>69.531250</xapG:cyan>
                           <xapG:magenta>14.843750</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=113 B=188</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>87.109375</xapG:cyan>
                           <xapG:magenta>52.343750</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=46 G=49 B=146</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>98.828125</xapG:cyan>
                           <xapG:magenta>96.093750</xapG:magenta>
                           <xapG:yellow>3.515625</xapG:yellow>
                           <xapG:black>0.390625</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=27 G=20 B=100</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>26.171875</xapG:yellow>
                           <xapG:black>24.609375</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=102 G=45 B=145</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>74.218750</xapG:cyan>
                           <xapG:magenta>98.046875</xapG:magenta>
                           <xapG:yellow>0.781250</xapG:yellow>
                           <xapG:black>0.390625</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=147 G=39 B=143</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>49.218750</xapG:cyan>
                           <xapG:magenta>98.828125</xapG:magenta>
                           <xapG:yellow>1.171875</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=158 G=0 B=93</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>34.765625</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>37.109375</xapG:yellow>
                           <xapG:black>10.937500</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=212 G=20 B=90</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>11.718750</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>49.218750</xapG:yellow>
                           <xapG:black>0.781250</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=237 G=30 B=121</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>96.484375</xapG:magenta>
                           <xapG:yellow>20.312500</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=199 G=178 B=153</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>22.656250</xapG:cyan>
                           <xapG:magenta>27.343750</xapG:magenta>
                           <xapG:yellow>39.843750</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=153 G=134 B=117</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.843750</xapG:cyan>
                           <xapG:magenta>42.578125</xapG:magenta>
                           <xapG:yellow>52.343750</xapG:yellow>
                           <xapG:black>6.640625</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=115 G=99 B=87</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.390625</xapG:cyan>
                           <xapG:magenta>52.734375</xapG:magenta>
                           <xapG:yellow>60.546875</xapG:yellow>
                           <xapG:black>23.437500</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=83 G=71 B=65</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>57.421875</xapG:cyan>
                           <xapG:magenta>60.156250</xapG:magenta>
                           <xapG:yellow>63.671875</xapG:yellow>
                           <xapG:black>41.796875</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=198 G=156 B=109</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>22.656250</xapG:cyan>
                           <xapG:magenta>38.281250</xapG:magenta>
                           <xapG:yellow>63.281250</xapG:yellow>
                           <xapG:black>1.171875</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=166 G=124 B=82</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>31.640625</xapG:cyan>
                           <xapG:magenta>48.828125</xapG:magenta>
                           <xapG:yellow>73.828125</xapG:yellow>
                           <xapG:black>9.765625</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=140 G=98 B=57</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>35.937500</xapG:cyan>
                           <xapG:magenta>57.031250</xapG:magenta>
                           <xapG:yellow>83.593750</xapG:yellow>
                           <xapG:black>22.656250</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=117 G=76 B=36</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.062500</xapG:cyan>
                           <xapG:magenta>63.671875</xapG:magenta>
                           <xapG:yellow>92.968750</xapG:yellow>
                           <xapG:black>35.546875</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=96 G=56 B=19</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>41.406250</xapG:cyan>
                           <xapG:magenta>69.531250</xapG:magenta>
                           <xapG:yellow>96.484375</xapG:yellow>
                           <xapG:black>48.828125</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=66 G=33 B=11</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>47.656250</xapG:cyan>
                           <xapG:magenta>73.046875</xapG:magenta>
                           <xapG:yellow>83.203125</xapG:yellow>
                           <xapG:black>67.968750</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Web Color Group</xapG:groupName>
                  <xapG:groupType>1</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=236 G=28 B=36</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.781250</xapG:cyan>
                           <xapG:magenta>98.828125</xapG:magenta>
                           <xapG:yellow>96.875000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=169 B=157</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>78.125000</xapG:cyan>
                           <xapG:magenta>8.984375</xapG:magenta>
                           <xapG:yellow>45.703125</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=102 G=45 B=145</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>74.218750</xapG:cyan>
                           <xapG:magenta>98.046875</xapG:magenta>
                           <xapG:yellow>0.781250</xapG:yellow>
                           <xapG:black>0.390625</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=139 G=146 B=152 1</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>48.437500</xapG:cyan>
                           <xapG:magenta>36.328125</xapG:magenta>
                           <xapG:yellow>33.593750</xapG:yellow>
                           <xapG:black>1.562500</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Grayscale</xapG:groupName>
                  <xapG:groupType>1</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=90</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>229</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=80</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>204</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=70</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>178</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=60</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>153</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=50</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>127</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=40</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>101</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=30</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>76</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=20</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>50</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=10</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>25</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=5</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>12</xapG:gray>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_AGM_Core/capture_currentpagedevice get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -25.3174 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 25.3174 li217.93 25.3174 li217.93 0 licpclp[1 0 0 1 0 0 ] concat3.57178 0.234375 mo3.57178 22.9121 li0 22.9121 li0 0.234375 li3.57178 0.234375 licpfalse sop/0 [/DeviceCMYK] /CSA add_res0 0.91 0.72 0.23 cmykf20.2456 5.26465 mo20.2456 4.13818 li20.2456 2.77686 20.0464 1.77051 19.2876 1.03711 cv18.6494 0.420898 17.6938 0.144531 16.5366 0.144531 cv15.6528 0.144531 14.6128 0.216797 14.2578 0.276855 cv14.0776 0.306641 13.9751 0.40918 13.9751 0.613281 cv13.9751 8.79004 li13.9751 9 14.0776 9.09619 14.2578 9.12646 cv14.6128 9.18652 15.6528 9.25879 16.5366 9.25879 cv17.7046 9.25879 18.667 8.97314 19.3057 8.34375 cv20.0537 7.60596 20.2456 6.61133 20.2456 5.26465 cvcp18.8691 5.20801 mo18.8691 6.33301 18.7358 7.021 18.2515 7.51074 cv17.8306 7.93555 17.2261 8.08594 16.5366 8.08594 cv16.0317 8.08594 15.6826 8.07422 15.3643 8.05615 cv15.3643 1.35254 li15.6885 1.33496 16.0317 1.31689 16.5366 1.31689 cv17.1992 1.31689 17.7832 1.4541 18.2012 1.84131 cv18.7163 2.31836 18.8691 3.03516 18.8691 4.19482 cv18.8691 5.20801 licp34.7842 5.8916 mo34.7842 0.462891 li34.7842 0.331055 34.6763 0.234375 34.5498 0.234375 cv33.6299 0.234375 li33.4976 0.234375 33.3955 0.336914 33.3955 0.462891 cv33.3955 5.8916 li33.3955 7.35889 32.9868 8.09814 31.5923 8.09814 cv30.1973 8.09814 29.7886 7.35254 29.7886 5.8916 cv29.7886 0.462891 li29.7886 0.331055 29.6802 0.234375 29.5542 0.234375 cv28.6343 0.234375 li28.502 0.234375 28.3994 0.336914 28.3994 0.462891 cv28.3994 5.8916 li28.3994 8.3208 29.6504 9.25879 31.5923 9.25879 cv33.5337 9.25879 34.7842 8.3208 34.7842 5.8916 cvcp27.2676 1.19678 mo27.2676 0.457031 li27.2676 0.325195 27.1655 0.234375 27.0327 0.234375 cv21.2012 0.234375 li21.0693 0.234375 20.9609 0.331055 20.9609 0.457031 cv20.9609 1.19678 li20.9609 1.3291 21.0693 1.40088 21.2012 1.40088 cv23.4258 1.40088 li23.4258 8.92773 li23.4258 9.06055 23.5278 9.16846 23.6538 9.16846 cv24.5801 9.16846 li24.7124 9.16846 24.8086 9.05371 24.8086 8.92773 cv24.8086 1.40088 li27.0327 1.40088 li27.1655 1.40088 27.2676 1.32275 27.2676 1.19678 cvcp55.1655 7.9873 mo55.2729 7.97852 55.3809 8.03809 55.3809 8.1582 cv55.3809 8.75928 li55.3809 8.93359 55.3389 9.0166 55.1343 9.05371 cv54.3999 9.18799 53.8359 9.2583 52.8921 9.2583 cv51.2212 9.2583 50.0728 8.3252 50.0728 6.02246 cv50.0728 5.60449 li50.0728 3.80664 50.7676 2.38672 52.8501 2.38672 cv54.9565 2.38672 55.6035 3.85498 55.6035 5.60449 cv55.6035 5.98193 li55.6035 6.15625 55.5254 6.26465 55.3687 6.26465 cv51.395 6.26465 li51.395 6.3667 li51.395 7.43066 51.8218 8.11035 52.9521 8.11035 cv53.7397 8.11035 54.5767 8.03418 55.1172 7.99121 cv55.1655 7.9873 licp54.269 5.21777 mo54.269 4.05762 53.752 3.51758 52.8501 3.51758 cv51.96 3.51758 51.4014 4.08203 51.4014 5.21777 cv51.4014 5.29639 li54.269 5.29639 li54.269 5.21777 licp48.0269 9.16846 mo47.125 9.16846 li47.0049 9.16846 46.9087 9.05371 46.9087 8.92773 cv46.9087 2.56738 li46.9087 2.5127 46.9028 2.48926 46.8848 2.48926 cv46.8726 2.48926 46.8604 2.50684 46.8423 2.53711 cv45.4058 5.46484 li45.3096 5.65137 45.1709 5.7417 44.9429 5.7417 cv44.0591 5.7417 li43.8306 5.7417 43.6924 5.65137 43.5962 5.46484 cv42.1533 2.53711 li42.1353 2.50684 42.123 2.48926 42.1113 2.48926 cv42.0933 2.48926 42.0869 2.5127 42.0869 2.56738 cv42.0869 8.92773 li42.0869 9.05371 41.9907 9.16846 41.8706 9.16846 cv40.9688 9.16846 li40.8486 9.16846 40.7466 9.08398 40.7466 8.95801 cv40.7466 0.649414 li40.7466 0.420898 40.9326 0.234375 41.1611 0.234375 cv42.0449 0.234375 li42.2495 0.234375 42.3813 0.318848 42.46 0.481445 cv44.3594 4.38281 li44.4136 4.49121 44.4438 4.5332 44.498 4.5332 cv44.5518 4.5332 44.582 4.49121 44.6362 4.38281 cv46.5356 0.481445 li46.6138 0.318848 46.7461 0.234375 46.9507 0.234375 cv47.8345 0.234375 li48.063 0.234375 48.2495 0.420898 48.2495 0.649414 cv48.2495 8.95801 li48.2495 9.08398 48.147 9.16846 48.0269 9.16846 cvcp85.6191 3.43945 mo84.3633 3.07324 li84.2178 3.03076 84.1289 2.9209 84.1289 2.78906 cv84.1289 2.65771 84.1289 2.71191 84.1289 2.71191 cv84.1289 2.5791 84.231 2.47119 84.3633 2.47119 cv86.7012 2.47119 li86.8335 2.47119 86.9419 2.5791 86.9419 2.71143 cv86.9419 8.92188 li86.9419 9.05371 86.8335 9.16846 86.7012 9.16846 cv85.8594 9.16846 li85.7271 9.16846 85.6191 9.05371 85.6191 8.92188 cv85.6191 3.43945 licp86.7256 1.49121 mo85.8354 1.49121 li85.7036 1.49121 85.5894 1.38281 85.5894 1.25049 cv85.5894 0.240234 li85.5894 0.108398 85.7036 0 85.8354 0 cv86.7256 0 li86.8579 0 86.9663 0.108398 86.9663 0.240234 cv86.9663 1.25049 li86.9663 1.38281 86.8579 1.49121 86.7256 1.49121 cvcp102.051 1.04102 mo100.813 0.674805 li100.667 0.631836 100.579 0.521973 100.579 0.390625 cv100.579 0.258789 100.579 0.312988 100.579 0.312988 cv100.579 0.180664 100.681 0.0722656 100.813 0.0722656 cv103.151 0.0722656 li103.278 0.0722656 103.374 0.174316 103.374 0.306641 cv103.374 8.92188 li103.374 9.04785 103.284 9.16846 103.151 9.16846 cv102.28 9.16846 li102.153 9.16846 102.051 9.05371 102.051 8.92188 cv102.051 1.04102 licp93.0234 8.04004 mo93.1372 8.03223 93.2461 8.09814 93.2461 8.21826 cv93.2461 8.8252 li93.2461 9 93.1978 9.07227 92.9995 9.11426 cv92.6631 9.18652 92.1221 9.2583 91.4727 9.2583 cv89.8735 9.2583 88.8213 8.2002 88.8213 6.33643 cv88.8213 5.30859 li88.8213 3.44482 89.8677 2.38672 91.4727 2.38672 cv92.1157 2.38672 92.6631 2.45898 92.9995 2.53076 cv93.1978 2.57324 93.2461 2.63916 93.2461 2.81982 cv93.2461 3.42676 li93.2461 3.54688 93.1426 3.61133 93.0283 3.60596 cv92.9868 3.604 li92.4785 3.58008 92.1582 3.52295 91.4727 3.52295 cv90.709 3.52295 90.144 4.00391 90.144 5.30859 cv90.144 6.33643 li90.144 7.63525 90.7031 8.12207 91.4727 8.12207 cv92.1582 8.12207 92.48 8.08057 92.9814 8.04346 cv93.0234 8.04004 licp100.679 8.55664 mo100.814 8.60059 100.92 8.73047 100.92 8.86865 cv100.92 8.99951 100.92 8.92773 100.92 8.92773 cv100.92 9.06006 100.812 9.16846 100.679 9.16846 cv98.6465 9.16846 li98.5142 9.16846 98.4023 9.06006 98.3979 8.92773 cv98.3882 8.65918 li97.8472 9.00293 97.1831 9.2583 96.5581 9.2583 cv95.5479 9.2583 94.5381 8.84375 94.5381 7.28027 cv94.5381 7.18457 li94.5381 5.84961 95.3379 5.16992 97.4541 5.16992 cv98.2773 5.16992 li98.2773 4.66504 li98.2773 3.76953 97.9287 3.49902 97.1055 3.49902 cv96.3296 3.49902 95.6523 3.55811 95.2119 3.58984 cv95.1523 3.59375 li95.0386 3.60205 94.9287 3.55908 94.9287 3.39648 cv94.9287 2.80176 li94.9287 2.66943 95.0068 2.59131 95.1694 2.56104 cv95.6563 2.47119 96.2813 2.38672 97.1055 2.38672 cv98.7944 2.38672 99.6001 3.18652 99.6001 4.66504 cv99.6001 8.2085 li100.679 8.55664 licp98.2773 6.07813 mo97.4541 6.07813 li96.1792 6.07813 95.8667 6.41504 95.8667 7.17871 cv95.8667 7.27441 li95.8667 8.00195 96.2036 8.19434 96.853 8.19434 cv97.3457 8.19434 97.8145 8.03809 98.2773 7.78564 cv98.2773 6.07813 licp136.172 3.43945 mo134.922 3.07324 li134.777 3.03027 134.688 2.9209 134.688 2.78906 cv134.688 2.65771 134.688 2.71191 134.688 2.71191 cv134.688 2.5791 134.791 2.47119 134.922 2.47119 cv137.156 2.47119 li137.288 2.47119 137.394 2.5791 137.398 2.71143 cv137.408 2.9917 li138.139 2.54053 138.643 2.38672 139.394 2.38672 cv141.019 2.38672 141.481 3.50684 141.481 4.84229 cv141.481 8.92188 li141.481 9.05371 141.373 9.16846 141.24 9.16846 cv140.398 9.16846 li140.267 9.16846 140.158 9.05371 140.158 8.92188 cv140.158 4.98389 li140.158 3.85352 139.906 3.5166 138.986 3.5166 cv138.529 3.5166 138.024 3.69727 137.496 3.96777 cv137.496 8.92188 li137.496 9.04785 137.386 9.16846 137.254 9.16846 cv136.407 9.16846 li136.281 9.16846 136.172 9.05371 136.172 8.92188 cv136.172 3.43945 licp155.172 7.9873 mo155.281 7.97852 155.388 8.03809 155.388 8.1582 cv155.388 8.75928 li155.388 8.93359 155.345 9.0166 155.141 9.05371 cv154.408 9.18799 153.843 9.2583 152.899 9.2583 cv151.228 9.2583 150.08 8.3252 150.08 6.02246 cv150.08 5.60449 li150.08 3.80664 150.775 2.38672 152.857 2.38672 cv154.964 2.38672 155.611 3.85498 155.611 5.60449 cv155.611 5.98193 li155.611 6.15625 155.533 6.26465 155.376 6.26465 cv151.402 6.26465 li151.402 6.3667 li151.402 7.43066 151.83 8.10986 152.959 8.10986 cv153.747 8.10986 154.583 8.03418 155.125 7.99121 cv155.172 7.9873 licp154.276 5.21777 mo154.276 4.05762 153.759 3.51709 152.857 3.51709 cv151.967 3.51709 151.408 4.08203 151.408 5.21777 cv151.408 5.29639 li154.276 5.29639 li154.276 5.21777 licp158.755 2.47119 mo158.888 2.47119 158.994 2.5791 158.999 2.71143 cv159.009 3.00391 li159.685 2.51172 160.262 2.38672 160.773 2.38672 cv160.923 2.38672 161.02 2.47705 161.02 2.61523 cv161.02 3.29443 li161.02 3.42676 160.923 3.5166 160.773 3.5166 cv160.171 3.5166 159.667 3.67334 159.115 3.98584 cv159.115 8.92188 li159.115 9.04785 159.005 9.16846 158.874 9.16846 cv158.025 9.16846 li157.9 9.16846 157.791 9.05371 157.791 8.92188 cv157.791 3.43945 li156.584 3.07324 li156.439 3.03027 156.349 2.9209 156.349 2.78906 cv156.349 2.65771 156.349 2.71191 156.349 2.71191 cv156.349 2.5791 156.453 2.47119 156.584 2.47119 cv158.755 2.47119 licp148.208 7.9873 mo148.316 7.97852 148.423 8.03809 148.423 8.1582 cv148.423 8.75928 li148.423 8.93359 148.381 9.0166 148.177 9.05371 cv147.443 9.18799 146.878 9.2583 145.935 9.2583 cv144.264 9.2583 143.116 8.3252 143.116 6.02246 cv143.116 5.60449 li143.116 3.80664 143.81 2.38672 145.893 2.38672 cv148 2.38672 148.646 3.85498 148.646 5.60449 cv148.646 5.98193 li148.646 6.15625 148.568 6.26465 148.412 6.26465 cv144.438 6.26465 li144.438 6.3667 li144.438 7.43066 144.865 8.10986 145.996 8.10986 cv146.783 8.10986 147.62 8.03418 148.16 7.99121 cv148.208 7.9873 licp147.312 5.21777 mo147.312 4.05762 146.794 3.51709 145.893 3.51709 cv145.003 3.51709 144.444 4.08203 144.444 5.21777 cv144.444 5.29639 li147.312 5.29639 li147.312 5.21777 licp167.088 3.43945 mo165.839 3.07324 li165.693 3.03027 165.605 2.9209 165.605 2.78906 cv165.605 2.65771 165.605 2.71191 165.605 2.71191 cv165.605 2.5791 165.707 2.47119 165.839 2.47119 cv168.072 2.47119 li168.205 2.47119 168.31 2.5791 168.315 2.71143 cv168.325 2.9917 li169.056 2.54053 169.56 2.38672 170.311 2.38672 cv171.936 2.38672 172.397 3.50684 172.397 4.84229 cv172.397 8.92188 li172.397 9.05371 172.289 9.16846 172.157 9.16846 cv171.315 9.16846 li171.183 9.16846 171.075 9.05371 171.075 8.92188 cv171.075 4.98389 li171.075 3.85352 170.822 3.5166 169.902 3.5166 cv169.445 3.5166 168.94 3.69727 168.412 3.96777 cv168.412 8.92188 li168.412 9.04785 168.303 9.16846 168.171 9.16846 cv167.323 9.16846 li167.197 9.16846 167.088 9.05371 167.088 8.92188 cv167.088 3.43945 licp163.167 3.43945 mo161.912 3.07324 li161.765 3.03027 161.677 2.9209 161.677 2.78906 cv161.677 2.65771 161.677 2.71191 161.677 2.71191 cv161.677 2.5791 161.78 2.47119 161.912 2.47119 cv164.25 2.47119 li164.381 2.47119 164.49 2.5791 164.49 2.71143 cv164.49 8.92188 li164.49 9.05371 164.381 9.16846 164.25 9.16846 cv163.408 9.16846 li163.275 9.16846 163.167 9.05371 163.167 8.92188 cv163.167 3.43945 licp164.28 1.49121 mo163.39 1.49121 li163.257 1.49121 163.143 1.38281 163.143 1.25049 cv163.143 0.240234 li163.143 0.108398 163.257 0 163.39 0 cv164.28 0 li164.412 0 164.52 0.108398 164.52 0.240234 cv164.52 1.25049 li164.52 1.38281 164.412 1.49121 164.28 1.49121 cvcp117.001 3.43945 mo115.751 3.07324 li115.607 3.03027 115.517 2.9209 115.517 2.78906 cv115.517 2.65771 115.517 2.71191 115.517 2.71191 cv115.517 2.5791 115.62 2.47119 115.751 2.47119 cv117.985 2.47119 li118.117 2.47119 118.223 2.5791 118.228 2.71143 cv118.238 2.9917 li118.968 2.54053 119.472 2.38672 120.224 2.38672 cv121.849 2.38672 122.31 3.50684 122.31 4.84229 cv122.31 8.92188 li122.31 9.05371 122.203 9.16846 122.07 9.16846 cv121.228 9.16846 li121.096 9.16846 120.988 9.05371 120.988 8.92188 cv120.988 4.98389 li120.988 3.85352 120.736 3.5166 119.816 3.5166 cv119.359 3.5166 118.853 3.69727 118.325 3.96777 cv118.325 8.92188 li118.325 9.04785 118.216 9.16846 118.083 9.16846 cv117.236 9.16846 li117.111 9.16846 117.001 9.05371 117.001 8.92188 cv117.001 3.43945 licp132.251 3.43945 mo130.996 3.07324 li130.849 3.03027 130.761 2.9209 130.761 2.78906 cv130.761 2.65771 130.761 2.71191 130.761 2.71191 cv130.761 2.5791 130.863 2.47119 130.996 2.47119 cv133.333 2.47119 li133.465 2.47119 133.574 2.5791 133.574 2.71143 cv133.574 8.92188 li133.574 9.05371 133.465 9.16846 133.333 9.16846 cv132.492 9.16846 li132.359 9.16846 132.251 9.05371 132.251 8.92188 cv132.251 3.43945 licp133.363 1.49121 mo132.473 1.49121 li132.341 1.49121 132.227 1.38281 132.227 1.25049 cv132.227 0.240234 li132.227 0.108398 132.341 0 132.473 0 cv133.363 0 li133.496 0 133.604 0.108398 133.604 0.240234 cv133.604 1.25049 li133.604 1.38281 133.496 1.49121 133.363 1.49121 cvcp114.383 9.14404 mo113.962 9.20068 113.138 9.2583 112.068 9.2583 cv111.131 9.2583 110.396 9.13086 109.917 8.63379 cv109.55 8.25195 109.4 7.70947 109.4 6.90771 cv109.4 2.49512 li109.4 1.68262 109.556 1.13525 109.932 0.753906 cv110.412 0.267578 111.14 0.144043 112.068 0.144043 cv113.138 0.144043 113.939 0.206055 114.383 0.264648 cv114.509 0.28125 114.564 0.354492 114.564 0.474609 cv114.564 1.16016 li114.564 1.26855 114.486 1.35254 114.376 1.35254 cv111.99 1.35254 li111.004 1.35254 110.777 1.64111 110.777 2.49512 cv110.777 3.97998 li114.251 3.97998 li114.383 3.97998 114.492 4.08789 114.492 4.22021 cv114.492 4.88184 li114.492 5.01367 114.383 5.12256 114.251 5.12256 cv110.777 5.12256 li110.777 6.90771 li110.777 7.76172 111.004 8.0498 111.99 8.0498 cv114.376 8.0498 li114.486 8.0498 114.564 8.13428 114.564 8.24219 cv114.564 8.93359 li114.564 9.05371 114.509 9.12695 114.383 9.14404 cvcp178.448 9.625 mo178.448 9.2583 178.177 9.08398 177.004 8.79541 cv175.791 8.49463 li175.525 8.77148 175.345 9 175.345 9.52881 cv175.345 9.63721 li175.345 10.2202 175.695 10.5811 176.926 10.5811 cv178.189 10.5811 178.448 10.2622 178.448 9.71533 cv178.448 9.625 licp179.638 4.6416 mo179.638 4.73145 li179.638 6.14453 178.712 6.85352 176.878 6.85352 cv176.242 6.85352 175.82 6.75146 175.526 6.63135 cv175.351 6.72754 175.273 6.84766 175.273 6.9917 cv175.273 7.21436 175.387 7.31641 175.664 7.38281 cv177.269 7.77979 li178.675 8.12207 179.77 8.41699 179.77 9.625 cv179.77 9.71533 li179.77 10.9058 178.935 11.5908 176.926 11.5908 cv175.002 11.5908 174.052 10.8574 174.052 9.63721 cv174.052 9.52881 li174.052 8.94531 174.347 8.42871 174.738 8.104 cv174.336 7.89355 174.149 7.4668 174.149 7.06396 cv174.149 7.05176 li174.149 6.70313 174.305 6.34277 174.636 6.13232 cv174.269 5.77148 174.113 5.33838 174.113 4.73145 cv174.113 4.6416 li174.113 3.50488 174.804 2.47119 176.878 2.47119 cv180.074 2.47119 li180.206 2.47119 180.308 2.5791 180.308 2.71191 cv180.308 2.71191 180.308 2.74268 180.308 2.87402 cv180.308 3.00586 180.219 3.11572 180.074 3.15869 cv179.173 3.42578 li179.482 3.73047 179.638 4.1333 179.638 4.6416 cvcp178.333 4.65332 mo178.333 4.00391 178.044 3.49902 176.878 3.49902 cv175.695 3.49902 175.417 4.03418 175.417 4.65332 cv175.417 4.74951 li175.417 5.23633 175.628 5.8374 176.878 5.8374 cv178.027 5.8374 178.333 5.41113 178.333 4.74951 cv178.333 4.65332 licp128.346 9.625 mo128.346 9.2583 128.076 9.08398 126.903 8.79541 cv125.689 8.49463 li125.424 8.77148 125.244 9 125.244 9.52881 cv125.244 9.63721 li125.244 10.2202 125.592 10.5811 126.826 10.5811 cv128.087 10.5811 128.346 10.2622 128.346 9.71533 cv128.346 9.625 licp129.537 4.6416 mo129.537 4.73145 li129.537 6.14453 128.611 6.85352 126.777 6.85352 cv126.14 6.85352 125.718 6.75146 125.424 6.63135 cv125.25 6.72754 125.171 6.84766 125.171 6.9917 cv125.171 7.21436 125.286 7.31641 125.562 7.38281 cv127.167 7.77979 li128.574 8.12207 129.668 8.41699 129.668 9.625 cv129.668 9.71533 li129.668 10.9058 128.833 11.5908 126.826 11.5908 cv124.901 11.5908 123.951 10.8574 123.951 9.63721 cv123.951 9.52881 li123.951 8.94531 124.246 8.42871 124.636 8.104 cv124.235 7.89355 124.047 7.4668 124.047 7.06396 cv124.047 7.05176 li124.047 6.70313 124.204 6.34277 124.535 6.13232 cv124.167 5.77148 124.011 5.33838 124.011 4.73145 cv124.011 4.6416 li124.011 3.50488 124.703 2.47119 126.777 2.47119 cv129.972 2.47119 li130.104 2.47119 130.207 2.5791 130.207 2.71191 cv130.207 2.71191 130.207 2.74268 130.207 2.87402 cv130.207 3.00586 130.118 3.11572 129.972 3.15869 cv129.072 3.42578 li129.38 3.73047 129.537 4.1333 129.537 4.6416 cvcp128.232 4.65332 mo128.232 4.00391 127.943 3.49902 126.777 3.49902 cv125.592 3.49902 125.316 4.03418 125.316 4.65332 cv125.316 4.74951 li125.316 5.23633 125.527 5.8374 126.777 5.8374 cv127.925 5.8374 128.232 5.41113 128.232 4.74951 cv128.232 4.65332 licp63.0981 1.04102 mo61.8481 0.674805 li61.7021 0.631836 61.6138 0.521973 61.6138 0.390625 cv61.6138 0.258789 61.6138 0.312988 61.6138 0.312988 cv61.6138 0.180664 61.7158 0.0722656 61.8481 0.0722656 cv64.186 0.0722656 li64.3184 0.0722656 64.4204 0.180664 64.4204 0.312988 cv64.4204 2.79541 li64.9375 2.53076 65.563 2.38672 66.248 2.38672 cv67.7153 2.38672 68.4067 3.34277 68.4067 4.96582 cv68.4067 8.92188 li68.4067 9.05371 68.2983 9.16846 68.166 9.16846 cv67.3242 9.16846 li67.1919 9.16846 67.084 9.05371 67.084 8.92188 cv67.084 4.96582 li67.084 3.8418 66.7412 3.52295 65.9478 3.52295 cv65.5566 3.52295 64.9375 3.64355 64.4204 3.89551 cv64.4204 8.92188 li64.4204 9.04785 64.3125 9.16846 64.1802 9.16846 cv63.3325 9.16846 li63.2061 9.16846 63.0981 9.05371 63.0981 8.92188 cv63.0981 1.04102 licp61.2456 8.04004 mo61.3594 8.03223 61.4683 8.09814 61.4683 8.21826 cv61.4683 8.8252 li61.4683 9 61.4199 9.07227 61.2217 9.11426 cv60.8853 9.18652 60.3438 9.2583 59.6943 9.2583 cv58.0957 9.2583 57.0435 8.2002 57.0435 6.33643 cv57.0435 5.30859 li57.0435 3.44482 58.0894 2.38672 59.6943 2.38672 cv60.3379 2.38672 60.8853 2.45898 61.2217 2.53076 cv61.4199 2.57324 61.4683 2.63916 61.4683 2.81982 cv61.4683 3.42676 li61.4683 3.54688 61.3647 3.61133 61.2505 3.60596 cv61.2085 3.604 li60.7002 3.58008 60.3799 3.52295 59.6943 3.52295 cv58.9312 3.52295 58.3662 4.00391 58.3662 5.30859 cv58.3662 6.33643 li58.3662 7.63525 58.9248 8.12207 59.6943 8.12207 cv60.3799 8.12207 60.7017 8.08057 61.2031 8.04346 cv61.2456 8.04004 licp77.7974 3.43945 mo76.5479 3.07324 li76.4019 3.03076 76.313 2.9209 76.313 2.78906 cv76.313 2.65771 76.313 2.71191 76.313 2.71191 cv76.313 2.5791 76.4155 2.47119 76.5479 2.47119 cv78.7808 2.47119 li78.9126 2.47119 79.0186 2.5791 79.0234 2.71143 cv79.0332 2.9917 li79.7642 2.54053 80.2681 2.38672 81.0195 2.38672 cv82.645 2.38672 83.106 3.50684 83.106 4.84229 cv83.106 8.92188 li83.106 9.05371 82.9976 9.16846 82.8652 9.16846 cv82.0239 9.16846 li81.8916 9.16846 81.7832 9.05371 81.7832 8.92188 cv81.7832 4.98389 li81.7832 3.854 81.5308 3.5166 80.6108 3.5166 cv80.1543 3.5166 79.6489 3.69727 79.1201 3.96777 cv79.1201 8.92188 li79.1201 9.04785 79.0117 9.16846 78.8794 9.16846 cv78.0317 9.16846 li77.9058 9.16846 77.7974 9.05371 77.7974 8.92188 cv77.7974 3.43945 licp76.1841 8.55664 mo76.3193 8.60059 76.4248 8.73047 76.4248 8.86865 cv76.4248 8.99951 76.4248 8.92773 76.4248 8.92773 cv76.4248 9.06006 76.3169 9.16846 76.1841 9.16846 cv74.1519 9.16846 li74.0195 9.16846 73.9072 9.06006 73.9028 8.92773 cv73.8931 8.65918 li73.3525 9.00293 72.6885 9.2583 72.063 9.2583 cv71.0532 9.2583 70.043 8.84375 70.043 7.28027 cv70.043 7.18457 li70.043 5.84961 70.8428 5.16992 72.959 5.16992 cv73.7827 5.16992 li73.7827 4.66504 li73.7827 3.76953 73.4336 3.49902 72.6104 3.49902 cv71.8345 3.49902 71.1582 3.57129 70.7173 3.59131 cv70.6572 3.59375 li70.543 3.59912 70.4341 3.55908 70.4341 3.39648 cv70.4341 2.80176 li70.4341 2.66943 70.5122 2.59131 70.6743 2.56104 cv71.1611 2.47119 71.7866 2.38672 72.6104 2.38672 cv74.2993 2.38672 75.105 3.18652 75.105 4.66504 cv75.105 8.2085 li76.1841 8.55664 licp73.7827 6.07813 mo72.959 6.07813 li71.6846 6.07813 71.3716 6.41504 71.3716 7.17871 cv71.3716 7.27441 li71.3716 8.00195 71.7085 8.19434 72.3579 8.19434 cv72.8506 8.19434 73.3193 8.03809 73.7827 7.78564 cv73.7827 6.07813 licp0 0 0 1 cmykf216.644 18.4268 mo216.644 17.7051 216.318 17.1396 215.02 17.1396 cv213.673 17.1396 213.396 17.7529 213.396 18.4268 cv213.396 18.5225 li213.396 19.0518 213.637 19.749 215.02 19.749 cv216.318 19.749 216.644 19.2441 216.644 18.5225 cv216.644 18.4268 licp216.74 23.3564 mo216.74 22.8877 216.355 22.6953 215.273 22.4189 cv213.914 22.0703 li213.565 22.3711 213.324 22.6719 213.324 23.2969 cv213.324 23.4043 li213.324 24.0781 213.721 24.499 215.056 24.499 cv216.427 24.499 216.74 24.1143 216.74 23.4531 cv216.74 23.3564 licp217.713 17.1035 mo217.281 17.1875 li217.498 17.416 217.689 17.7773 217.689 18.4268 cv217.689 18.5225 li217.689 19.8457 216.873 20.5791 215.02 20.5791 cv214.382 20.5791 213.974 20.4824 213.625 20.3379 cv213.42 20.4346 213.324 20.5664 213.324 20.7471 cv213.324 20.9512 213.42 21.0596 213.697 21.1328 cv215.489 21.5898 li216.667 21.8896 217.797 22.2266 217.797 23.3564 cv217.797 23.4531 li217.797 24.6074 217.029 25.3174 215.056 25.3174 cv213.156 25.3174 212.291 24.583 212.291 23.4043 cv212.291 23.2969 li212.291 22.623 212.651 22.0703 213.047 21.7695 cv212.963 21.7334 li212.579 21.5654 212.411 21.168 212.411 20.7949 cv212.411 20.7832 li212.411 20.459 212.566 20.1094 212.904 19.918 cv212.531 19.5684 212.35 19.1357 212.35 18.5225 cv212.35 18.4268 li212.35 17.3555 212.952 16.2979 215.02 16.2979 cv217.654 16.2979 li217.797 16.2979 217.93 16.418 217.93 16.5625 cv217.93 16.875 li217.93 17.0313 217.845 17.0801 217.713 17.1035 cvcp210.583 22.9121 mo210.005 22.9121 li209.873 22.9121 209.765 22.8037 209.765 22.6719 cv209.765 18.7148 li209.765 17.5 209.356 17.1279 208.442 17.1279 cv207.937 17.1279 207.372 17.3203 206.819 17.5967 cv206.819 22.6719 li206.819 22.791 206.71 22.9121 206.578 22.9121 cv205.989 22.9121 li205.869 22.9121 205.76 22.8037 205.76 22.6719 cv205.76 16.5381 li205.76 16.4063 205.857 16.2979 205.989 16.2979 cv206.59 16.2979 li206.722 16.2979 206.819 16.4063 206.819 16.5381 cv206.819 16.7676 li207.48 16.3945 208.021 16.2129 208.731 16.2129 cv210.173 16.2129 210.824 17.1152 210.824 18.7148 cv210.824 22.6719 li210.824 22.8037 210.714 22.9121 210.583 22.9121 cvcp203.74 22.9121 mo203.164 22.9121 li203.031 22.9121 202.922 22.8037 202.922 22.6719 cv202.922 16.5381 li202.922 16.4063 203.031 16.2979 203.164 16.2979 cv203.74 16.2979 li203.873 16.2979 203.981 16.4063 203.981 16.5381 cv203.981 22.6719 li203.981 22.8037 203.873 22.9121 203.74 22.9121 cvcp203.764 15.2402 mo203.151 15.2402 li203.019 15.2402 202.91 15.1309 202.91 14.999 cv202.91 14.0371 li202.91 13.9043 203.019 13.7969 203.151 13.7969 cv203.764 13.7969 li203.896 13.7969 204.004 13.9043 204.004 14.0371 cv204.004 14.999 li204.004 15.1309 203.896 15.2402 203.764 15.2402 cvcp201.395 17.1279 mo200.842 17.1279 200.337 17.2715 199.736 17.6328 cv199.736 22.6719 li199.736 22.791 199.627 22.9121 199.496 22.9121 cv198.906 22.9121 li198.786 22.9121 198.677 22.8037 198.677 22.6719 cv198.677 16.5381 li198.677 16.4063 198.773 16.2979 198.906 16.2979 cv199.471 16.2979 li199.603 16.2979 199.7 16.4063 199.7 16.5381 cv199.7 16.791 li200.3 16.3701 200.854 16.2129 201.395 16.2129 cv201.564 16.2129 201.648 16.2861 201.648 16.4297 cv201.648 16.9238 li201.648 17.0557 201.564 17.1279 201.395 17.1279 cvcp196.165 19.0273 mo196.165 17.6689 195.648 17.1396 194.589 17.1396 cv193.555 17.1396 192.978 17.7285 192.978 19.0273 cv192.978 19.1357 li196.165 19.1357 li196.165 19.0273 licp197.005 19.9414 mo192.978 19.9414 li192.978 20.1094 li192.978 21.541 193.542 22.0703 194.65 22.0703 cv195.347 22.0703 196.236 22.0215 196.79 21.9375 cv196.814 21.9375 196.826 21.9375 196.849 21.9375 cv196.946 21.9375 197.042 21.9863 197.042 22.1055 cv197.042 22.5156 li197.042 22.6719 196.994 22.7559 196.802 22.791 cv196.117 22.9238 195.455 22.9961 194.65 22.9961 cv193.266 22.9961 191.919 22.3467 191.919 20.1094 cv191.919 19.0273 li191.919 17.3076 192.869 16.2129 194.589 16.2129 cv196.345 16.2129 197.234 17.3203 197.234 19.0273 cv197.234 19.6768 li197.234 19.833 197.15 19.9414 197.005 19.9414 cvcp189.623 19.0273 mo189.623 17.6689 189.105 17.1396 188.047 17.1396 cv187.013 17.1396 186.435 17.7285 186.435 19.0273 cv186.435 19.1357 li189.623 19.1357 li189.623 19.0273 licp190.464 19.9414 mo186.435 19.9414 li186.435 20.1094 li186.435 21.541 187.001 22.0703 188.107 22.0703 cv188.805 22.0703 189.695 22.0215 190.248 21.9375 cv190.272 21.9375 190.285 21.9375 190.308 21.9375 cv190.404 21.9375 190.5 21.9863 190.5 22.1055 cv190.5 22.5156 li190.5 22.6719 190.453 22.7559 190.259 22.791 cv189.574 22.9238 188.914 22.9961 188.107 22.9961 cv186.724 22.9961 185.377 22.3467 185.377 20.1094 cv185.377 19.0273 li185.377 17.3076 186.328 16.2129 188.047 16.2129 cv189.803 16.2129 190.693 17.3203 190.693 19.0273 cv190.693 19.6768 li190.693 19.833 190.609 19.9414 190.464 19.9414 cvcp183.718 22.9121 mo183.141 22.9121 li183.009 22.9121 182.9 22.8037 182.9 22.6719 cv182.9 18.7148 li182.9 17.5 182.492 17.1279 181.578 17.1279 cv181.072 17.1279 180.507 17.3203 179.955 17.5967 cv179.955 22.6719 li179.955 22.791 179.846 22.9121 179.714 22.9121 cv179.125 22.9121 li179.004 22.9121 178.896 22.8037 178.896 22.6719 cv178.896 16.5381 li178.896 16.4063 178.992 16.2979 179.125 16.2979 cv179.726 16.2979 li179.858 16.2979 179.955 16.4063 179.955 16.5381 cv179.955 16.7676 li180.616 16.3945 181.157 16.2129 181.867 16.2129 cv183.309 16.2129 183.958 17.1152 183.958 18.7148 cv183.958 22.6719 li183.958 22.8037 183.851 22.9121 183.718 22.9121 cvcp176.875 22.9121 mo176.298 22.9121 li176.166 22.9121 176.058 22.8037 176.058 22.6719 cv176.058 16.5381 li176.058 16.4063 176.166 16.2979 176.298 16.2979 cv176.875 16.2979 li177.008 16.2979 177.117 16.4063 177.117 16.5381 cv177.117 22.6719 li177.117 22.8037 177.008 22.9121 176.875 22.9121 cvcp176.9 15.2402 mo176.287 15.2402 li176.154 15.2402 176.046 15.1309 176.046 14.999 cv176.046 14.0371 li176.046 13.9043 176.154 13.7969 176.287 13.7969 cv176.9 13.7969 li177.032 13.7969 177.14 13.9043 177.14 14.0371 cv177.14 14.999 li177.14 15.1309 177.032 15.2402 176.9 15.2402 cvcp173.388 18.4268 mo173.388 17.7051 173.064 17.1396 171.765 17.1396 cv170.418 17.1396 170.142 17.7529 170.142 18.4268 cv170.142 18.5225 li170.142 19.0518 170.382 19.749 171.765 19.749 cv173.064 19.749 173.388 19.2441 173.388 18.5225 cv173.388 18.4268 licp173.485 23.3564 mo173.485 22.8877 173.1 22.6953 172.017 22.4189 cv170.659 22.0703 li170.31 22.3711 170.07 22.6719 170.07 23.2969 cv170.07 23.4043 li170.07 24.0781 170.466 24.499 171.801 24.499 cv173.171 24.499 173.485 24.1143 173.485 23.4531 cv173.485 23.3564 licp174.458 17.1035 mo174.026 17.1875 li174.243 17.416 174.435 17.7773 174.435 18.4268 cv174.435 18.5225 li174.435 19.8457 173.617 20.5791 171.765 20.5791 cv171.127 20.5791 170.719 20.4824 170.371 20.3379 cv170.166 20.4346 170.07 20.5664 170.07 20.7471 cv170.07 20.9512 170.166 21.0596 170.443 21.1328 cv172.234 21.5898 li173.413 21.8896 174.542 22.2266 174.542 23.3564 cv174.542 23.4531 li174.542 24.6074 173.773 25.3174 171.801 25.3174 cv169.901 25.3174 169.035 24.583 169.035 23.4043 cv169.035 23.2969 li169.035 22.623 169.396 22.0703 169.792 21.7695 cv169.708 21.7334 li169.324 21.5654 169.156 21.168 169.156 20.7949 cv169.156 20.7832 li169.156 20.459 169.312 20.1094 169.648 19.918 cv169.276 19.5684 169.095 19.1357 169.095 18.5225 cv169.095 18.4268 li169.095 17.3555 169.697 16.2979 171.765 16.2979 cv174.398 16.2979 li174.542 16.2979 174.675 16.418 174.675 16.5625 cv174.675 16.875 li174.675 17.0313 174.591 17.0801 174.458 17.1035 cvcp167.328 22.9121 mo166.75 22.9121 li166.619 22.9121 166.509 22.8037 166.509 22.6719 cv166.509 18.7148 li166.509 17.5 166.101 17.1279 165.187 17.1279 cv164.682 17.1279 164.117 17.3203 163.564 17.5967 cv163.564 22.6719 li163.564 22.791 163.456 22.9121 163.324 22.9121 cv162.734 22.9121 li162.614 22.9121 162.505 22.8037 162.505 22.6719 cv162.505 16.5381 li162.505 16.4063 162.601 16.2979 162.734 16.2979 cv163.335 16.2979 li163.467 16.2979 163.564 16.4063 163.564 16.5381 cv163.564 16.7676 li164.225 16.3945 164.766 16.2129 165.476 16.2129 cv166.919 16.2129 167.568 17.1152 167.568 18.7148 cv167.568 22.6719 li167.568 22.8037 167.46 22.9121 167.328 22.9121 cvcp160.906 22.9355 mo160.45 22.9844 159.271 22.9961 158.562 22.9961 cv156.878 22.9961 156 22.3594 156 20.7598 cv156 16.1289 li156 14.5303 156.878 13.8926 158.562 13.8926 cv159.271 13.8926 160.402 13.917 160.906 13.9648 cv160.978 13.9775 161.027 14.0605 161.027 14.1328 cv161.027 14.7344 li161.027 14.8184 160.978 14.8789 160.894 14.8789 cv158.574 14.8789 li157.298 14.8789 157.094 15.2148 157.094 16.1289 cv157.094 17.8008 li160.787 17.8008 li160.918 17.8008 161.027 17.9092 161.027 18.041 cv161.027 18.498 li161.027 18.6309 160.918 18.7393 160.787 18.7393 cv157.094 18.7393 li157.094 20.7598 li157.094 21.6738 157.298 22.0098 158.574 22.0098 cv160.894 22.0098 li160.978 22.0098 161.027 22.0703 161.027 22.1543 cv161.027 22.7676 li161.027 22.8398 160.978 22.9238 160.906 22.9355 cvcp150.568 22.9121 mo149.943 22.9121 li149.822 22.9121 149.726 22.8037 149.726 22.6719 cv149.726 14.0977 li149.726 13.9775 149.81 13.8691 149.943 13.8691 cv150.568 13.8691 li150.688 13.8691 150.785 13.9648 150.785 14.0977 cv150.785 22.6719 li150.785 22.791 150.7 22.9121 150.568 22.9121 cvcp89.8599 14.6016 mo89.2827 14.6016 li88.7173 14.6016 88.5493 14.7705 88.5493 15.4316 cv88.5493 16.2979 li89.812 16.2979 li89.9438 16.2979 90.0405 16.3945 90.0405 16.5137 cv90.0405 16.9834 li90.0405 17.1035 89.9438 17.1875 89.812 17.1875 cv88.5493 17.1875 li88.5493 22.6709 li88.5493 22.791 88.4409 22.9121 88.3203 22.9121 cv87.7314 22.9121 li87.5991 22.9121 87.4907 22.791 87.4907 22.6709 cv87.4907 17.1875 li86.3242 17.0557 li86.1919 17.043 86.0957 16.959 86.0957 16.8389 cv86.0957 16.5137 li86.0957 16.3945 86.1919 16.2979 86.3242 16.2979 cv87.4907 16.2979 li87.4907 15.4316 li87.4907 14.1445 88.1162 13.7598 89.1743 13.7598 cv89.499 13.7598 89.6914 13.7969 89.8477 13.832 cv89.98 13.8691 90.0762 13.916 90.0762 14.0254 cv90.0762 14.4219 li90.0762 14.5537 89.9922 14.6016 89.8599 14.6016 cvcp84.1357 19.1475 mo84.1357 17.9209 83.6431 17.1396 82.5127 17.1396 cv81.394 17.1396 80.9009 17.9092 80.9009 19.1475 cv80.9009 20.0615 li80.9009 21.2881 81.3823 22.0703 82.5127 22.0703 cv83.6309 22.0703 84.1357 21.3008 84.1357 20.0615 cv84.1357 19.1475 licp82.5127 22.9961 mo80.7446 22.9961 79.8428 21.8301 79.8428 20.0615 cv79.8428 19.1475 li79.8428 17.3799 80.7446 16.2129 82.5127 16.2129 cv84.2803 16.2129 85.1938 17.3799 85.1938 19.1475 cv85.1938 20.0615 li85.1938 21.8301 84.2803 22.9961 82.5127 22.9961 cvcp75.811 22.9355 mo75.5708 22.9717 75.2578 22.9961 75.0293 22.9961 cv73.9229 22.9961 73.394 22.707 73.394 21.3848 cv73.394 17.1875 li72.2271 17.0557 li72.0952 17.043 71.9985 16.9707 71.9985 16.8389 cv71.9985 16.5137 li71.9985 16.3818 72.0952 16.2979 72.2271 16.2979 cv73.394 16.2979 li73.394 15.1191 li73.394 14.999 73.478 14.9023 73.6104 14.8789 cv74.2354 14.7822 li74.2476 14.7822 74.2598 14.7822 74.2715 14.7822 cv74.3677 14.7822 74.4521 14.8662 74.4521 14.9863 cv74.4521 16.2979 li75.7505 16.2979 li75.8828 16.2979 75.9912 16.4063 75.9912 16.5381 cv75.9912 16.9473 li75.9912 17.0791 75.8828 17.1875 75.7505 17.1875 cv74.4521 17.1875 li74.4521 21.3848 li74.4521 22.0459 74.6201 22.1426 75.1011 22.1426 cv75.7749 22.1426 li75.9434 22.1426 76.0273 22.1895 76.0273 22.3105 cv76.0273 22.7314 li76.0273 22.8398 75.9673 22.9121 75.811 22.9355 cvcp70.6401 22.9121 mo70.063 22.9121 li69.9307 22.9121 69.8223 22.8037 69.8223 22.6709 cv69.8223 18.7148 li69.8223 17.5 69.4136 17.127 68.4995 17.127 cv67.9946 17.127 67.4292 17.3203 66.876 17.5967 cv66.876 22.6709 li66.876 22.791 66.7681 22.9121 66.6357 22.9121 cv66.0464 22.9121 li65.9263 22.9121 65.8179 22.8037 65.8179 22.6709 cv65.8179 16.5381 li65.8179 16.4063 65.9141 16.2979 66.0464 16.2979 cv66.6475 16.2979 li66.7798 16.2979 66.876 16.4063 66.876 16.5381 cv66.876 16.7666 li67.5376 16.3945 68.0786 16.2129 68.7881 16.2129 cv70.231 16.2129 70.8809 17.1152 70.8809 18.7148 cv70.8809 22.6709 li70.8809 22.8037 70.7725 22.9121 70.6401 22.9121 cvcp63.3047 19.0273 mo63.3047 17.668 62.7876 17.1396 61.7295 17.1396 cv60.6948 17.1396 60.1177 17.7285 60.1177 19.0273 cv60.1177 19.1357 li63.3047 19.1357 li63.3047 19.0273 licp64.1465 19.9414 mo60.1177 19.9414 li60.1177 20.1094 li60.1177 21.541 60.6831 22.0703 61.7896 22.0703 cv62.4868 22.0703 63.377 22.0215 63.9302 21.9375 cv63.9541 21.9375 63.9658 21.9375 63.9902 21.9375 cv64.0864 21.9375 64.1826 21.9863 64.1826 22.1055 cv64.1826 22.5146 li64.1826 22.6709 64.1343 22.7559 63.9419 22.791 cv63.2563 22.9238 62.5952 22.9961 61.7896 22.9961 cv60.4067 22.9961 59.0596 22.3467 59.0596 20.1094 cv59.0596 19.0273 li59.0596 17.3076 60.0098 16.2129 61.7295 16.2129 cv63.4849 16.2129 64.375 17.3203 64.375 19.0273 cv64.375 19.6768 li64.375 19.833 64.291 19.9414 64.1465 19.9414 cvcp57.4004 22.9121 mo56.8228 22.9121 li56.6904 22.9121 56.5825 22.8037 56.5825 22.6709 cv56.5825 18.4141 li56.5825 17.4043 56.1138 17.127 55.4883 17.127 cv55.0552 17.127 54.5503 17.2715 54.0815 17.4521 cv54.1538 17.7168 54.1895 18.0293 54.1895 18.3906 cv54.1895 22.6709 li54.1895 22.791 54.1055 22.9121 53.9731 22.9121 cv53.3354 22.9121 li53.2153 22.9121 53.1313 22.8037 53.1313 22.6709 cv53.1313 18.3906 li53.1313 17.3438 52.8306 17.127 52.2051 17.127 cv51.7725 17.127 51.2432 17.3438 50.7383 17.5967 cv50.7383 22.6709 li50.7383 22.791 50.6538 22.9121 50.522 22.9121 cv49.8843 22.9121 li49.7642 22.9121 49.6802 22.8037 49.6802 22.6709 cv49.6802 16.5381 li49.6802 16.4063 49.7759 16.2979 49.9087 16.2979 cv50.5098 16.2979 li50.6421 16.2979 50.7383 16.4063 50.7383 16.5381 cv50.7383 16.7666 li51.2192 16.4668 51.8325 16.2012 52.4941 16.2012 cv53.0112 16.2012 53.396 16.3457 53.6968 16.6943 cv54.3579 16.3818 55.0674 16.2012 55.6929 16.2012 cv56.7749 16.2012 57.6411 16.7422 57.6411 18.4141 cv57.6411 22.6709 li57.6411 22.8037 57.5327 22.9121 57.4004 22.9121 cvcp48.3452 22.9355 mo48.105 22.9717 47.792 22.9961 47.5635 22.9961 cv46.457 22.9961 45.9282 22.707 45.9282 21.3848 cv45.9282 17.1875 li44.7612 17.0557 li44.6294 17.043 44.5332 16.9707 44.5332 16.8389 cv44.5332 16.5137 li44.5332 16.3818 44.6294 16.2979 44.7612 16.2979 cv45.9282 16.2979 li45.9282 15.1191 li45.9282 14.999 46.0122 14.9023 46.1445 14.8789 cv46.77 14.7822 li46.7817 14.7822 46.7939 14.7822 46.8062 14.7822 cv46.9023 14.7822 46.9863 14.8662 46.9863 14.9863 cv46.9863 16.2979 li48.2852 16.2979 li48.4175 16.2979 48.5254 16.4063 48.5254 16.5381 cv48.5254 16.9473 li48.5254 17.0791 48.4175 17.1875 48.2852 17.1875 cv46.9863 17.1875 li46.9863 21.3848 li46.9863 22.0459 47.1548 22.1426 47.6357 22.1426 cv48.3091 22.1426 li48.4775 22.1426 48.5615 22.1895 48.5615 22.3105 cv48.5615 22.7314 li48.5615 22.8398 48.5015 22.9121 48.3452 22.9355 cvcp43.6553 17.127 mo43.1025 17.127 42.5972 17.2715 41.9956 17.6328 cv41.9956 22.6709 li41.9956 22.791 41.8877 22.9121 41.7554 22.9121 cv41.166 22.9121 li41.0459 22.9121 40.9375 22.8037 40.9375 22.6709 cv40.9375 16.5381 li40.9375 16.4063 41.0337 16.2979 41.166 16.2979 cv41.7314 16.2979 li41.8638 16.2979 41.96 16.4063 41.96 16.5381 cv41.96 16.791 li42.561 16.3701 43.1143 16.2129 43.6553 16.2129 cv43.8237 16.2129 43.9077 16.2852 43.9077 16.4297 cv43.9077 16.9229 li43.9077 17.0557 43.8237 17.127 43.6553 17.127 cvcp38.2441 19.7129 mo37.354 19.7129 li35.8989 19.7129 35.5142 20.0381 35.5142 20.8916 cv35.5142 21.0352 li35.5142 21.9023 35.9229 22.1299 36.6206 22.1299 cv37.1738 22.1299 37.6665 21.9619 38.2441 21.6484 cv38.2441 19.7129 licp39.0615 22.9121 mo38.5083 22.9121 li38.3765 22.9121 38.2681 22.8037 38.2681 22.6709 cv38.2681 22.4063 li37.6909 22.7432 37.0898 22.9961 36.416 22.9961 cv35.394 22.9961 34.4561 22.5508 34.4561 21.0479 cv34.4561 20.9033 li34.4561 19.6055 35.2139 18.9551 37.354 18.9551 cv38.2441 18.9551 li38.2441 18.4746 li38.2441 17.4648 37.8955 17.1152 36.9575 17.1152 cv36.1758 17.1152 35.5981 17.1641 35.1172 17.2109 cv35.0933 17.2109 35.0815 17.2109 35.0571 17.2109 cv34.9492 17.2109 34.8408 17.1758 34.8408 17.0195 cv34.8408 16.5986 li34.8408 16.4668 34.9248 16.3945 35.0933 16.3701 cv35.5864 16.2852 36.1392 16.2129 36.9575 16.2129 cv38.6284 16.2129 39.3022 17.0557 39.3022 18.4746 cv39.3022 22.6709 li39.3022 22.8037 39.1938 22.9121 39.0615 22.9121 cvcp32.2192 19.1836 mo32.2192 17.9209 31.8467 17.1035 30.6563 17.1035 cv30.1509 17.1035 29.5854 17.1641 29.249 17.2236 cv29.249 21.9863 li29.646 22.0576 30.2715 22.1055 30.6563 22.1055 cv31.8345 22.1055 32.2192 21.3359 32.2192 20.0488 cv32.2192 19.1836 licp30.6563 22.9961 mo30.2832 22.9961 29.7183 22.9473 29.249 22.8633 cv29.249 25.04 li29.249 25.1602 29.1528 25.2686 29.0205 25.2686 cv28.4072 25.2686 li28.2871 25.2686 28.1909 25.1719 28.1909 25.04 cv28.1909 16.7666 li28.1909 16.6104 28.2271 16.5381 28.4438 16.4902 cv29.0806 16.334 29.9229 16.2129 30.6563 16.2129 cv32.4478 16.2129 33.2778 17.3799 33.2778 19.1836 cv33.2778 20.0488 li33.2778 21.9375 32.4116 22.9961 30.6563 22.9961 cvcp25.6777 19.0273 mo25.6777 17.668 25.1606 17.1396 24.1021 17.1396 cv23.0679 17.1396 22.4907 17.7285 22.4907 19.0273 cv22.4907 19.1357 li25.6777 19.1357 li25.6777 19.0273 licp26.5195 19.9414 mo22.4907 19.9414 li22.4907 20.1094 li22.4907 21.541 23.0562 22.0703 24.1626 22.0703 cv24.8599 22.0703 25.75 22.0215 26.3032 21.9375 cv26.3267 21.9375 26.3389 21.9375 26.3633 21.9375 cv26.4595 21.9375 26.5557 21.9863 26.5557 22.1055 cv26.5557 22.5146 li26.5557 22.6709 26.5073 22.7559 26.3149 22.791 cv25.6294 22.9238 24.9683 22.9961 24.1626 22.9961 cv22.7798 22.9961 21.4326 22.3467 21.4326 20.1094 cv21.4326 19.0273 li21.4326 17.3076 22.3828 16.2129 24.1021 16.2129 cv25.8579 16.2129 26.748 17.3203 26.748 19.0273 cv26.748 19.6768 li26.748 19.833 26.6641 19.9414 26.5195 19.9414 cvcp19.0518 17.6328 mo19.0518 15.4561 17.9453 14.8301 16.5024 14.8301 cv15.937 14.8301 15.5645 14.8428 15.1675 14.8662 cv15.1675 22.0332 li15.5522 22.0576 15.937 22.0576 16.5024 22.0576 cv17.9453 22.0576 19.0518 21.4209 19.0518 19.2559 cv19.0518 17.6328 licp16.5024 22.9961 mo15.5884 22.9961 14.6626 22.9355 14.3135 22.876 cv14.1577 22.8516 14.061 22.7559 14.061 22.5752 cv14.061 14.3135 li14.061 14.1445 14.1577 14.0371 14.3135 14.0127 cv14.6626 13.9531 15.5884 13.8926 16.5024 13.8926 cv18.7271 13.8926 20.146 15.0352 20.146 17.6328 cv20.146 19.2559 li20.146 21.8301 18.7271 22.9961 16.5024 22.9961 cvcp146.912 19.7129 mo146.022 19.7129 li144.567 19.7129 144.182 20.0381 144.182 20.8916 cv144.182 21.0352 li144.182 21.9023 144.591 22.1299 145.289 22.1299 cv145.841 22.1299 146.334 21.9619 146.912 21.6484 cv146.912 19.7129 licp147.73 22.9121 mo147.176 22.9121 li147.044 22.9121 146.936 22.8037 146.936 22.6719 cv146.936 22.4063 li146.359 22.7432 145.757 22.9961 145.083 22.9961 cv144.062 22.9961 143.125 22.5508 143.125 21.0479 cv143.125 20.9033 li143.125 19.6045 143.881 18.9551 146.022 18.9551 cv146.912 18.9551 li146.912 18.4746 li146.912 17.4648 146.564 17.1152 145.625 17.1152 cv144.843 17.1152 144.266 17.1641 143.785 17.2109 cv143.761 17.2109 143.75 17.2109 143.725 17.2109 cv143.617 17.2109 143.509 17.1758 143.509 17.0195 cv143.509 16.5977 li143.509 16.4658 143.593 16.3945 143.761 16.3701 cv144.254 16.2852 144.808 16.2129 145.625 16.2129 cv147.296 16.2129 147.97 17.0557 147.97 18.4746 cv147.97 22.6719 li147.97 22.8037 147.862 22.9121 147.73 22.9121 cvcp141.833 22.8633 mo141.437 22.9355 140.896 22.9961 140.332 22.9961 cv138.695 22.9961 137.769 21.8418 137.769 20.0742 cv137.769 19.1357 li137.769 17.3682 138.683 16.2129 140.332 16.2129 cv140.884 16.2129 141.437 16.2734 141.833 16.3457 cv142.027 16.3818 142.075 16.4424 142.075 16.6104 cv142.075 17.043 li142.075 17.1641 141.978 17.2236 141.871 17.2236 cv141.846 17.2236 141.833 17.2236 141.822 17.2236 cv141.292 17.1641 140.919 17.1396 140.332 17.1396 cv139.369 17.1396 138.828 17.7773 138.828 19.1357 cv138.828 20.0742 li138.828 21.4209 139.357 22.0703 140.332 22.0703 cv140.919 22.0703 141.292 22.0459 141.822 21.9863 cv141.833 21.9863 141.846 21.9863 141.871 21.9863 cv141.978 21.9863 142.075 22.0459 142.075 22.166 cv142.075 22.5996 li142.075 22.7559 142.027 22.8281 141.833 22.8633 cvcp135.966 22.9121 mo135.388 22.9121 li135.256 22.9121 135.148 22.8037 135.148 22.6719 cv135.148 16.5381 li135.148 16.4063 135.256 16.2979 135.388 16.2979 cv135.966 16.2979 li136.097 16.2979 136.207 16.4063 136.207 16.5381 cv136.207 22.6719 li136.207 22.8037 136.097 22.9121 135.966 22.9121 cvcp135.99 15.2393 mo135.376 15.2393 li135.244 15.2393 135.136 15.1309 135.136 14.999 cv135.136 14.0371 li135.136 13.9043 135.244 13.7969 135.376 13.7969 cv135.99 13.7969 li136.123 13.7969 136.23 13.9043 136.23 14.0371 cv136.23 14.999 li136.23 15.1309 136.123 15.2393 135.99 15.2393 cvcp133.14 22.9121 mo132.562 22.9121 li132.43 22.9121 132.322 22.8037 132.322 22.6719 cv132.322 18.7148 li132.322 17.5 131.914 17.127 131 17.127 cv130.494 17.127 129.929 17.3203 129.375 17.5967 cv129.375 22.6719 li129.375 22.791 129.267 22.9121 129.135 22.9121 cv128.546 22.9121 li128.425 22.9121 128.318 22.8037 128.318 22.6719 cv128.318 16.5381 li128.318 16.4063 128.414 16.2979 128.546 16.2979 cv129.148 16.2979 li129.28 16.2979 129.375 16.4063 129.375 16.5381 cv129.375 16.7666 li130.037 16.3945 130.578 16.2129 131.289 16.2129 cv132.731 16.2129 133.38 17.1152 133.38 18.7148 cv133.38 22.6719 li133.38 22.8037 133.272 22.9121 133.14 22.9121 cvcp125.624 19.7129 mo124.734 19.7129 li123.279 19.7129 122.894 20.0381 122.894 20.8916 cv122.894 21.0352 li122.894 21.9023 123.302 22.1299 124 22.1299 cv124.554 22.1299 125.046 21.9619 125.624 21.6484 cv125.624 19.7129 licp126.441 22.9121 mo125.888 22.9121 li125.756 22.9121 125.648 22.8037 125.648 22.6719 cv125.648 22.4063 li125.071 22.7432 124.47 22.9961 123.796 22.9961 cv122.774 22.9961 121.835 22.5508 121.835 21.0479 cv121.835 20.9033 li121.835 19.6045 122.593 18.9551 124.734 18.9551 cv125.624 18.9551 li125.624 18.4746 li125.624 17.4648 125.275 17.1152 124.337 17.1152 cv123.556 17.1152 122.978 17.1641 122.498 17.2109 cv122.473 17.2109 122.461 17.2109 122.437 17.2109 cv122.33 17.2109 122.22 17.1758 122.22 17.0195 cv122.22 16.5977 li122.22 16.4658 122.304 16.3945 122.473 16.3701 cv122.966 16.2852 123.519 16.2129 124.337 16.2129 cv126.009 16.2129 126.682 17.0557 126.682 18.4746 cv126.682 22.6719 li126.682 22.8037 126.574 22.9121 126.441 22.9121 cvcp120.201 22.9121 mo119.624 22.9121 li119.492 22.9121 119.382 22.8037 119.382 22.6719 cv119.382 18.7148 li119.382 17.5117 118.878 17.1396 118.096 17.1396 cv117.723 17.1396 116.966 17.2363 116.437 17.4766 cv116.437 22.6719 li116.437 22.791 116.329 22.9121 116.197 22.9121 cv115.607 22.9121 li115.486 22.9121 115.378 22.8037 115.378 22.6719 cv115.378 14.1094 li115.378 13.9766 115.474 13.8691 115.607 13.8691 cv116.208 13.8691 li116.34 13.8691 116.437 13.9766 116.437 14.1094 cv116.437 16.5859 li117.013 16.334 117.759 16.2129 118.277 16.2129 cv119.551 16.2129 120.441 16.9473 120.441 18.7148 cv120.441 22.6719 li120.441 22.8037 120.333 22.9121 120.201 22.9121 cvcp113.791 22.8633 mo113.394 22.9355 112.853 22.9961 112.289 22.9961 cv110.652 22.9961 109.726 21.8418 109.726 20.0742 cv109.726 19.1357 li109.726 17.3682 110.64 16.2129 112.289 16.2129 cv112.841 16.2129 113.394 16.2734 113.791 16.3457 cv113.984 16.3818 114.032 16.4424 114.032 16.6104 cv114.032 17.043 li114.032 17.1641 113.935 17.2236 113.828 17.2236 cv113.803 17.2236 113.791 17.2236 113.779 17.2236 cv113.25 17.1641 112.876 17.1396 112.289 17.1396 cv111.326 17.1396 110.785 17.7773 110.785 19.1357 cv110.785 20.0742 li110.785 21.4209 111.314 22.0703 112.289 22.0703 cv112.876 22.0703 113.25 22.0459 113.779 21.9863 cv113.791 21.9863 113.803 21.9863 113.828 21.9863 cv113.935 21.9863 114.032 22.0459 114.032 22.166 cv114.032 22.5996 li114.032 22.7559 113.984 22.8281 113.791 22.8633 cvcp107.43 19.0273 mo107.43 17.668 106.913 17.1396 105.854 17.1396 cv104.82 17.1396 104.243 17.7285 104.243 19.0273 cv104.243 19.1357 li107.43 19.1357 li107.43 19.0273 licp108.271 19.9414 mo104.243 19.9414 li104.243 20.1094 li104.243 21.541 104.808 22.0703 105.915 22.0703 cv106.612 22.0703 107.502 22.0215 108.055 21.9375 cv108.079 21.9375 108.091 21.9375 108.115 21.9375 cv108.211 21.9375 108.308 21.9863 108.308 22.1055 cv108.308 22.5146 li108.308 22.6719 108.259 22.7559 108.067 22.791 cv107.381 22.9238 106.72 22.9961 105.915 22.9961 cv104.532 22.9961 103.185 22.3467 103.185 20.1094 cv103.185 19.0273 li103.185 17.3076 104.135 16.2129 105.854 16.2129 cv107.61 16.2129 108.5 17.3203 108.5 19.0273 cv108.5 19.6768 li108.5 19.833 108.416 19.9414 108.271 19.9414 cvcp101.417 22.9121 mo100.828 22.9121 li100.696 22.9121 100.587 22.8037 100.587 22.6719 cv100.587 15.54 li100.587 15.5156 100.587 15.5039 100.575 15.5039 cv100.563 15.5039 100.563 15.5039 100.551 15.5283 cv98.8315 19.0879 li98.7114 19.3281 98.5913 19.4365 98.2905 19.4365 cv97.7373 19.4365 li97.4365 19.4365 97.3164 19.3281 97.1963 19.0879 cv95.4766 15.5283 li95.4644 15.5039 95.4644 15.5039 95.4526 15.5039 cv95.4404 15.5039 95.4404 15.5156 95.4404 15.54 cv95.4404 22.6719 li95.4404 22.8037 95.3325 22.9121 95.1997 22.9121 cv94.6108 22.9121 li94.4785 22.9121 94.3701 22.8037 94.3701 22.6719 cv94.3701 14.3262 li94.3701 14.1328 94.5264 13.9766 94.7188 13.9766 cv95.5005 13.9766 li95.7173 13.9766 95.8135 14.0254 95.8853 14.1816 cv97.8696 18.3066 li97.9175 18.4141 97.9536 18.4385 98.0142 18.4385 cv98.0742 18.4385 98.1104 18.4141 98.1582 18.3066 cv100.143 14.1816 li100.214 14.0254 100.311 13.9766 100.527 13.9766 cv101.309 13.9766 li101.501 13.9766 101.658 14.1328 101.658 14.3262 cv101.658 22.6719 li101.658 22.8037 101.549 22.9121 101.417 22.9121 cvcp0 0 0 0.56 cmykf%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5[[/CSA [/0 ]]] del_resAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 12.0%%AI8_CreatorVersion: 12.0.1%%For: (PeopleGroup) (PeopleGroup)%%Title: (DTU Mekanik B UK.eps)%%CreationDate: 27/02/08 18:53%AI9_DataStream%Gb",KCMtFXP2J"7s.D"SbQ(_5AFc/;LBB*\Rd3'0"&h@pZWJacDO7BGgO@Y_m-3d1ouD<>bZ)_W\Z0Mg/LUH'O\@MI%*"4AYJ-I]%gg@h0\:-ZSq<+@t:"r@1i$ML(M,m@DeQ;eJiigO$rA)jU2ZX7\PqkCdY,?Eu['>LW)Qd8GGC4I\J$lr'qr.82I/3$Ur9!S4p=#W]%hk%NB^pD.4/2&YpI[SD4cd%$C^,l,1^0+]G/f-IU=(c`@0WbAQRQ%SMMp&Teh-^,f]T"SI/V*L5D!Z)4@T.cJi84\:k5,#HrpB93%f]Mbl2coP0:[ipbK7CXBhVH-o`'1-P^%o/;nUK`rTC-U"Y^m)@k7@UgfB)mf:Ns9\G8E3is7JlsqT%^Ja31g$,pL.SogHi=rll`u%p[M24:@4iSP>F4.%ib<8N0!'b/sa6P-I+9Imqt=;T],ffEDCa<]"NH=nZOo-A`*aeP<Sg.rT3VDDq>eL1kqcD>,qGdc.h>k6r0ht%\3,C`f(c3AP7%54G5H`6(MEF'nfGgGkL`f6-t<&Fm+:?9I_kb#Qe+IYr#>A)<?'qR>cm!]2%=l+S9'lPI]IuPnIr,%D$o1!W**d:%RZOt+S:D^@P^It-nc%PEcTun8oqlFMYB48AS:03CR^p2g?G%j:c:9Y]m3IpG_$d0'p@+&?BAjBdHUPd-h=@#T&ufUED/QDWVr,4c%Qi-V%'%lm17DtmWA?FW4`"(':)-e8Uh4;Lkf@E[qp[Xr?froTb;g&#d)La^P5MHs&cK>8Z)LcH2T5"h-C/(<Q(/UK83<uB)$6B%t%;U.QWk8"G>ZYcC0gHq;dIR3A0Ki2aqV;O$%$)Qd*-oIVac1r>CREqSN@KE)R(=#55`<&51/>s'OR/0JSTf:Dt:fBR0](ub_67E`b%r.Is%-5e7\"s\_l:^0Al5@N?!$*"ACJtMNSN!Ol!98"[-)+F`n@GL>kTJ.^;-Xi4q&#EZ=n.Wqq(''QoJY!O8$&aH_pdm>WjOAPA%48"Ti%R$.=OqRBjV-n]?'3_+JUf#TR1h6"o9#::5L']A0(WH\EiBJ/"bs2-%Sc]+E67E`nr1mI@.NuIQqr*N$"42+_+.4qM+(60^%&`*XD1ihkEoUPbHn"l=]^8Q^45oCN1:aV,2C=B-G;]$VSKMk4q0L!>[eV0Vl#"D[B-'TusLG25:+R0^\(0V;bK:WaQ&1tu7O?"W"%;st"XoNoBRoNYur`^YB3;Y#!GSa+\eoL1p@PtBJ!F&'6=()H[6oUAoDeZ$9GeXBR*i$m,=;7Fo#VE_#MBh29NSn5`YSd4JA?kR3e%Ce.p0^[b]GQYJ!MitqV?Y,M,rC$:cYS%`8dK<P3B^8eB<,tS#0?f'93q)<_U5lZT^mgf8<F@;b^ht/dqdJs#$I8sVp*toq"VQZ0s%qEP"WY<%(D5DQe%T/<bD^\gU:j7jNK2n%8=NX.eNm:'Ln`])`rqr>]N`]!><@R33pMkeXPUTdiWr[@2(Z%e%[)B]!J_dDpiKL&=Y%#CHlT,J<,]NYV9W.,`u:J"bCp_G\S0iZ]4Q"+$'`MkpK^&`4T3%fN*YcsqSI"o&Pocj8S0%(/qXJ_rs*GRJn-rtb70pjE5B`&Aah%"sM#`TDkRV9<Y8sr@dWTc]/ae[<?E,/)^s$=`BhM7l:<GckiaV(#)%]_)?ZCcJ^Dp07?IMBm..JQGs"D+ah.><#`RgKF92hR#CF/%^Lb\0:HaptJ9-#aN#G1KJm7;=,<Y*k_k4'T)W:N!B+A)fqT<j_-05f/2/8'+:6\A<Pu$U\88em:BeF)uAZ!Tc@aEg,3V>br9Vq=$%=(e]4MX';h#q&%sJoALFNCnZKHim)7%=0tlLrP*-2"[EaRnt9dSGEM>#\K4]/_;@`IW))7IQ,P!Nm)][NFrpFOK"?<"61.6N&-dM%oGcWtmfYVtSj94Z1>ao`U*48Cf#JB38X)ekM1;/Y(3$uFiEC1Q25HJ\K$\"tZc2iUEGQVSRjn#$`[PsZgdWgT-ca@^&k:f'jIJ)]%n8H)][_@i$a?Q?9JkO7)S8[[Co0_e!ElA<&j'UH6":9\?=Lpqm)KM;Z-hr25+UQ'J:\bH%KD'm?3oa9"Ha-bCHC*SE@l-tJ7JRrZ%gH=n5AFpgbK8$ZC]N&_.hguLY7JT1Gk1p%,lZ0&q]3L3'7eodI0)laa)#dhmKGs*)l?Ss+gZGb5%9O4CDl7elg@cn>5)%&OqqCEX%m6odEom_0eCi18>cEq/(I@22BECg>`Af`=Y4-*$<Tc3%ZdJq%IZU4-KihMlZIQ.#H#f"H_'<UAa%S#Z<qA>7aX>@fUG>qqcJ&j@%%Gq$L$Wm,K4-^:&C,rLo;K#`49dQuq(VHcFKSEI@m$L5oMii.iRs13S0EgnI(AtC:HP#Xhnb\o%FOT*ER<W;1Wc>/_]*Mq)oX&\Ek%ri*?=.q>N&J"j-A7AbY,h'L+'2c(#_X!]G5f%d05X(^9n'03R!Q8?aW>AC58lDp-7[pU5M^ZIIV@,1T(G*="cD_>tbdq@o`r8dPA%mf"H!L%,+$hqc6!(Y<&\WP68G_ODW"n)Hof\\5QRps&KDS*CMSDf:).:4>17q_4FD0!F/]qW!6;o^@HJ7-NmS5F)GASm?aAj+Hat%GRHF>pQP&qqX<PA?*)8#r7C93MnA*5L0gL)V<N.Y]=n7:@IiI'c"60IpS654"sXi)n&@G<^^A]N?PB;<ho#]pD`YJCgUXf3dd,d%%5MYAOk@^-J([l:g5(:"$+*tc=kNP_5fbQ5F>b9b(F+*sfIZGVp?a"pi\\.]ZQ)V$=r,?h+GB&)BI/WB/]B.T*erH*cDJlWbZm#)&%qB*o(Ru]uc'BJNVmH!0NDEg>71ecB1MsIilL#@:&BY:nP#bI$tlORVMQe:-+%gsraH3>*mSm@uE:(X"c"SNMn2tF:-9-RJQe@pcu%Z"/9d?9Q(;)`=$h(SC`hp?_08A@I&[r#u(8COGC>&plt'5?>[0[*[.U<rZ>$c`01/BD"ANa7W$;:ggeIPZC7Vjl5<#:oucV1Gr7S%l9m4m\ku2Nkf-$dhP'ccR^P4kB$ItKDGI3DTkgcPUU<#6C8\`T3f;@3VW[eXTBM!.NA?L@`Y`K]nKsXS*1<4_Rq$MK(:LY$C(K#:%CTXY=[o#Dt7s8M-p=PthKr\_8)Q0-GeiDog\CS592fnTUJ&.4o*TGPfTp:8*iQ2(6LmEfeK9Tg(5grQ!MFU>"%6Rr7E?$bE=U$Iq%Q@[6+H13Nc$HFe:&0(rk":pFt)Np#2g,ppT\T7,\J^*f%.O^5(\:/+4)B-rbd,8G@j7''.3gncL@!FHK36a:U0DtK>KBb0e[8l2c%<N4)ADe?IuA.dX77(eRZ@,kcS$I#6&3)R_9b%C;Y%Ng30V@W0kpp<$(4r&rDW:"Z'#`s[sL$JTmLhj5(.9i91Un6U;8$e$@2PT'I%BeXNnRQ*0I,f5a)=n=Uk7r\`#S4aZ2e\p-Xi]Ph4c;3HTc`9S@8!+pgdN?TK`[TH#A5lJt)EN_^1lkU)KAj87[G2h4R+dM$@\_AQ%1b;@Bj&KiD`lJj9!^\bB3\?:INrHZ8`co$O-ls/:>M_L*2p4V#hO=n[YG&=X+(Pg</rSHCj7&3($nGN41p6*Nk8G.[>2#BWji'rq%R@*RghnlcA=*N3Rdtq!Zhs)i\0$h],]#1bQoc/<lBr_99#[RWiJt!B7#sVDp7E#&b-'gT:,"r<G8o,f$<J_e!athC+BIiec5$M9#%N"mSaFuU]jnT-GEem[X<LCq?mQYnQJf&Hieni?J)l0Nu2oiLI&$@U]65"@TE^sQC,Y(6`aS5H_8O/'1?&c*o(80>oCjbH;%3*'1t%BaGT'F^B*"iA";.F]^T-h_oQ=I_.a,0;C#oo:K#G22qt":?nfZcI<?!(*#X*>.5*<-G`J]276aX[F`r1Dmlc+q\7q@?k!8X+'1,p%&a(HJA;4)_D3^][FrEY@IaM3(n3%BNQ>/DIRf!1DlA=(jAXpoH(g@#Ff1f'N$kmsGl&SAf8d[(5NKigOlXMG1lR=g5R453H`267G%XaWA:ZYldj)mH<]N^^$KiYR8+:m!1(C2AeOS[,fnETL]bZf@j+Ldj)";Y8InM2M/J.P*L3Lbc5;/5?u$Mtphj3*N\IYj`%0YR;,@%hBqfXqIFSdEcQO_5FJ&^S[9d'`1OOQ)b"$Q3J`P#B5r<>I!e%@SfJmn\&Y1'p;cUR*h+Q_2N^#Mo>UW<IQX7KBChmD3tHBsGB5i)%;7pcj"06'mfu`T*2P86+8$d@SAq&lS2TjNqf#1k"Y)X8f-V)3Io:t!dd1KKOrK01I;(gC]T;f>2([Xe@gs4YWHdoK@BRT2MgR>W"%2N_.n@1c8OEL;Ma3/[J?<Udg.)l7bSYdiO+rkooU\Y&[Bhtl9EGMYdi=@^rA+u`W6'6ig*;-Q&<>"a\*Mi1btM4Cl.gn_+>,-!WC%;:V('Q)BVAO1-b,60i)Ds0-THXV:0C89Z(?Q<@HM`8c06]2%-6OpA(u\h9<`6R"67qCd8crniH,J%38lGe'@B2$2&U9C6rJ#B<2r%V#T#Y$Z"U?75E&4<n=QUdZ.$tFVGE=MQV@6bbCod(Vbuopm$!`+T^r>>*6YFMTRn3"L5$jU\YDQZ\T_Z9Zt>L6-e%0s1U_)Y4>p7%K+a%3ZW-s><VPB?ooG$rA=[2?8UY@qHE*!E[dGjh*h/e%r21q(Xa>Hikp_(4T,+%DHtJ0k5he#f/g:hR#7(GH!YPNnJ4PT<Ck,2E%B3Rf`&l&J.&[1_-i-RbWC-]mu$nY4LA8MfCE8o>9G'=Xg?KB2k.liHFE"QY]=<UBB&mutd$SR=4iN#CC`[nFDH"<j$Og-O5*!d0k%'Bq`E72uYV-LP(T>BU]`Eb,!.3QI\cC):l4K':oVc4+q#)nQMa#a)/07IE?t4T7>2qNI[C'Tc=*s%V8O$t(B!#sN59Z+X7U(,q/]%h,JCO=@<`3`8E!1-3d9_a7!O4i3c'pa-ju=-gk:3"d0a4"Yis67U\7_@&Lr(8,RH`F93:GBjQ?Q*HVJ.\\M%"(n)V&!'_hor)glJ%?mkTNZTuc#<K%m?\09'9--RnQAdC%Bi?_nY+U(_@+[uS^)'b'<H%>2,6uHQ[Z+2jo+`?1-Z%Y2+:E;)4"''?!O";Dkp,6C)`rWSJ%S=Wm%k])go(8/$b:)0T/$Rc1)J1a<*,1^*PZ9FABYk#07kG\!rMJ#\qp:Sa!jZ+c]7=I9[,C_SiUFTA/Boar>l&s)`a/:;\VbPL"%4;IGE)0=b^;U^YiZ?@EA)a0$rj_j1`aI=\<qT37CEU!#k7&h5>W>fb'.i@P=cR*8YA%1"+r-%RTOPTWpC_P@$Va#X1!Ff;(R'UU%%r6I\oZ1ZVUg/%!6h'@J<q@Y;A#5#f0W#JR_:N[W,2f5Ip/Q@oclJOa#_#e0sl>`b;ePNRu"Yn;ql%j^3Mf0j3ojg*_:0(fn"UF/M%TU`)\:**:s2CU9=$$H&e^b7VLNU8eNeqYjK"a3ApVHRW&'&4V-?OV@RN-LA<T;i-`pRgkX+)8,dERoDqMC5Qh$@_IX3fg0DhoZcM%$F>.&`'tP22@^p/.qIMYJ!3Qi)L"$4]Hja0RqgQ-g:,:a/g]3clVl/.I/[b96?`NG@F](M0.]2l<b,CeSI,aPq&FUNW[C9<#ZCgL%eZ*:_LfdYIcH92emUHGB47GXM<Y_pmW_DO[jg-WhX79,2"h3>E>P$(j4E3`f$:4-*;!;,3((WRY-Fp1<ik_PfWgZXhqOr[,GjH+t%$j0ea^hhB-@6=16_Eq'67Y9&^O:;A,.S*09<bJb=#&;jce?g^kZ)kmtNY8s!7FQl=CfJk5dU>R?6T(uFe4<ST=]I!&fM[h`<47[l%[NdoSOu0X7Td>uT,R#g$[A:fn,)<0<.W]`dg)T<tT[Alsk:crmTOnG?*GK_=3ZeGb*bosXP$sPr4j`ns^/q#N#>/?ROi)F<Qj((Y%*;.'V4AN4J/J.^Zl@S506]KHc<X=!pWnWYiUOn:k"+5q#drlk'KPVZS91`LO^KJGj+#IUn@*kp"(9PDlQ6DDCN*77.<lK56+]h[r%(>Jnhp?=E''%kQ/Oei6Wr2Lb\>?QuM*?gnSZ5K>iYuD__Ms?D$:Y#ZS-d5Yj;R<&cN!b[oWt%^mY]V,D(WaI$44Hg.3%J\t;dtHV%Qj@\c%YY5t)It<3)XL=/70L^([uU=9db[>0op0oGhaI9B?$\c>*n$uG=>_1LW\J8_385fb5T`tQ2lZ$D:UO>`hr9JcVg:VcJ'9^L%"pD1_SrU>Tq%f@C;f-@^hs_'-aL?Ls9KHO>oYqO%QD@WB.lNt)8\*";NkWK-DtE0s4h>eI[X;%^qEW4oa7doeIWXs!V$3Z1")1&G%&Mls5KV0?]["O[POO>&1m3.0PUah<IV-,&_7bY@"P%>on7^@.^gIKm_;ADY60p?-8M3poR=<cl?1ml(=_%m]hRC"k;8?3S&%%fX.%isD,LaFHT('JcDE)2/JJ)XXs?K3f=,:a*U*kM!9=k,`=5T!bC`X)$(^:j*[gdsAg0Ki<b=X_Ni$CRo$PaL5)N[m5-s6#To`^=B]3%F_tB[Q)h95SUg<49O6>?PO1AF6X4.>SOce<75&iL1V)j%f,\)fdJLdn55X$k7_O/Ts7m$d]?qb#@/[<]LD@(:OTe;kX,>heeWU/b%AZQhZcrJ+g+fbt-38"gS"82h:p1?h`/A&_[8m14Xj/`LF!;ER`*Hb@<<mDnLWW<?LklNMD]qh<dDXc'd?Fn!N9<49DTQH!rVT(7H%NiJD0[>sdM9(mn?ojGH2TVo;"&(hHi)I-uH..t*eQ;C`u6F%SDPB(APmb=m7=C5,?brfBJW&DS&5=F@d+^7=aO.baVd+Bq,ql!-:%I?LP@))O>nN?dhj:YWuBedRqbN]*9Di]sP4frO7jP=4'V!7<SgXI@,.K!L*=9eo*F)9+RrG/^iE2+hDc6mh><S6.*+K#"E%)AamL%P[;^`EeAJnP3^g,"lZFXaMMWD.E<6W(U]Y40m(+?@k44m\7lq9r).\rN*t3NNSE`4'8=!Pm)G2&F0(p6P3jj5PO"'@VE0lf&T#+Z%,Y.LHV1VXq&82M*n@54YQ<`@ZS\fE;BJU*$F[CD`W($0#!,9GIX\pbqD<ecJ`aQGcM;BG:G,7#qLao[m&8:GS1L]W*TI%?_FHp^u%T7=Je5.b"4S\-Tro`N!^oCLo<4?,P9cHh.7oAKO/3'Rr!c\(i\i;>\s57c&cKCe]mr&cr'&'iLRoCLo<4?,S"Z,*>^/ae(?#Nt9d%q0?q.*h8i-kNB\WH#S63Ngu_6&%XtM\3-dMU@A<(j-(`4cV[@_5oE)P2S&=)b%><IS"b_a%>iDrUc65I]R.\hk>8g=7k*==H2DX9%1s(Pcd*'q#6V:2W9?s:ZNkj\>-uHu7.OD\Gq#u0ul.j?E.'b[&;:lq&GO+I1la4-DqV/f"m-4T\DOh9HU;aAELItf/TZ+#nR(YtM%Ze_t@<M@H13k?uBcOr.9`ue%u5+>kArc%`'g%;:,S1Z8d1)ZCr-j1tpl)2^3L#&+E[42IUU`eDc]^h9k`,(8]X\9ba<OR.;7^USn%2loB4M?.m"'$o.A(5cCT1B=kCou%-<O0V^0qPH=:fghC,oBoQ;*G+>jnl8:&f09B;:oVe%NFnP:RLX7@E>N0PQ!3@4R=<5a=]c`#%UB$&Hr^3YoP$>\)j38Zdh@DX3=$6%RcOE+#-"bN%^,A\Ze]SZ52HL;OX3"hnF>6XcYKE@ir3Y]K9$]%OoCO"=c\Xb!msgR4[9cR8%[S?V(24;Xg0:BH]1luI3ZZB[JZAt7bFcIq33D10$ei$.pk&Jg*RcJkj7;=5M/umuQ2k?a@.4%qH+]LB@<$rOtl,2%Z.]>(YTSbR&%AJV5ERg*W``,D+@#:I9$#4g?K9`J]+80h$6a^)ZL#hG)'[FX*G8dLnW!K!KgU5!"P`HlPA+Gd$f&Htlk/j!1cV2J>LnTL>telX</%ETE.!MH(VO>\b@U_i\QK?I%)OZ[ndUJ_Xi,WR_6FXURN7%RNf-fXObbiF'%/J@)>gl)dU-24XD5;I53M_\1(uXZ=X*+m+#,D<'8L%KqgAf5#\bl_ig#HVBR#oI(5RsdSoh5&n+A.*/)A'r.B8bkq\G$Y0u--+tooVb_1$-O'l-qm9\Um1d*KgpC</4b<<GG@,s`O-S,7s%-=;FWRmT-ZH(+r'GnNsi.G;8ajX!Z%2@c@rV:pe?_9^O]+NN[ePK:Mme@[[X^,89!Q</qJUn,Nq/K,\9mo/LQ9$[10rHri[8,cd/%%(p-0H!elk4L9$>jCs+i@7M=9(3lT=8k-K6o@As['!'i'Qk>d\/$VLkprD)[a#F(]j8aGW:>-.!S>G_kP6"$b`)j@_<gp.ea^3+*%e!c!a-Fj9KWRuN3qSH*2/hY);Ndt)$a!)^=+UN(AanNY_F1mB%CXW.lAGbP*Dpllal#)l94,cc'm8H4/2Vf$6@>&]\#rq'%8+NV2%f&'Dc;f_Q4T3@4gi)d;Fbsfa5a;2Rj"-]Ct5L>e?k"Qr0$V:rjBM3.&2RUUcbh;9FGr)hS+3aA<BbS>ZgJ?849r61j]_&F3Y#j-D%0<Uk*f$3bX:b;M*,hJ*j26!_/goRf-DiuaeV=l4aXuW4,>'=JtY&p&,_61H&0fP<u>L/ut>'.oqHV)K8\V[$?o,(?uo4Y6H4rr-r%cNeHo/k;.!:?^b#lR%=/K-B>fnmbr?gZ//.a/]QmYgsarIC2B2*E7G/8q:/d#38t+Sjt.a?"5Ul3[Wm0#u+L&`[c5mA3$f=0l>Tk%/-]XAL6?d0Zm)gsR4QHj9*T0P>E8YTh(0qbH1cCic*3".4l/L]CnRaKDkS%,cr?(8cjZ+PeOe8]VTK?tg!5ca>WfBf3Im3C#iQpg%3f8V+#"0GPSD"qb=,nQ3&0oag[OK%H'XtM']J,F$4VYVR4FBHK(Kl@)msMtS$$^g69b3,n'^RR*:8>%g-UCPg3\6f16QbmT,0!Bj%NWPjHAa9Map-<q65:LalN$Z<riM3UlGu,3+V@aJq6"/up06P=Wb,3f"m?C=8-7c1a?fZLP#*6efeKFWtjKhs:WmV>2p^Gol<mU[5%=!`?0dsGp$\Ba,m-`!Z:VrCN%H"Q</o5gFnPAGLmX:KHZcCkE9l5:bVAdG#.[B@+7OM]!Q<O2?V\,ko;6]L2E^uKTChI0==@+)U#%Ufr+r8NuGg!F9cW^SD/$lJBnH`R.ST-gP&G;HVYb[r_1[04BcceI,aNT.>98l9;Ss=*^.1"5NdaZpub/TbUgL^N^i*\Z-RQCqF$n%en_\!>ZV^,i(EC?e$M`Jc8&C8c%N,JFNs*Pddg(iZWN^&1/2CmQKrR&<E;ObA[s-hXqY&FNruEp?(Tk+id#/_2CnM-Feaci2rqn'%=JZbB6,r>LfL#]uMUtjkYHr=&Z?91L8ZZNtRRLs(W'Qq#@@BSu%8f;37tVM8<eMiVaZhV,BQ,%4gqfa*,9)%$43nEH*ZEhK#$!Sb%nr#ZGAV7Z-:![e_l&T!snc&_L[5ursZ;Vk@=V6Rr9eE_?Gd55sTf0'E'QN^.3p=Dl\@/O7GuffKcqI;\"!9E(Z1R'X*f*k]`2F*b%UC9RpDRb_1)AQnqP)*e"G\+8q>M5(<lj$M`K.2^Db(jK'L81Ia$BIoT:&Q33IT4GlSuFP<]c:)7A9=`C7"-$0g;S8ekq\.(6uIk5%&uWGWe^8R082s")-9XkHQFb&Y9g'CQ*?#=pRQ'=f]Y\o33F?&5MJle!cm"S_>&-$1Y;mJ-fWK@:i]:GG2QM^>e]N6h\i6\_Xk(B-%o^K51[J#'W[5Y1hc_K)$bh5o&`><:YZ%e9)CZ\arj[N0>28Usic^MAXY*#M`CF^:2EVAcH/%3a'BC>+i;7`'XXu3&_HtJkj]G`VW%(.QZf%,/1qA33FmCT5t=Z4`MS1Q%(KKhO./)XSG5-(^rC+B?&hkajN+1mI].V.>m#_b?=HVV,RM%5caSg,5CdVA_5@U^NirQ$\O\%PW=c+W;CCqr/C<[aXHuCC)gE/eXEnTet91g1g+s%fRocKEQ6,c5p&G"+c=[NRO>-:n%hBR8c><-19LcMkHDMjI.5GQLCBDI@A,7@%4.iXF"^__]%t-qKQmaJL5l*bH)oD[,7fcF!`-r7_)$2KrCSX)X(b%>_hm:cr_V*mDmXB-KK;Uq>aM!3qU)2;:Dk>$^e'lKIpVh09%D4?T&A!4*75-ci'9!!@.UrFXro;g0O_e1o_']6<R2l]0M`0sUD)\-[,l`M9gV3):$*/p8?"qM/\h;HQt1"R3*#2)XIN-ZCr*6h&7%Ck)MbVA!FRTcfo[)IrD]Am-/&DJ:Sc=qn@*C-'_,c?='1OcHU7=iSk*>TaqOSUGK)/-i<OKBPgYdJ&^4<hFlc\Jmq@D0*php5dH1%q:u]hjnZ$-0L"5hF"DdunK&Dm[dmQ9]lLbeL-Eq=<3"r29$YK6ccFD!THSa/6%bs#+WM>$20d?<4#B,<dCCg%4#iY[=`F_&<OMhq%A<Lr$T7!"*m?qCNrjQOk>VTtkee-+GOtX=QHY9qK+r0*B,0.eN.Rm9B]<4H,QU\;TU062j92"]*pRkL)74?&3gmOnQE*LaoDNA#W%OGVHYD[37"?4YI4=r:rnrHF`jmriDA4=k`$e[&#o7(V6Eb6+KVPW!VGVpnYVa)XT#:T%r'd^csWWRJMib7f&OHn1gK/bsKPo2M<-%l8%[*G26TZeU!6=['\?`<gjaDe?31,iMYt6BND&kh1J<L0u8gL&mGZL<T8eSi_E,oYB$MamQ'*d/Zpcs3AT$r`rM7s\JT>P0QP[\%8651OHt82;`s6)7F7:o'?F*hE;s<8unrX&]`H=b[iZ)5m4ti*`8fp\%,>!*D5:kMAnr0!LKF>LT0=eCXR/SC"R7"HO487K8j1OYi%!X/6WMNqAmiO3I<q<"sg)#U1hP,9lpptJg/XF#=)[;NXs'EiOlk9Z4kXJX]$4Yco!T3Khi3?,9Yl/K3Zn(aMc;e94%).@%ZCgG4]%<9T%65NkcjT*k5>8D-295.1N(V;_T8;4r]PJ_7?1k8Dah@kd5ClHk\bhq52iPtLt+cr/;JX<''k;`;*JY5Dq3'8,Ii9fLKET97C]%`E,ioMlO%.Ait0Y2"JJ,2RI@Zf=hs%$IrX"5<H#K[PY<7JX;_HA6gH.I9jr4[,$;o#BC#s_1Y\9"1R<L4H?pH:>[<+NsJnDA@*Cl%3*p5[hU:98PG84EIJ9X-V6BLfXRZ3fm-pOCl\8.qSkcg>X7-#/!U@A9,1T;MHC5DUHX<M;=J^K^&YEmBHFFKS?F#JlEX])4Cs"L!%`OY+\3Jm<0dHi>4c\nC=aj5TAl$It_cdLlY`4?dHl"$8tK!*[pVcf?C3FC8MHJ%1Thu,qcAK$Zh;`4NkZb>D*<KS-o&c&M+'(9pu%[MjMF4$2%P?)7%1?E"ZH6oF1X=Q=,Zn;Le"K!$.'Y8^#D3#l7ko,(L1!Hr8-(d8pK8*6"M9`d[@'PKGNn1ied0J]SSZ]B(#HZ.+)%J@a(EQh`b\KiSWoj'&qF\qFEhheGBG\jAS)nWRNT88X>pXWkGE;*WTJP_T&?Hafr+mg,.UV9""G&nqkZO2i"84BZSVUKE0jma42Q%UO0L@pMc2]i?$gm4h?DqF:\-0*q%E=gnQsV%Wo3NG>%=9i&TSfqfo,$gnX`M8F^Y[mbo5C_`bSdHZTemke=P22sT4gh0NGtfo61H%pZN[dd669[gUB!Zma42QUO0L@pMc2]bIpEt%c.k,nX=umrcjFcA,WaM,>seEOIdRMm+ZdK$H:(KX+<r/6Wnl\'Eoq\!/lOk3IiHr%hnOsq+7VQf0u!H!U@,-7g6B(PGR>`-SBO<i-s6hUe#@^$^CsJC.h!0P:t7?uQN:s"Kt<mdJ*f[&eOi0bj7:pVm@Ib<*FHZD`dbJS%?+5tLWYuc%d\Wb5-l+/%C0b_P27/P\9B6d"*Q"dF:enaLVai`tKYoO*R;u8!2_.5eHJ7W\i`P!7<o%b90PB.DLV/m@SC;d;n_eu_%*_drtW?/Rd[7_kf!a/;;eYmRk?%PW38NMf`8YK<r,/])<Ne+_">T"/?<OfA9fghA3`3H^"D&*7N'q)d]qL@OhCKhc<HcXaC:=FXD%-LcQcAD#0jeegPX*3N<_&J)g#4;>]\\V>-GFC?i:E.)t>[CXAh-^ANo5np.@e4W:\c/cD3e]WqAf-&0iaYtZA59H#Lb9b<#\Asm7%4K3#`"@.WX.2@hu$-?.NXc\'5AY5Z%CI%6cejqqOl_L*rjj>3cWZICM<c=_U44d>rB<c3QWX!aNq5Vrn&UO?^h`@_@jdto-6E=1$%5&e>7[GmHAj`nFKZq_)L&:pjh'%"-]a]AV;C89k=hr.VTSdt9i.rrsLg)26.C-_4OhdT^/4^I=j&t,d8aeuc@PnYL@QCd<h-)#)+%QoJD5=sF=_M*]%9@ieCJg*`3sTi=2>B/(P-oQ,HS#pYW;ZBV+m;>:0D==&`S(ojtfn.6NVTfH,S3e^QX8E+RFg9qWQ<lFarneU*/%,Ci:@5nAc1eN-97KRbjNTQsXq=mt$=&kb*(*9)O5&?BhDDe2n=jj9q)52D9mqF^Do$*U9'of6mtVHBrpFB_:-:8ALI-DC&:B3/6$%PI@DG6;dkXS_6>-9'&95;JHF_V0;&pdsS.Zd,hjlE'KSR-(F@!-uubC\aE;Hp1!ODIh(33D6@%_nfqsjWc:1+Gsie/Yb!\kDn>4l%IdEo0%:9P!"?+M^@<:X5e.IC!Md"qE&p8t$eBOp"Gh:E`.V1;N<%A[:4ighg;DXU1SZ/#X0QD"(3441nq>kqPh^$"C;71GUZ[39d%]5eKcs!k6Z,29+W_^PC/SR[lafmMZJK[+u9WQ(AeI)B8A/UgkJLK2a$7?/sGnlM<PUWtZ"IB)q[<fCE<.i:>.gik9Ob<qHG_L,q+%R5n5^VRr(H2bj!;+UG-KF-(V%<,\;j4O;QHBg,;@S0tj3`J2^CG%S5K9Q#>`AKp<VF52%9qG3CUkZi/a,_fs\hW0k#<91)_PHKY^%U.S>,:u7>0,a3GjP+Fqe&]1U0S:8QWplIG0'ZN.38ZAFU''!m#ih<0eCMl;:ddF>'gNWY&kpc&"9e!hSiN#l=n!s9eT*%2?ZNhPs%&RM:u*k^07Zd?BD[cda%iqB9@X%cHo,D&u%PHR/t]QoFRXIFj6=3mU(pf%@2FZE_t4m<H@1;Gs4$fLN0FQc']D'1kC6HC#fcWeNV%%I(op8)T'<;X/?R6d?-4LkJE0&eY9l;*Yg#_uUMc1/W$N:r<[eUnFA9G_3d[,WLUsK7L2XgkYjl1t^>gDo5n*P.u>8D:gO)%dkmc%41bNb.`L6cp[Y+WP\6C5Xb$@!CZLa@e<:C3%]*o5$.Dq8T[Js/4G6o..9+TPoME-2iZP6@o.?oM^CjS6fBN\`3&J@l'it.O.f3@[%;Zh$<A"kEY3MT].GRX!W_is>IY9SL"^@\!<\Nbi;:S:>u&q>ru>[^Sf4ehohL*T[`KYuC*_'gLQf+EG=r1HGT*O4\BCR=UcaDOBB%U4a3,Sk^n93p"TEr&NiM%/MTo^)n<BO5\us\!R[0JG2CGX+>6hiF)X!"AX'l9l;6I:ff&OV]UuDr:=(%J#W`LoF9s^Tn2<r??_&e%>O9+u,6Ao$HeV.V^8eDMXet1F$A32(Y$*=c<eWZ'9iJ+0i&YXQd_iJaK'5.hU?@S6:C!4,3pS>icZG>Q;;;aui7:W9;6KE]D-(YF%$eO+RW[GVLcrLa*opEmDnU2'SbeQ\V<H4e@\nc'@>$W*'2RP`l2A+`+D'D;>TAru".+o#IH:!)opoBFfT4RsHjVQp)pGS0l(F<-u%DD>M/LP0p8RS4G,-)l.QW<U2Fa$8*^<f;NaL*L,t[e#m3UO,f2,+FU6\E`3hkb\+=IN<X(H0:U;;rOpTcI;J.P`Wkt[>"-lo4dUW%F4+P/nb)0uUi,9#D;2JKVnA1LKs[j,H_[j[enRo)m$@=cAkrH6Z"PY8b8F&_8B,n[Cc7E6W:CkMmHQjQGp;1kG;n,<gg47C?!P-o%or;CjjTj=[+5ml-TDWYOGIP5uNgsk`@<qinj@Kc:>cJ<cTN@NJM5?:EV;gW82h'a0m'ub/7/+4e.,KFPr[\!FJ)[+#*J(t!biIO#%J,WM4H&M1,s#'f@[<Yc&\Cnu<K_=6Q"`i_Reb/ubNGn\8.SS^>T6g'$r7P1%W)S5P<\'FO78^[#;JJkP\8uYqcBQ/.M5HmBN;`P;%aSkN+@Xk)L^7@=:[d\V$d.mTCr-!P3<@fHg^FFa`'!c9fG0HF)C^,tL2!RO9$>+&-es.B!Zl7HsXQaj4"E-O5rTV[E!Vk.5<'iO'%R]9P$,;d+'^S4e^isMg@L^;aY5sDH`39kN,!,LNTK(@H'qpH4RN8R`UVGrp<k'9Me8aOdQW6fB_J7Ssb*?oNOM)K0I41t^]]VWOY%7-Nr[MIKM8Uq2Np"!X6C#Y1[m7BkEH_MXg"KCk<m!TMp8A/uPYIa\!?MD(muJiM^>Yi;M-8_6Y2rpAZ(6"AZ23n^-gX#2]BqY#J(%!Z?:!6idrfKrV71l\Kb@`eVV=`mQne[qZmUgn)qrHIRC$]I"3NIA]G/1N#V5ESK]/<r+ME's)3D.fG_L1@$O(!gJN[hAhA"1gQOS%$C"k'p"upp=2i]di]I7(VV4l=;^5lK`,4HjOeo/]?$FF(hP%0E[WS?,GR*TOgYuD[Lpt+I0Z%q!\/LBIW/UPnmU?+LVVCtXN&m#"%c0BP4>916%^,*=J^!;dk0%t#Q>LQjjGs/<9[K)5T!-G41"iYN.""t["'X>si/%KlB,S$_)@'2RUZCo?c*+0S>$X&+OWH,ZU*kUM3%'Z:P$c9O="LuiT/R39^2)&=S3g1tM;eFEt2&oM^ikP`(]0<jocns8NRJ.@6c8obLhQ&$AGYe[J9Xm(q9]XGEV$TY#p#\BHh.McI%%#9A[2D$b#XV[mJX.6Fg*Sdkg'GXJ*uMMTXB]L0Un6tAYXF_K#.1!(SN3lLQ.1jGjYThQe10_@GEVDWBlm!)7*(j:>FD+.;P$=1%.%C>QlRUK,-P@#^R4^?)Wb%"g,8Rl31TNLCCN5s'?^VdIm00bW<g6aM8B!nU:W+1=d&4aMEUD'9t'PI(>@Oba2f^N[X<ep5f-r.G.X%D@e]SI'(&][n2q`p*R?h-O'tDaq[gWRMGN7L-V4RSTe(sP=0N(Wn%Jo-nZ%H#,JC7oWHuB$\St,g;=!0-uh205Ts?R#eS#OaY*Fo%6,B@X2rQ!uK<>R6cmH;;j6X8,Tn6aW\>k;XMU%O=K+73(rIrrA(ePr\m1.m'XU#k/!@3jq+i%A`rV`NEeXZWQ2,Y]I-`jY7Kc=L5%<s9"#.55@uluWL[F\`7rPP>!W3[&"Qan8jr;`r2@''PP4mJWpndS@*rWpn'/SfG`<^].3fa/<G+(q+@UFlSaIX<>qqA7*?q^B.Z#%E>?;U6*B7V"J>D'&IVc"#VI'!"&=h\A,!\B6T>@A^oO#2qrd06Fq%[f=N&OdY9`Z`E22EN\uu6US8JNuG+PCV'@"5.&&:jOklX.h%D<nb*#d.Yd"FJcZ);*"\@u%&>[^CuYEDrG"gJ!ED#//8?5'=`?0'h59DBWbERXf(>)=5n!lE1KFncrQDOmYR.&qfM[PnVM(cRjJa%jTtul:aHAaiZaq7"3)0!LBEs0?Y15@)Gp09&*DBL-;J_/K>uMK#oKa:$kCo\"?IX+!96TfR-#gjHd:1%2Cph+XQ,H]O^;5X]q)d3%ob<J\,7R,"@>oclaV[f]n57OHl"4]*F^`FVTd.^1)S)e6gh?>uE5@:ca5Gl4K0b5Rj\]]Q$b;+K]'Q.Zf3!K',^fgTT#8@t`f6G6%^pdY`fGQ2NXUM=LEs&P1<e3u9@fncLI9Od>76T#Hi+R]Es,X+R6F@4/^pOu_2N<sog.RKk[&8!j055HTFR]r@XDP4Y`,mSQhcaoj%!DAin$+::X5f#W-@'E6XYR]*4>$1ms0Oq/\i<@n&Al6bJ#V@Wh3"o,H@'6@Q%Ru"M#ST$j=rn8\b=[S2FMh[4E)O+ZQr,^ogpg$/%f/N4/T]RG"ZCX+MiL2#DCX1&mE`P8qGN7-JZu%#qgc47*6.n_Xb,#;G@=YMH"WfDaK!6NPi/3H.=B(#d)5nc[-/J_,,Rn9ZB7U>E%Vnq.<DScOGRW,he#!kLR+K=1OV`$lDBa$:df[+:G8EF,FXAIfq$FaC_&Cf^i<fC3PmkU"`"Q*lu"/)2gDhN2J7RIX;32<mg$UtDn%gViq.2sMSJS<8E/3[34cJcY1scp?u'kY8RJMqG)c.+N5\#(duK'6+cqU#;@df!5?n*)CE],B4T(*CeLELc^R.a<h+ZpomgXnQ2n5%@CiU:bZ#thC;N"9$fJJG%cRbNPIC_+8"-[+0o`JQUGFfJbRfa&!RhB#Np86%s2C2P+OAD"341<t#R)=VR'i%g!"gHnMo'hF[I,q\%?ji(8&[c9l/U5R3m!Y"Ao>gp%(/ip)UhF3J3!KG=Zo18lR02!#$c^@^%Z[t,)qhG)]bP/h&;tW1MuhE.JCE!NPc"O%Hep)]BLjt"%E+gEb/T*MiXH!P*HlLg_(7(S/"Z<Pp(ZNWlVC3C75#S(pZ5WkG_$0mE#AF23.-t'c>[17P\9+BDmsWp"J/!f0q6jDtOf:#f#RtU\%JoPai!&2]nTiDmH2K-^R-ZK<uBuMSG[*YA8//:$$"oJkR)K0TdBH*TNBttXYo@Bd5NEHAa,N\M\*IA_:[un9JYmiU;?;>>X[5X;X%fbPBF>GFm30=0;^(+n],pI`DN<$/Vocs5)YSecUp'Fmt0qgjG&&?X:,.F63@_+"`N=Q<Nq[uhh<?VhR?IGA<MZN1k0X2%/iA.#"J%.,2$q)o4!PDV'I>71cWV^eM>YYlnOomVW+&2T\V/])Wh0TLLH=CB6Dppg1leS_K-gP9`.UK8:h]d&d?VSoY!n-N;3P?/'+)Pdsf@%HDLWJl"']M_,!UoBkj%V:&LocnH]4!8t30T;k$04[,D)5.bS#nD5C6t2CgW;8ctJ_Yt0ln<MIG\Hm`=M^*91GW<")o&i@9O@5%:$%P(eu_<0pKW)e=LYjNJsT@?/@(\SNi1Es#[)91lb9V_^eA__3fcULNjcZJ\fXOb80]Hsf&un+3>A"Kd3:V%YQP6:-)gJ0G+XVi+,H%Z;Xr2X>3eoY?hb!rXCJhC7nE-\N4/iNdPG4geK-j?te)C#[rE-7M6H/@4;O[+7euSXKp907`uE',#+h,S!\bD]IHNO"$.l]JM\2D%2N\l63:CVD(ta/&Y:0-%\6WQH,msp/bpLAg>$#dS*-$(2;/*k>fU=d$.h'\1??97V$h$O4AtY8tkZ*gL?W.VrOdE,[Q6@-DR;LZd%QF_(VijrNOXfZPE<-?s,V5^@qn_Prrqa:L:V+:_>iL:\86GOq]bV9dIOtnPd\l&Vaa3lRjgVET,g/OhH7'/M=$RV0#E!$k(:0pC(%&9j>J`#7*Be0#WB)Q=fMT3#)7,mtB^?[tZKWZ_(,P6q;beDDZ)-)H&hOC6!<YBed`&q`ZA'7b5!H?mJcJZ(sijP$CM&RlH.YX2(D%D;14U8.Df5&qMt+`e#&P\lT#m/L8"<p>if!;Zd;_/71p_ka*d>`GL<?72ZJ5j>P;6OhKLqd`);i)o8/Q/=j6^gFShj<=C'?8B(bd%YY<JC><GaBP>'tNg%]OP4_:iuFh%bX#XXo?Z15Xccm;7L_ra_],+Z0ZN.WtFN)63[75oldI7Kqed'SCBk2mdg706,V8cjlJ*(WGk%#!`_oXP6G"JkuhdACikB<aN9gqV_Glq5AFmfLUUQ^hgfk?A),T-U*:U#3")JEi]uV#f4V8'>IDW"^i%8A.DKZ1<$b(Rj=I=N/)6e%5*.lrK4meQni"WY@MhDk*sp28$A'pT9T-^nKP%ZGE>&YK(9TsS%kt0i44l4hV03EFRFd/:bW?&#m<R*BBF1n(RC8&_<fGtD&ol*-%WS^jP!jJbH8L#PQm!:P>Bf"+(L-D)!JTX&l5j)%CZt2NE^hH_+QBj*&PmAmr5mE'3YcnFtNWU8.3e.;7TEh60)D,*.U,Jg!XJ8JE%:+%h)-o8AS7@c>NDh&WZ$b/58.mU<OP7`=tTW<nV4_nsaH&>?d@Te6IU7LfA#'Mk%s28(@<\p/5W'Mo"/W=3XLq9JVZ@+U<&nNrT%,$!s8?CS>hCk+PNHogNNNmpZ'L_d-C`YATa%3aEGkBXk_6[jf$;0>!/isK+l/?.D:(hJ,"8;ICbP0?q8U5,5J9%,]D/oB&*gY.RF%U,Ab("3q#[RVd?T`$"#g.N,T;3,8*fp0r9&?o/]4Qrn]g`K_[jE=fHD;&q3.e7o+&MBs/5!,.Qj(3W%H[Rlq,Vu^Y+Nb*WJ+%1@b%"^t987@FE$MJX=P-$p!?Q"fL51(?8YdM+1DA5B2XEWL8P9MN,c1JO;VJ@"Ut,\odNUCADG?32KIEa`:`TG5Re8h1`14f3VaX!+OW%GSsOUbZ>*e#L(q^CcreHC;>\2"i*#FcG!$HCb6SoZ9&R6\_jZ8@?UtV'%iJ"dftUh!s;cl0:l*f=RBfj>S5'fc&/gM,]S1-#N.N:%>LcLJnAiZ.s1S"?q@l`.hf_,>RiICnKlH?Le+#DXp,Di(fdTV`,cXEcZ??U^lW;qon7Ns*bM^i%(^1,%gLJpX)K9TTH5gcI2PGZU%`0MVT]f"G*!*b$Y#l4N,`6ft8^m:^P]D[U5"3K[.ehd_I1eMuqKSs"?k^]iG^)i+]eq&h/F6V7(mT1+K;1-AiG`^\\W/4;J=fnsj%W&DS*Xf/$mkdMe@Kbt$rgI=b;D(LaMDA\,eE!TB"D6u!_.-oGhT;XgQ,K58j&:p8^()82&NY:-7^^WOF%<iR??_OG%h$XLuK:N:T%:!hZK'\j9;P`j<]7`aru=:;uBG=!EeT`g%$%1J2"4848J8nu0<1r0s4!++hHBPARp0TK"V5TBs$<nC4`,]*`t,bPM^J[cq'#6<Z0%!6-Hc"*';6AjB,r:GZE![PIun:!FC'2AS"WmN(\>b0fZIm7&c<SRrK[>QUW_S:D/Y`k^0(rkL@8[i$nGLIRp[qZ0E:bIt3sJ/QEt%<eU<+!+Qk$QGQt,Y<_kf57n])<WiTP)O%7sqGEu#V*:kh#W.'V!WrD!#/EJQ%?S[=JSj-s&@G:67KqX.ca]"A_$rZR?CCrG.\7OI%he7IEgS?0X4nE>)gRr-b[aEMtmIH9*r=-0Ab7Z52gX:C9H!0u:[R^N^.oTrkCJqdiaEi$4DGn(I@O6hU5TDofd>gIdTR[r3&cGnV%.W8iA,II?V;[0"*,pSD"JQZARXI4WIbb>RY[j,isL"ot7Ji$jJeY;/aJBm5D1d'Va7ID93i=mm"-Bc'IXUl_:QJCIT"RC:V)FG\h%osXCH"Gjk#[9suA3s1*DTlEL'7a%$iTS"rRB*a63":0YgV>*ceXF1(=-Hk=4<!0%G5Xsur&G;AZfTZRb(c>^#MmRR-Z+gQtoDh2_%`9\F94==WC)M!HXg]QD$!,.&T2$@6^P2$/LjrcO3TiokF`'aV;Zto+6YmG*&/.n@J^cqK&Ru"k99gKT_$32kcd%Z2N+rEnB>&AnV%'gB_j&V(Eh-mW`<&Ia23CqPuYif69>dVdMFT8LE4\2qV[7WKWuWCE6s(n7@%/$C_8>lk:`An_6/_(tISRo4mt$aPpQZ'Y_0KsY0R%pI/I(qV.`?e3G-0/M@PG>6*<sHGP4Ss++`i3fU6;RbIuM?kU:b#;dF+Q;Jg'_0>.47!EO7l>)88md<9Mgd)mWHtiXk7!K+L]e#%3%9p5\t&p_9Nm"N+Ubp3jY2Hi.lOc9L&b$GU4)@[k$@"m#oJ10@"kc&AsVmQuS?)V:<GP3\)!*ksJ$aj\O:kdMP=bakF2Ftk2c&5+p%.^eT+`1gd^5eAM%Cr#q]DN_5o`?Ph`cIRnuPYg,]Gn90ng8cGp6^UR,%ua[d!@NPh[(IV#I=")ec>ZqTN"a^&i!0]J=sb%p)5r,-%3DJ5X@""Y&(qdisG!%ODA7]0J,e$488USS5VG6GEC)/-"><=HQSWH#1:_=OUm3):@e"d1E,Kh)0TT-WRe?h)j63PcF0_DlQ$di'Y%`.AlqUjh1SSY8ai)V&O(c#[BG$d-%X7`n%E#AKhHTMN1\@j;,-'8`JWl]f5f=$DOP!/o(-;7]":!EC@CNfgp&XJ7bUmaT1\?:9G@%$Gd-UaXG#j$E4&b+s8/:C]T7o#W=tVA4Y-#N#H6"#Vm"Y^]V@]&5NO=URZG,Q6Fm'C^T9KBqR>n)PC@OF#=)Xj/s/KN=5h3?S(q:%F!MQQ/`In),J#^u`TSl<Q=`&6a`^.WdV7Nfg!B47">nLNOS=W7<^^[^.)RMhg`KLre,]@BR1bni[hPi;]k(mhJBDh&X[IWi/?$p7%_90X1-kp[%&@"O:3-WdQm<r`bBT]ko*X*2l$.Vif/>!(;XYGE1&Pb0A>Y/jVl2d^=is&W$K2u2&5U-??#5Qtm"#uYR"NqZ;CHu?%%grh)XH(^sORJ?iMKSpVj[p7E%cUD+DU-4QfNDJ)M_h@;,3HYml?=WDhU))[9Uk['u/o:$Y-c;B"2;<r0#fO]ca7+4<FWe\:'H-SC%G1%09fR$hO4&Q/<M&&$bdLj:tYRr's''FpS&XVm.+4;c\""]C`8_$uk%*cL="M<U%!M.7LAHU>;!f8kg5U*Z_*#Tb5]1e,Z+W+s(%casSe8fF&;XgP,/9enU8+_]_3!3BaWfUB`B!um^_Ys:RDekD5q!=IU/Y9X)d]&S?4K=-Y?Z>G;O)WOe3TM6VJ/*8Es!]PE,H_t:?%PM2Q3,CCDU^eQunS$\=uis)s=7,2Th!2)8b['Eg8(pnDg,KhC+2jldDBcsT>Ua0]jMH5Dk:!CC<9VmiFkZW]Og@A,U+Urf"<gL7(%PDTAcZnMU;\I"'a9BMDc5SR@t#F^#*`)K^;3k,es<[("AVu!N3.X87TJ6iWH_Lq[f%'<?b%`6WpltVpk`G<\M)mJD["@O1JDcLN1%E@_W_4o4IM#R5KbP"`2i,*nB=1aY'kf:=``41bf.FG-%cLGf/fRO.D9<1c="4Ba+DnSgWIAB#!Fp/p#5N(WbKX--27,^g=S(BV@0%HNe`,YS3:<63_O_6sRN=:)T!l[d[<D/U4CO@Po$%%I=a'OC_X[RRNQ)D[Ah%i9>!0FeCih^cD`k_fOYdJ?:9gV<i_lm+2N4oPCOZ%aA=1@2K+i\DUWQ/@Xb`d2-C3FeO9l6e\jP7CfD0P[?-LSlR'++4HENgg8V:],,&J=AF>"@6r0ZcBGFdCKGR\,!LPj[!ILU6!)i.h%d0Jp<2MiS4hglsG7[Ub#R1#OK6&Z#8[XirG'1pC],:t-:M_,#8X$n-9E37TpUZDMAUSS33MQiOkAL7Lr;Zl6rVj@Ff3+[&u,Ytd_%&C:Y,]T6q&!,Q5hCQ<8*#/!c&c'tak1smkLOt:7^9I)dB3fjO2H]k<HnRG["Cfdq5,1%W"=gM:?n[)[P84hP&Q'HN\RZ[QUd^?T5%b1P@lD(XE=V#es2UtmSKb/OF0E(\'2TVZ.7E^[2Hdjt,nOFp,,\-H`_19@!S&(6%d\N]'rlH69\dY[^Yn8#-CPscC]"tX#'+;5>j%H'cu,D/DDuQ9oQtBP"Y=Yj;CF2/gPZ@:eh/Fp:5ZL;s!'@Z5Z/$fsG2<a.(&?pOdC,TR-m9b"&4m858g&CM'8VJ\9.XKuK`3]\k2%91R?o7<6F\R96\mPO,2OQ0PEWM,9QP!RiZ[HR$9sMtG[JSsBe.5d]P@!GE,;OO#1khK-66NXf]G;<Yr;+CllR__-*MB\]k0;^uto%AD86LF(r!FXrq-YU:Ed%2?t(l8-7d*H7!Nl8HJ05H+,@9/6NTY8qaMgD:2'._qIS%<]Trl@+ekKA>n0(DDhKYe6kWmUTnEAK:")k%asoC6lE1`5Cm`a>%$&saOZ='$2bDapia;lsit;`aD8fo7B'%UPKaQi7BE<^E(LE9og5;$,XZ;9dHO%E^bZ:$_!1`*`b<5i5,O:hN%>7m66HLrmh!t)oJ"ktVs#;P^<MubN"D-\B80IU(^6lj+L#E!X:9"H/2O:_a`TBlY"$B/Ajla2A.jGPBG`*1cubKE2mY4OP&/qDNM%VZh:%g6TZc#MNe<?b?Z>%T9hD-c'U+!7Z]^>l_4JS7O#QS^OeT;'4l)NJuH;]LEb7^1^i:(CZ1u^!a.%kR9n!jL%FlVG5't`1ieG%krufHPbA7l^htf5CU7hBN_9K^K40$f_D"O_bL<c.!?@o60[9q4FlK9Up1aRS>n(uqC&ff;ZK+1;WQl9\7%D;:E$leE?,P)UaNCVn%eM9Hq,<JM$#f*u^c$R@H@10,)dB"j/Do_"W#gCdI(4#)]l7;EC2;fnrS]2fD(rQg6.PaKrYUr?Q.tnlAa/3MrTtr!+"NJ6$VCuE8%Nnn6qY%Jg'd]l>Xf8F\[)K;Dc"?&KTQ4A#ue\DW--PE.U"!!dJ=gT<&f%5$#L/?'b-+M_91p9"CC]M8Q:IlT1YHPnmJ:uE1$q.(T%)3="*!+nea@ke%%;IM]P.Mt]J"&R['mqX[[1VR(mNjIL_5W6-`Ut5=P=Lk#a3Cg:d#A(/2@BdjSUfc(>(pM=ectp>g]S$P!-p!XF%\`BDnSd+S>(Pr%3'MU(F8ML+hf2m_Pp0t[QPtXJEjO*l^k@(&SLIOPW"qEN\1KG\E0M5ZW]Tg_7o:F)4ahueX+\a+=GYsZ89CTJa%I?PGF'$=#`O4.^YSqit,l"SugYld0=\&A9>Cb8,J^fm!V/XUAf@5.CV2O.+:#,Fu`(#a^0+TV/:4]&fmnO-^&5'Gh>#7BZPcTjkN%2%V<*[tjoT"DN_^_1Z7&1)`?JJREYJ,/pGaZCOYtGgJ^,6BrM*1KZcs]XjgIlKcAZUctA8V[d5Ucq+L@PT,L2H$-I'LKDNRd-[%9%g;@WE&V;"WPIq[/&A1]:A)p0-9W@GXHsJ<9+;$+#[k%R,FCh3`mhs'-(Ig_/P*%.#KJE_H0$A0AV]^MK0GZ$54:u=LK*998290;g%#]ELZ2U7dk2Jcr)'U_k53h*a/Q3:/qPpr_3#!RW!Nr]njP\hns-apUd_Ku8jA#-2Z#'c?mFHns2*l9^(/Q,0*#@MjZG0Bqg8bcc4%Q7W*BQ!,KrA&U0`>[;p`i.s[9R+^f4?Uc_]rLq1Tlbq4Hc#Z[HYmA9(hRm2"S(]_pN,--BaXMfrfRU6J)ht1sK9#!pm3]/u9?)8g%#M3P_Zo&_`4?+e=GTD!e'=[PR6pumiL;NaoA>!';:oV+h=b_ce5Sa8*BU2Wui&5:WY0]n].Za&H4ZUhM3ZXIZChYg9C(b_%JK`+1%Z^Da?C7[srf(VqZeZ_p-_i_lF7D^4!%N8&2hH"_8mh=+!a[$/k[]R3cOB@O`Z\9tF"<JLQ,U4'smgB/"_FcQS?_WP"jW5+>]+aAA%LKNc9hL\0`^`6sAC*O%'cnY`bdB8i5Mc!Yo92$95S<,Vf`FcH<LSN/:m`6Q.&_NtrXFeARfI2I>45Q"V8?tc=ic=d@jrmGDeITbO%<6SGU+fD/AHO+Eqb?@1eV6N.e&&CV`SM10M;>jHlggQ;*8/-7rCP53Q<K^]Yc=U0$ZL'q'S`0jZT`c<*S;P3[+D7I9ktPr`_d5Z-%/YiEL`@Q]5-+B?1]Gq=ch(m+EOM&/$2Mh`L."JTq6qsqZ_lJr+?]MQ;R*DV'&^)NW8r,;(NV(@D+_?k:!+Mmjr2,lbK=BS]K*pl"%Sms!j"7rL@X&AoI#du^]Z-<caJ0=q;3@'*.D^>Mlo`Zr9$:Zp.%R!+F'+U/;H-e,>N"h]A:DmEL7])K4/L-Y#A!*ORe2-eB/+Pu]%3r.AeWa=Q$_7@'1jYhN=>DVKDcmDsU78+#\)$s>kMVJU_+F!R!G^\$VOpf#dLd;:5QDmO!q^[6od%b.L$LB0k7baa*KJnn5-\I")%DL@jJL)TX!#=U7==p$5=4G'n:8"rrbmoc2=!5PsFEe$abqkPsh^)U*-dIVet5k)2f;H:#q!EeHsLV-QZTqh/>h@j<Y.6B^bb+YMn%XrT,:<8g)Vfr>3c9a_'pR`YnP.uLQ?o1slfJ2S9B1GH)NlkBKEfK)#1JkbHlTIL_b!=#-7%^]tkI1oL,3(FiPYC]0;MRjFO]MAbr%4Wt9=-s-V&"]^:3YR(kk7`#ut*t!lZ7poWGHuZMqRq#LW=D<ql0JGd>!V>R(4rK/j!AGs(U-]"0U69D]!i7(XZ_R(:ON\Lt=X:V4%XQaO>D,R[37;1PV;%!Gu.IHi#G*?<kI4&5b@ftC'8Qcc>kZ-?t!j>Cjb[R5$Lfk-)TF`jYZWddZVFW;d=TR/%F&$"6%nuQX.b[5!%\"W1DEu7uaKHo5H4g8D1P5-RZNY3*-5U@SUkjF]GfXu:1i?O^6GVjCWE!)t94=N#e;W#t^d33@T+mTUe&2Df]7L,1eWXjhI#q-8L%jTpmtC.G@_5YSE%%4!FmfdAqVs7'?5%Q>Y@@jD9+b#XBI_,F#_RiJ*8P=6m'30^5X!kh:5Gt8Pn`YBC%Z%D#sa`%q.ZSt"3R:;>)%EPncujGar0*>FL-n0CNrShc\@/0'>MR_tK271DL0j$HCk1n+SHX`.r;=&7X]OUOi##tr<l!n)Vh1+pNuML_V_`Q4lS")Wp6`=R'(%5gDH2DeWU]7%^0g9]:^C-Jh@"2/gQ$@S)6u]W_P]\\&A&8p&La(+K`?_BOP28:r.L]<*O4@LhfQ@)TM_bp8GUjt<R?640g3W*_P<%;f`o_9P]O=<_c+"[@hV26OoMMZRO$s6?3[9C!PB=$e;o.2IZfq1r+JW_n11CQ=uNS(q;>SSFOOT1lrqmC>jrMpk:E]S'Zkd98XDn%U_QN)&p,#0=G(%pL/35kH's4YV1Na7&*ibCP!JFCV@JN=?iWO#)?JO_%`#_/\!0%4?=mDE,H[.#MJ2r"$5LMA'6sSdEeH0\/>R>s%+WX.*`PBNh3^&"7:uVYBaGSp))7)Ru-CC_#Ohu3D.<nJB(Wr-B!,'>`eL1ps&"KSS"4le^dc?p+90+X,SZH%SjCBT+Si&'uEXthg%U!dZT"l2*X"Yc?A=ue\.e&aQ0^SWHWQ<&d9K9Of<nAGs,W8!I-P^lnGZEaXDZ4Z5@2T=hq5XQJ9!OKQD^+hV`M5p9Km""=+Uo9oq%XYt4ROd39ZFQkmi3p1#]0(<8;,e0$,0+=.sG``)nXE><?l;m/D>l`I?>RP028\2>H68Zdh"e)<RZaAS'N_2Q:<E>m%l^:pCH1'7]%-uM0@g1FVLY<;?Xq+tIcG9O1AclS.H6J)=++_j"n.ZQJBK93PH#0-46"H(,088:dESfiqZa46_s?[+gr^rbl-_FVK7jb4js#R6[g%-ob%B-mh*L?7)?h?k]WTOYn2u:hZqr7@K5hTP7Bf;'Kj%&FUkg+KlAN2s=dW.J*p?^23HKflX(>=Z"d\fefBORY"`Y[j?8&=RbgU%AHFQcHcA*4@e,o.0gea1XiW`ILED+Q"7Z^]T,_nRS;<F3n<$nB``f)G+:5146gr,\';:^<(X>!fb$\7<@2'\m#qk1EZljqU[#dgG%8[HN^#$tk6Ga-,g#Sa$'8^[]:F\PNIe)>N@J91&iN5<q3$p[!dlbs_JIX1)n?^\$+(dZ'td#r\`!=)4X&98UUgQ7rL(Hk:kEjiuO%kOOkR3-62pHgq+RQtf#>J9LaYE%&@o&2h9j*ErsZR+I<1[s4)HWql#@E/G?KWm?!eX2U$UJhI?a5`D4Gg'GeDJ>m)]cWKa[K2PA`%n8uO0J;Ok!qNQa?,A175%>^4pZ3\G1PsU.+/I4B&07doT\7:dWL]6oaW(j!=iH#iI,ZKh"J-T9.>%SB,hP^II%]9-AmB'##9;W2X%M[L\l*7["-]F@'H#IYcfLiFh/[?uf*@'Z/:3[bWRh!52Qp,GsR,c7sbHSLV:6pZH1mC7]]`s@7<UrX`9TQP0nH394s'Z"`Hkl!MT%^.k*'VZ[L5.#Qc+@4'pK+CK&.U*8L%!,c@f3-KM6+G"rl:TZG"HS;EXSY/Q:kWmqiJ2^dc\-6_9fKC="bW2pWm,#mR6-gVR]bM6;%;]($k(j2ANi1O@+P#J.Nr.^DV9[El%/E5Z`QOQ/J6,4L>F\#>hd!*D.R#FrKjN&bQg'ceh'Z47cp2jJ,dt%`j(PgYYadV"cZr\,F%/Gh=GQ]]2,O:\LY;b68+$_3#BlH>T?8..g).fc&.7_j%^4pH_q]#tO2ZE<-%3(1MV`rnEA&-;ABjR]L@XiLg,POh@g8iI=PJXr6m%'f%T<2Dr9i>p5#N'2E`t77#qHFdj#/:^SJLY$9%HQc4YW#.)bYpMc!mf:gQA7+Tsr6KuZn&#V:uX:>Y,ImrOL>G4b*hHo/\B_DE1%?_#)e_rl+S$Gc!7J7J`r70nK-HghqRck[\oTE`1o-/4(mX).9UN%Drf87D]^i9O;G1^*\:Z+*9O3;?1%-=pfY[>Z5$cDhVC1%^B)%-R=(QKsX5o!$EBPou5;d9TCBf^%c1gf;^NG[`)b!@EenqU#M/<\/&Bp7goC=-Jp@B5m&8be$O<bSe*P!Le^PKJ5+:0MuF4fqc`,*%jls"3`CPIt%XV/UHj>g^LgJ\0OBVk",fW*<kJkTWb[K0^-R>TkV1TPk(U'4)WW7._0]eKA[^P7lADG>);X7j;n0rOU<ZlcGPA2L<%URP9jGm#r(i/hJ^dEkrN&,dHD,Q_Ii@6A3A:6ia`H(iHe"6LXcGDjR^W9(H?bjRPk#-G""e9m:r7lQE`BX4@6Hbe<t!ec0$f]\'-%FWmt`B1=jM*Nd(*4INec^_@o/PEQ_"aJ%6qPYTfa2MZ;Rcq-3j9d(DuSQSJ7WKRN[lQpG]'si4)">[?]#[OnKh@.P70@#s7$(^'#%fZQ]K[R-Xt>WCt_];PQnPu+0q13pjsVNHst`eohQU"p[J>$CHY(u7.Pg?e$4\IO6tJs;N;I[),5<]`!24_(<^i_lRbq07KeSZ#IP%Dt$'Z!,W(pbGXmO/L=-rEFC?=o7EY[i]cY@T0!6C#,.<ed3X_[<_B*oC'df-7]!$p00kP-,_)dAm,H&:@PS!*p)r6D>DQ?f0E'&P%.Z1h@"sGWPi&^-"Ql)8t02BA[Z<&YO&7?GJTdhqSP-Jg1,nPbpTC[j-W9!S(qnsb8-O7W2_7(YQcs*E`?Zbh[+i-3no:gBcFLVp#%>rtXE"Wm_s\mfW%$-Obma?u'KcZ7/22HdKM6!.gO8U\eAUb7_0MBd&I"$AfZQ;_p>_tQh`Ra7?7Qnr+_3(WlQr9JI7O]+pTpmDHg%oOfHI'-"Q&/*kCF2U#tu?l^Y_kd5#3#aVO?]jcJn`nan&@[H&>oiI_/iK,-Jj<^nCX"HC$OciAgBDE5u8d)`iK0:U9^8tY][iBhW%oRhBAW1%*J5PNH5BK4eY*YHKE:-K*s"pkP[\E\Wn8lldeAA7VW3g0Z[4c?%o!70>9cKBD/Z>JE7OT+G;SlYuu+bqeJAtl.SOa6bf%!^*YIh(-[GJX!:>%/RX5$0Mq?LH.C>hV`sHC^dWG\Pb8,&F2S9cq]_9ElI0WmZYQ\LrmWVBCl2hPg<_u`<2DHku:=Ub?7++59hOC%`:5,QLMi(cKO+4BA'F8<%"V1I_"j3a^`)R_."+U[PT/[UYZ%?-SIXZ\QM^r]UO&5B")p^;ilcZCZY^<CM*<7#L)h:h8C2mB+^CQn%,,-m7n-k,C^H)CD]Tf`[0Vn@IaC)nLjO<)X&RHB8N^"^;jjE;foC-Sg$*'N,Ef(M^;-Yh,XB,6\L6TDmU"\IZ)V%S<CR&H?*PFk6%*+4HX#!0U-7VF%'MN!<uBp3k!RYGJdabI;N`$&U>,Fp?A]MQ\haAEa5@%)+uU)`Nf'hE3u(m<=]`sD#cdmti<bHbs7"p6JpK0uFo%Iu%tIW*hd5']>Fc\t'=lq6Z>hQWX3b/@4A\.Ggb!]0p*ob,ZiH=(mXkFO\4jBYt8Fn?<=U:i=irMJQQl6A'B&c3>s4UFaP+:'0'^%2$5p'aP`f%\^b.oX#N)BApKkb%csW;OFT2h=<)/kf!CK!f%"lt#u_>732I&ke;taPem/E1.o`5/N+nG7CL@5No.:!j]h(+#a>E%)%!g5^e;C4%"8iDfdDh^WPNU0L2ca!%K7]SNa<)U2"/IjbrLqt+uGa>V<N?fg#]L*B6Te44a5[I7#K*uO$*%_JrF<F!teIRhq_)+_\%f0Kn57pMl1Eh$2CJS=sCBA8t'""L+pnN&$;_F4`UCa=35ka[ZaKb<$:%eg5=.Ii_oP2=`XFBBpn_:\np\aug'L;QQF]uE[a<=$Au%jNrM+Y\dY\#O*pP'0/uj$4A[J?.+?ja`rqf!;\!DScjmpHk!od5QPIG8JoC+[WQL(!h\d=Y<"HD;6nbFC-/"j#kSi>BVGP68T#.Y%,_CRaEd"a$dK6$r/&@V\I3?-8O^Xtd*tm>Q[#HPIdp3.h>44FCXB779C8P,b()M`<(TS+b,P_n,N<1B[$/lQu%Fmdu,[$VMOcUa@%#&1kuEY;ja(p/ga(>DGXT`t<&8L9JKKPW+?HslqXV+8"eW@d'^<0`tLB4h3fg4c6@7X%h+!>*l,="eLKI"!.%%-I+qjhQgLl8S/U%(jR:&X]r(,5k)<tGQlaa,3`S<B#@L!r=2MQU3\E,Yp"an%re<JEmI9j$"kYIf0p('4KcNi.u5,,h1K8ZlkufNN7Y*_e8heaBc$+V%7:u5.,q^_OV6N+0(gJssJBM"0i,[[UH;1.S2siN'A/p.I\0RmkbRi(n0OGB$3DW)aeq)"6L2l21g2:9lBZn57CRcMa?qFlGaNKQ2%,t[KTd>?DQ9AEV7aS<BSN0m^4MZ>)X@U<T<atb/F0*fUpp/SU%h8*\WkOr4Dg,5\4qE>tSl7gdBk6*;^;1^mq),^[%s)3.MQQ=b>%dolacq<mDALYIaQ]8Q"LY?heX)0#C;p"`.57+LqWl[SfTio2^O;uJ0D3VdahVn[_.qVBEN-2`%9EIN+OF+&6/lU)bA4o)u[Y:d$=%8$?C2DD-IM^KZ0`j5b\hIlb0S4mS@ms);uRp3(]jT/VruI<0h'5D(&%^OBG)B7Do;k0;<8`t)g$e/p&fqV1\^H2R/SD#O3Y\&(AT%0(5dZ`S4L8W!M`N:a1&bb5@<u*_QC]fHL1aiI]$6rqQu_\G>C(QfiS!S,;N\Z"p\8%DC$(HABERMr&k#4hsg`-Qf@ga%tDB(N8b+%N#ie%hI.W+FnAdbh=6p/Ye55\iGS:,V"js,dIgdRPBZc15M][!YKrPFO[<&<U.!l0eAODMmF^t,FS9FZ\6]*KqhTpqUt_sCj<M=O%H$smVGJ8WHjACBCdQ_&C0#t<F:7WaS@5E(?fCrA(TAQ4<@uHJ7<M"SGYiNfam<8<irc1++P2]t2d$h,<#J*)M*YnSEo#Hoa4P\Tp%nG^?>o(qMJp3c\&gTuq_0$Zs[Mq=_:jl6+SW,,E4njmX^/oT)(DJht*-Wesb[<$?$JVA3CW-QB_1V^KsGk:1ZDTnjN/NSEVo#>nR%l$3#Ao(A#YHfh!g%1M<jmHoj-ER=E&F_6(-g>9HrZRGNRIWol'l%SAKUTJnKF`04h^!Ren6/=W$HO"]^T^EiM^#-6/2d?8kH27<S%g"W!'?@[t&<V',<5%S&h0!rmYm'ns\`SCA$[%YkkkGPr$a3/s;S3_q=&?!]D:HmAUje,K;V8tV\?/BL]>4u$\rla!nVb\+Af/"?*%^<"`tQdFLWSFPufYf?28)8H-aI?+8MRmjXK$i];E]2-V^faD-[hr>":BYf`>X8$ddqsNfuq>1$UEkM4P>NtD6UX=_k\3.O@4M.0A%>^s=H],jaeWth8C,eiXo:]C1[k'HiZ;<Ea350?M07j4>or9!S4p<UL$+E`%,\G,;I1eXYUN;bWQ!X/,nr<<=M&h^pLHo<IFnS9[B%r\YT1s*>.Yg28X0h6q46;VOmgQI^S!P!OQ,\[]@8ASqH-m#fKC]O.0ae(u<pBM6XYl\tUM\e,up$ea7'YhPDODjo'3:6Jmk#,=,3%T/W,VMMZkX];l594FWRnr#CW*r/>G/E]F]=dkd`=%n&W$07I?dpTrV4]+7ud]C@-"VsSP@)/%R1cHD-X+3lJs))Qg*HftClb1iDB%\)o'a1m-ZJDr32KPC"PXD7d;ai`uD)*B8]\4d%@W^3MNL\[e6d/slSVD$f(TGTlt7b:omnSkb-@(Ddss76Js@12;jq.Q&5pqYKpP%mD]&!,q-b,_ZmX*>3FXubHp_Fc$e#"7o.O-27$R/&5!oeC$tA09#ETs+$\OchRrl2O&V;ZaOUjFD!.5>Dh%V!<sNhTB"t>7rDI*C%[lEBTgH=i#d9`9T=mF`^XkJE8^3:0u0D3Qg(8S@ubJ##N<Z\OWX;g3kAfhj1f"Q(U#C[Spna+Gb1jVReZ6emL(59M`p-6bcS6]JT%04-@cQfm,%Co\;CSCTU:dM*[>]43J>FM?jM['BV8F1,9B+BLZ/Vq_$/S"E/'V7kQ;7ZV4ip7^N):EM79cBhVUlaq)]546g1FEJ@g%)XTTB#OSI]a>6up;g&'Z4)4\/][SFMGBmK]3r^7<U"^NX[p==14lCU,3$.puY`F4kGN02`mpY@A/Vn5p)8Kpl_VQtsd3JJs(r3;U%^3<f#&AGcd]\Fi#mID-lolc1Dhq0*C]mY6IGO^aa6<(,WoTm0",#@/EgCukYqT8/tjWMQVDI1PP]`("ZrR_GBep@1sL<ErLIN:Rm%OWE;Lh/:1qWVl0*j*GorF#BP)@,Y`X7WZ7*)h$l.r9X"PgRG\4BeWV5#)C7lG\22LIXcLT3I%B*>t(%7F`lKqN)u0\SjPpfbo_Cd%q[1AjgSja#W?c-.(KY7qQ5XpRo?b/XLL?Ji;h!#!>VOCs&abMLit)X*,Ndi788H84rSd%\<?'`-7Dk'[&\)c<0]t)A*+o,)p17/`%KYn5DaUX!AN#&]0i@pI$$&<ddP/S3,DWeoGc<jg9bkMe;b<C"RLDcJA>mZ9`^R&o,/_8IToC!J3%PrQ%qnhq7i@mX1pp5^mCdDUD%c2_0U36_.0m0a$k;Z<<eM<<K#%_#_NcSUFSQo/i@^p:j/r+<;)gLV&OK1Yk*3q,frIh>6kO"i<3S*d9b0.c%']Wl-GZ51-p,iDIc%_<AG>kr*g-%NOkENokf:*,Y?+%ijuPd1..5a#VkqD$1hHZi`\MFb[=-69XhE"$[aBcOL$1JY*tXfn#d_5<gZh3cDIu=hcZ!2L=k"%`)F;j5.ne=)7+/Wms3TF*rKI"r6CXgXXA:6$m(E&Y?Q\='fDRH>l:'M5@",-H25A>fro>&3sms)*B`k2T(D*HrS`.5bH%+,M,*ap%f8H)rYFBj4D#@F3iqM'pn+ceGpqc$f7F/^+`&;@Xre'%QCbp)Z32Et8&-hr(Bl-%^KNp3@a*#H+ZQ#<?Ie*[l:HY5,laP&](Y9J`%?']JW=J"=hDo!KQ)EXQ6AliNAVpui\`NK-5mZm]aMjr5j,uT5^1&]s<olk[2G'p9*lJEEK^?gWYD!)=7hctTBq%Uf#n*`2SX=qBH%Sr"i=AW1uS&4YC^J)9+t.4,+R5.sQPH6D77b0SD=;T@&(L*;lc;*-oc)ZmOlJ`o8U?+[grT&!`.ICNJ;NSe7>D\Lr)1"`BUoXE08%\BfNcrjXp/25c33JD52(i(cJGPP[`5\<FBpicf>h+5FuMi_IK.$4c0prd(WqH>k$'%PHgp$[HNal%Q^1&!r,H%PHgp$i/^I*h8RL%$b</>m'pcui'KW;OFKp"@l-9W^O6oPpXe0],O\TXE]X)?H$O],bLdD5?G-;W(I*Cl%]MN[O0N&/G<IahhRAuj:7^2]g=qO0n*WCl%k;V!ilFn=c!a"[S2D<kU]o')jd^H2.L\68fl[=%J2qfIiIXet7?@O!IipuE6\6Q\]q>)0L2j__"YA]bG^V76A]7)tje-BdEjOpYT%0BoLrD8_Ti8a]uL4.,(=-Fnb#DP'UC.ZAQDSc.m6lMb\=Ko+pfOn):CCi8m4QC%-6XfRIMNG#Tl*+,AYGRD(SF%+"eP@ART'#Hhp%r/8!FNPG/Xe&UQqgtlqX2I*=aHj2$HgJOR?o4&IN*\kfBnJTiP%I3lj)\?A>#tcUX2\)_O$G1_3FrRm<OPPYN3,$#dfPPpIj2#VS%YhL/a2@$k=_/?S?Z@guq@(//KD*!;q1:tePCr\1\k\(ck:p4$^g-[C?,F$/Qf7..J)N>PV!dM1J'u(&n398GR4C8SXnH7J7*#dj9%:[E<9NU\g1j#Jr&j:rdj4,Ltc6&[n?I9p78rGZqbadI8'4*Qn)mJ,O`a?R(JHfp=/5IE*#3c(;3\SXOQ7'J=Kk99<DkM^kk[b\(K%o8n$.RgqR0bP+6aeBp3n?@Oq]Hh5G>P+TMf5-cr'cG"GB0!H#+gQQ.aGc&_q:J^&4^0(!oYN$k#IXMFS)F';m]X/["5BhL;m.u=K%H2$aUnd^u(mIKXFXDHd[s7\M$hhM:&pfW$%R_Z)Mb0tT,p0^2sWn@l_B)A2SpQ`$kN?,r^;<'Y^NTX7rTA#lTlHtghbJi3f@OJ_Y%:6XX]dJZ'NGGW@+c%kEC^rg+G;LG*q)X_"_pcK."L\8''dq\U+W"E?n;.KMh%RuF@:k/4Vq&bP6^K2G%=(^Q%e2S:&G1ig6GIBpc%da":<%c6>F(R<dIS_ouDIWoif5-UG)O2R!il&!H'rn@VI4E^G`FEE\=T?]VP(UqTfGJCdS+0Ph>C-D@mYA[b)?/1uhYYLH1!\"$-%`T7l77QP[`hAA(1K_YEClMJ(4s09Piasp3%bXS)9pE`c2p^nO0<:<\iUDKHkk9X^;fjY1J,lH?25G'C`cPH)o]A&gUnVdPX5=;+D%+b.l\jtE0`^81)_B"Ta;o*duHUb6rpUX>.s[m/\U`_C*<m"el%W]RBD*`B.'rnuNefm1%e+*K?G%["fZ2fCJ+H*cJNm2d*L`s96s%,04pRJujE8&S0qBZfCRc>Kk=[+F`[[Pg<ZpPG4Z"#M]7&IbXQd7l0P%BciYr98ru+96G0B#rsD]#DMUSYF1$[pLP)Rd6%@oiB&H8%#DMW>nGTL(^6]b)<_l6KF?!r]];b=[T"ouuGL6*p)W*j@lVH"rj80j2I/eY:oCi.Mfm*)F=`s1u3[fCQVsrB+VXSFiL-)R/D)!ua%"-mf3>eRm4,$roE+&A%G@Y`"206c4=BuZ&u)UF0CEl`LqR6oi\B=rJT&\^)6pA+MGT%]EW)-&r5_Yh_E?(RVer:P_.2]pAk0CF;f%o+j7C:NsQ[Njj"Ll)-a5\]o9aqm)[!)UuJPV?IOj*j):+-=Or=TU0@*rLBBF]70(lbEj)1@7K#I9B:6mGT5T)+JDU*\*qVfQ`n`]%[ZM(]Q(FMsIeg4eTuKa>)u\<C/YEqi^Y7-Uq6o;pgJ)(RcL)1%02A(q>^s=HgN7:>WT3^<*>IAV(sA5sfC$hB[I(*/0/m[)d\F:0%Z[Z7ch/D9=8`cRlHJRf?8^#<PcW35\U;iCX$TFsGbVf$^aB6J!aJhtg=nNb3"0iBX&5IN65=g.5+mk8T(?E3^Xi6"EMU)jQ]Bq"B%rqZ*HHMN@ok)'D[r?1rbnLKuV_Z8"g@CHJeC#A!JK=LR8qs^&"_]HrnO1JJC[lO-)oEdWSR.TfFhnGYMfLM/$kl'u5%:8d<,,"/K%*u,_XORXj_kN>qqUG]fY2j>iuU3:iP2IuD/#GRiM+2>$ne?dnf]+7ud/afdoV_*!p1\]15T9g@<5Fc"q141)8cJ<#M42,p!hf<mf%mi4P:42,p!T91/O41F<ULMcWC\'7F2#S()%$eRN7`t!O-V/[;_U#2Bdn%i9,Frf3[6?oK/LgK#IjbJ5p]i"3)G,:OP=5K!BkHNf%%\SX!`/7"gcVFG1ufa#O"-8e"TIjN1g+lcqif9d90KCuY<gY#qCePDZEr:ZIci&RQNAHD3,a7pZ#.X=lhiKKkbH`!(8V^Xf9NL&1?%4ibUD(R*q?8ISHl4JqS>ro!3#0nR)3O0Q*SZg5!l1.1gX^OgXdT*"ur(tjs'3!&S6L*NYe=%VkUW;RR=gNDX[NbS.M`dM&aHR`jH%\=FCkmI0M0[u61!>qhE-aunRPrA8t`pVENU9L_)IE:!V5S].m5kP8"qh-ZfSFcX&SMkdSWT@B(^#G(hT5\JD6BBo6.c=YB;@Y2`4%*01'hp?_Y)]+MMCljg]n7]>!_61&6P6lpW2Afn)t1pe9cWt4n8Sf*KW41`)[JN;BuPWXt.&$_SXFPrQn^=DmP?QFQil8L*BDppR?%!3uTMoA.[a&$ZGb-M*,1ZfV(Blgf\n]8t_OIe<KgX.O8^X$=hRDZ<hhPG@pOpKsrtq!7f,#LiVLfD*\lM1>GI"T:)1PA_iKq-WgU%/X66Moud0/R>+0iP@/c"<Eb*u<=eGoc8Y+nJ9or#:'8j;9j9O^[+!$nV?"nO"2Xi5[ilID;ZsSY\i%4N6u_fuGo&Lp.tQJ1Cc?o^%Xf&u=DRTW#WG]A;PV9ANS(bF_PHn[)33R!4:A_?`.>#fDf.(m2aN1WoRC9^#4eSAbY<9;+K&>$lp/<6K5Q'me8EB1!rU&:mM^Sj+%K)=Th<B[Ha/DA#kHe$,]SCUE0>FnXe3I>+!1&-XDeFh>!nSPIo;,_>>Sa^8%HW?tM\S5i=Rf*,a;`j^'Bt(@UNjE<W/C2Vbg(?El%7]^NUG;F)'d$*-mhJIY-C982_qd$#Pfo.;U2A%[[KR0XcU>#g2kcVVI9VSP1L75..5a*$TUk11K7(70)K.4X79[9>kI4^oo2FNdU%gNcp&P`AVQ!X<0pj^^MbE*QXBn<<ES87-4dM^3Er!K"O$(^YRnPs[0maN,f:<W]gAo3qR"V-@GlDRF2k<f(^:BY@P=\$8$Ka7\?0%V64pYJVqA4b^LeM;C:t$=J;BlW812nEASVMgGl&W^*V3&m$O@o=0'TRPb..uc:Xm6(s]LsEA3kteZhnVF0550DY1q@[>Knnc9ukj%-l"*KR+T<a,6OLV0hOs*WGOu8&Z%apN=2n:kBN3mj7Y/MGr`l=-\<6O=%+,GH>QoFFa]'=!rgPdgR.mIoPPidCcuSXXcCVnQYhQ-%e/DPC:O?J.%7\-%,AY)oOa$SOSJorY.g^&<;p?u?jTW<*R8+uB^q#SO^"2T#[X)M\!q)%i9jcJ&;^:b2^K'[^%tC,IrSQXB?bM;*%hd&a`rT[*?q:"]mk&U$J-q3>AU6N1#]frt2>KgIB0A_l!psg=GLl+NKN<7.u]3FnorlDt(=)XPXJroNkp+@/<;U:i^X"475kV=^5%9YS3Ns0S:9hu%N..b@?g0\XE6Tq-(QJj2(9!;9.Q)B6fb+T:Z6o^hJYDVsj>p8tgV^;J=k*JV&l0YDghdG)-:Z[K=_T=st!O6e>,%L:uoYCO<HACZE#"W/NP_1NRn?T;oWj]oH\od]>noUFBt?q8+63rt5qG@4=qp`8OA[6%E>Unr^isj>ZSK"<J10+i!7e4<t+abr@Vk%i;]%rkMA:%AZ]75=\Bg,qk!Dnk<89ZgF;k>br=Ga-P)S?P3E0#SDdUY\u^<T5T\)LlRnS4`mV?t.S,FUpm`&V2SkOkCBOTu!+Lq)%2rPSkZ@t@CpG0OtV0:31\J@IskGpp$i90l;<ofKK,f_Zfj][2X@-CR>!^%/Hf)i)kDfiB-Z5a2Z.uKk:[KFdk0i76L:_"cbcN,oI%^a;&9m*N%FI*6uLg@J4IR+9s]&l:oGS7Kno$H/!%dm-PY$/1CJ3"Pt7$7^32#VcU]YT6T!"Vce90o'+emYCY1o'muVX?*FPE8&/g%*!ZQE5qtE&!I3]_Qijp#22*dhVu`_3l=C!je[EVPa1rCo3XV*<fRQSr(09[dVH"9Ni7X%gD'FGU5*fWr1,^T#!1P*gN5R&o,`l0)%JQG)E"u]&,17K\D-?ZPc15P7Yo:rao.Fb[q/qtC@7+.oK'Ll%QbAd_=8VJpd0X4e`V-@]0-6.P0,.3SWa<q?Z!QRKlVVm3.%mc@p%UN2=>i&?`!+J!%JfI0CBaHU.N/7AT<9+t/8Ur^E#!iS@l%q#&+2(F3B##5.=i8d"e3cM$bjKZnHJf#43*!_4Kj)OQ?HaUY*MDS)H%JE\BldOZ)Xi87It<"."PA3BY0MNZT36>J%c_Od_@i/rf6YYY>64bHVJ2A*&:MOQ%XITS#a+\XC4%4<Nb=HTSR"g*qEm5!cg#]S8B%DYSurKh]5al-#Sik)7=a<qAq'.%SNB;Xh\3?#_i(J6#-kT'66i9'A93m-oLn8`a8Jg$EB%SSXSk5UKqk<^8,'ARJ3I./&10o?*^m%`Z[32],"[;@3Y60fs$3^72QO7(,Sq1J:@^?m7)oLZ!sfb7FP_r9]'tom-7M""FC@X#7#R-6EOGVC1#&smPiJ,iuN&be*@D5D:MO(%bs;,b%t46A5P`rATDI2q+8YZT4r5]_,F&&Ls8B3Pq:^&,qq^^gm9`'NVf,65mXXElU\F`T?[_Y6(S5pOq.D=-rA/s!?ua*obNhXC%rQ\dLe(;>.bg1b3bYqksm,<.&cIB]$gOgH[rgpn'ba6*CjHJL#nn1/_mPh4jh1>+i,_+pHn,M-4s7%0QrTc[pqZEm-R@nnoT&_Q>%nZ?_ZqceO:ge*gF8(01g>I8m!YV.QWmuB,(5V</"!:gt!7^"r8TM-6m1ZhS,Wnr]uMO&_UQQC*33Rp)1mUbSf.IP7I9JcGIi:BCV%e%mUEVD=XHFLIkIQOQYtpVXP!Z11-l7&#Q;E\B,"&icuu6YHKm.%(*$eCM$+`&L'Dl(Jc<&ulZ8CXL+W/sa;:_ZBlT@4;%XE5An4%.;7n!G%QO36198;R"%=!_=rH"aj5FqglILp\hD#dm0E"`eX)1[q^^3`=+^.(fp@>aIm<gMOS&!357X.U^%UKZC#3Vi%[tt^p>_f[%ghT+aR^W1Ya$J1^f0102:&E>!K;N:bI5knDp7i]79ugZa/oUSn/U]VV3W(o83W(o83W(o83W-G?5F9".oP3p0&,U>85F6^jrG'Mk%>`Sb:U]8lmLWcM9G4],OrGY+'V;.-&d!mM<@lO$e9)[BMrKfi8p4N?sm)OS's%<%I@aY0Io];@4rF5E\TP1h2>Tu!H;*N9uO'[+n%<TnMcPt*?*!mk"UF8WW8:Opdaf3NailDos!<Is)K:Y^'X*I$=fqXiTfh=6r':L883C4O>Cr7[@Dh!Oej6>Ke0X2+KK>^+t.Fki_6%OeYu"YIaCu-9aK!YaSg(?X$g+kjP;c:>Z,QR++*9jYbY^3o)%k/7r8dS*/])i.LKGgRDN!DLK)tBKCS,qJ35jei7^3Z'2ZKoDQkO%htVg7r:S)PrPU')rV584r5\8N_tIP(?[qsp@tkmlXuq0nh;7'pr\knpb>3TdbMW*GJ,I@%J)`%dr632'IeOejB7o'QD`k2'!T?h<%IEC*SlRtHpYMXZsq`fQ+-U2nQa$4t:4(!L8PCN,*f-U=8e%-HJSf:I(K:?e*n,N"S\%_Uss8M9S07_C?5C;gd++EsRO8m+Ehm>C7%S\@stlH%@g:>S\TDZ09a*rG5d5C3$90>@("oQf]?(Ol)EO.Q:7@itR7X[2OGPLmmg3dUJl[sS!1J,@-UrT8fH+Sa..#M/_(1Dde$%fan,VAtShkl`W>nGMlGK0_qRVIJ-l0GkM:U*7oK#KkGo)Xj;I[:!$fA.B+7VYHBq2cb8b[O+$U)cPb\=NTYc[c,\]<X#'+u-a#Xb%&_tga^\t<bq!*QG?SI),.PEo2i@?#M]hGflk$tV38$5$q2o#.R+9'-,4nHN`-L`\'r6bu!r7A^]q<OrX40F4L3-sp<G;T3":OMb(%5:`L!VWt'Dr7]3JZ/4_+$"sASh<H#-m0>iTjF<X3KSb$;4.l?/F8[.F'<#m+*R)B=Ie8Kcs4!P]=Q.6^^A#U%?U*e)c*^Uo3HE[C%G7!g2+8a'=T=7,eHL\<`IcYM)[)h$B*NX5>maedi55MCZ/L^`LT)\=>55r"#E#0?Q:uQNnqLbF8O.Y')Gi@n:J+T:ID0MV6.W#%.%-S&0kaa\]t_=dNN4/q_khq?XLL!"hjO`Yddi6oBpE_4ks3"Bm(\Eu9>fEt,pnP+N)PooqJEhpOerBMC5/$FA\DrPm]qVq7@IF1rY%?@;Hn?i8::-@AWHJ@+1gcsM+FVn`0D9:C>/r(k'*l1^G=iIlaQiT.Zman(R@q>8K@TE):lr@^BU51sp/'Q5D&[hIf:o%q]?qs!9<%-cF><HN*/IJ*+GZ1/?VR*LtVL^^R4NXIoOY07ET09rHc>0DtQg^\$.@f)p.STdb9k@-eoPaF+R^qR$]B8cu,R$X\8QU&.<84!Zrk%o[o/+f#9S\n'g1l^8[Rsr\m(?^,IUO\o*`ifo`><]u:XkHdda6o*qeBj>rGJqo384oVT%#kE]m070ZK.M*$+`RrA+DX=@S=FJY]]%s84I<rOt?gW+H2^<rsl3IsCm\hu2Lici*3UUG=/QWYMT')bq&;h1,"cYCG`7*s-ko;tn5p)ibdF`!sMTb\k2ch%,#51LL(&2u`d5%o`jN4j(0PCS#jTr2n\13+9!3eZg:DP@MFOQl1K,$J(*0/=ii'aB(qV?%9.!?`8YNP/QopV8q'%Uc$-Z9I*f0#2!e,*A(R9aq),s3%\@]'4J>sSLHI^QdY!q3("6Teg;>_L`mZ18fg;-[JBYX]gqVrH+1rhB_&'+(diAa<<fEiTD-%%NWO7!,G&h*mRU?4kPm*(u\,?T'?%>OW6oW0ue+r!7G#+[fYJp43t_bm?Fh,Jt>nkgqH5HD)i9^op0C9=n<tZX,*i/AcB$GK$mpPeaR$IA5g<qJ<h+>n=URHldUcS'O-s%n[A1Al,'dQ^[U6@00K:$Kn''Z>LtB+3Vs%g]^VZH?G6-`'-DV6/\^n%rTfNfc01'Mpqe+TUWYmq"*8\EjWAlUA5T8o\`YR0]_q=.%T/WrRpq4"M"&/Z+ml.<=cZXG]:&[I>/pf\tf6oa!K5,hKT]b(E<3?>5nW-l!YQ*Vj%dL_)nqD:%.fH'kp_Z6qQ<!3dI)06^Q_/Q4%;X&&UG?X7m0-oXO+*b%G[.O1N>@d$5jLELYci(CRkq*^A=*j]BPIUUpB6R2:WAij0Iq1.dje$18+'3cLZ]W5!k9%R+rg.]g!E"0h%/h4QEX%NEX's$tu?#WSO`'ZU(-^j'XOpH>Phn0WU]-)t+fmhgDV8m.)nH%gCq!"EmPOP^3F'RtOo5^[\F8Gk^V'q1USp"6!_XFHR%Cs2'rs4io0nbq<CNp8a+<L-]354(`is7DL(D5AcNZS?.akJbd2%0/4BQ0Q$S\T:gh57d[u4g(,8B4aDe[Mo+@cP]HGK^5tj=k7lW%ZW?4:qlq5GeG9+D>I:>M`>+m2qSN!LYs%j;It"l/YEOA"LS"9l<bK)7^!H`3q35/"oLZaV"(-HHl">MBe"8i$j!VV2J[[U\`3)Z1%f'iXt+8sS/rSd5F<b38;i90Ykaq#MBb/$)d6@Vb&G3Q.I1*"^q$\QR=0R/Xe0YV627_o4@MIp/XU0*:]D!j5/Got!,%.aGK43c-C%.3)eLTU^VC)QMcbja6G&8]u=H0GOH21_usrpRYbPr*REFR,g:,'oRbdY4<SnU9*f`=K9!ul>)D%5CW"-a,_=S#,]\IiJq8lIFZFY%DReZdaV395He\\raH]gK^[B#L2r/lHf%8]'l`$@l4F,r?@oo.q'9?IBc*\p:\G=_1m^Vl6]C*9%Nn\Kaoqi['>^O^q8':mn>uu0t%Xgd25pZ[%nFh-qRkOdSS!naO=NYt*C>_OqgGM[b/X/<<8HtmG%pY:a,Lf`j4X4I?eg[;Yn<EiP^huTI)qRRTskrWecTXrY9dAsIQ%Jq2Booq(:]YLhOWdc@C2X1mc"gL(rkW!<"d'0!Vec?j<]%F$Ig5FbMu?V=<"!57t]2kA=R5C3!F2r&`"l"[]*g#j_3)LNs]mqi9%%Vsh.gL23&D@?WY-G.4NTU"Mq41t3Qt6W8XKJ@b0_%5]P5HK=@,Dn$P?Y&EkD'Z0sZ,Odh=:kZ<W^?2"K:7YATh++ZZr[-9nVo9/I%JbBaGJ`dluhZ=_0lSUV-GKj!A7E80YI/@X)UlV<S?>P<'Z`PFtd\'H]p"d)-kQ.)!:Yg"dD*p*q&h`+N\$rc%!bg*8N6kWH^Ij'i%p!.o")ZXp2,QIt?TM^I72`K5Q65<&D+Y@5;-\>kX5\TOJGA87k[gD92dik8^2rA&spX?V/XRmNPacrEJ9Fp.Gp%!(=@=J_/e7+AS%4aHGFnn8*sVf(+I40+D=bpSN%Wu"hY]Db8FF?l,t7@&>G*]K6.N@`!&4V6\$+fJJ.:EXcI)Bd0]JL2+/L6LX%JH+Jp\qVOWoA5dF%:IAF4]g1]\Q($rWoW$s'"&L[7C>B>j-LgO^\8/qA\GandfB]:R>WXob,60lTDfoof)gppcX7$3*%KIR%:LaNR_l;8C!FT3`i8_EC%1gC8NJAtTMX,gV;ng:;%i+g*aGMRQAD5V9'Zb9$iJQ@g4F`S5C9"3W*qe`gu$K-GD1=KZ&eQmCYj:+')FS!a9h0;<;#tnh7.(JR-%A'2fIj2\=:b!a]MTLY"Di+n?]4_q6djo$&u<WJ>7SSn>WqrdP?@#&rPgQ^RNUA!eg+dYcMJJHKjnr;1(hF0`G(NPG(!,q'Z\YP9&%JR9p(fO<6Rc:Th;iu<KA1WoPb*aP6B]M4U53bchbH(s41BS"RI$3]CaH&gF_W[X/]^ok.M%+.[b]$dT$i#;]>'Zc!\F]PHk^hUH]%[T^t/puQou+-5h0#-K?`JhY(>RQ^lZ(1B3#]:up[mH7bc2rEp*MVmH;h-B[;7[LTjIscQcG'^O1Z_dLFmB`!/Y%K5H]Do:RqQ$g5%5F7c&@IL<r/%,SX2X^I7kC4;$qX=F>\,P:ZD+o+3bLKC56?Ci3Sc?V%s2A>0o#O?$im6J0r`:n^+jUJmoWHcEXk1>J:]B?`TDGJ3%II<^kp%KR-PIJ:Z4Xo6A*a[IJ'>+:h%t465TDl^B4n6IW56'9U*e*=^mZ7#t+^Wqt%^*S?mJm(`I.Ep0mAo.>qH(H(\PN.RT>(93%l[pJJg!.HCnlO]AVgnArc[G%.?iSh]rq3UYIcO;]p+&`!l#iT=;X$.?i.I)<l>r#9kt@(emSeW4JTq&^Bdr&X>eZCD=oTR^q83_j%oH-9ifOLQML]?uF5PV?f?6A.oP^6<\3kBe?)]sIRq`k"@O*pa$J+V#n5F34$XZ[hOpg1CYEU/s@m4AkJhX<W&emEc3F2"!O7qL6d%2q<c`e+%8=rWc'Kpf&nRVdhQV]XjrGIq3"tUpmJ&\pTaF\Dl#OFnPEMpRJ6;dS<#nQ%a1[CNjf'Tr:oeU30'2&r[N[71R9*?oM4"%fYej&+K1,[AO93Xp65r)04ugm])4$9TM>T;Y!AtRF^[:'rK?:`B!NC%ZE))Y-k4(pKk10f19is'Hsdfo8XFf$N>RV(HUX59.F8Gg%]%n=?D`!s@C'@rWfe$8KWKB?$Z=nH;mEhYS41J3AV6]7FBejEB&@kd[&<a(";Ak'3)YJa0QRNVYR<W`iC5V,e0USKCrF(pamp=c%%Ve4(t%`L)AIkk>^Xm5_Td8)"fcX\j$<aE<Rd-U2sGj@<*-lH2B7sV5rWc2N3!B617li&=?9^OE[YsA-394jh8!04;)Mio\*V2MD5%bF)I%;^ggIBqApZYj`QUOq^JnX-uAC!r9u`>`@Pq61Z^GX"6j<GZMAV)H3:C@P:]X<XYu#9@KmI&"I0L.0AsJK"#ous)TfI#MP;l%YEKNCROd.46pi)A+YuAM:s/gOncRY`JL<EN$H$Ru\;+S%Qa&ln+$i1GJUmXA3"EYVJ:hbSKJ+l3N"ce3*Vaq%;XdOGa".2aaq(;>%&2]#6*CC-f$etE%V(psK$hN3pr6OFr@g)pF]fGc#8llo=bl0!'09N"d'gJ&>0rE.]#he<aI.*>nH,"'C-#)3hg(/et^!_@k2"-b(%K;NiOZl_,q]:o1rl.Z[7#>NffBg6:"G!l!ie$E94&"8g?d!a8_r1_OidsfY#*7B91F80hOF80hOF/f1EY58$WmR+RVdXA[RI_!K\%QP82YQ?`CLT\YLfbF.ckQ1dg,?])3PV>4#`IA\o/$FK8fk(BIXY;F#B[-ngEY9a&_Mropds!pD(IaNWW83(_O./Z%ca`6sqj!RXY%Em$&4:*-T\7-)L#-VrRTcnR4:1-Eq2E;M)J9>4BXj/:ZQK@?7[msFigLYm;>1HjCL5%VAp9_o_lG,d`r3rcpTI,^"_I-R]/rpttB%I,o_=;rRROa,DD;^uriR25/NPJ+pm2?23r20>@),9.rL'isYn[`8<_F$ItZVZ5hLQGQ*^X?[,>VR18#[p=t?T5B;4u@g'R;7,u]_%O$@3g^[C8<553Re%kT[(_'/;prp=E`]C(.Iim[r$*^)Iere\TWO[%6G+$JSf#+!%f-R?tW3E@s1O>S]nIqZ"I)!:^\VaBPgJ(jU*%SYmPo+$,*h3HDbrouL)*f5nV"e0?D$CAc4QOU&Z!SFui7nFQ87SiGVQ"2$2SQoju^Kh=:R]_LOma);'U*')\lreUtV"3Q,ckZ5Uk%,?GjJ2=S?[XE^]M,c0NHJA,UUiMS/4!V,0!^2MrZd4;B4A,<A]34SkKW=P!DEqIHCL<M#o>`!8&r@inJe4CP3=XOsJ>D>B74U:^d%m&'0@dCh?-5^n4$0u(QG%ltk=)G=^rbAmXihg4obPt62jJi"LN]P[S!s&J#mQCgD9jTd#DWZAdHj3:r8RDX'oouGI^QH-#gs5`K1%[A-uD)QFHhk3m,a0q?1lBfM/l$/;HcNIn+-I\8#eQ&hZnb`jGfpnps3.Z2J?+iB%ao(BaNe)773f>'ars4$(YOt!jMOs*-262J7h%glJ%SifWj(hHS,S%lR>$n3@Y@56(GsUOR_6R2lsAL2JPs7dXXKo=jg#j.1'dP:"2ZTkQq;BO>\i_:lOo`qU>6K5J(D/:tnpJV@H=%J!m+S4W;akOsW8+[k<6&[0OIY\FSK_krMC.ADtX*J=cLl%-`?K@p%IH`G>bY,<8L5I4W9mi%%6;5),n*FM.lD98IQe2,3iKNY0bo%aqN,`!mjM[pp^]%OIY`b8bLl#kuN:pQhHOMabmIf>X^=`LrW.mA(b<"_WhUj!G'bO:@Y;)'7nOqfTjP9o0.L6)LV0k:LYOjIG0>3%=<9PE4r1`i,;0"aCiM!DcfPm+qV^C+U?*Ii`mR4/JDks!e1DBul]HjD!ZjA<O%`<9!1Lrd&#>E4.Xm5II6TGt33U1l8"*(a$i@.`%oeqg+M?gJHALJ>O[OUc'5)Q!^AajemKqaVT),pl2LQg#P_<pii[LaNe"sY^=7T^EIL![6,'Og(4Y$AsKI*r%,[5l(Dn,dAj/JV_h%WKO6tC-&0!>1RnBB_c\[@MVX(T7!*R[HN2I+AC*2)rOOIK#PJT?`ugs33W6WGi@?%J,E1=rJ0%Op`]PfH!)f;n'^Tj:Eat)c0G''%(>"#r_@I]m1Y%i<H.H9Xg%>\Fgch6i^LSVY1_]*;%C2njGA9&1bPu(!Sqc-,2r8NQD?'3D)uNGa^%T]hrkDJNq#0(;Q0mu#/f1\H%eDB'S$S?Wb@B_a1D.4iNjh!2\W/4fL$=%og`WGmB0BV7/4;2S9nA9XG8F=Z>-$=u>[Du*l^b;IU:JM1i!52On(%Le;H'p`kiIn5p%K=@.SkDk2tZmB!5,4I]UIj`#fIB73\<t*o,63&&E/d>fRP,(f,4<GsW\/5Z9,rJ"f1kgej+D2rmd2GVr1$PGNf`sDc#&Z(!qB<7@%qa?n4Cl14p#pYd&aXQ1n;R@n(2Bn65ko=DCX<l5HZ%KiQOWmcXmt7Dj5+WA5I5&<pTkFH;!+7n718:Xj:gXX@8.csW)q6fU;62[]%-BAR0E^li+KE!VJ<Ju"%X,U3qCQVX+ic[@EqD-F@a74h3Ou-I'Glh)>$1QA1#)'!%,;R\$JRXq2`WP(%->>=K:Q`.`+=,bLCb76#%pd?XUK;N1oR&//X'i7S+JT>07$8a%Dau;Y;6D+of+Tn/7!EiY7$:$%TQc2\X64,OR$TT<LEjVO%pBd'NJQ`KCStK0l)7noBbY]!H%?!<IDL]Dn_63d,p7g>W!%#TK?(i3*5[\jC..K^.'(4a9E"%8B<+Q'-9pdghcYa43,!Q.MF"q`0NU/FOTRu]fX7C.s$J6XY([r!fa%5@Bl_I,bK).KiKWLH3/t4KjDr1dO`m+b=\[))b>;.*P"TA?k"p\4I%]6JMPO?`ZO4?j0s-BItuf+WOum]i>CU6^:2?dZpT#?U/C8%'212["&QEo;,\m(!Qics*Yo50_+Q\V+A#hZ!M)JRGSEQ7e(cE!R:hmV^e"hdnS&V?!>/N:I3B,5Q!@ZJ"l'fgN!/Gk6r)0]4@tDC%!D)Go-N^O45c`p:_[r!P![`cfZ7O?gGVPk]/#&,OL:u^a(-n:`OEq[j]^/rY%)LjGP2d!_5VOTeXXo_=&HM$+;!B/@%a5MV/gqf;%@@\k_.RFD^>'a:>Bn05uQ=UMZ5ag*:@gSPRQo*CEE*C/a6eB_A/=:QaL16f#^t;4W$u%^u#b0jGM..`ZC8'Eo)G^PH/=b]69Arnh%8s1F,&5YX>Jtfj;@_tVC/?e4S]R>a(P#*jY`G5imSe2AdAm/<E?U1fV'^mg=!DEhW:#_Xq*/&/j[4^L]=?aH-0J#iQAj;h>i%Etm%gB`h(SM)+Q[(o=4%i)M=Q67#,6Y)rY;^<r_@%*=$W?Ni`P6SS>np%M1c6+q]BL.`8Mrkj[Sdij?@VBI.J4W@A!>U,s+ur4%GaK&.%h&fPUBU<h_*%Bc--i7*J!CbC6+XM.Q:+h-)8J@^$\rRRPOTPmY<C^HVK:.dS'0-Z%lj?nOB1GKOd(kcd`NrdZCakQe'fKO3Uh_KM%88>g3MOk.=]WJJAXe`sP:ibK4g%WC@>S@FZ%nmjKb,R5*L6T+U%gJ:(jeH<HNoab'[9YC0;VS&MAL_t:;Q;WlGVH'Y-l7&j8Pq["%6<;<b/R(c-#Ms^FJpCWNO1bYc0]j.8gCXPO2c)<-aWPXNJng6E&0iu2+pZc4<[RB&mp;Pm&kj!sHm.2b</Nedp7PA9'*pZr/&njf%N5USmCT0uOR<OXW;T31A1rqHtqk/-+b:#q`p6!MjX!jJ^?/[9dN8rh0$jNX)+bIe@P3\"/mh('\8We&gJDtZb`CV=#hj4DG<\?dO%3JPME,Jg)K""",cE7%eSG_W)k<]M(V*,tOqP#f56i-1C;oqJ.lLclo'%4ZPb"A3^u,WSnX+!;2\+9h5TJ\uO2a8puX>TPq;-Cp3m%j[kjn,eROm9cTDsfTMC-!\7XCWl-4!&S)0(/s2=bRY<I+>)PbI#?H7G"%1G`KOcK#O>oVS4Ggs@OUs3Z8F4/9MA\m'YX!.6VM[bt%04jK0AYg".;na,Bnf`!X_U>Lu<epgGM(g]:bHd;&?th&Nj[`6l1(?@-4LG&Cc\a+`Xta.#+/hNB!`2,U\N&3fU$.f!DW+E6m7"Lg%^S3em-0\TS&$ZGQM.+q-oEhlMeM'ieT\Jm""O>Jh%(hNH+skq?>mlqa1$i)FjP9bVAejafT&pc2km54&;[J_tEpQLijgOn+V2Dms%HT@ACCA'>c0tXO*r?0p(h6bh.7pN4d0,<G.i#/!2bmb?Z^Fpf(WgR02S%3O$U&cXuHpn:]bhq#t79Zmee9h/k^/d&(Oi:NJN;5;N%s4:u#KVHl\"G%Z6;R/XlMm8L%@'WG"$RJ-$ZDAaM48,CJ4Mc#XTdXQQ:]d0;(/(qDN3_4g.k$)[02oXo8cr`U#_f986--859h:C!%$X/W@i#*sr7T(i8MBp<jRUWg78cUCtU<Ac+QLB7kTY#><&:HXo3pB(iIYo;EaI3>DM6_4O(B^cf;$Xg5N%!f1&c93hs,WL(PX7D1%cdO(TJ/*Si7@HNsW`gfJ+T'&s0a6&2+g615Xf>(D:nVC(L0>%fg+Q1$ANYJO<gFaV9hpWT/P71gahUK)2C&Ba-En\h.3=^4q9jkN%Q'_Ob/FpA'71^0aKHp^oa2+#*#?0Zae=+J%9,3&OXRZGJ1g60,Md\ct#KkE1C_0pmLFePG)7]Yj4WkVK:1(mXZ3=sq?PFmm_+W6X%>3uqoT#Jhj=Z1QIRj':YfD0E3D1rZLG`a=t2+YPV:'PrRD$apIOFo]Ze*=<I?3.-a5Vj$8Zp,PJ8EN0jQOV.:7]T0s0n_Ku`PB!'%k@,u39Z0s@RZl6-8'X*DNPM@jVOBnk45fY/n<UdjKY)+i/7!!F=t#'jJqXV^kmc>K6pdce6HVg6h778D=tnlBlB!>M`CO`H0[,,>%lC-X6%^-.ROf=$A@AmJ>=RO2%H1(srrcZcB6],D!@MsPdOnJSo6&WPWTj9e97KG?[oRKDZ(6$mX[^9%'-WM%o1bH4hEA0d;oFQSN%E/#pR"feeW^Mro!=+N$+Uqge6<T'#\ac_ph8B]qi$3dI!9Vj4X/JtE1<!*OZ`rUIa:]o,Ij<1sB^;8oI&c0hi\9^W[Ia=O<oG\jM%numPIWu6HC:U<'3*pd_Zi$M.[JON?>OXI3t;e)YW)KrfEpB%i#"/hN]n[i*-KF$'lI&.Ve,Fm".b^Tt<F99^]k?GN,W:"A''Vsul%(=Up;@*/aYPkGJWMu3V[2])nU69NL]@(NVrObsC?fe7@KUMBo63FGZs;27hL-kV3gQ&CoF%%?o#n!,r`R^1M_ms$'Fpl6rCjV?0)%Hpi^b"`"k<V3'^HkUN4OE$SubJLLh=8$>:n5T*B4gA5MfR0H#R!ZXaj&l):I9slcj08TN0%XIJ(W^HnbYsKbDV+DBN8sG/*/D8VU%%\$o:]HhgF)cO!S4FP1GHG/X+f5RJhcP*BGo,]C9Eb0%#!I:;ETd9($bt"Mg[gha$[60tMmn9Sun4@pO<\,ThR7IORM!-:a'$3IC%1/S5o"!2HUQq%bQ_ui"K\O)P`7deT6o0jC)a51thSMY]f%ufeh+G1h\@6$^F*J6+t"PTG8MH6,]$76)`;l?,i_$>bWT(R)"`4!gH%$(euu=t,3S#(e&HUmQnrLlDVoeV6s+`aUBe1bVlX))N^[&?R$?c[d9Z;!Xk_[-J+gC]Vq=A8!E+ncBmGk#/[3LrPko^fnVU:t,-2%3D*u'i@,QSO\<&R)m>Ac8`GsGLgFN5>In9Lb8(A-3)$OgOr#r'#L+^6<21-/j=YVmJ4=.tDMLsX6+#UR.:]/_Bq)8>0dMPt)9uE'%f$mh'.A]!\%1&?W!)uUe1=G%-1/=<YA&fd2.a)BOe_TtM/V"Qi-R2E"GqZlhTk37o.4K!V(<&=lG*sL=B:Y@7A2>GqWu$=rpNe^#%512Wn3g51l"T2dU>lqcr=3i5R`@Au%"S8J,L2/3'M6//sY2OaPR;]H^k/%WrZ#i#1]YiMo.P="^!7gL];6F0Ok8HN#"5h9f)dQds%KGL/eL"Cn(#S]-.9ui,+iGm<nTVr0tp;^Pb^LGrr$,4%R(s_(KbjXkj6Q<:X4KEW;6(oXJ5Y%!*GUi+O\gB=5)>dHe1"8T<",;T4%"H&j#J"t2B70:Pl:*B75YUgUr"@s7=n-96qiBIgjr%=.ds%+QeNm:q(V%mE(BPHs3"TN#.`'m(O"@U'u&d8'Yr7cG.XM2$BMj6))%il+Be$nOe=,(s9qq.Mmrj@-l-)jnj%Ilh33IS.?-"9`g<1QY!\_!dEgC^^E]?*)p0s$OLHc`kKhncFHV/<6I`C5sC::c(i+TA>R*%4gC4tZ*^*)MBtXk^!%K$XoutRn6f-eC@^B4.dL,.=t,_;8:o`QjH0"2(Q0K.$9+&8$KfhtULhJd.cMiH[24NHs$.oX?O$H0S./1b%d!l8H#@]$0!&u4dOtq\T,V<k';eZeN_)d,*WJh2ei)6(@pIcV\AsLAoZ1t2EV-pBdMJI"gZ^XP@.MV`N*mRE_TFne_7JmurlC,ol%[TJdRn;!3CXu9@HbG/bU7[\*GK[nURjmnJNnjSbVKX."6.93b=L:6*EfPSD.H"(-sN_<!+5$:EGc6Y9a$']HqS5rcOC`_nGmj\gM%K&PGBC(/6>WI.bqE6.][3giS+Se6EN?gY/J`AWuh[/gYmc+dTGIQ/:T*VH/LYN1Md"'!l=f5QMVk"sYLLota3L2goVSr5:202!I-%ZrX_);;(mjQ_iA,?'j+&]e>\o!M,!o3I%ZeV#<F0'`CG"R'*Ae'M]D)RSqiYA^6R=Gd.8)C8*:SY,-[g3@bi])q7+rgual,*Wn2D%L0K54m?X@[ij!U2G<$S"(UJCn`b&&,Z3hhuHlPg>r/fGlSC0T3U]c,V\C]CJ/d$Zb>[].0%`0#n\r86*kYeJRb#RLSR[MT).%<jU%oishC%&PdPZ&U'fjEa"H+!''Pq#\/q]7!9'mE<ENbF+^TL8d&=^Kbl!#.^J^%d1/YfD%fdOhIqlEPlGaOeq3k<HkOVZ%CZMk'm[d%1n!mE==ULS=0(RZ6Mku>OH3l\W$joUkF@6cj;AH2Df@hmL^C7biShWciIea>J[+!_N@`#sQrK\#PEO20i_ju>_.pQGa-pB"E[$h,%4Kt4?+p;aE;4GFrgAJojS+tl0FA+2747-%'#$m!*7Fp%?05%9NU<-MW"1#t8U4X7Do9;B1Tk@N6Ehb5jE[eMZQJE:dY:fiM4B,:H%Ln_JN6?7YX:'M.@.>!(;Efh#CN.)V$ml;);52=FMnM5?+YYFI8&GM?`Bcmo7i0R%UIOQ*FcB7M(9]u/!#CRkSPH]!f)Mn5XRRITK%+T>lhI87Yn8sKIge)VKWQ^lg(:*@bZF,0TWlVJ4\Jhm]H!W2=]*pPGT_kbcs3_9g"'7fhL_3<glJJ'U[HVmbq!T^?3N774$<gRdN%MV=\meY/g"Znr"sBb'"HckdpBEEQH_?k1QZ1CtT.AVSd3j]1SI4qn4ObnO##F"Wm+k)q?i(0o=nI*PV&iBsMPLeOKnMAYqa/6tRV%Rlp#]k#9$jSbBQql(hcsckRh)#a*U$$G]l6e^J?n<$@Tg4b3R^c!ZA6al**VC2dRqWLYL.13eeIVKTJ4:GSe.*:=S+<9"lg?k-M&%_g"K*%Q4&NMAOo7$0%-)iC[E]>Q/ACI_2+<)ns-%Sl-s+a\iUSTlHHuhhO@9lqW0Z@td)5R601YB49<.K3D4`-@r5b)UGQ$&!p9,%E*:_Wkf[5!n&q;IQ:1$n^b3DgUKJ\Mp4`-94Nh)r/ESIq)9#`6I_R0/GBJ.IXcP*N1Pcu]IDsOj,Km7TW]SK3+oQgI;p7+66]8'g%C'te*lbhD`K%&ZQZ4^dS'B`qg,ZB'`\::2qH3[*DX0@RNK6:Q+lPIMU<J[&GnWhoWE(MYo+3FZ1T?mhLhYQLF;\']:G+&_$P_!0e%))tU*8E"U-AWj6O([LP)X*e'mJ<-Q5)K!Ei70]q_95fbMLumf$I&E.Za]9^n_H%uB;EA3`K^S_b_!]`ff6d_7;q#?[TJLHW^6gf'%<L8MaHhF9lHLe<G>\L002H'`0lB.$p-Fkk&g<-7WjMjqGWQkAc/psp[\`&dNqZnl"7;LVt5bkM:l/Y$jY%[4?%+8Pgku(`a^JoRq%b"$J6G#h.dZ_D<T``o.p.f]nNFpf5EH&OmR@;j?gWgCT/7Q1Lb2TP$\YYH1'?RYM&%n^?.FE+R;;HG6bQm:53iX1!q5*6Tf*F0R$%aX#@d,:hV43<FR@i6NQe7ol\[I?p\P1U"L#Ih@^i9VKU2=u?rEo[>V0!T/Zg$6=EG?poMoOB[iCU#JeUT!=l[$Q)gA3IFso3h_Ei%kfP$Sa`JFp?OVX>1_''WQRX4CA>RK%dAqOq'diQ<9El)RFR;#[Ss*SoW$'k0MkMOog+83?'W8eV`R]T'N_*WSgg?16qf]akMF>L#%d<c3,%TVhFYH$gNTLDqdK43lu&i?K'jBsU=6I@oo64':lbpi#>77tG;0nL*$6=>NN^q_nU!OJ_EoJR0_%Q6q2hZ/a7!,;8J#m//2%JtPB8YZ6kL!&Q4KA2=j`YcAtGKr-!/1npA'q4k_tr/kAYe2`E6_Ff=k2^HBt"=-9dNH2BMFqgedh@<%i#\Hs&5j_qaccF#KMYKe!%'$D\$YE8?4Y(PG@?l(i6Mj!GDbKD=3!X2H8f*oAJP18&.?l)pj9R6OQNKc7Y0J(HsPel11'"#nV2<FNl-o3-lbJFdd&rIRK?lETa%"qMG:5Z+$qlI&]//4Jlt;:D0Yd'Ood^`"ql[`9%<S5(\*<&#R,e7B1k%*!pFWk;Pd_B$\WN.r4--&@6aUSipFH:2%sLErNP0e>X:%F,U]r\e;7NI^=eR0"a<m84F@2>($DQ/MdP-%h:"j`!W.M,Z7U[Q:1<E-*UpE&s\XX;KBfGFW/ACdKcV'1<a8IEIf<FrBa*P!p5$;%YXq_?CCCdaW.9V0l&%$[$md?-H"?U5L5"oIU_tFqZL"g$_I9:RPE-qj49D`!KcMEHFU@-&TN$Vt-DDD(-6'\/&X>$qO5G6aWX9:h%P!P*cp6145L20CgUnO!`$c`6>)\a$4,1:-,,X`ge2c%WWNYI@MR=d7d,&JN#Ea<tIUH+$U/,:Y]M'e4662F$<A<9N!@Odq52'$?F%ED0gU**8pVAYfdEJTbjE-E87(;BJ_8&JC$a/,,<k%1#a&dmB/(&%"'CJ8:m^dV.cP;8ViIbW*Q38gGmAMcRZg$,"cR54aa(2ehI"%QG]aK_P#S4[Sglf2:V=r!b#^NRT;01pdchE>WnFI58BWrW!!]_YV$gN"T=GqCQ5oKn@s6CUPl9[GobRVYeJHdBcG@]2seQ2lq'i3%\-3StV+&As_O%#jWmS4\jVcFt$PF8sHIbUF^BOFO)ZS(*Il$k<:B$a%J$\_'*<)F)lk05$G)(GHrgT)N(1i*Y^Z>[Ih]kG+rKb.`%S_Ws'#TR\uYb>n'Ytd(-Us>4sNc'2Z=i>iPmcLg$rQD]Y1KQhnMoBM0;?#Pnb*EAWC'VRSU\&S3:GA*T^C:_$]=^8>fe*!6^'m[t%j*+[B?V9`(#LbQEd:dpV%RtBm%>iQmCqR+YQig]OL0hkHrTu@g_qWD^i0eC*C&5'YjgfjkSH4eb?pa!SX/2Qg7PoT;&'*arBOW(;%f0I;6;X$S5.D8/ThOQ&ZKtiMfX4f]/RDSO*=ME.Z3TI"@4XV=$"L,,C?i^L2Ri"hnUnIVN1?D7XRn5YK9KEQ(\eEB1O=^^lYLQT!%!=0tloF2)HGd;PuFeWpV[*\\,r-RK-C!-fQrD17r,ruY9MPGL5'0TYO'XM![CT:`:>-.Cej3BqekG!@ojKQ$'K;hIVo=u&].ZP<n%?3".]+];VUZa?r[h^*)u%sT!,d]*$'Y)=`kne"!\XOpX8YbTT/B]VmL]MG=0W`!d'9-oH7:3n/d*cS:cc:=$+?)^m939efm#MpEN%8!?&6WA>L8eG=n5FfmtNCq#Z%>H879AjQ4'24.W!%d-b5E-0O9niE+fog`b84BotKP<l^fi5!T%0N&-M_H*rZ9;#@\mu7fsO*&ku%V"B9Ql-]Rt,WO.@P-0ppZB3;&9=cI5pD7+t7&h).9r1cW8Ungne.A^Eo)N)m.H_V.A_'MZoqZ@KRk%)!P;gcU>1pNLM^9!.S!\^X%F::Z@<6/X/L8%d2,tU6Q:X)9[jhjNg]NZS<G:MN0g@r,ZV./"5(+U)_H"j#si7e**16F&'\]0edCq:lD<\+)(lQU__C,$$%Obrj4%FK&[qTjskA@b52rK\P0XdC#Rlb"Nu/I1_#od5@.>CacZa7$WKN>_=AF224cC*,*d7NeS\(Q&F`(d=p(N.32>Q30pCDAOJsg/72Z,%`psEP?sbh\,$jMJ%G\+9.=a6U9Y+9`"psNX-<4]q7a^AE>R\]"quP/P.KRWcV5/S>Pp;WMP@C2G@RVCCd)pF&,,h@l'k-]SJtsTG%<!"P$.ZJ1G8\!=cR0$i\:1]Tk,+*ZnP0pWaaW?\kd8CBJ8_5*/`g4q[ZSi2)\!]?u<'#0;GpH5CF%NlAe[6;ga"hY0SMO6%Vc,V&%6PpTq%sk_qA?0*%p%:4X4IPVs'uBM\bf4.,3/n:/\X>TZ?ieNoHs]t`WI6l0,;=r(T&cECij.a1q&E)r(A,a$PgAInq.'p&@4\1p%UTUb]n?=YB\9M=*IB<'H:qmAhqVDLYi;uJoW9P;#,77bbHce7ISoba,a&k)u8f*`fgBO9"H^kKq2f=2p0gp+pZ>0DFW=0]_C`ueP%l?TWb7:2'Y<X=0)F7I;[HiS@GV(kAM0O)>A8IBgm2st`]-WaTI/C6B`f7IX_H?`tod<1HNbacnQiW*$1hhG``q<V97S[:g391F<p%JPA9H/-*$OoVWF7DLH<LLSk)d/?]Bu*ml`.+M>faG&>Kj:9G<P!uJ:(a09j>@s.j3]hh;2=b:S2ns]eGeII*EWZAliW-/0CV:oaQ%f.od%,-;3;fskIX>^e8/VAkJ%L!j_0B^8IHLunRq?Uj?HP[VW\nc^-)hS>L(.R:,$13&-\H_^p.QH<[fBiiSYgn^`$$\_'n8Xq;]%JQJq7kp.\P<`;gJfRdXslS2Do=o^i/"_M(,lf4AMAVt0S`!.P__U`281'bu&=4i<TP51o5(dOa)&Md!jPpoXQR&)9s@YYCZTsMCf%1c)(XhVdoI^X<O2h$@]q#P\M4'W_4gf`Y43YYS[<R82j[;.an>C^#?@bs3J'7*-8nQ&.8&G*(mdZn;h_M17"?87qff=V0[?.nj$;%al+Zm^dZf@2sY[]R._g[$=mIS'2`1I_J0^rWYM&RaX*T@94o4XPtO)S*&C?h@4M;f]T0a=fHH3,?#jaLeoZcL3)/s<?mmNRD>K#%%XIrHq^e`@FVFlr-?"/*9*`?L5"N#Pt/$N3H">?_X%XGq!qLC)d#9#7657"J.SWP<j'K:!U)G&%.S#3LT#,7!7)8OB8,m]4A5AQXm%fi9.3L"(E<':5.*)@2.2a/YAOZ>1$QCA^5!\6*/s<SWJbkU?dp@>p)N_@2#2m4E]JSbLf!,7m1B\@J]356;uCT7.OBO2pVJ9qh.b%?T&ERpr)M.!sDj2H<`Y>U1RPe:agk@[UgXC#j](J<`C@^C"8D(\'5Hk*K-0:WX*go^5mtm/ffGW-9sgMnP$boj8hq/Pu\M@f)5^2%P`FiTo0Iu7TcNsD'qI_q<KL"\<0UW-\fe,X:*V-/JB/PcBdefNc)&`tTYM\cgk9!TR1kU4P"L:+5&2s0&P*CFj&BX8`oB<lH-Jnq%9bn>;7q&nIOPsJ[[\7_"O`CX%lnXCNHj,*2_;%XRb,pV:F";nUFBD0,9IR'5PO)mlADAV"(t]]p(q,s1$980/pC4*90PnO`XP:6D%&?N+(aoSo:Z&.9[=<>C2q*G]<[Y`f`,]rfj`MAn-oOh7ac9dkC\k+h-j&W-<"GN&Lr[F@Y$gMbMg,q*E<jk92S,@9cfIg0_/&A@0%Y!=%06@!uh-.5'.YTYf'/dW7SLVXu)%YO5WHaqXeqBqDDkb(/-P/T11*pW&)fPhJ'3V\^#)Qo]NDP-?1BT(-Bo[EKNhI(QAB5=8b%4]C/YX`!YcKMjO3ToPW/NGu;-h31!m6VLSIi'P=XGJ4dSUCh63E0C]/9+ZgHg$j:q;:jX4jD4$uDoia*$NlX.b2(l3=Ike0qMW2_%hU01-Fs]3j8p,6q_`hGFH5Wa!`%8^ELSO9<I]fRc5._YBk.E9sXmBF=co5:dB^Xqr9@5Fl2]Y#MDO@SILY%@]<R\tQG]A_8)P(4@%9S@dlek!2fXc)$&S'f4Ceq.h@3S`UH76Nej[44+E<chnu\.i7RSE>Igmds3=>&^5Rg>M-b*BR<e_f9^9]=YbW@2cTW81oR]esE]#%>Q&`T0@<iAoEo6s!or.k%&RG[Q7,bD`Nu/uGU1RpH9rRpEa*n+:"M</ca9c1GD@(`US24tWH5)SG,$W1O);aPWTM:Ui!.1p')i`?%:XuSSVO%&l_6ghT_4,@L-j9gqlaJ&9NSSIM)g%@7CR\Mo%V4Q.>Kn0UD16qLTd.PJrk]QoaN+2!k06q)Be^[s02)DTnI8'=RO/ZL%WK9=K`g7\1n9A0#_)+B^KmPL8kjArR[F\/D>"#e!`hdUFX6nt8fqmj)WPj07[9C1uRdJ>/6&.M3VHPr)o@u/]RXokO$uRtD?:cuO%&q^=t=?@5ja4fjSe]i/\LkUHlQ;B(;UrlE5f(:]\HZNi,?2E,9*>uZNTpEb,DN($\qLIeT&C$c:OVTG%[GE(71YpI8Q8j5'$&t`I%0PGAaa@]P7:p=:M?r85#oQ6$XTHo04f]ljh)6l5m/9EW%*-X:^QjB=$%^5[5[Ni%Z6X>dXSK)M8%52o0-8sl&^dqaY-nms7@.XR!%ibU3FPF.9PXE9^A(1F2mM<WHcg6duqja6(iS'?]>`Zkf.:XEpZZ+73LD&SHHCq7\/=XKW9K$6o<Zoao;Qt0BUVRt1\$#D*;J\c,:%Bb"ao,pOr5*S9jfjqAe<fMn-JXgt4fM2'JiOQ^=]_64n(L"kkQ<jUV!'?-EU7";I@c:YuFCA9Clr(OgCQ;%?B[d?]kN-m+7M92]o%51^Y*i5Xn'X$h;5318+%&BU&p2MD^d%YYdQ4b;^D&kQ<>G9mT/l@:PCGF"<K\W6tp(uO0g#Ri?iLSCKMILmb8X<s[8`7?J;SgIso%'23Hfdq[WBENiq*fK2sb@A'=:%B)f-LO1r88UtQ_*GQF[=DOJQQ;_RPMh>q"`L^>ZW[Kd70kUn7C$R9[f0ZH'MM'X24$Q%hf(Sd:%]kU3Keo-,-4OseWCT+e=J$*-J]"S1:(_*(J#Fg$sbDE@:pe$%gT42OZ\:M&B?7modP[3aLRcoYu,JrY<Q+M1;RF3nma+0FLb?-U4%gfV65eL"=Q#`*"h85Zh)b]`X^pnd7BJESQS.U6N75@53DC$D),'LKcDj[Q7QqqRY^C2^(Gblf@?l<?*rLEonnObV*$]J;*Dc&nun%?J1u.eVD`XFAen0Q)A$^V<<u#E.>T9V7^up+uem.i59=DGqRn03&BFOmceA?kX%3;T4WZA=t`;HnbG$r_%YQ'A9\lG:RC2mkY#]!%X9KD-4X/Jpn[>MRiS[PG7o<1/Xo<^DRNGa-Ld6d.]>:[I"TF":.iOManaL7k':*e,b+_1p/[]^TUf&o];C\DZ,H-W#>Ch\^^Htfm%CCL1Lb94HRYXB]s<!Z%D%`/i2DaGaVXjI`HWPKj6:b*AU;!DSi6I`MML)ULL=@Ptd'X0pXNd-1:#$VLYl"YF[k8ge.6Z"$?!-]qu%*7_:ooCIph8jMd%G+e2Vf(hQJL&kd]#GO^s<_+\*<;<8%#O[lRB2Ii1e3F,UU5YqB0+N^>e]$F?HDHuo&JfH(W%8^:\mDA1;C8^U%M^>\`^OnRjB_ji/`Dlf;$q4/f0'fB>#Cf[@0MiE?aE4=$.;H%*O,M/@B_eT9hLuX^,D>kl_0h$g3g<3eV)#'25&Sq+Wu]=j@X0?@%18<8q#$t5@>ctRE0gmc;d#<EE_*+lI)csV%Ld-MtOfj[1$/</Q@,GpI^??UGN0i<WH@q=`Sp\Alc##nXJCb%]TRQo1f$+g*OmN]Z%ohFCi.'s/JmbfEG]I?kp?B??:0*[#5")ua.7l=&`7";1=C\"iOPJHLB`E;^[8aA!Ob\:m`')`s=K0fPT$FTr04kHk&&5h1Fe_gHH%-CdU;/k3bF*+cq&\'5@O")PGr1>M3;e-6+ha"t<)YluaEg,n0ImcA6$rQVaO0&cuL-$6B`*\7R)[>YEpY(r38O[38K29nZI#Y6;N%"!`5R$fP(sKUO`J_dDIZ=1L%s0V2_]RB[n./W2XHBQMd)Cg6UEL"K^Z=m0'^hCNJZ*-`RCTjhObiEiE_g:P5SM1?Xiqau2l]M%E-%@Stp%77'l',_q]P>mSJ+4k%cYh2Ffo&.+A<,"7UHH@k%Q9`go*>a+.h)']O=<0^[&Clf#ogER(i`H1S&LK@6'/(bPCjlRp,P69dO%dDECX2)68<-4T<!:"@JBa,>tP`Ta]O7[@Rod_.(U+nQpEF09@+l<,(q"c2l/3NB?%WEj]B[!W4aHQ0T$J;hq2ftbDq9HBKabt*4+%TJ)`gYR`3?KE1I*)@.^Uff^[A#3+ffLKC#Hib!3R"?"D"U,ffjgaRu1K<q$oKYfESI6Q@EP&<Xn=,lcTq^J_hd&\-]W6ka.P5GsH%!&5Qe#k948Il#YKXgBsF^o'S9@Ok.QD+XFG`FV!3-M[#;J_:qQdqhu6UYcEQUpRaL3&'3Q3"'8u,>WGX<f;3S[++p74$4f=$,Wb>%2>f]OFqc0b/Y8'&&,V;?E#[3T[K<^EVF&4i)![<J#GkRI?oSth%5Ob&6+0H&PW?A>"+#$;.3Q&.Ga/LIEa[V3_XeF88YWu/V@@M!%fA*gg]"oW8<GjVJqi)Is0oT<L8Rmp;RbOnQD(JYq2L"jG0C.?c%0SVFRd6D(8(Q0-fEt,V.C_rl<3$P0ge-^]$7DlEcNM_=+;mdO%cSkih)B92"FW5m&Huln@NJ;[901M^0CQX?b@'gFmpmt>&k7A=DW0am_9RdUA6*$`0BP\gl>Geg=^2f&:O>>m"g8$HYZa\NoYfJ`,%_Yb.tdHm<cfrHDeMVS:K--@T^63Cq3M^,q".IBOp#?.=Uq%/qVgsAZ=Zc*N!p,7-?/iH;]6;X6-><i4j=*JS,`KTjH2O"9[C2Vit%p.i"\3LG>:qJ:E$=3Y3'G4ar*7,NAf]4.EWXo5M)+4d*Ug_g0dRV;-V=C<O_VO-RRBF%:bL<%3GZ%TTuouq#?[90HaiI#Bgn(8$W%MWZ39fqD;/oV\2.VPGI[N86Y7R0f6(RIdQ]41.*Ug5]+3m?SlI=WejIoLa@9+PRZ8faKXOS`#7?IIZGs:c:U3^4:mN-+(Auo`Fm3%;^771jlRbfIUX=B(T[PG<9otF[T$d[U4->8aDa+;2Gmg?*aPqN+,_b4"H"m7]kU=?\pG*LT3)3%T=po2#THJ/UWl%OX6pET7pN[(%47<nWJ^L@a>0u#mbScMNP!\i0B]JGM&U7)^6?t9;gbEap&Pd/!/LkAZ5E?&j=>Wi=%46'VUO1LpiSR0YXiO3^2,D'`oi-QHR98b2%%[(Zo*RV8,DmbW^G"mMiUCSJ/>LroY"-u1`UlX:([o$]Zl#CohGn\E@Ono!18A)!p%1i)2O,G7NZdJ2-s57$/#:jMUE[_?lC?dcm%)R`*8%Dc;-;)Y4=$NETieCnFE%WP80*D0%WETpWe)uTfGGHjs4UIkVAUk5km;O!UYN4)Hm2,:A4LnZ9P?Ppn8\]sqrgcZ%gJP=C#%/DArJHISgr5;k/$SM/ABDCbq=?kS6M!b2o"gKMp-U<F.<f>4<a^X*b]DOoWZn^B=c$qpf0AKjXLS(g6;OTU&Q+Of)P*GpkW$Q<I<%m,2QV=U6WAR-;j"SWn6hR0s:%>6AP0Y'4s?\f!1P8)7=nRq\9ego1cE0JV+cg"kMQ3tn"R&%"i-)d#ap.:<E"$d]Xn'QjO]fioC)%"W#_+0CNqH3uT.XU<8rRZufro'>7f%Zu$YXKk4&F70.6UoAKk'V*2\e!Nb_E:raR>jFN07#$W&Rqc@f4_6_+_Pd]uD%L-$kYsP7s%M-JFikMV[c[iAZ<SuO:V<P$!0G7:R;`0(&0788Q2&uOLT/P]lbP#!/f$9'YFS54jjl?gt]Rr=ccb;!kUV3)3#Gl]Z)%9O]K3DK1o%:f(t[Y1acOf*1`-fZLis4.u-3;L#lu@28tfSp2O+27<aGcMfDJm'e8gWHbq&BQ==@dU"Sgl1lC91#2tI7>Y.5@`<!*X9#nZMSQ]k%=UFhHcr=OiG]baR2NdO/c,-<=/ehOl6dXO?/Ui7I6.M&pquRd@&Hfr(GYUB=0)'uAac$7%1GTR#`NaRa>Wdr#+Rj58ENigQ[@73.%fG"gSAVS'ae[=KK1FrN^nVG)uQ4TgRpiNuQS7=s\AWE6!CPi-_VI@Kg6?"g0TmA["Tl>MS)I\2NSLY.R2pjY-6iq2Vg0iDdcm*9L%-_$MRM7nke:@OP0qckn@lKAl-MMHAob$2QY!&jopU>QLTog/Vu+&%HRm7T<%_i0Q"SH3%oE(Fd:`5!.-%]8Qf:dS?ES-t:Zk19$b%&ClmOC3lmO6*MAN>\E@VWs8&_):Osid!!TY?t-u9XVkY[/+J86ZS:Z\.`#d1Le@Ep_<>pEG"qXoZn%!5I6gtcQnGIjg:]Khmb>Q5%B4GCu'C^jX"0-!B1V/f6,=Y_I!G`3rlc^Z*[KQQoX0qUL`d;LA3X+I--0f@+-K$^+@DX/9".VrTMHLjG't6.b:!Z'rN[d6&Ts8lc%hALYI%8,hX6sL%/2hmfj3t$,(XN."1">6"DZ,8BO3#`hXks"-'e[Doe0f];l/uSXfE7qaC2a=Vi#m`\J,$b0A7Qp_,W=V)#<D]$T%[$ZF1MP=1co.'Pi"qPlREaqUL]jPN[7,(loR?s5R'm6$`$Mu\<Pkfk,_K">+3"?#OnS#:V]fQ[6Ca(#WL)Z^^7B+hLet,rc/W-25%+7SPp-T=bNEGcj*N43m2(Lk',UW!:9_\s`h;U'5InG6n:rLQL(0J;`UktEkRCaKeMeE#VR^itKYTg[C$3cM=4(J++k2]<O6cD-YP%h3p=ZR%XOX9J"!)An*p&:!cUbSC6WR$lH4j(9E/tec81i3'UH*I/]9)k)O?JL&gj\92Em(0X1Td:LH5rcISntfI1o?;+Io!;m[@L%WCjO[8Ap)*O4FgBna5)Y^dr[PFf8-Zl8+W;eAfAq:i%rCPk)ljFukeFbcUP,Pgl=C@#8>$o,S[d*[D/-NGi?fT31@N8&M/'>dQUT%$=)HmD`F0l%)LSi0t>ofmZeb'HVn4;gTZW.NK2QiIk9jiO[Z!%]H6bUDm\i%:XhkG)j1jAmj8-HfteE+F1ZEjPFb0)%Q:[)7TpR[%+S=eEF\"3mg07/W.DW46mABmPl:c4LGkPrdDpRcjDFJJ0/3'gANg'_MK&,jSf##(9=*Uj@X'SeZEdircob=0m^0!HU3KikVM2Af8%cT2c5(1d6J4i"inP+103$R!!<\d/%36e_r%>SXB5>L.uSZAZsUJRb/5VFDA:62uO'?oSjjkUH=J97_Z)7R8&CA\p#*_nG\q8@S6#%7@.5U=q,mWg6mb-JS+Q")?`cKB*F`s#.WqMkX\_maDj@olup2UGBXIN(K7Y*-Yl0Z>GlG6$&$f,6YcXD3U]i'R1;Y)HJHnS&AX'2%A2#S8T4)3?cA*%n>0Q5?>pR/<P(5:X1t<n;DUm7SJR:$*fIugOD+i^uLsu02i9hrWJPl0]!nfgoWY1(kTfmt8m^C*V+J7nf+N'-'%M]gjeN2O;dEaqA2N$Q4:9=9B^lP'0CqOYNn\fJmo>q\rm>^pLZS++_K;3>U3d(b]7`9P;6krbWHf:s[Q^jKj6MJn9,3c>3kHu*r(%M$2]3<_\[DSQtQ5),W=a^U@(oa[j62N3;+Zga-$@L!_IVBG2I@'&)`'>,ZH6n2u/X_FQX9m2L`uJ$U!9\F!;NK"AS$_JW2V4di:n%B"Ch2`Npldbc&0'ZS/ZLJi>XRpL>[cV[Wl5F0U[O@]]\HT)$*B\qKbYBCdb#jo,'q9F11nn8ETb(^$P%\(TUH]*KQM@dD-"g[30>%A2I=8:+',@;T\fP2OM\76+FOQXMW?r*Uo_JU;hop%%=KVO=PrYjAT8Mn-ir@ck&<9)cR<sg(Buoo99_O:hD'kA70Z^.D.t]?ZO^&%:[S?dZfg[Fd%oeh.[-f9#PGs8'#emVWkfWLeZ!5u/,Pe>CrHf)6A*01Tj0onH</Ghr;i0PC-pdj?f@6#4DgnG8N`ZVK#?TPJPjFa%25d)e,/Z?W^_cL5""o!.TM/7!.<u$+q&)mEmnbp+NGmma>=itMNB<@FdLf4iMCEpPWhONrj96Wn%HQo::b2,@S`kq4;??]Dg&.^:%.G.Aq3;g$jEakfN[@2rKdaHpH.o6F2U:jieZt89BBb_8IbnS2@")R'90l+(V7%uf;5EKBW1pJ0!BJ(j8>R?4[7W6uEH-P!$ACE!<%EP'm6'h_(\oW0O!b0qf<4U5nO0\A]*)(!a<+$g8,lGu^qjP,AF7MT5a"@aaQbMeA6;Fq+p`7#<)#EgNri/8W6FO7=9G8%To:]]h%%jcW@R]OpZ/93Z3_<kPu^$$-4=I!.AJ*/m%BXC*8%%A!!=@A-p_GG$H#"g0l=Ts*\DXs8:%eXK`Ph45-?BRaNGA\DK*.jefP8s7ko%M$%HNYh"@*=C81/aVV4F3l[;E10$:KI1k"4(=t#q^;Gi5Pm'^a[DTEt"]2'gC_+qH2lj>4i&M:.e2H]b:kLO[M&0phAuJ)URFhL]%\:@_''fV:.kqKgZO9X6R_0+X)1?0k&cG:R@1+mFr"*rm`'k"9bouT.Cq-:_Z_C!*;I:Edu9<K7R!F9)@P??!Qe@<&3pccQZ%T/,l%+B,:PJ.Zi;Z`o:2dZm.c'ZF>AfE:V$25#T<>f&g+.)e+fH$sWX0t!TMS&*`45lBR+!O?JjqGb:2b&"prZhYS&?L`CmV`PItb44DE%P_`+a<Ye6+03H]<3<0O1I\Qm*\0aG@6A)9i0g1rUgrY:06+F\X8L3TA]@!7A@W1(*o`6'IBRuZ5[cYq.%C?VBWRe\O%-@)OYtRr>%lKi8)AS<n3BZW`5,L`?T)1QR4D?,dNbB8N5'4&gU\%gR%!4D^5Lu+DZ:ik5XO_1X]NPeHeBIhWg27;]sLrMIV*p^n&ep8+3"2dbF%PL9(0Eu%"52\-\pH)_FVDP$Il=#]kiG?0&'KWiO(m2bYaWqHd+U:OprlpS6?36Mm4N`hEpAX"Vt/S"9SODG7T"O+H83`N%aC^<rK%SMagX8<qrm0*j^?=)IC=.-O5)[`sQ7PdM7'ndB/?JFGAT(pg)BTuT;`GE7&4TGj6GFM)+BgW2%&R_!q>TMU7#dSjGt'WAk[6App\%fs1(+("/rVipt+!"k&DGG.T1n(m)V";2BCPRi=Y,9p#)"VH<_;k"+7-k6n[rZQnU'7lqVM>=8#\<Go.W2RgYnFpk,47T3S/1LuN1%R@PLq7+74u.DUP^ejL0V*C&,"`XF:.SX9mk+Q[@o,NF?*("*hkVflqj?npt_9olcqTl8I?@lgUtB4IHbFJPVH0W&qr0qCR#JO$A-%&5n<Q)V*O=,1V/I,&JkQ<Sopf0be@,8==:^-nVhs/Wm@'iL1sZqc^?6dTCsthE>G$1`GO4%305BZk-?8%7hcSK1(R<cHg+IOg`kd%$4VB2h@+,4ZpM>C4^IZ;Ak8EGgYeNs7:3UZg?m<.DiU'MSL:-6m3AJkXbgqPDWXW;<(1!Per!?`eSg;OIV:^o@tca2oShAHRBuY3%1f<@XDu-BO!Eq["k\HlcB3Aj9XOgrIb&2-XO("iHL!?P+l!,SjfI,)YBbNgjc6OogmG6R[R:$h@L6NP1>"`$C'o!o*X&_cXJ0YZ'%LW<E%>,260Es"U52K+IpI#-o:OUh(=",r*OaI!b14@;g7NAk#`/JZ;2HffTPUf0Z9AVme:4cqkehlu>1Hlk)NeBhoiFAQe@nl27G%1.=7kSZ5bRJoT25SITnuC9<SpLq/h3-$,kpqN>Klj%URNUgRFC=)3OAqmtILDWnPp]$Nks/Hlu4Ur1G7\L+!)&Q6-YYOCca4l`e8%=u3e?j>TT_?<s,J7n5H\dUiU0.X+/qVRi74K_@AjgU_7O8gQ5K,pD(YRg_isQhdaG640g-VcVL!`f]E7CbZ!R6;ORsY"ncJ_l9=a%J@)prltPNSNf]><]:'0eeP4OFj%2Ti(0gZ9UfD<2+@_2YA24M>qT;g3]=K0MiF`2>BZ[1[48drLN3nK_n/@D>9_;+gohabI]-[af%Fm`3`;b_t'EJTi-lff+sE-<S`h?8r6<u]h^cUXF8Rl[iTk$:qb@c*X-F8V8_pN\?_2Ks=Tdl'ullLTnq07Q_bg(Q(/e+#2#@'I7e%?@FqHZms#PfYk)lZs8b!'.\(gg-aETFdo:&S^6Z%`%b`2[!C66p@sk#g-"2I"Ke:kN+IcENg2cR(L&<@W:eB#X2de\>CO.kS7]^h%HDmW'/a(c.h+4)Zm:gISA+R'O,Ad'Qk1CY8heZSFERQ^[rH-0!bh,$`?V7=<.shcMHY98L;eF/kZ[UWe>FW"Y(`=#*`k(l3:-*1h%FEkF*c%]`1ossFpAaSdZjq'%-?-XC]edZb>b"l)uR]i/(_HSM1nFN.n!eY6"9\)Eqp#p+&Y-C+po[?W+;E_:iT_*)t^IsCmH93Ij%Rq*r2mtZ+Le0b(5_d1OI'8!^)^')1CN.;2?+V^JMLaLXH%5^r:T\pbh^=E'Y*NP0-&8NITT6H:Z1gdtOC?QN)8fU3\Ni'"N[<)M.%A!(ecOj:&.E;`-jV?)@A1F6^(TQmTHRiqt3]Tk>K@hMteb63rf"]DK=`]8qm87ra_OB/o3?YcArg8qIp.?&@"Ohs(j>t3P3efnt7%DF@#1IuG8KdkZ0$V)1^Vp%>^B;WRd,880)BFp!'jB`h6M,tSMOeFln'ZmH^_=X$;k^BILH%g)3L7J4^nI:[#WD34J@ERm[SpMW<S%U*N<pTMH0+698_<<&cZfAW7CM'KQ[*d+6%r/]p#Uj=W<4p`72u+i4Wtp-f3XX>I<h*41Nl/QH#jbRL>h$L&mTK+u#!M4%,DB-p#(%F:iq_0f8$p>-YC[d\?OPnhu2d?leGV\o&4JNN'5j0U2h5V)anpSAA0TDdf"lL`jnGeHF5pNds@[@32/m,U:*r[tI"6bt*7X"rZm\%A`9<9,PkQP>Q**?o->Y.Nu>@#:0[c-#jpKg+>O!j+ZS]C8;>si(PlE4mPJY.Z.rd7KD@2=X)$p!(oZPDB4o.7rG!4m>*9$[0USeP%_3V$'Z=T28J\U?T3>[*)&@&mk',`L.>iM-:l0)2b-EP5;B)SLjg'.a3oah%RK7bp\Q6Y$YUQ2#/pqcbdXc7&;qhK3?,?kXId)#Jh%ag9)<1\n+m>;==(Z,5YqNeAEg(c-0XP**^McX%kiQE)oNQ$\!?O.7.^^/qjh`qd$(Dgpl<!SS>'jV(e\CsoAULf*hYde+>TO.%5C%r17cIlPQR^XB.R,&RR\Eb0"uGJ['<hJK"Kg>V7l6h*0>_nBPO[];5e@=:,P*X)3btM)026Ji;qsfmD>^>"=>nqdRJ.Q,\,,LF`^F%aXK$i\lWS5&(F7ID^+V3Ks5dI*C<k?F';.:VP-c&eAGX'QGZ+lOYsJ2CoMG:AW31F%XKCokns!7*QKTLF%OYS_)\cMQ]2kq?*'p$%)9k3&dgNl[pG23Ee>uOo_al7@^H@hO0LlNI-##ZP87<\XZ'sdCb/9'bNTp'4A^V/Bdt6;n\qss;dU,Jq.c"cHpL?'JPbl1l2mU[K%j^+>!OC1:M;2!RDl`&s!3EA;"*jR5>2JOp=B`5o<c_q`=9qc6=Q4."tf(dD.(D+>\g)'4W#@c(rl>gJoBaq7'8]_l$P(;[rk]&qR%R7eok1d%YZ=l]9+hM#hM/%Kb^a%t4;(Io]`a/g_n]eEFQW%m1i,YMuHT='t'oC&t>PGX07j;>G"*2E4kA+X(e-CJF:crq^>Y7"Ue%H\k-X/@&pWQjV+a1jT8i1$_ZQHla!6WZA_'<jQh[=)[,C5:_XtFd6L=/5Sh%Z)6;*]'[D:.L4b.h[t(VGQ[f*N%Igd$l2MW6dV1]%$M1dM#q7qBnOs7gE^N_S9O0$!(jnt>+c:2@M'j$MW\H8feJ*@0"/YPaH;WsR-S]nQaX/6X;j/T!#8;JKV"KtN`PQq@-O?f:)JArk%6>OPq0iK/p'4eAPD/&$)8WpHW),^:,!._!*FqjC,;#lMC:]8SuI;>_/>uMD(c8E%(;Rq3Y/8S:Qa[W8;nDsJnP+M#EmT$3A[>+&d%Hd,B`%t#p;EZk>"*MsQoj/7m"+L@G`A!V:i=0e*&bVDk3ZG3&-EC:7A-g"$U\4WN)G*:J3lISgOM[YH48W\!cH9n=l>!7#:6)2o%%U*'4"%Pf:>;R0O*HN2gR[45\L/@riGp6+8tg!QpNUKQH!h?V+f8KUiF3`P3!)_LXkM;,CK(i>o>dE#ES>27qDh?U8rXjo4?S*Mlm%5]dUOSi\k+RW;C.Z063;H=tr=^'9f@d(@^@&1Dn.9ZE`@ZFP.>]ZUb_Ae:"r3B^+H@I%TZ",Wss@L,9O>5(3fEW^V,=@"H?&E5#g%HWB19QZRrB!S-c.]L/\E"5,CG]j3%:f$S6G[A0l%YtBu6*"9<mQdtk@HLC!F=`a!jnn$cX(#B*WVB'PN](:2[eo@X?Rgfte/ooel%0MIG=k/5a[B<LUg*Ghh-!<[>Ue]dF-k[`=J7raT9AS)o6;H25hp:5E-C-+>!MRG@KUCSVoZ"*o?;<FM;p$K1.]9N`2Pq%!SG02Do%cL%41_J<C"gehSXZoD=QobdU$QrQ,8o[t`(V^XIT'OfRW'YWo_mXgEUfduu%XRTFQ&TBD$,?AR8:K*6"cUqk5au((cgD>hRa/-#N%k>f/kfp2u9hN0Ko%R#'hfUsrYEM1]Qm0d`HUjB3_D,SntH^Xb=e/W3[qmd6lft0_+4,<Ru;]oiKA*k#=UXs1jV3b&%(!"N7d%3tI%6Y;Z1dk)T/BA@O]WNst)CmH$4RG+hJfUgcd)FdqVitX^531Qk7d7hY_\LXU]d$XKHWDb)nlX\ApDM(F'A<&2lR"dbKmFCHCSgrLE%j@h!>ASc*7Y.^tQm03j__="HHk5hu%Fqh>oZh:8[9<N%;Go-@DX+pR'[tSdFqEF`L5`ba8*q=r7,+5\p@+Mb_[guMSbkZ\pgU&/@%C:.*7KADN[9q1tQ41A[,/GG[_P"'pCX<F7VeeU<S@^$kcrk2Gb8gKGNftB7"%[_Z.H0<c*>FsW=R5*>\mAfAFXl4<W-E4*&3n9tX%3GdCK)47Ag[29N./(Fr?^%rKGBNORa9#mMUBPO<nM<9";]0Tqrp,VcN^",(]F#(`%JkK+,Qh-7"\_ZO"S-hHde?uk,WoA1_]m/4)%d^$uKa2QU`XVT%gdqW;]AdR0`9>_J7=f3I7ls/#[ql9n,1n`OoW[oX+qmbAr1hPBgAK*blENr]\JW5coKDUiU=Y2VU-`\jhq(>'H%,lM>EDlqU//R/^oT>910f1CX],kKOh7$L&qYhQ3.9a^57&+\kFL$lSn^G`jHLZbC1j5']DE%mG^l<%*5d+P%aK6h>ucHt7:TYkuR%m/7?`),g,1SW`Bniu'oT'6Nf%e@hHI;s]G,#s'q2ZF;W3p*](Rdt2p.6YCn#cJl4hNmH'0gRb'::CHUX%%Vi@NT\sT)g1k#L<fc$%S`YU]T$G]N31(lDou^R2TsHsLLO=R*%E[0KJN@h:K3nKtGjCPYZeca]35@OGBYK/d_tmQ-K"!ob=KpTBU?q2eGZMVIl*]PMKhQF;%B^L",FQ54np*i#`;c[i#:%jtaAZHdl"rknTN)0;I2"=5K/8;NhrY[Wgl-I,c4`o8i"oDf()NsG_51X?sDXMR6P*=+T%A+U]RBt_I%jA95/$[n=2A@+FR.ib4^Zj'QN.u<3$c?cPcS2Q\F2JZ!7RI3tRd']E_"Y&14#nOX*n&)t0h:11jVAC:sgVL1Te[a;bQCNr\mqff@%ZGh(6_GMFbeQ@MR\&rRFR!oED;n3PRMcP_W*U;^a=kL?]TN@,8A'l;;1:9,O\k6fYk-85?mjtmPbd(Bpetu$G4&tV[LJ3!mIT+<l%\e@/1Yl_V-Z!R!BH4!>+a&gCMEdj%pA;@ERhKODYXMXcL.(C=`,g02Z7#uf#UWuR$ltE(pCU47P*B[tIU\#EtP<JDq%i6-?Qk%0_%r#B(?1GLs&#':6)cL1/#0tSYcGRqIY`[^>Th\jINccka;Y#`m(^2_Bj.YPqa1F.F-S_Jn$:/l1EWIik11KP&+lsaVLl"%9G>?3j>%BAWi.TYaDIcrQ1NOQ]c"fc?U9[[u=TIr4)R?:BmVI0I=i)_`+fm?1EU"\ghA9gb-/-6!KOND2*Gc8U6u[=;@GdSfIGn'0'4N;^=[%V7cA&P>*'GX6?\=KtYm8fWA$&6XOUlXbj$V;2TlH\>LfgA9t30e.oRiI:A^k/b=ob((fI`mHfn(N*]K;bX1+D@cX=l?VTIuE@rr<%aXL#3_GsAj?Ls:(XI]CJSe`&FMj\(!o'JfEG@h5D)]:A0MlU>4U95SF(dI`Za6Jn^eesF9`/i_<Uj?[$R,.V<;-aeU6o3-;[3%3'%GC!J$Uupt9@5Tg(K%WC6;ot:\m`XQA9fpQ^.Q3u!LXX>'ohOt2`>rifC5n04d='a6kO,i9c'rW0NJol;mat'kSO7\%mGBpu7V:9X%5+\:.Mp]VaTrCt3HP#T%R8kJ!P/Z'-Zmi_Ldkrn)fFN-+@;&Rs1.sFBkKU&i=^$N9Z%ik9))F@LK6-lNH+$Q@Et<`lj%qBl=WQs(%P;=7RB9jc$GPm8d6/4/<k>plDLVM^5WH:Vn`b/99`1a<X3],L2j20/TFP<3(4sp1[k)$..`>*W3H<f:]H,IAQ"X!N7qs0N(R=&0#%kh<".:m`8Q`7%AlA^=@pD1j5.d6*)bapaR\iYEOFf@TW?lr/,,Gdo3u`tf@"#A8PC_`'_"DH7:uq;U@j?_<:5RqktJcJObY"V2Ua%2pO1afQ]B5IHsDA/NOrUVh7,fLGq47Y0IY&B\,T2iG,K;hpq:2nSlBHhm)]\QflUc!5V0^Nu/Zd2S2cGP8S`lQ[2RiegL%19KnS;%ci2BHF,/Ab-+#k2-fid#`hp/2h82hP*%$rmptfO.rofJLd*A`'8=-1q6O9h6Y7R0E:(RqESY84;?Gjf;@Y[.%,IK\h1O(e$'G33W%S^/1OB0V,H&*97=LN$.MeJuW6bVgNZq7(F;iFbY$_d4kBZ2nGsLHgM\dOV^]pG'Te`lZZ8kISKQAr7'?B'b:k(i4$$fla;6H**>q%KdhTM<<+/_CG7'F`(\a[RkMN.,U-5/)t26qk_N2\Co/?'fcj>EZ$($4--l5PaIo$?7AN+O:djTTKg__#>>R`QZNWdn5+=\EoJDia%p<r5F)X,=P@CjKWmhkcH5kA&$qID>^S+.=j#_bWaW5D'i*$H"+B5I3N/hdtLBC,()Ea$^&$9+a:Em@LkZ#\qm6fH&4rPaN.am@]e%`Fp>>'Q.Vc^YJ3_)W;!(_/Mm=&JTM;F2!V&ocQ]1i).1$7:R!Z!\5=(MH:ogY>%]$GShK6Hh43$al/M4ZT1rBX\#Z'&:ZZjjG=n^%1i'"$g_$<<6dic:o*\RY7W)jF"0*4;EFn2%+)b3*5(.j-A`JYn]s;XU]=nm]Qu2W_"VhK-s'/l5hq>ZK[(:;Og;@e&#E!8>-h;k\%lue_GWoD;6^8k7:33S?=C6.V#Sb,a\6GSVPS.t=u\KU]?p!NHioZ'0cI2!pmh!sE#^@(qW0%fR;8\o<E:5Z:QcgQoE.o./eG#I.A%ZSV$E+""s9?%!t^RU`UC4he[TbGEi%!PA-o`-rbA5M5ABfT4&:]eCnPY.;q;^Q82h4+?2J^4&3tfPO66h=l*B=?5%$m+\FJ575qK%ruMtL\2c:\m`+27fT.)$Ir]O?lpk,0^Y3p;Xm'`DH@Ge&/B$f?5<nN/SfIR]l_"'HV`k>cR(p>KrqucF-gfg(n!J2`d*^#e4[q8B%C"E!)j:oUSj6-1e8Mdm3ef=#^$di>5qDhQ9)FjlBfSqV#-Y]oSWT_s@3aH7,eG$Mben9Sq*%H,A>*e<].`m[u/hJZLP2)""\80QA%W+VWuo4LN!>iYeZN_i,]S/1P:=LiHu&\6T8[kTHFr642j>&.O>:<i-.g?VX4X"_59h!A;Z\tIH9,tGPYc59877FSlABY#)R0FN]6%)\l"IqnOj/RVpX%Q<"eB9fLjiC[8=[.h<:fGN?ic\]rco\RhJ^FJG]:`j461\nN$K()'D$$UpXOR]^b3aNYC+ejkUp)l70j5M/Co%duB6])s,g1?SpRe`it=p=@b:)W*$WnGnoJ!VAjZcQ5aF5d<).pK_/iLd<$$]V$0?;NFGX[&$sVr\l%cP]u&9-UZk6*Fa+;_ZtR$J%9hgGI4CU/'Ql0+I1u6#\CarpSH,^U39fL4R1*R8,SC)GR@d-A38=_Q*DH&1CkaYrM7+9\!RptWZ`)e!'RVl(,j8G1&)GO;XaIB<'%5'^#QFJDs,Z"O*Xd<*oLYi0\i/2Tl!3*.G:7#&T>UZk6pG<i(m&WU9O!:!YChf%'Ii9_]gk#6QT5e>8l1Mjt*WG_TKf;B[5a^'kT%k2;fCd!Bi`oIu3&=#VTECQ)7MG3[T4o0a1Y^fJ[(O%n:/J'Us[FiI2$Hkd'6WF&qKk2SS+9,.[c4j2N3H(+O_:X7JsSJnjg%t/$?%o$E(4_ps5ZW+qe$d4C_H=m#.nhGAtWF2p@f*(tbDnG\5RDjY6mmcH-C-gFc.$`'7:-[>2%Slk2omP9"(\)jt&_kWI,lY.&'(V1QS%R)>6#S%+YpEdsOSbhZ.f_VOV"`ZHMQ<THiOW#B:`W6M.drmWL(U,+LZG:,HPcPF\;LN[tb/LjnKmN0dMYSThh2Q/%IPqs2S4.>WA%Um2KY2bO;?eG-m(Vo'r@;TCN=:qZ6.nO180VJ?)Hm`8<onO2j&9\Bh;69!cYo$O/Vh:NRE"aWPT`YR_HojIfUe?0nh35r.J[`HM<%rSZNUXhp%aS2jPe7Ro[#=QsK2UH1K#B@ld!AuSK_P@k[g2C7:!U?C7^g)'2El-mP7n+kuIAd+-Q/VM%%IT;`fCm??e:?@7pH@29R%EV3WcL,'/b@tmOeF-FjqI7\gf&,"C)F%;HkQ'j(rSipQSqkoRCa3c@RIfD6'SZXDS^LTO",BVj8@4(-:1%]#-5_dD3C2@PN/-4'o%X"]%2C@'4?dTVuGNu]F/!W4C8Z1@W$/A.lMGZI'ThY-":S5fYue[V(nYY0q#Zq&'Ya)K$*G;IdOT"DjFM0p:Kj6i"kO(3G2_cOuB%8j(M"8pU"M_g[<OGq.q#?K#e-DB'U"5_ZgJmr``3]=A#Z9D$]N):E"g%IBP%jr>l>.$ToW&t:[,mjL"NIphZeDoKb2Y/nYC)$4TO%jgi6Ok14-Q.rk7F^OMq9'-3X0Ao;75=^u1X;ls!8Ed;`G[nB(FKLN^#m!U1S$TWr]<.Fi`Iud;1@iCfYF)/*AHDTE]dj)`lEF'WR%YskKIO%g@or@!!8HH+a7jN=uu:M18;`s+8lILN8)c4n8TA!d$R6>@6q&EA*0q2:4R@lWP<0e-tfCb`*]^X$*OE>FH0@d\8tOroV"%r%qP-R_@Kdhe-Gh7WG:Bf;m5Ibb0lcM2-@2GIbc\#7I5so>e@-4h>VYY93F"4iT@&kqM3?EN2M).2A-hghR/P7spA#56t1k3HOr-%_@Sj9l[-!Zp<AB5.q]o1EU_EZN9shQ?.lab`\q&I5C"S=(VY9[h+QIu3d,7THotYYYgphjHuj684]HJC[M*#^8lAa@@9\).io-eT%AaUmGS9qqHlc4<[GZW`"0ctPY:OG(`hi%r[HenQIh9!2;gPR$Od@3'*?K@1@KCFnNF$F#l$VbuUZoTB(muPYtNaNlr[XN\oag`HU%qtHN%cd$ni+,sd0`]?<W02D#WB'`$W)m=.=$TEa;[+.rV:Z%4krHgK^UGnZ`@m>;/rSsI/jeGfL9nqW?4RSf"S)CW:7XFrBDb]2(%DW'\,)LWh6@K-0Yp.>)8rStMr4Ep/kKp>if5N^(?T5Qoq$8Mot*b%1Z_2[oT?0dVJ'VECrI_,Pu6q2r'70js)h!\BuMXGTc.V<$8%]6K:]OGo8#\NFquY>JTJRDBr7SEf3">I;p/$05cb=WX*'ia1>;kJHMF$e.1XjhWK#BN(8ce?O]rV+pU75$V(@qP!&N1c8O%.lMQo%60$-p=u1I8:)MmN$saK'\0lE6Hia#1]#<0Qaa2r6cI9"a<j>c_IknU`7.7^5EV=JR\sfd3T!;nMMmMFGUM&/o?=-ekdd-4o`8;.E%%VH?'?Yg]DeBgZgH*/eC'CC^a?]/7VaSIWI:RadjSs%_%qB@c>&-EaQKSe4rB:G9Vj2Ilf/^RT7<-5Vq5?XbKULkZR>g8&ZR(M3@%\maG9HTj>:c_4n1)l&Y6UTspH@.f8)]CA(+6]-DY$[Rb4ji5q`pp7!enu:\]>T\,3pi(:heqKOe&K&]h0YU<N@0=XNqD!jLOYp'L%%gAJhHJoDi<ei.U18.?*0&7E22a3cOYIdcip\d@mV*f3dT=P\+%-8JgP[`f?:G0S,M"M^mn'BP:Pe+lT7K0RVND6IJ1Ua934S$`?%W\W0KVoS?JU9Q/5bJVTW[!FcgR^(\2\&?@,iUP]3'a)PLjbQcaZc3!*c9j@aM'H*Ob?WqeU&\hc!BdAGq/@)A7e2j$7fgmR"$!-7%fp!o#=]]9IXQ[l*J7Al$:^l:#.%@25JCD"+R&oG*M?9;*#&m$LH&VE5EXX)b-N!I!m.!ks-5KRFDd5`>`>7R)<=:`m;8/mW=h)"f%Mt0j_fm[($^<)\Z72=q%*-YmCi%:rW?f1>3f+d<c<@r"V7JTF&YFM@9?a!,9bUk^H9`:@l)VhCZQQiXLOrJ.P?,&`rE\/[u<*e$m%^>)P]Y2;@u[^4TYRi$9,@kF27FoCIJ%5h'i^T"c;(/ib&E`Kk#Z-r6nopb<RQp'm"XQqg5@BVeLk,@U4^GiHu?bb1`;="'Qp1M8;%QNbn3Rp=K^:;(5AlSj)gdjfml>1[]`JFG&sW9ZCQWo)%jPuHuE:%gR4a!Aro3.$$Q57oV,='\$.;)2D,mtahT6Zr>SlPIQRTK6=`%^PR?f2Qm#\lM=5`V&Z?Rhu#4to@ERJXc+BJ8#s[SfXdNH@RcAUf5F!BU'NjZ[[aJ&hrLed'-\N2NtV>6G=mSLV*dY-9rdM<\Z4Pc%FZE'"^I\pe:ka0SmboR:rC3@Qid*@u<8)/C@:A&cX01>j6^P=YkGmiLApY6lI[#/+Zc5.%cs.TrY2@<$(/W%d\#SaQ\Wob6*4nR\%r=0Y<d.=\O5[D.i(_0R=@t&5[a)G:,j[2P7*Q^NUAAlh,lM?M/f2*g-UDuY(lSfnE5&4H=WDUtLWTuLRWo"ucnJtJmXuP(m\pfDb%`Rf%.QVhDp\pjT+gq'NCaN2CHeFbp"4a*4(IZrG)b&07i?,,0uO]D>iQaLOT?,+:r]cOSahrLedo@2fi?*p2.O)P#*GcL&<1tEF^%\<s29<W-OPSN]DH^WBLS7VUeA;V,i-<POYqlj.b4-<Kl0P36TRR&>d@rBsu%\a'%9W4/;'Y2@ls*6pZlKUAZ:f5DhhK2_+49kFgm%*a;$<^WDG.Yjot<f5G=PX/^V9QB<ECop]d&ksa2F\ZXh#J)FXTm?-`2NL2Fb@E+=0f5EE%?Q("!Hgre4r?c`f6ugLRf<7sil4h2$%/$H[:*33,Q9F#cF'%>=SY[bTB^JM0s5%832j*_rVGb_1bg6Oe$\#Xkh3q'kkAKPBmR!B<>Mi"uX++,O/fonfIp?bo5=?63KqQm6K%<[.8$CPf=Mh**g.TW_[Lo'43Jb3EWsY+.Q)gfQT.jj>/#qV7imlf\#f?!Y3iiSa;'PIl=:C9IU9eMK4rl^+([Y?p%"DP$h&YSm5:%Il2knrnM5USb^"Q4?@u72NQ^"!oELi^[FBD:JZE<]6QG6hjUHMn!n'_?$_"&H$0/9h<*7Kc0*?@gDccS[q?bb2K+(lIJVm[pPi)V%hlj\5#N*:d]RB;@glK4a+9-Z[5FZ6rIWAu^a"IrU\l1-RSm5ROIVErlh5T38a.NA,pu7.V#?s,^lLrKkVqsTu(QLYmZa6q9pr7qb%(]X8If<+44^f.^c?XDXZK9Q>T-!@t`@;d)8#QMHj>.ss^]na\sO4<gEpsRXkluaiEHgMnT#tV!Bfq*YtrnD?1k=/2^:.?5kal`!(%[6Js^?!?WTFoD55)rGNc?#4C@IWhKsH2Pj<KC@dP#E0qQ_4cqA05PK5/]qQ;PBd'&^KUs#?[b!Gf^YZZ`cOf[GBNGm=2?s342LdE%5ppM)24mF?n`n+iW/^VCb%I<Zp[%^ug;^a79</V7HO'O1%n/>tXDD^DHk"PJ&ZT]^KMn6ZFKaK"-]+>GrGajU>$]h]1AH=[m^$Q0%f<:`NrHVo?f'V3hrnN!Kj3?i'm`#q=_@dB#!cFARE5+QM6,MeRqsliH]#C#?]lbh)Zj%9Cp-9Ds7<NL=Tr?j>YKt(hBDL0Hbt[tU%1X#[hf%0]jVpB9IIpSR::VU5lro`+'C:5b'CUp4DRLa1LkL(HtSLK%bf3b0I/cFZ!g%'nhh?Fed&$X),hUiNlHM-n&jn-ik.=[GO%^No6(N:aLTo$,ADAa\WGDr0,K=tP4jN]Nne/YWYX2t&\e%;t!lkk9ME?_;"Fqb4Y(IWXA`KC*f+jD=b7Iu_;#hFMk4:C:BbfO,A@%HgFld@hXEK%G]Vdrpp/>I88%U992;Ude]LuZ$@7A_Ii,QD-Y3XQ#1Z85PjC=-@Wp=%47V&I=:rVgOHgSOb^KY(QJa*-$)$m2-*AR%4fL4qqf$=MZb8g_>4>A55&!Wqm`C0(gK0u:4TBU%Dh%NIQ,cri5JqQ=YPr\,2=9JR44!q0>.o<4Y]::6g1-=*g0;,9mg!FY]ShPe%F$F+E2ds#;69rk2qWZh@V]5D0SGYlikbkJ2RTjap?UPCte^*,jpM"#0o\qrPQ.#nUmdM#X4Su%+s)Tc`pf$\apj!A0m;K+s4alSb%L^Tk_5F;-(KbnO72r`2eXPnV"8,1K`A:N9YpC1@>?UQ'q6+b]arE+\NqrYqYlhXrG@h1cJ]Dq:c^rNS+[$(GLoaQD1s1J,Y',Unu%b:Bc82;mhn7JRUp$94mF5;l*/ro`XYFhBg]lZ`<Q.-4!)Yi"ot0$4./+.gESpit@BqU=G%TJL][_R_^lYMooGNd(B>D-Y)g\9Le%%V-DmO<b(%E"j29QZ7>k<XmNTiY'fHh#I+$l_:&.h97im@]_Q(i+OC)XIZI.$-&[tMj211GUn^Rq%B`RE^(<**oe1AYaETPRa6ZhM%/VpO;^L-l5q69_k>($6U>r#g?`,Ct`M$@k44M+`TnFsmLDpDTX4j:ec:ql`sQ)9((3Zf.H_oY.9*PkbgL&C?;p"[>)_[ZO>#.UQ"%b/mj8D\[."k(KJrn`l,3hsVK3pVjgjp=;;&[$e2$N5Yr^qreu8dY$jIT>#GBZaT\-i%@de;?)&Vos^3qU@9k$Z-G?R?H*H&hMcq\%RhbOP`G/gHm:f,H&@iH(rI"#0ULri3S!Bi#<9#sD"N1$JdcD@u,r.k1[ams802<f9F)$Q%bi#\9VJn"g7g&VR^q<GF3iB!,@jSMp%rU,rP`n1FH1dBl(`f(-_YsY%_0Dtqu\V\NU]diqWA?5.UCUW["*ZM-U]RFe*oQk5ZlM"jg(?4u?V8$>r=bt6c-SIl+)<+cp$N[-$%eAP#5`;0@e\V]J_<g%8je,Tu+Km.Rn`2(XC\aU*^LS"EqRCqZ"#3n@+VD=0CgggmRnb8F$Ljc5qrl_LYkOOT)2WB?J@lA/<`SK<p%XJ*qc2)jt&p7RS200]0:1:G/i#5R38=T6gapscEm06Sg^cc$\Ro?M[P;KbZE1!up[YC:ol\b^IC8+l3)9)Y"[:TMMX]_GD'qYm/a%p$\oc#G6If?XLIF1?Q5os/k-f06XD9?Msc8qXme;p5@7>gBT7ZY<S)ulgj6/j7;[-hcF*/^\]U&:EWX7\?l`&f,[JRJXhge5k@Xe%)6i[2!mNA1B-Ijb$T,UdS,n-=8tbu+i_7LpOTh1\,0haA:6n!X,L4Lb--[^\5^fn0T_Tnn%/TWgJOYGO5b!ZY%='d>IEu.)VjL>V%^&R!uDij.Sf$f1s*EVg\Z-BD#N]f?>f*-@lAC/%(X0uRu.1[NcK]B9'BhY!;4*hcn4h%SgoQ64U>Wu6ZNMd5V3m^0E)u1h,+K1d5%2ucQTL!_N;[i3b2AlIR.oS:%oa:"uRc0)QMNpkE$=(f!Dhe+L2I5!LnftY-Je0nro?J)i4kI3)RT#E6[..PC'X5=o=$Q&4!B<nH=%"+PSba:M_Xn)BN)S_CHoTuI&dHMDQ"pYc%e59Kq$]R4ner6j/]gIaX)r8GhYKAGA(]Dq??[4aU+pNJk%=?a4,Flh$EmG#H`gYM\r%@<_N`<LS;'1,cBRs)e-frjM@j`Y\[!1`rOH&I"#LmloXaHi!4.X)IJ*ETP?rcg''V9Bp6$G5T8(-pCnj^@dX7YS#Ff4=KCQM>hMf%g4-]'T5G[!Gi@Jds"lA]p;Pof?QXb"nb3g?Z`B0nm]Vn^qSo:q[9MPK=9*S3FI':M[8%Zofu^8KMf*\7kI!NmlorI=DnimZn@AFE%qno\^><dSKF*[*KL\"0>2nJ%A*aF2<ft9NKkMUEWa%r>B]Q22t]T;GBrDk"t27<G*6T2.bYL?O_pGnka2s%9`CLW?b@rb+J8K4h?%,\cj9MT6t?Ut.6c(14#kUC,up$ao]F=VA3I56!->eTQ9q]lmlnKm#KkNSLM2rdL(*oP+,Vm`2s;LNWEJ_>6q+_hS*,CVPdW^ouPL%P(3>>r@u(93sB9\!!qr5>!?Q5T9Xp$fRCnkfS$Frg)P$cb738q[l/,S%.Us(j*L%>6hp<bg%P<(lS,Ypd-4Ol-i?!=[*RV+6=tnA%N=-(7ftrY0*q5^n[t2NnK:C]mis@UOaln18Nmn<^WNiJqoL93LPK.-Ao]]#8cfZ>KnESlma"pd<m/1L8mI'A,7l&Ig:8kU,hcRS=%UoX@aXW,#LDK/X&_^9*FiZEd\j]'qU%o2KJI._.IGid?!'E;>;o>:[?BcjC]IjMl"ijD?=TuV!i9,[T690R9[B,`g]qV!%G+T=RZ%9'k09f_52D:itcd8jq_X)OA+Q:PO=ueLH!6g6:'lc_p=Fa8Xkpqd7pW5J)71cILBj#7oeti,2!CI_FE^4FHMe]eUre6qS<:nnVq_%;Sp-mikfCQ;F3GA^PEY;],nJT=-gOk/TAd.B';Y\/r7`.l`]\(D&"O\8E$s"'j`u\DGT6!ZLVMmHZ%iZOM\%]F*"\$F_*f%jh@66%.LfpC;)>\$YA!(j>5,m5RQ5S>AbG>FCT3/]P=)@`X';;!FlW9lQ0kAKd:j\i^^DgHO="iCF7I@pgnCBb]nh"r@8FWam)?fl5PIB4%(B:l$hBMQJ)VAfn9*N7)297$X"=cEqg.<]`:b`+(6dl!"2mZt,:V*8tH(As?11APkM/gR3pkPbs+.7HIelsH-'UU:kS@\&cpc>_<%4_5MnQ58bbiH2E%SD9K13I0T(SB=D1F?JnVaG>uIT2*9FUF+9codVca]@=d]`qUn[F6_MJ)>^SE3hZk&Cjj#]S6J(5%E',GC(o?k%)m`:Ngg_RuG]I\;A.p`?DVY,O7iOU$oelprAUAQJVA:m4luXOrAE]IgHT[U/SgNe@[;k37i_SCCFgZT(k38@[/eWrgWD!8kU7-8G%_:8"@N@^2HelQ4WgZpV)m?(QBjF[AH=n3tD,YQiEABBboo2i6Y\1YO7raM1`NQ&Z"-'npTIN;)<kJhu\99/?/\G^P$3RAS3<R[2l%IHr04<n!!$54bA\^O(^$,hpUa^Hf2D83^r1Cqs;%G5WF!Mg+'l6+uP%b@3_K;"Ij)Z!7(Y`aA%Vd.1o)^qGAu%:$uGo;HQ`4jB#/%naMMJJ[)['.U)?Ia0MLk(0')k4l>U?D/l@7Ke6Gn:L/5?D+I7qrV`XpHcJ>-J3,dJTntM<YDT'>2@IdsbmS.s]Dqah1(8jMrkF@a%kEf48p[dPDk7:JZZa@:^O[m#JIXZtUm$k&f+92.!Gk^+OK-dp!s)$bFiEtIo.ijq`[IG%@khuEf)Etd7:+m,A0<MtA\oR<#g-7Y`%rqZ-\h8+T-cN3\9hVcNCCWkn,l.J#cg%3C&YrBpspiQG_Bi$_$M*66me1=s`s*Oa[90\cgr.NtA`ddEss#$9Om),^PnK2V65:nbJ%ZhX0Bj"GW9&-#,_J!\pOHcpoPC6h(L6P#N*B/a,Ng1@&/VWtfshCk6+@FM7%/e9/'2]E:f)hI*p#:%qA/H'5Gb`ekN9AT0ml/h*S%T]^(cg/>gEpM%`/],>FT2q-DR@uZIr!3@ot(MjX;Zfu=C11PjAD+dEpS<HLUWNGTSGEs^Pff2P*M8^QYkOD7g'Hu2GB3`(%R`6-H%g1iQ.D5sLCB0*.+0qE=-@QYu4L0NLU0uUab/PV`>j$N+1Mj)fWc/<=&+gi/\30DC7[%2DspdXKdZ&ZCBT[r>`CUPtRnpfu'N)pL]%18,p\4%#"j4s:!0]1oD3n^IQD-I.?ndr'=p[N0kl<qKc)kG!$`T(64:db;2<Q<J$Gn2U7#_+5fF]V4F``qk;6dOOYF6h(E#&(qL)%V*JG]<K"$e9Xe>:(G]U_Ri5Z#'WtRY\q@[u2C0S0Eb-+-e<kH">?7-KF:MA"I]%/iOj:`jiWrgpn:K!m]6MKZ;m>lWU#;@T3sl(D%hqQ0/G)HV`*)-8DNR#r8!7M_@MOtE4G\f>a+cb#dSuIZ/h5.P8k+/BKZG@`8?,-rc]HZ@)1m3*(3lF)E\;>:T`?1OdZYA/hc2])r%o8M9n53:g>H]KcCegcOGN5HoO/:JFJCbU7ji-$#a0<^cZ-=4am`&kBCs.!EPHM$7UT?eUGf</GnZ4grjUVD$1*Jb*W\.48:/(hgb%kr:c\3:*cPU#ga1^*TjtRZ:1;V(l*V[uNj]bI^&JhOEAK52Nfm0C#He`Pmk0$,O]n(VN-\[dKX[\?Q2V+P$_NMDr5+Vd:7g3[.<t%+*<,S-Xqt&D[l*'#_b6*oO8("RZI22gB=dghP;ZuC]GQ\!p-J\Cg>[Z]=HC-OGJg!Z(p8g$oVq7QhG1<GY`06^6+aar*F%$gFkm5%KYG%r@TU04lf<u.T:Kf1!8)jnV#n1uJE!4+!qMi3_po_-f,2(LiY@.<'T[sk!43D(WkB%kW&XO/k/<aT(.r_<DMH`ij]aG,d\+TR%J<@a$#,'seBQ4tnVFc&2R^g<,W<"&jc3O/W3>-%,,_CHs*cZ-7I55Z8c761pVB]s37uR^"@W2oJ`3p'k=9/G9AT1jb-n\-P>1cgV%C(8NQBXuU)bq-?*45MQOL/:O*_D!./CFfOhE`UOC)ctR8<=qA5kM6=;<80jqKa/0'6S";/]fWgK$g&Y`"P-73ES:M"N7`AtgQjIV%,DdG[j.2f7@u8fjLQRo(7g,tSRQ@#U\2o53n9B"rg/``&.T@'&a\pUI<Ka%H])nLP>Y7d^->5BaYi+5K7cJ9pNN['UnGr/OQn<>%%9Kt*]?6#KcI+fLK/BSY\!kjJ(UbSEfWe%42Ngo_TT_YI],D9-0+J?f*`qonrlA.fc,A;T^/"^I-=+E?"T7VX$]Yc=+Y:s4"WGN:m%:U<4D*/m*q)\.\#G@pVp4oFm2*B[Ps0Xt;;Pc6"<gnYV7BuW7H?<Xtn:WBu+(=*0:p(?PXc:]G.Ea3;3"W:4J?koC;P!4_:969#Y%E!YNgaF.M#)Mb#@:p9t0#,tRI1Z$e*CoQ4"!3c^X'Oe4u,9qk9q'_gkVORfT*&4eq!(EWa,qXeY3p:t1qS_4L4!N'H#Sdt:%"'q:%#oP7X:L\\^2o)8J3unlL6;@;c+&#a7^'JF#AH>&\Fcrgu,gj>XEE<AXo0Bef:.0U_XIQ=N<8H4'oQah7X/GM.H_.UM'!Z02<4t>H%r^i(4+"ViEOse$S_DF$o9GCYKq:#C!mH"bB@o9*m+Gp(,*M,jp:E?&+J]Q[4fQP_!Qg=e[qZ>e^$]mh45CsM<X+7>@"L>A`.M-*k%I)s2G6Oh!D@jT!aUXq9`Jd/*b_Gh=!'G0$X#G[7-[9@a)&SN]c)CTI"LZJ5La&E=nDL9;Q,[%e1.T1BD<":1Rr>sBDYf$U$CE;EB%$nX5]ej^-%DEZBQ7\I@jp/&8Qnl'P+Fp\6d)N?urc3Xddb&TI'>*JZs_d*P(DHhDoLhHr7ZV;+(Z,d^/Un[X8K!;QQ3G3kg7\kn3%!Df_5)e(+`<?7+0!Bl/hZj,[.[u-bl<*LN.bASBg&W(ep%*ou)c"7Y23h3knjPVFlK(Kmnp:Ao*N'P-_j=B40Ml0sF9hR'`ga!bo%*s(5NhTK"`2$#X@`Zc!(cJY1[.`Q&f&>:leCkR#B'(MZM$*uM!J3_a+,0Z0m#DogW;$-FGKn=T7Kdt=4@.DM:*SOP=ZNK2*cPs"P%%/5=>a2[`&n=TmNd&&Ur!cZ?R,_Wh6#6Fo$a\fgdQXZQ=_Ml:Xd7f:PJ-_P5X::g],GKT6"N1X5+dLd(R"O?i^tLcos&2/37LG,N%WNMqT)J/0HgaN\k_)C^:Kka0>)/[DUYI1Gk5p_sZamlTWnL!JW!'@sX&rq%fQ%Q@q1$7[#;/K]\TnR8bKq_1,^4Hj*8'P#O3og#k%jXW`s%2."#EkL-m3Y;Xi$,2c?L1b-q@p1=mC$=+Q9gRg^;9d/lN^gQKMl5X'Q0[-B_5h!k`6?$9gdWa!,rJgK=p7Pe$Y3*\eRYe?%o4=1P@a?%<Q^=Mm_/qP<:p#<`W[4o<[3S4@bON:r"KD$e:p&C!VP\3NKLE6oP/u5$4Ck`$P.t`m6+/7ra]?4jfnq@N;-aQ]<;Kh?%(+>@\*i8d6'U1ZG"Pn)`YCin>(<hgt6-u`iR$P._8@Kk+ka'/CDF$Wb:bA&Hj%MnL>\$amhPmFh%'L+lBS$/^eNjbKJeXq*Ysbr+%QA?;i8/`QQ3J+f"6]a,Tp9a@pbMj\Tp8oH?)(61l5`&l[.+,($6qZ8AH52R8)I!e)GcL#8+BYS]='cH>JeWf:@8*mN7Ka+lZG$tT%b9`T[kS63J$^9chN$Y]KS-YEK'#glTe,`#Oc%7+F(75A'ftN/Nq08YImnu[lkg$ijL&tgNdg;0`O[QK#L*TCnM.B2:8/?TUdt2&N%4sc($2jA2cdW,o<MO:fqRhNajLH&/4hVnJL'[+CkDeqkI$C3)@7!OV&]o#=cnVIf3]n2`k)'eA\?6.l1H3NJ;"[T:H:oKY0'!W&\%dAh6?-SiV1<738[2,V`mO;ok".Z#ES2)H]V2?qjc3gQdua4Z'HDCeAH@#8RUKW%?QI(8%e7[UJjk<PNgZq<LskJXWM)7pkI(JG0u%+g;%,%KO^eZ;IWXiBo1HjZpoj4$XqY0%MA_``S`Yj1m]"Y\k,=2Ulmm5uiQO$MoEj3C'+4)[%fDcp`Lp`51Pr$<0`'(S$dHie5*o%BjSq\EU"5h&0T[>65,;pe)q^=li=;0Sq1bt7rR?='F8BXdp!^<?I=!$(71IrZkaBIn^rB%L)jsd5UQ]gMR:H=>He,\+.[rQVG96r%SBVNlI6i,'C%AR>h-)Wa_DdHlFW]Y7`YeF"[<+p-eq=sXA&5K?=T"j]*Ctn#0bTIueAK2d/hg1GQ*GnYG\^;]UsH40QHS?^DA'^O%VD'1C<LW3+EE@-Gb+!+m@$>`IXc^\&g1n0,F.uF2Jrl;[SV61,ouk7n)/e)OYK+6]M,Cb8`L\:f+,AUF[[")u@]aBF_#Vl][=CsP%ge3@"T^\[,(t`G"C+Eemfe0BsKW`JQLP5#M^*[ZHR!#*fDasS^@U*VQ+P6p6M_XYc?B+K2;X7oDrV<0jCs/\fCM@;sj":TghiY;\%,eQl&-E2tK&Mk8M#`YYn?sBU`cr=0LA1<d?Q;fs2BU37!LY,F\_]`>kaMF0e/FfT3C6RGa5hJm_YcOn-0\VkiFk/(#5%KWu0#+G=%Ek"]f-<8pHe"0b[#\t]@(MCQ&aVK!P^:3rPQYCTMqVX'd4"jW!X,?N>9-gXS`+T6P#k%bMd3?F$3\=>TZ<(`J^h1(4<EfG6741#)%&kOVL9$m#b9rPK#@)TZi@sQ7PO)-<O^lk.=D#pa?^=!;jRPO-+jJUuu"s'#9X^!"%<\CV^$RJ:>,U/\a6tn;'+QD*T]24nP`3Kaq%VHi?GRrGMK\]6#5-3Jg1Hb$q>;P_<Bgk9,YLWKlp),1>,2ViK:RE,YI9+up^F'OK\NJMC)(K`R4<#?M^E1K?DO!j8tgH2!H9al0N%9MEA=l&O5^j]l>j,`m+1LJH0I%H]7p5g[,1O>sIh3*h`XL`+Z4&dL<+AL0X(80W$W.jRl!7"fUHR8E!/#SNL$.S(O]FV5))DoV2$%l)JlW,SF1_6K091,>,));>95]8K<\fD<ab(%$70b8R03\<NBAF@(<T'MCZH>$a(Uo]ntYBE[qE$54B<PA%J=D?ddI/,9_t4\_:H(%aU$42!lq7?ech5>[Xsck7:NX?9C(gRPWk>l""PI^R_$?7BYBaNjr)LI$R?abTljKpFT]7Q;lX/K\9YH](ETAOlf>p0&u3Cn$R@C>%^j,Z$Ou@j+G`h"[P"(uY;Y2GU!S8%aH.i=-*;3^Q#mOoa&?0e?;BL,k\9qKrlK7)O6RadS[tqua'B\b.aOqI^aIA)C65-As,(&?2%i<gon6J`&M[\:WQUGu)$.C&+;dCQ[72KU:*Z"uesD7!?,2t0LX^"hZ]8`[!]KtJ-OOgd:`E?)q>$mr#"pVBP[+r!I2=$>"\/c<Fm%+o'>4jK2gD]Le(')gVi^)?kJ]Pm;I;GJ*0Vms'G^J=JiD0(SNH83WXDe$EHIL3bEb4,hHPi4>rtC<d2&-"rAc:#)Bo)&?%_Cjbe\%AgEDmJ>Upu:W:S6*pG)1G87ueKD,MGN(%<am+*Qnhp(G`[Ri)Gm*WP.(`Us6RCiNVI1T0='r!j;[L#XJCI@-]QP`9<#\7R,fP#,!%r-?^T`SOe;VCEVL#%s&UZUp?l!\)Km^+7K`+U?EmP`7LZOA8&lZ^j?4.C\8!JH_&$g]@RR&W8;s:gGbd+j1&<JuV<:T*""P#^dV_%QO&)$hTK#Kc,0]00k?aSEMV[%W4KjfUn_Oc/do-Vj"iNjTf<?aNPUmYE-l`g!=&f/:lE+']B&7R8YH4?3Q3?7;dC#[$sUMT5n,&U%95=*mD)VAY`Yf2E;L0[nZ.:gQ%].gjO')<WR$h/t[W>1Nl@=-Q6I*dZ\?1p]L/u+k6Jd$s:4pN][;hfW.i-chDG%KL5ta7F4&3nq%cnUq-Z>dZ,'#715/6TuWn\dNs$l,V5FhXnL(\2ulFh2#11Z17/*/h;!qN$F>8R,uWo1NKQ5*m,Bk;[aP2?B\fm>3>//<r@bf66N;%RGWrof'1Y;/s17L(G&qWD&^#'lYBqD"eJ4U@D@N8AE=?,6P;uWOMlqqWXrct,Y$Mo^8EKr#MH.g6lOdT^OdH5?n)P953tq$a\cgs%Hpc8K('9X3s23?b"iI9d`[&Pad@u4,=sU@@G@[=8@6IfTfoK:a,1!MtKba^`O^)[X('u88U5TC^,VYr]_Gl2aaA\-F0l!8@)NYfT%3UE!7[,;pM<CI\>Ch+gr58A[PafL*$W$$d08M&8`Jh\iliOjMWjbRI^Zm[[E7QOiXP2cP0(1fn\,(X</,VZ)a&SX3M9lX+5CX9?n%[KQ,gR2/@Bd@u4I/YY%/"I3[EF@tkV(;X<X?1jG?B?qGeM`c\*<j\g?bn`a+F:'CYqWLIN4'TmE&^*W_eji*[;'TX1M.DUQ^fVm7%Oee0V(orX%\id<6=nF0oV'E1G6S5W5bd^,KD\6]SP;4("^8Y[%^d:gABc=2u8X[g'K4?Et8u:+^2E!i#<:uL/[+7d9XWU&E.p.qe%,Y#_l^`JS4\:Bt-/WiSld:nPnPSmj3\ffl5lYND\PXptj$<C]GJgHi0W"]NToK*,6%@,-QkKc"`-#&e^As?i7\.EIK.5G,D$B:Ah%d<Jd18g8u&TRADuktmneZb[c[)`tg&cUB`/#UC>tqPWKm&4t>>dDhohZ,@!)3-O]#Jdin.JUY0q;.>UQEC\V$KaJWlKF1@'KaJVI%KaL3-jJnW"J0VqBj:Wp^]+p0dPtsgq.!T#GT,:<5'cn9%%MeF(VIq7XNYILE#].8O8Dt%\9BORA),2:p.4cVLJ>s[M87@?P1bX<\%Q#?,d9?A]uK1hoeE_?EK[sf]3KP6%OV3GJc&RD'<1;Qb[_Jp2MEd^QR_@ao4(Q*tT&:,MU.qiWWi%[G2WJt@":U.b?.C$`&9<l>;%j&k9u;`n$:'eYu]`!Vj-/[</*9<l>;9<l>S*"sXRm@esi6fm/1_epDF,Dp!G]]M!f4J)]rfV^+to<aKUU[qD(0H;gDEi;r-D<3rX%^i2S3^p(aT^p(a*?l0I$'U0erTb"7P[Q?ndA++!EE.Fu\`XA,9-p]Y/Y#o1tT'@#oOR+-L=&_IX]Pt\Z]Q!>\9k6(;==L.&)Fo`m%$oUQ,QKZ9f`ffEr],6#VUi&`>M\8V/MZkWiM\76R)78cE-+)Gg.n3//@V@!OWWF"^U:OBEc&icm7m^E%79,"8I]<DXkAlDdbWlJA%bYX=+bX`(I`.jarKB1@F%0E(GePL]E%jXRsQJn.n`A/kkHEg.K$=B#gMI2TM$=GDeMI=Ba[->BbObc\T_b/8i_$L"Fll205(h<$:%9h,pC(aG2A"Aj&:R>)>@'f72KnFEQgN/CO8:]t8oEX60+8do4G;@k'0SjO#C4L'"%">T%fk(d=mm&3B.N&]`RGlU\Mj3VLB=:A[U%[g$N[6jP$b=C$V7_R4p*QlNs[&bJ.;+cHTH+cI&.&B5(9&4VN8Xc/U.&HRfa:F1\!Z]LhIKI[ND1U`F^Nua%0E:gAS?qM[GCbms!%VXp4m#:2iO)/S*Mq"NPIaUY]"/1T9QYc9Z/hrK&Y%&O/*Lg5FH(2U63*mS^IeLqlS@pe/-k[e2l#0[bT`u#peVNZ;86J13JY\`g3%0T&oVX_3-;gkTA./q#;UDnnD-=&[t7pRCEIecinpDh2JPGD5RC;X7oDrV6MI2iah8h6N-9NK8[SW=rZ-89[Y@`/%M\)C6&)80fLs%O;K:ZW";^S+Yc_h!WIpF3/bsTjnopobp#I6\1:W6S/]GX41K9]jSTf3'?MU)`X*i0lT*?ZmXn';JF&f+c4K?+:.h^!k&]hi8Z-68%I276ig)T"e*K(lPFJ-UP4G!QK]JM)V0G77DD]4-oP"\\+Yfrg7VntJ'+Yl&].fRf3[=KYQ2FA_+D3=BS5%P-Q<\Uic+O%Hl&Je]2%jO(<IWH1H?$j<i@hTlELho:ko&ORWA81\-p,eFm<ck\$1;h.7YIbDYO)e7ru(;'d7C`VLa6<F!`D<6,0q`5jYh9C1,^nN,]LW0c#%;"F!E1D;M+H4O0P_W*'\#VH7pAih0S%;Lig'g-o@L*<k'nM<Y]&noGgh5i&\5u1<KF!AIn6k2>XO;:/PGErR?"?Yhs(1U`$LC4@$%f\!VX0*?lJ(+"XSW4\HGc2])5Q1AP1Al>GkRO6l0SNP9`Q7sq&+RsR"%L<F^kX@G4Zk?<E*?`'&"eiApAf'n5Pd>0`c7O;O+5tQq%f\[0K5uY8V4Gh8hRSH.F+ij\-*(2<TVW22e@VXnN5\[k$Rp_g_P=6-l&71s!V1POTgoE/5Cp6P^R@[g]rW0<X\t_1(,%Uk7^rX<#%5UihiCeom\K;s2l&:t10Xp&rkob?],BdM0H,*6VNWA(cY<8AIH<AkTpb&7qCHTtmX1WMBh5iN=@,EJ9?M6Mt.@+iOt@:3S25d@j&%O!F:i&]]/%]A$qu+PqBO@qgNKWSfTo.2pWVkfu`D%@Bak.h)CYa[VR'@j?oIaN.i;aO1>m^0&K$%"aU1GL]XM1W@2,BOh]G2R6:!%)d+YLr+'"?N21f)EDp_TUqn/IK_&W_(g/>EN@Y,U,7=M<'nk]_K9P0U[OVWj%Rq4>4V_mh[M&jpk`cDo9uoeiiI/-W,7C)2"lYmZ%SbIAai(9.M3]HFt9_!"NoE6M^M`)cZiU@%>@cnKoEH,ja+f<u;IcHpf\i5@^V?Y#8N,Tl;Xc-[qpM*AZk]iP#O0`9QAhJL>"PU/#%VJO'Q!_Xe[YJqtZ913%688]k#?9<^'qf(M0_.W-Y`_jJGbt&q.&f1?O_*1\"KZUsj\RpfOLfYj_>ca`90NP9ihC'k(=j+,-hP.NF%&X\'(F5)m\=sYka[:4+VE*Bkg$g9Q5NPtN%ZbDQk#D+?DDl9IbCVM"I"_rrLlKFg->0_]!ZXP7qhmD?EGm<8:`,l4S&J[;RQ'q`!%X!%0dpio-dS7F1s$2D'pC/Q0Nce!4NWGCP[.D\8[8Y%"3heOgA,U6bj&ltkT,Om1TEZFpDl5e.7N]\Trm,1R3)H&\^[mb25hC(IB%(.*LS`B&0Z:gI!R:_Id'*X;qWXJ?(1JnCPdVLj[-![5#2`3*rtrR"p!Vm\#dA!:fU(4un?dAKRFE:VuX2CZ5=BA9!9FcV$hcS:YN%"8<A$N2J.0!E7`lOAm`WOH:LL\b92je8[Z<nC@&piu8HT4W?ltD]u%/d4gh@]Y@XYn!Yl*j(_^tN7/a@]m@s/M7leJj\Tqfa7^e^%iQ>iW&m/Q0<'fYHmYZ'7itfekW9YV#$TbB<^/V1j5i"R.M^g_MN9nou6JSMa$Bckm`JDA6EEU;cSkMGBi&sT8Ue*4on`m5hKq>H0%#.S/*Xr.>5W`;U0,fVPeWUU2+d9=p$5T8'qkDj0QH6,aD/S._D1BeFZT%`EXR(S[&X2S&?0Z?4e]EuNr_*VhLZ;BL2(9;#CFFTR"%.).S#UJ=s_j.50PZ#^-k7IdE=Bf)ef]-`PC,a(V#B9Y=^L,r-:"pZF1@U4t<9DQL]elhK5E84L63]:.W!0u8g^iEt=Rt;dUqPdmk%[feP+^ilC<D'=+cVLVmVhSk?%Lac$X)%d*>d(30B[K..-nE@q!fo(Jt`)C45ZqVp>"!mkA[N<f9\o`K3B=>e2\>s.nZf"PW`\SM6%D`Ba5J177?:Lur))SgKWYGLn1e/5;;fM*NC>$6-T"+m@.,A_r8k9[ZOJg7%GGSAjeias"/$RG,-N-1_:R6ch[Pn1!@SO+S/'abN`%HD$5d(d3nK0cHhUjEmIton]9@&,Z`MTT<5^Ggs":)\R'-2KF#OBd$K5-hDRnB3JR&Y%&,k'6rIJU&>6BTR'-p6KP3jbs52$CU-'B%O6@/6<EVB=Z.?Yu$r01=W+nX[Nl[M"&i!(&,2P0H12<nXDMd;G:g8UL`S7FJ^(q-]IS*oerC[CUYaTgp>3ps;Zor@C6..FAm>MKh%$rm`LK+eTX#=&@Op],sk7QN4hH;b@l!GG>6-_K[[gX>:)!m*'(^D%(ZOfkORH3bNj!^d)DO9u;fs-grS7m:HM6QJZEW="JuQ0.fX%"3hlu((_&&4X0.OH:rdGo0>i>pA1p:SJP$a3qmi+,G7Crn_[oL(tlb$FUcqAi28+DVkBMRO?ctb2L#fLBj*l]i.A5=Vuo\C[s0cE%<+&!&J7$G)Fkd/f$J&[<*mG.F++uoSF#8#u!W.k^@>/,f,XC&`Mj="hn8?H2.bGo(DTc,T,o3u)"0Sm:Pa!,5LT+k-TEq2n%36M^%oM",qZ'bgknq,pG<>^HC&*coL_XQBE!6(,1,45O%8_Z`Dr;ptqJ\-YQ&*Pa5(VOZFqFYQ5a;a)\lf;!+nV)0N#&Y4[p4i7)iZ_mC%`r]cD1UaH.-^R!hTkk5*WG7]G.ZGc!$N,CrQoiBCA1='AjSGsQ:">oK19aH^d:3]u\2Z>Y87PS,(reA11$qkF'M:VZ$@_1?0ie]Z%2AO;8+WoZL$32%Ml?D`JM(cin[U%Qj@Zo/OCJg?2>4IQ3/UQ2fOioZri?dIT+b]C6%4'L9T9"taQWq0o`E(*iD<YYX.LcQ,-L8Wq%dtP:V[qi]'H.jOZ4KE]Yc$t!gX\nna5VrUhb12J53hV5)K(s@\>6g5o[qbq>+]X.'!2.LM$oZ&7]?U`&Llr'P?AOPK1cu?09M$af%RAGK9LTXn?[MUe?;1jT*,rQ%kc3[da5p5-GmDK3;$Su+nQp)&I^0mbTL5DTP=Q(GS$n4uAgp"uk^sNPL%L!N-o16rZ!>Vf'P"/0U%F9IY.+_bC@f(m62<#Eml[ba()"u5,JoH>A77LZEA(lbe#7`dU\m,Z_$_DG+t/O^@NL&nrMn/d1+*^G;h'G(orJB^DeHa&Q5g>RfD%E:4k&`h52?nFkL;.Tg-6.Z?<U-GEAoaSo5;%3EZ]H%UI$%]_KI3[lQ3*_=FJohC"u%A#;YB%`FA;RJ&m\A5(Hi<h)'8AT$$cQuJc%@)eb(:Dn3.^nVD+@R39Y$RTGpaI(MoE/"b?'H%m`Fbd=,N+("?T.o_97VFW#oFj-]Z-N1a11WGc7%[j^6]qPFCsY:"W#:0K/Z&FZ%:P$s#$%c9XQ;jrA^s(6N?rE_X+_"X26dishn"DgYop"k]!0:InZk1,MD^>Zeq[=qWj#o-%$'*S7J;rb9fNU=BLeS\MV/1R1fM2Tq%,k<LCEt^HGl1.2mGXIuZmj+Q).^BK);^4!Q_1C#9M-\t&+,Q*oMl\<6Fam!L)9)k?9LC?2@k\c@EArd8ZO5-Brj>'h=#^a.\ip4?%")WB3LlLDYbpY7nA-Y1"H>;u3-ZpP0<X@&*@gS5-+&*cnj""9F/S1B7GD9uae$ZhE+B_SeT>Qm`>q<k:$;#G2`WT-i=?KKG:C@eN%38/M>8IQ5'-'86@b#)`@CZSKV9hu/-"4@soJQ)XNbm4Ic<)I*m'dJ>#/Rj)7\NEFt+gneB(FQ'VDX7&Lj%dgV5k;Q5$r1,A*&kj(%V>CuHVg4->b$^l7l9[gNKQuK47O(;s6LeZZRbW3Y\.<Vg\e_CYS?j,uVWA$/i,mXCEYk'X8/0F4hUZrIPU267\J#?KLgnBBnWk"f%.c`@!]q"ls<i36<JJ.)/%PeQ18j:;3HPmbFL0_q=+COU;J?hZPT]I08)=k/2#8Lc,UuX*ZEs?p[I7ABj58g6S,38I9Rj%JoHeGtq%=Sja*mce&;nSiO7H,TZlatm_lY3-\hZP>1>R]V+>W7_N7jJ.ejGnbYZd_&^]lX`G]500K1"<C*)+[Bej:;.So;7^F(,N:*s9^Y9!%nVC*/A^p\S_H@#>Xj"_gTFV'LM)cqL+'c6ZOFk2TNIg/^+I(5u.Hp)Xi_t`-T+N71(T[o="\XG2Zu2u[oQ)+mkr(qi`C">n=jG>\%(32T`ZZVh'o>*eqohs)%8<WQjQK3FM&OQ`(B,7PA:8+_YOP'Y48`!(c1sT&ck`Yof^LWkbnl(u>6F2VO-7R,X&E!lo/*30GW?%.p%?]ZJq(T[o="\XG21p/nhka/DL"T@-#nl-N"QFug6Ku@<+CQd?A]N#54Y'_n)5^=i];YcnLP,)Hh/Eof`,lPB$ZD9^,Wp$P'4cOZV%\?QI,lDQ?eE3t<UpuU^kRpO"QO,g\;dY1]*+pXN$`l]J1)$gagPW[*[ZJ8GM);NlulG-Wp/LZ3I7YDm0Yp9Si/."Z$)iHc>/."V2%PE(VD8J4@Fi3oa5+c3HL<1kKCR6VWu$U$GaBX15j8OAMSL"0f5&6Nl"$)GILP8^J-1k6GE+eU=l#98.Rht:>tOB/Z5atcISEf^9a%*$cYmK*4M]&Gcr"_$/p1(,6(aVS*[r9JV']HSSBZ\4kk#G#E)_NgY9_TGWoCcVdS+"Eb>RhS#Io?+n/AUQK,\ZFiU1._DOu5i=#J%[Yua>)$h0J&M;*i"\CJ27$7tCYq,uCgW=P)ndTi$BB:EI6&+2d`D`GYnleRMGr.hp)B*&X'*V)AefIA[E.<_]8X29M)#e2b>KA\u%+eZL]B%+&HMkfKZ`'T[C=%t(Z=bR!:a/!*Nel)SYC_FqZ(ciQ79ZIXe-JM5QJu5uTVd4J[:SRs1&VF*SQkR>S,9:RAkUFk8U$W9@%7e1WBL`mE4q*Hb>4qooZl\\G<2[\?dXd9pmc[.S;TH=K`M"m6`M5<P\i;B@%_VT9QJ35;NaQocJcGYt^!mZ%:b$nd=n@<6P7\">K%)29itB,u]cYeM_UT)<W-D#s-f#bY=s?D_AX5a[oHKI:_c`"_;"$Ase&X_,[=$X+EUhkY[$@`^g'Z#$%4QI6-Vb:D(:12Oj&p/rdm%"epZp$Ijm#8\Mt@^OVZ9Yd5MV!OipK"C7g=`!j=kNRmbi:'\UO<!\t+"d[B='h##f'HbP>*hep^V,5lY6/1'<@l`7UQ,hOqZ@0nY%(&KOq2Q`;==Tsa=cR.@Y1Ec%j"Y9<"Ju)j=#a;JZo*dcY:q&mIB0kWp)D@]ii/^9B0u^+.U_klqQL2!n7R_)Xd:SoQcOTE`EeqQB%YHd1>q[uQq=X_!r9];/RTX&t]p1VY7&pbmCm:;h@L_u;jOtB^XC(s_%B>Fo)ZVDYU"q=Gd6MNn!c(s7:r,eTZd4.\i<+%>4iDpfH%<%sd,2?8=D'`c(e0,`Fdn'Osn!@#OX'Ump3=rjR."=aea#neuZGa,J7m\q=n^(BOlSHRst^_'U->)oacBn4>QX"J!Ne*)N4[qhF,%Z!0N!W#OuBTK*Ju,uUcn"C1if[1"KVX1B[_Htd7P^502^X_6LkRPn4C`4eJFLKJ;uiN`@o1S!Rs0Yh#<g,SniMR$P"Z=@&3/7=@;%^t0NB&"b6udLFiS/N^)mNE:j5Y!D2^ie@0$1_=Vk"\6N?nD%jk%6s=]-tPmD7+e(R5S4WnW(IL+(oamJCQW>0>^:<ROpKp_4%fXu%ZBW`Wh$dGP!^o%SS[lOR,3%lVKohMrKm"RYKd'/)UrZFK`j1iE5aK8i";X\bOJ#[WG!X8K3$-%fAh6ST(s,YW@Ta$VlbH(UMb/FU%VQ")TK5#siPtusn[-?Z>iW']:'d:T['d3]rCO1dXI]Z1&%XJCk3SrSV7ReRQ9iY:LBg+=@O\M4.b6rm$F>=5'3',gY,#I5,5[l<b%?fZJ^[gM?')C5ebY`VZ.+2KMihig<jOgI4E.YtQQ]UtaYcF6.G,i:"]NO(kr[S.I8@#UIL04TObi.O?A&/M2oKE\B--%QEX`[a$*%8hbatA#0VB<7!/O]'?7)>bFe'W6/e25W([@Ec"(S%:*pdWS'ciEjiiZ"#6CmnW'@_L`#Frg.Jfp=B_%WNDY^<:]rfC.1HQ[TbIl%%&ZR#(2j^4K'%NIR**Fi)5k<0bYbJQA(b:oWou<,[!(FHHLSD5s^,E)G(q#&TNl7D,7k%Wf86/qr(sWT8QQnMRNu"lfO??uY0l`#b%6.srfTe8%(VW0(eL;S*h"?&W)_3#QT^YF"h%D=?G;,8cE\L\Bf5)%((k1(V<!,+2o.pNA\+_Pm_)[rMpX^k5OWQ\BiN=@TBA.fkZ%kUhBiatHBga%7jo.&.3*$#?ta@4#\b@k\!P)7]m#V%GZeRA!BP:hH&qIi(j_)U:F[AX-3N3iS$Hk9S,GDSI)VK+J*8/3S)RQp;B3%&V7#=e2C?J7)?F1/1Hr"\[;T.`&Z^BI-:pSf`Slenu3+N^^*5g]0]Vn/?glpLhsN6lXOe`La*$.L6Iq`;NPp(,_itkTZ/B%950r@%K'3:]<F<^oaV\qHM'\EH+Bg.X3(=fT`8_1NKVQ0^1Ppp-?Ys;kRufS`YShtsKLmGPkgYnkF:7D*maW.8Dd_npO.J#Fre[F\$<])X%AKir_UfFY-\nbN[5#'QI`&1\Cf1I=E[2DVtq#cJm$Vt92I#)uMFf.JmYuC3g_=1aTlc'Gq/-&eN;!Sa4'X(n?PbWp4/n@^$A\p,L%5b'1sJ.fsqKTd6a8.[G2&b1G`qG9lo"@:_`Q4:[PD'PYk+;THl*rUU7/HnqK5k9RTN4V-4:eNN<(]iJ18[2JJC#hWETa%%M[!^"m%kt]V=A<3CeO]P"AjLc1_VaXP2Xr*[`._rci(.EsK3@g5)2m/>tEl=lC'nPFK8XLXb"j=@\e@,l^hDC*FWlTN)\f.@H#)s2gNd*?S%9PurnieAooMs-N7+PA)\07qD\R0CU[W\%mJ>ZVJ?oHps9+\MtoZ[il'n(;sG3Ai2F.nKN4-=o26/JB.BM$pXhT*pmm=ZdGf1s"!n%6c%J`"lY*IZW&WpLeE]YYG7'#@ZC8O&7/'HE^Fkj/;rVqkYbJ3Z(rnp=Ora@c*m/D"beEl0)85JY1,dI[SH*[/a#8F\l.jm(9uA8%!iDO(&2D#oOCX\0Y:85jqB9^X<0g-%BaP35Q),*;AZ<Y9&>:V.%]HgrAV%]bg%>GiV%ttiA@K]D'rK2i8uO83!bk8b=I'@$?"q-4%Y-_T<.ueC)l22.b$9]MG[]m9Hj&h1@4N2T'MlsE07Bot!U+;KGkt7X%P;?*<3j]j4Zj9UoI3$L/YbWe/di)I9FJWPF=]YrWe>5\?%HmWe!Uan$Q(m;[t?;u)_'NXNl?&B1*>X64]ToH^V*I-sCn)\d`2FAkRC]U?T3C1WHYX%PF#XDVi&K3#`P7kil=Q@'`,;^1rF6&cW%-7>%=1<%Ct+B]=%RUlR90/$hA+Ye"kAjoDd*!m'RQBH\b!//LWYX6dFA5(@OJgI^33U(1M4LkiOAm*F#->Ae-]PZ2g4?'hDN"i9<%0d^+EQCVcD,9a,kAe$H6cTsbKVNsTC[T2E[#Y8TlOqlMT"j)dX"VZPW@_C5Jo.OZ6p@g9S&h(d@9J)/lbU)_%&0^*&(meP]1^>b(%\oN7\6@DbSjJPDa(C?iS&^k@/MKn+6U75e@e,^X1KK'<]^c[ApOZY+U,`kWW-.2i@b+IE`S"Y5ECa1;P^3CS3X9bX8,H92/Fkd*C%Q9'!J0WGaY*I'7B+\E4Mdu=t!,p5\3*^YF274`SAP5&!P=nEEN@];bY=B[C57PKW:h8d*;ZJuf)-d,P\Sd^k$,G6<G$A_*udW,sl%bP-oc>5B]A9ZDr\R^"E,7`9GnTTEOfHeB>]IdYRMOi\7\.<JQM-/XC2*/tRTWC2n?>-K368rQ/9BYC,\rGtPu2<2[ddPM?"21^n`%dMh0]Uam]6Rlgd.!rRdkY[7R_'Jqq6=>Ee9f(1JYq]P;^8?J9sFiDHu8Y]N/ap<K7B1ZLdXZ_6#c?&#WI/R3hling8$t;p-&k`un%DlI>;AgPT]1:uM)\<ZQOGf=trU9_bf*sE6$ar$1Q+L-ZqMQh)XZV-g1),fG&Tpq%(r,rqb6sf&8WBi*%p4u;]X:4107W/M;$jJB!%IDh)P[U922WpREM_!_tG&(_,"B+YDk[JX4rLnH/sFbONZ]MS$UTIKP-Tq2F])gc4sK$]R.:h+$u/<-R.UNE27*MogulH#?#Jg<fZ%:hY0+2Lq0tQH^Pg.k/.8',31aQ/mOEQi'i]lOlco:rYn14h.).8JsYo3jqeF7M"A1Ceph%HkK#H;.<3;$^=\e1nI`!GG(&;da,5K%"`s@?alb0^V/-9REaZ;Z\3`Z.E"cC#fd-,ehR+QM!-bhga=YVZ]HQ<AYUQ:H;ZXaaC&**TR8>(EM9%b1@1B.$/Qb+GQn&VLGAVIh%qBlY6G$@\!.msWX0EJ9-+"c\_\gfVIbouMsktrYHAN+,W2Fe7K'#I$FfQbc:9L\2tLd93j'bRC;fPunShdhdK2G.&,iNc_q$GqQs%?kf'ZE]FXbk5K0oojgccF9I4'(gb%7[@Z[A@H*bM&tiR#X'Cac6<okoGj22`:d>dek3t`(+CbrL6@i8H2]501D0DmN?'g.mdESof%Tf=9_SsH92Q-Q+pM.Hk>R+!m5=[?L@e&#Qk_2dBi%"T.faj;Fi7io6o*X7t0BUp#=lpG5lR75*b@.7UAW#?e-]Y)p@Qk]r.X9_W&%T"U\k!ZA#d1;H<f[VPbBf-suZd<-eR'nV!KeY"e\Ed%,KTi+!@7$Q7[e\;fH?po1'Tn.`=M[0UTaA?]YbR5i"T\s4G]nC?eaV6Fc%fKcN[Gr'S+LHA$0.l,:6_\iQ+j1Q?u7T6\>9!.%c7d$q,V!N51!K`bXWG!5YY,_WmD'0qlI!#`<h-:7!nWOh_iKGD-,@c`@%7<Rg%dHN/+4'5(eK\"RM%L<Hi22\$52L4rXprNr@:(:rs/h'VmJa873S0boQECmR2^1po$V1YX!<,oLB54q2Gqai&/9Yu\H6XV@I$X39o%n5c@r,&GIMdu"DMZ^<pR]U,NC[r"e56OF`q(iCoT#Hp3I=&S74"kjc'<.K\h#GKRm^p8!:;1>N<ZmWgj'Vkk.Ak\:$M=I**5/YGn%3kUSpH\5jBP[GU-&]8^QK&$KeF5aJo2"=;_\rreY,_F!@G*W78amM47D)%o<gP:+53NSuIe^Ftm?cpG"<>MK_i;Ago=u-Fl_@loQ%M?lSi8h)Bp.4Zo4eTiVgY$+P_8:YBQ$Gf,1oNoPA!asPV'PF?j9.WJp.1MM:Dch%ti&_crgk&,#JJ'Rh#>VNK\S`OF76uHu>0XCo%R&@Q1+>F,c\M_YR-Fc>8:k^D3B+MN]#'Q<2::bH9+\8!C:SGm'+G#KSoNoNO8$5Gmo8*N8[\eF.KD%2,U1%=<C<HhlpMaEbg_O6B%i9B2W^59fJEDAeQ?6ORmW3(ZZ</a^a=M"iC-cq,Q%+kfB4]NcI:g8ZjIYq%Hi!>kZV3F6cj\7OA;CS@B[8[5K^IB!JFO?>4>qRO%%;u'aUG@'G&-KP#7F.U6_8O,ot32iYV=id&<=$_*1Z";N6rs-M5\[hoafT8`APdDn6CFl'(3kd*>h8VS^o*;^4%\.2HnN(VkN=rPq%!&=+C`TJ550fjIAHE.Urn^J2hSN;iLf@e-l8[5iHhB3=5=,MXUj!?&oaoh98hlB*5*,^h)RQ\;ZD$jM0?*RaHB_'.L96:;(8'A'V%iMCLYFY]3ngcf7UNYei/^..[IRk\pA$7pY&UO/.Z(F_uN-@3H59au;&5F%"uWK;:Wi:jZM9L;KFiOGg'`Ln`?PBMKa11b9P(cu7^%"peEi;M;YM;T+%#9$"`b.&t"gSg*Vr+%jb+l"c./G?mg)QJ_$g00s;X+=Up;?mTDl@Q^C?\eoQQ?UV9KqBC_Wc_@W![W.h7@bY9C%9Ht4M80fos)&(4q_%MBb>;%p7l@Zb(;IAPA#3K:g*0*/N4isgMKmQP\=2kC/,;C6:C0ck2ShHU&cn"f&+*^F)-KHFu]34sk6lD9A%,_&Z8BaupG=Sm[rhB)<[/g\"pY2,S3IA?<**]!$4:MC;Zb.N-jn0/RZI>.lC0/;JR;:ch!M?=B"g/mQ%^iJ4NSf%]CMr[;'VBe.Z%W=_[mRY6Ob<Nrh2TQSjYd[BtT[[5<dT!H%;6q3><0fcf;N0N]UZ,GHg%"f6$GOM4NAg^go!5Y\FP.QdeL=<p"Vngt1&R"2_$W=M3%N/9,=0qMCd5AYqAq;,`'*?K=FC7MtI=s"+Cc/(/iQ;Y5(/:#:C:pS9Bp_;fZ5]u=&P(GXn-q*<J-_F9cT1-op)Z)tc]]/(*=I\lt%@`h_:867.#P\X=4LQNG(;`82fU*KmT8Z?#((,dULX+H0#!(=/IKp!-8(K0g*EfYeAPuL_]8VhFQ$'2B@Xisbl_I:hO-_cl0%k9.@%8Hm:+!K)Ac^p8HK^rS_Eg*U5]Da3H::0q5=8\m#%h.'i7m-'_;Q%G6"Y6?GU?6r(??3?];cDF%0?AGt!Ai!j&.9TAgNtE5=`rIn;%'`3V4Ni7mcF%ni2pu?#0hIcL!JWq<LN*Tkl:6!-U<3N5[%J<j33@A&lCD'9Q/S"UX73meHI#8p)r9p16L^EOMZNb]*6?UjGnR0OQ%-;^g\EFo:&af:FtX56t]Aj01,%?bP[lDt:;T='WCZR-eYCENYflDt/j1gHTZ:oHOL2.jJ==j&U$c5P3"2*mhA?qT\u4DPfGB<>S'%X;-]?>2Uf#EJtlo][^-mjB5b0l<$bWc<<]U=j*0lCBEP&"qKeLbHodWNod>G.`#G^[>a4RQEig=Z^/XrcPgUt/VFnE\'nJ1L_u;j%o!oC()MQ^SXlK7RR3.;R!:`EJ((&hiBcGIk]*7F?%nDI@.[].V,Xsm/9RbG]-4m%<`@*#R$+18k(MnU=ejgKo638K"bKK@25@R$"%7gVcB$aeVkal2<!$f20cfUBs@V8^U6<bb<:CgL2FB;G#d''$Ks(8XT7WZ^X6f0DF.aid;APCPP"kNf$n:2pMmb:8/HNs*t\dGLuZ%9VbS?cJ,#,=-,6'/GkM:3>B%lZ+WR9L!N\hb9W4$OZ;Q*88Su2EbN:H*%E\+'MIa`ROik8EbO]QO[D4"f]E%.@qNB\/s%?6(9GTN%'&sScf(5j;o9Erc8_YQ;U?UcEL1P4\1]kHtFB-UtM<';N0R4?fQFCXE]klr_#C..a?fb_#<:a)%$/)281]nF[*/9+Q-=((CU==K,%Faq,5(+iM+Z1>GR`#9^IC#1bJf,c'1ZUs&U&>$jm'hMA4/;XGVl6&i^L$\afq,>Y^!N^"2jf*r##;(]L',g*;<B_"XBSPS".kn\K%"3$jh#n&9mb?HmOD,Y:*cQp$5kqP)!X@<6]p0pS\Xp!kJLM?lrFjm5VbKU3V7T1Z]`-MsBLJUZ<DET4REsXBhTho15VV"^QTlD5:%,;*"^l@bZh\;bUrP^H)]a@q[^"d5_/Js?dO@D(98:JW[WQ"bk<9Q:Eh+r_2'W1t(c-GXZ=A@+)MRng5:*,J:`_CA?4AX01/fZ%Hk%O:F?VO"=7Zm;uGG2C@1gU_q?P3HCn=7OAM>Lf5WY2DP<aG(r^g*Ni5EO<u2NKs6]=_U-A'[=h!r5hLmSND.]C9;`mOR:(\3AMaH5%'21a^aY=Hf9EN=*-@o_QPJGhl"GgfWYTH.I33uGi1-o!`!`P\*\\(kH1'o41R4=/t9GN<[(a*-X:I+[r8V"e&"B]0d6'\QGn><O.%HU'(p+>$%:ZB_CUfZI0'A7_bp<9I]U-MScG!7L\]U+;G]EXh2I67W_XUifbKh?m[QPJFJt8RQ@K_GTW"R'aj+c5.3:$SBW`Einr&%OOC.#;/ss0JRht`Ks@n^_GC76X`p9D"cZ6o[m?0N@/jj0aMt(a6Y7*q<c`pR)OkQ\21L=b$)W>T0\P*3kLQjr1E)b*ktCbUKs7h]%_V!Kd0K(iJ.I@Na#IG^U#DB3Rd!I8bahqUe;h_HTBm=+\n6-9C?OKe2L#G@&XC*Gs.uA,*"?Ggpl]cW@LCUVhWC$0hRk\pO$4KX'%fXNUlM=5(EPNZP+.M%1A9bkO"VVruVUCqs,X%TKpDVI,%5CXN_qsWsh`l?Hll@X:&G97p>qe'jA@-Q_GGQ5"]r9j/hW62aL2?%1_%j2(0X+(#M$QbWS!jaR;fYGB3?=0LMrZ1S%sj;k7n~>%AI9_PrivateDataEnd