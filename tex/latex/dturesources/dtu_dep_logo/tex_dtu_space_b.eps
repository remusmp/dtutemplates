%!PS-Adobe-3.1 EPSF-3.0%ADO_DSC_Encoding: MacOS Roman%%Title: DTU Space B.eps%%Creator: Adobe Illustrator(R) 12%%AI8_CreatorVersion: 12.0.1%AI9_PrintingDataBegin%%For: PeopleGroup%%CreationDate: 27/02/08%%BoundingBox: 0 0 217 26%%HiResBoundingBox: 0 0 216.9751 25.1739%%CropBox: 0 0 216.9751 25.1739%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0%%+ procset Adobe_CoolType_Utility_T42 1.0 0%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%+ procset Adobe_CoolType_Core 2.23 0%%+ procset Adobe_AGM_Core 2.0 0%%+ procset Adobe_AGM_Utils 1.0 0%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Magenta Yellow Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x205 R agm 4.3861 ct 5.530%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 16 8%%BeginData: 3552 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45936FCFFD05FF5227277D7D2727527D52FF7D53FFFFA8522852FD65%FF6893A8FD05FF27FFA827FFA827FF7D52FF7D2EFFFF7D27FFFF7D275252%FF7D5252FFA85252FF7D527DFD55FF9369CFFD05FF52A8FF27FF7D52FFA8%52FF7D52FFFFFF5227A8FF277D527DFF7D27A87D52FFA8277D27A8FD54FF%686FA8FD05FF27FFFF27FFA827FF7D52FF7D28FD04FF84F8FF27FF527D52%5227A852A8FFA8277D52FD55FF9369CFFD05FF27525252FF7D52FFFF277D%277EFFFFA87D5252FF5253527E5252527D7D27A8A8527DA8FD55FF686FA8%FD05FF7D7D7DFFFFFF7DFFFFA852A8FD04FF597DA8FF27527DFFA87D7DA8%FF7D52FFA87D7DFD55FF936FCAFD19FF7DFD63FF6893A8FD11FFA8FD0DFF%A8FD09FFA8FD0DFFA8FD45FF936FCFFD05FFA8FD0BFFA8FD08FFAFFFFFFF%A8A8FD08FF7DA87DA8FD0AFFA87DA8FD09FFA8A9FD06FFA8FD1CFFA8A8FD%09FFA8A8FD08FF7D6893A8FD05FF7DFFA8A8A8FF7EA8A87E7DFFA8FF52A8%A8FFAFA87D7DA8FFA87D7DFF7DA8FFA87DFFFF7DFFFF7DA8A8FFA8AF7DFD%05A87DFFA8A8A8FF7DFD09A87DFD05A87DFFFFA87DA8FFFFA8A87DFFA8A8%7DA8FD04FF52A8FFA87DFF7DFFA8FFA8A8A8FFA87DA8A87DFF7DA8FFFF7D%A8A8A89369CFFD05FFA8A87DA87DA87DA8FF7DA8FFA8A87DA8A8A8FF7DA8%7DFFFFFF7DA87DA87DA87DA8FFFF7DA87DA8A8A8FFA87DA87DA87DFD04A8%7DA8A8A87DFF7D84FFA87D7DFF7DFF7DA87DA87DA87DA87DFF7DFFFFFD07%A87DFD04FF7DA8A87DA87DA87DA8A87DA87DA8A8A87EFD04A87DA87DFF7D%A87D686FA8FD05FF7DA87DFF7DFFA87DFFA8A8FF7DFF7DFF7DFD05A8FFFF%FFA8A87EFFA87DA8A8FFFF7D7D7DA8A8A8FF7DFD07A87DA87DFF7DA87DFF%A87DA8A852FFFF7DFFFD05A8FF7D847DA8A8FFFF7DFFA8A87DA87DA8FFA8%7DFF7DFF7D847DA87D52FFFF7DFF7DA87DFF7DA87DA8FFA87DA87DA8A87E%8D69CFFD05FFA8A8A8FFA8A8FF7DA8A8A8FFA8FFA8A8A87DA87DFF7DFFFF%FF7DFF7EA87DA87DFFFFFF7DFFFD06A884FFFD06A8FF7EFD04A8FFFF7D7E%A8A87DFF7DFF7DA87DA8A8FF7DFF7DA8A8FFFFFD05A87DA8FD05FFA8A8A8%7DFFFFA87DA8A8A8FFFD09A87DA9A87DA8FF7D9AA0A8FD05FFA8FFA8FFA8%FF7DA8A8FF7DFFA8FFFD04A87DFFFFA8A8FFFFA8A8FF7DA8FFA8FFFFFFA8%FFFFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8A8A8FFFD04A8FF%FFA8A8A8FFFFA884A8A87DA8FFA8A87DFF7DA87DA8FD04FFFD04A87DAFA8%FFA8A8A8FFA8FFA8A8A8FFA8FF7DA8FF7DA87D7DFD54FF7DA8A8FD06FFA8%7DA8A8FD1BFFA8A87DFD56FFA8FD27FFA8FFFFFF%%EndData%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 70 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/set_gvm{	currentglobal exch setglobal}bdf/reset_gvm{	setglobal}bdf/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/thold_halftone{ 	level3		{sethalftone currenthalftone}		{			dup /HalftoneType get 3 eq			{				sethalftone currenthalftone			}			{				begin				Width Height mul {					Thresholds read {pop} if				} repeat				end				currenthalftone			} ifelse		}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			/srcDataStrs [ imageDict begin				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse				{					Width Decode length 2 div mul cvi string				} repeat				end ] def					imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put			imageDict /Decode [0 1] put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		DataSource 0 get type		dup /filetype eq			{			1 dict begin			/flushbuffer Width cvi string def			1 1 Height cvi				{				pop				0 1 DataSource length 1 sub					{					DataSource exch get					flushbuffer readstring pop pop					}for				}for			end			}if		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and			{			Width Height mul cvi				{				0 1 DataSource length 1 sub					{dup DataSource exch get exec length exch 0 ne {pop}if}for				dup 0 eq					{pop exit}if				sub dup 0 le					{exit}if				}loop			pop			}if				}		{		/DataSource load type 		dup /filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 idiv mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and			{				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul					{					DataSource length dup 0 eq						{pop exit}if					sub dup 0 le						{exit}if					}loop				pop			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 	dup type /dicttype eq		{			Adobe_AGM_Core/AGMCORE_tmp get			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			Adobe_AGM_Core/AGMCORE_tmp get exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{ 	/indexed_colorspace_dict AGMCORE_gget dup null ne {		dup /CSDBase known {			/CSDBase get /CSD get_res /Names known 		}{			pop false		}ifelse	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse{	/pdfmark_5 {cleartomark} bind def}{	/pdfmark_5 {pdfmark} bind def}ifelse/ReadBypdfmark_5{	2 dict begin	/makerString exch def string /tmpString exch def	{		currentfile tmpString readline pop		makerString anchorsearch		{		pop pop cleartomark exit		}{			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5		} ifelse	}loop	end} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for%% definitions of some fundamental procedures.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 201 dict dup begin put/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSD_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_in_pattern false def/AGMCORE_currentpagedevice nd/knockout_unitsq ndcurrentglobal true setglobal[/CSA /Gradient /Procedure]{	/Generic /Category findresource dup length dict copy /Category defineresource pop} forallsetglobal/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	//Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_&setoverprint /setoverprint ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse			/AGMCORE_gstackptr exch store		}def		/grestoreall {			AGMCORE_&grestoreall			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/setoverprint{			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint		}def			0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/sRGB ne					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			//Adobe_AGM_Core begin			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						current_spot_alias false set_spot_alias						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor						set_spot_alias						currentgray 1 ne					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						//Adobe_AGM_Core/AGMCORE_name xddf						false						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not AGMCORE_currentpagedevice/OverrideSeparations known and						{							AGMCORE_currentpagedevice/OverrideSeparations get							{								/HqnSpots /ProcSet resourcestatus								{									pop pop pop true								}if							}if						}if											{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not						}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace							false							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall								not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse			end		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	/AGMCORE_IsSeparationAProcessColor		{		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or		}def	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		level3 {			/AGMCORE_IsCurrentColor				{				dup AGMCORE_IsSeparationAProcessColor					{					AGMCORE_plate_ndx 0 eq						{dup (Cyan) eq exch /Cyan eq or}if					AGMCORE_plate_ndx 1 eq						{dup (Magenta) eq exch /Magenta eq or}if					AGMCORE_plate_ndx 2 eq						{dup (Yellow) eq exch /Yellow eq or}if					AGMCORE_plate_ndx 3 eq						{dup (Black) eq exch /Black eq or}if					AGMCORE_plate_ndx 4 eq						{pop false}if					}{					gsave					false setoverprint					current_spot_alias false set_spot_alias					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor					set_spot_alias					currentgray 1 ne					grestore					}ifelse				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf				dup type /dicttype eq					{					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end}{					channel get 0 paint? AGMCORE_separateShadingFunction					}ifelse				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					Shading /AGMCORE_ignoreshade known					currentdict end exch					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				//Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					/AGMCORE_SpotAliasAry2 where {						begin						dup 0 get dup /Separation eq						{							pop							dup length array copy							dup dup 1 get							current_spot_alias							{								dup map_alias								{									false set_spot_alias									dup 1 exch setsepcolorspace									true set_spot_alias									begin									/sep_colorspace_dict currentdict AGMCORE_gput									pop pop	pop									[ 										/Separation Name 										CSA map_csa										MappedCSA 										/sep_colorspace_proc load									]									dup Name									end								}if							}if							map_reserved_ink_name 1 xpt						}{							/DeviceN eq 							{								dup length array copy								dup dup 1 get [ 									exch {										current_spot_alias{											dup map_alias{												/Name get exch pop											}if										}if										map_reserved_ink_name									} forall 								] 1 xpt							}if						}ifelse						end					} if				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	/AGMCORE_def_ht currenthalftone def	/clonedict Adobe_AGM_Utils begin /clonedict load end def	/clonearray Adobe_AGM_Utils begin /clonearray load end def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/getrampcolor	{ 		/indx exch def		0 1 NumComp 1 sub		{			dup			Samples exch get			dup type /stringtype eq {indx get} if			exch			Scaling exch get aload pop			3 1 roll			mul add		} for		ColorSpaceFamily /Separation eq 		{sep}		{			ColorSpaceFamily /DeviceN eq			{devn} {setcolor}ifelse		}ifelse	} bdf	/sssetbackground {aload pop setcolor} bdf	/RadialShade	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/r2 xdf		/c2y xdf		/c2x xdf		/r1 xdf		/c1y xdf		/c1x xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		c1x c2x eq		{			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope c2y c1y sub c2x c1x sub div def			/theta slope 1 atan def			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if		} ifelse		gsave		clippath		c1x c1y translate		theta rotate		-90 rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax xdf		/xMax xdf		/yMin xdf		/xMin xdf		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			/max { 2 copy gt { pop } {exch pop} ifelse } bdf			/min { 2 copy lt { pop } {exch pop} ifelse } bdf			rampdict begin			40 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			c1x c1y translate			theta rotate			-90 rotate			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def			/c1y 0 def			/c1x 0 def			/c2x 0 def			ext0			{				0 getrampcolor				c2y r2 add r1 sub 0.0001 lt				{					c1x c1y r1 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2y r1 add r2 le					{						c1x c1y r1 0 360 arc						fill					}					{						c2x c2y r2 0 360 arc fill						r1 r2 eq						{							/p1x r1 neg def							/p1y c1y def							/p2x r1 def							/p2y c1y def							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto							fill						}						{							/AA r2 r1 sub c2y div def							AA -1 eq							{ /theta 89.99 def}							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}							ifelse							/SS1 90 theta add dup sin exch cos div def							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def							/p1y p1x SS1 div neg def							/SS2 90 theta sub dup sin exch cos div def							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def							/p2y p2x SS2 div neg def							r1 r2 gt							{								/L1maxX p1x yMin p1y sub SS1 div add def								/L2maxX p2x yMin p2y sub SS2 div add def							}							{								/L1maxX 0 def								/L2maxX 0 def							} ifelse							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto							L1maxX L1maxX p1x sub SS1 mul p1y add lineto							fill						} ifelse					} ifelse				} ifelse			} if		c1x c2x sub dup mul		c1y c2y sub dup mul		add 0.5 exp		0 dtransform		dup mul exch dup mul add 0.5 exp 72 div		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		1 index 1 index lt { exch } if pop		/hires xdf		hires mul		/numpix xdf		/numsteps NumSamples def		/rampIndxInc 1 def		/subsampling false def		numpix 0 ne		{			NumSamples numpix div 0.5 gt			{				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def				/rampIndxInc NumSamples 1 sub numsteps div def				/subsampling true def			} if		} if		/xInc c2x c1x sub numsteps div def		/yInc c2y c1y sub numsteps div def		/rInc r2 r1 sub numsteps div def		/cx c1x def		/cy c1y def		/radius r1 def		newpath		xInc 0 eq yInc 0 eq rInc 0 eq and and		{			0 getrampcolor			cx cy radius 0 360 arc			stroke			NumSamples 1 sub getrampcolor			cx cy radius 72 hires div add 0 360 arc			0 setlinewidth			stroke		}		{			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				cx cy radius 0 360 arc				/cx cx xInc add def				/cy cy yInc add def				/radius radius rInc add def				cx cy radius 360 0 arcn				eofill				rampIndxInc add			} repeat			pop		} ifelse		ext1		{			c2y r2 add r1 lt			{				c2x c2y r2 0 360 arc				fill			}			{				c2y r1 add r2 sub 0.0001 le				{					c2x c2y r2 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2x c2y r2 0 360 arc fill					r1 r2 eq					{						/p1x r2 neg def						/p1y c2y def						/p2x r2 def						/p2y c2y def						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto						fill					}					{						/AA r2 r1 sub c2y div def						AA -1 eq						{ /theta 89.99 def}						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}						ifelse						/SS1 90 theta add dup sin exch cos div def						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def						/p1y c2y p1x SS1 div sub def						/SS2 90 theta sub dup sin exch cos div def						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def						/p2y c2y p2x SS2 div sub def						r1 r2 lt						{							/L1maxX p1x yMax p1y sub SS1 div add def							/L2maxX p2x yMax p2y sub SS2 div add def						}						{							/L1maxX 0 def							/L2maxX 0 def						}ifelse						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto						L1maxX L1maxX p1x sub SS1 mul p1y add lineto						fill					} ifelse				} ifelse			} ifelse		} if		grestore		grestore		end		end		end		} ifelse	} bdf	/GenStrips	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/y2 xdf		/x2 xdf		/y1 xdf		/x1 xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		x1 x2 eq		{			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope y2 y1 sub x2 x1 sub div def			/theta slope 1 atan def			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if		}		ifelse		gsave		clippath		x1 y1 translate		theta rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax exch def		/xMax exch def		/yMin exch def		/xMin exch def		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			rampdict begin			20 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			x1 y1 translate			theta rotate			/xStart 0 def			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def			/ySpan yMax yMin sub def			/numsteps NumSamples def			/rampIndxInc 1 def			/subsampling false def			xStart 0 transform			xEnd 0 transform			3 -1 roll			sub dup mul			3 1 roll			sub dup mul			add 0.5 exp 72 div			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			1 index 1 index lt { exch } if pop			mul			/numpix xdf			numpix 0 ne			{				NumSamples numpix div 0.5 gt				{					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def					/rampIndxInc NumSamples 1 sub numsteps div def					/subsampling true def				} if			} if			ext0			{				0 getrampcolor				xMin xStart lt				{					xMin yMin xMin neg ySpan rectfill				} if			} if			/xInc xEnd xStart sub numsteps div def			/x xStart def			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				x yMin xInc ySpan rectfill				/x x xInc add def				rampIndxInc add			} repeat			pop			ext1 {				xMax xEnd gt				{					xEnd yMin xMax xEnd sub ySpan rectfill				} if			} if			grestore			grestore			end			end			end		} ifelse	} bdf}def/page_trailer{	end}def/doc_trailer{}def/capture_currentpagedevice {	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf} defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup //Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA get_csa_by_name setcolorspace_opt		set_crd	end}def/map_csa{	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse	{pop}{get_csa_by_name /MappedCSA xdf}ifelse} def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	CSA map_csa	/AGMCORE_sep_special Name dup () eq exch (All) eq or store	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc {setcolor} bdf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		7 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {					/AliasedColorants false def					exit				}				{					new_LookupTables names_index get 0 get null eq {						dup /Names get names_index get /name xdf						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq						or or or not {							/AliasedColorants false def							exit						} if					} if				} ifelse			} for			lut_entry_len 1 eq {				/AliasedColorants false def			} if			AliasedColorants {				dup begin				/Names new_names def				/LookupTables new_LookupTables def				/AliasedColorants true def				/NComponents lut_entry_len def				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	dup not {		CSA map_csa	} if	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			AvoidAliasedColorants {				/currentspotalias current_spot_alias def				false set_spot_alias			} if			Names {				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				/names_index names_index 1 add def			} forall			AvoidAliasedColorants {				currentspotalias set_spot_alias			} if			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx 					0 0 0 0 /setcmykcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				{setcolor} bdf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSDBase known {			CSDBase /CSD get_res begin			currentdict /Names known {				currentdict devncs			}{				1 currentdict sepcs			} ifelse			AGMCORE_host_sep{				4 dict begin				/compCnt /Names where {pop Names length}{1}ifelse def				/NewLookup HiVal 1 add string def				0 1 HiVal {					/tableIndex xdf					Lookup dup type /stringtype eq {						compCnt tableIndex map_index					}{						exec					} ifelse					/Names where {						pop setdevicencolor					}{						setsepcolor					} ifelse					currentgray					tableIndex exch					HiVal mul cvi 					NewLookup 3 1 roll put				} for				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt				end			}{				level3				{					currentdict /Names known {						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt					} ifelse				}{				[/Indexed MappedCSA HiVal					[					currentdict /Names known {						Lookup dup type /stringtype eq							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx					}{						Lookup dup type /stringtype eq							{/exch cvx /get cvx 255 /div cvx}							{/exec cvx}ifelse							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx					} ifelse					]cvx				]setcolorspace_opt				}ifelse			} ifelse			end			set_crd		}		{			CSA map_csa			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 			begin			CSDBase /CSD get_res begin			currentdict /Names known{				map_indexed_devn				devn			}			{				Lookup 1 3 -1 roll map_index				sep			}ifelse			end			end		}{			/Lookup get 4 3 -1 roll map_index setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_res{	dup /CSD eq {		pop 		//Adobe_AGM_Core begin		/AGMCORE_CSD_cache load 3 1 roll put		end	}{		defineresource pop	} ifelse}def/del_res{	{		aload pop exch		dup /CSD eq {			pop 			{				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef			}forall		}{			exch			{				1 index undefineresource			}forall			pop		} ifelse	} forall}def/get_res{	dup /CSD eq {		pop		dup type dup /nametype eq exch /stringtype eq or {			AGMCORE_CSD_cache exch get		} if	}{		findresource	} ifelse}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		/CSA get_res	} if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/wrap_paintproc{   statusdict /currentfilenameextend known{	clonedict	begin	/OldPaintProc /PaintProc load def	/PaintProc	{		mark exch		dup /OldPaintProc get stopped		{closefile restore end} if		cleartomark	}  def	end  } {pop} ifelse} def/make_pattern{	exch clonedict exch	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	1 index dup /ID get exch /Pattern add_res	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/RenderingIntent known{		currentcolorrendering/RenderingIntent get	}{null}ifelse	Intent ne {		Intent /ColorRendering {findresource} stopped		{			pop pop systemdict /findcolorrendering known			{				Intent findcolorrendering pop				/ColorRendering findresource 				true			}			{false} ifelse		}		{true} ifelse		{			dup begin			currentdict /TransformPQR known {				currentdict /TransformPQR get aload pop				3 {{} eq 3 1 roll} repeat or or			}			{true} ifelse			currentdict /MatrixPQR known {				currentdict /MatrixPQR get aload pop				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq				and and and and and and and and			}			{true} ifelse			end			or			{				clonedict begin				/TransformPQR [					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind				] def				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def				currentdict end			} if			setcolorrendering_opt		} if			}if} def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict /ColorRendering known{			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		clonedict		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/set_spot_alias_ary{	dup inherit_aliases	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf}def/set_spot_normalization_ary{	dup inherit_aliases	dup length	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if	array	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf	/AGMCORE_SpotAliasAry where{		pop		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval		AGMCORE_SpotAliasAry length	}{0} ifelse	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval	true set_spot_alias}def/inherit_aliases{	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall}def/set_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry2 where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry2{				dup/Name get AGMCORE_name eq{					/CSD get /CSD get_res					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	//Adobe_AGM_Core begin	/setcustomcolor	{		currentdict/TintProc known currentdict/CSA known and 3 1 roll		//Adobe_AGM_Core begin		dup /customcolor_tint exch AGMCORE_gput		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not		current_spot_alias and{1 index 4 get map_alias}{false}ifelse		{			false set_spot_alias			4 -1 roll{				exch pop /sep_tint AGMCORE_gget exch			}if			mark 3 1 roll			setsepcolorspace			counttomark 0 ne{				setsepcolor			}if			pop			pop			true set_spot_alias		}{			AGMCORE_&setcustomcolor			pop		}ifelse		end	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	//Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defend/set_def_ht{	AGMCORE_def_ht sethalftone} defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.25 0%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.25 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.25 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict /Adobe_CoolType_Data 2 copy known not	 { 2 copy 10 dict put }ifget	 begin	 /@opStackCountByLevel 32 dict def	 /@opStackLevel 0 def	 /@dictStackCountByLevel 32 dict def	 /@dictStackLevel 0 def	 endsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup /args			7 index			5 add array put			put get			}			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{ pop count }			if			dup /argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					 { (*) { pop stop } 128 string /Category resourceforall }				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup					 {						  /@shouldNotDisappearDictValue known								{										  {												end												currentdict 1 index eq													 { pop exit }												if										  }									 loop								}						  if					 }				if				end		}		{ false }	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end		currentglobal false setglobal	  userdict /Adobe_CoolType_Data 2 copy known not		  { 2 copy 10 dict put }		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.%%Version: 1.21 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 27 add dict copy }	{ 27 dict }ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {				mark				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put					 {					 ((Hex) 57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec					 }				stopped					 {					 cleartomark					 Adobe_CoolType_Utility /@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						  {						  2 copy get 3 index eq								{ 1 index length exch sub 1 sub { end } repeat exit }								{ pop }						  ifelse						  }					 for					 pop pop					 Adobe_CoolType_Utility /@eexecStartData get eexec					 }					 { cleartomark }				ifelse			} }			{ {				Adobe_CoolType_Utility /@eexecStartData get eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind def/T0AddT42Mtx2{	/CIDFont findresource /Metrics2 get begin def end}bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/AGMIMG_flushfilters nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/AGMIMG_flushfilters{	dup type /arraytype ne		{1 array astore}if	aload length		{		dup type /filetype eq			{			dup status 1 index currentfile ne and				{dup flushfile closefile}				{pop}			ifelse			}{pop}ifelse		} repeat}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	CSA map_csa	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{ 									Name AGMCORE_IsSeparationAProcessColor  									{ 										Operator /imagemask eq{ 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor 										}{											invert_image_samples 										}ifelse	 								}{	 									[ /Separation Name [/DeviceGray]	 									{ 	 										sep_colorspace_proc AGMCORE_get_ink_data											1 exch sub	 									} bind										] AGMCORE_&setcolorspace										/sep_tint AGMCORE_gget AGMCORE_&setcolor 									}ifelse 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name AGMCORE_IsSeparationAProcessColor not and					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	mark currentcolor counttomark dup 2 add 1 roll cleartomark} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/DataSource origMultipleDataSources		{			[			BitsPerComponent 8 idiv origDecode length 2 idiv mul string			0 1 origDecode length 2 idiv 1 sub				{				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch				origDataSource exch get 0 () /SubFileDecode filter				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx				}for 			]bind cvx		}{origDataSource}ifelse 0 () /SubFileDecode filter def			[		origcolorSpaceElemCnt string		0 2 origDecode length 2 sub			{			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx			}for		/convProc load /exec cvx		origcolorSpaceElemCnt 1 sub -1 0			{			/dup cvx 2 /add cvx /index cvx			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx			}for	]bind cvx 0 () /SubFileDecode filter	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	CSA map_csa	2 dict begin	dup	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi			{				dup 65535 gt {1 add 2 div cvi}{exit}ifelse			} loop			string		} repeat		end ] def	/dstDataStr srcDataStrs 0 get length string def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [ [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def									/MultipleDataSources true def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA get_csa_by_name 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							devn_alt_datasource						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								devn_alt_datasource							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get get_csa_by_name				}{					/Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		<<			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		>>		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		current_spot_alias{dup 4 get map_alias}{false}ifelse		{			false set_spot_alias			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask			true set_spot_alias		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Page 1) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Web</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2008-01-14T12:19:31+01:00</xap:CreateDate>
         <xap:ModifyDate>2008-02-27T19:04:52+01:00</xap:ModifyDate>
         <xap:MetadataDate>2008-02-27T19:04:52+01:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>32</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAIAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8Ak3/OLn/HR8wf8Ybb/iUm&#xA;Yen5l6z2k+mHvP6H0HmY8m+UbPytolh+RM/5iWEZsfOelahNNaavFJIkjH9J+j6cihuMisjcaEfx&#xA;wqznzF+WHkB/zy0HTm0O2NjqOmX93ewEHjLOsgIkbf7W5xVMtDVI9H/OOOMcVjvL4Ko7AaZGB+rF&#xA;WUflnaXF5+S2gWcE7Wtxc6JDDDdLXlE0lvxWRaEbrWowK88/Lfy9pvlfXrPyrrHl9NB/MKS2uV0T&#xA;zdFzvbbUGWMtPN8TJ+84fE0b/wDC1AwqjvKX5j/mY+n+T/MGs3enXmkeY9Xk0OWyhtXhuFb1biNL&#xA;j1fUdahrU/CFpT33xVXtfza1z/lYmmadbavba3oWq6nPpzpFpd1aRwBA5T0r6R2indGTi9NvD2VT&#xA;3yt5r8767qGs+YnvLO18paRfX1kNIFs0l1LHYhkMpuPUUI7OK8eJFMVY1+XP5t+e/MGvaBLdpHd6&#xA;Tr5n+t2lvpt/ANNCIzwML6VfQuA/HixB69MVe44FdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVfPn/OLn/HR8wf8Ybb/AIlJmHp+Zes9pPph7z+h9B5mPJvNbH8gfJltNbrLe6re&#xA;aVaXBu4NDubwtp6zmQy8zAqpy+Nq/ET+uqrMLrylpN15ssfNEvqfpPTraaztwGAi9OcgvyWm5223&#xA;xVjvmH8mfK+tapqN+15qenrrQQa1ZWF29vbXnBeH7+MA15J8LcSK/Saqsyg0y0ttKj0uzU2tnDAL&#xA;W3SElTFEicECHqOKjbFWKaH+VGjaZ5htPMFzqmra3qWnxyR6a+rXjXK2wmT05TEvFKM67MTUn7sV&#xA;Y5+Wn5KppOn6PdeZbq7utS0m5uru10o3XqadbzSXErRzRQhV+P05AdyaMTiqOh/IXypbXMU1jqes&#xA;WaWt8+pWFtFeA29tcSV5GGGRHQV5ftAn33OKp3pv5Y6LpnmO61rT77UbWK+uJby90aO5P6OluJ14&#xA;yyPblTUv1PxUriqzyv8Aldpflm/hm0rVtXTTrYyG20OS8MmnxrKGqiwsvLipeqgtsaYqzLFXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXz5/wA4uf8AHR8wf8Ybb/iUmYen5l6z&#xA;2k+mHvP6H0HmY8mwPQtU1xLDRdO057dXv31R5ZrpHk4iC6PHiFdP5++FV8/nDzANP065cWtnC89x&#xA;banfvHLNDHLBIY0+FXRlSQr9pjtgVHwXXmJ/OcNv9etpLJtPS4dEik4MDIFZk/esORP2W3+Hah64&#xA;qk+lXuttbeTxp0tvZWl4soNoEmZAUhkchiZuTrQfCCaht6nphVOn80366XcXfpxepDqx05RRuJiF&#xA;0IOR+L7fE/KvbAq7yxPr0uta2l9dRT2tvciNUWN1IJijZeHKRwqUO60O+9cVSXWZ7yx83aprVyLe&#xA;6XSNPSW2jaNw6rKZQio3qFVbl9t+O69AMKozUvM/mbRo76K/Wznuo7BtQt3hSRY1KSrG8bqXJYfv&#xA;BRgRgVG+bjqUfkTUzeyRm8ELFmtwyIKtsF5Fm2HfFUis5be11u8uNBsJdLj0qxnk1O2uTxWWR052&#xA;/wC5EjVoVYltvCuFU51TzZqFpY6fcRxQl7vS7u/kDBqCW3gjlRRRh8JLmvf3wKgpvMPnNHlj56eH&#xA;TTv0qp9GYjgCQYv73rt9r8MKqU8l3febdL1K4+rvbQ6W2owwtE7NGvKIvxPqBfU+L4XpSnbviqKt&#xA;fNHmNI9Nur1LVrfWbeae2hiWQPCY7c3EYdixDhkX4thvgVZc+ZPNUPl/TNVlNnFDf+nLdXKwzSR2&#xA;0MkSuhZBJyNW2LdF/HFUNe69e23m63jtWt7zVNU0u3jtJVqloWM8zmQ/GzcAgqAGJPbCqN1PzH5n&#xA;t5NbeA2Rt9DWJpFeOXnNygSVwCJKJ9o069vngVTuNdu7XUdVfT7eBLqe/wBOtfUl9Rg31mCMcnAf&#xA;qvKg4gfScKr7vzbrenxX9tefVDd2d1awG+4ulssV2vISSIXLfB0PxYFTHypruoapc6nHcT2l3b2b&#xA;xJb3dijrFIXTk/xNJKCVqBt0/UqgYPNGvObXU2S2/Q95qH6Pitgr/WApmaBZTJy415rUrx6d8VQs&#xA;XnbV5721jin08NcagbKTSwskl5FEsrI0j0kUbBOVeAFMVZZe6pBFcrYIzpfToTbsbeaWEE1Cl3QB&#xA;Oq7gup+/FWGWvmfzBp+iLLdXME893qU1pBM8UzCJUklMjMqu7OAEoirSncnCqH1PzjKkGnalqSCQ&#xA;abqciCWCOSJZ1No5RlSX4lJL8TU0xVP31Xze15p2nA2MN5e289zMxSWRIhGyBVWkg5kCTc9CcCoe&#xA;w80eYdWGn2tktrbX08FzPdyyrJJEPqtx9X4xorK3xvvudhiqXf4rm+tR6/NABPDot4ZLdSeBlhvI&#xA;4jQ9eJdPuwqmd15l8x6Qb2HU47a6ni099RgNsJI1UxuqPG4ZnJA5ghhTYYFSnVfNV/dWOrWs02m6&#xA;vYxaabiRrNZhH6hkVBFI6zGmxJoCD8sKpr5C/K3y/wCSJrybSri7na9VElF08bgCMkjj6ccX83fK&#xA;oYhHk7HXdpZNSAJgCu6/1lmOWOuSiw8r6fZSWMkTys2n/WvQ5Mpr9ck9STlRRWhHw0/HFUPP5Pt5&#xA;LCSwi1C8trWZp3nSJoh6n1ly7hi0TGg5EClNsVV4/K9lDe6fd2089s2n262aRxspSSBKFUlDqxPT&#xA;qCDiqkPJ9illpVrBdXNudHJNpPG0fqfEpRg/JGUgqx/ZxVTm8k2Ek8j/AFy8SCS7F+1msiej64cS&#xA;E0KFqMwqRy+VMVR9pocNpq95qUNxODfcTPaFkMHNVVA4XjyDUX+bFWrvy7p13cX01wHkGo2yWlxE&#xA;SAvpoXIK0HIN+8O9cVS8+RtPlguo7u8vLx7q3Fn688iM8cHINxjoiruwBJIJNMVTfWNLt9V0y406&#xA;4Z1guUKSNGQGAPgSGH4YqoX3l6wvNRW/kLpN6ElpMqEBZoZR9iQUJPE7rQjfFUtXyHYemsc1/e3C&#xA;R2s1jCsskZCQzoI240jG4VRQ/fXFUfJ5asHkaRnlq9gdNO609EmvL7P2/fp7Yqvt/L1jBc29wC7N&#xA;bWR09EYgqYSVNWFB8X7sf0xVA2nknTbdoq3V1PDbRyxWVvNIrJAsylG9Oiq32DxHMtQYqip/LqPp&#xA;NrpcF/dWlvawi3DQNEHeNUCDmXjfeg/ZpiqDbyDoLQJD++URW0VrA4cB4/QkaVJUalVkDOd+nalM&#xA;VRkvlixlg1WKWaZzrCKl3ISgb4IRDySihQSq1O3X7sVWyeVNNe4knMkwaW5tbxgGWnqWaqsYHw/Z&#xA;IQcv4Yql/mjyq91HcXFkrT3F1c2k91CZBETHa7UhkpWNyO9fpGKorynZa3aC8W+9SOyLJ9Qtp5Vu&#xA;JowFPqcpVG4ZqUBJIxV0fkzTY7xJhcXJtork3sWnGRfqyzkluYXjz2c8gOVK9sVSLSfLvmawv4DD&#xA;G8En1x5L66W5VrSS3eZpHVLYglCVagoBvvXCrPMCse/wVYCCWEXl2Fa6N9bEPGGt5yzMxhPp9G9Q&#xA;1D8sVV38rWs6QLf3dxqAgmaZfrJiIbnE0LRsEjReHFjtTriq7TPK9lp81pLHPPKbGKW3tlldWCxT&#xA;MrcK8QSE4ALv08cVQ48l2EcVuLW7urOe29dUuoHQSFLmUyyI3JGUrzNR8NRiq9PJWhrCsHGRoFs5&#xA;bAxs1Q0cziR2Y05cy61rXFUDqXkpjpWorbXc19qVzaGzglv3VwkVQxReCIByp9ogmtDiqG07yxqd&#xA;yL3T71Lmz0O7tjG8Et0lzL65dTzjchyoCg15H6MVf//Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:388D82342DC4DC11B0F7C948713094C1</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:13AA8A7DE6F911DCA9DBE848ED1657C8</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:378D82342DC4DC11B0F7C948713094C1</stRef:instanceID>
            <stRef:documentID>uuid:368D82342DC4DC11B0F7C948713094C1</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Web</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>5080.000000</stDim:w>
            <stDim:h>5080.000000</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>White</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Black</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>74.609375</xapG:cyan>
                           <xapG:magenta>67.578125</xapG:magenta>
                           <xapG:yellow>66.796875</xapG:yellow>
                           <xapG:black>89.843750</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Red</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>98.828125</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Yellow</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>6.250000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>96.093750</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Green</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>62.500000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Cyan</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>51.562500</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>12.500000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Blue</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>87.890625</xapG:cyan>
                           <xapG:magenta>76.562500</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Magenta</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>26.953125</xapG:cyan>
                           <xapG:magenta>81.250000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=193 G=39 B=45</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>16.796875</xapG:cyan>
                           <xapG:magenta>97.656250</xapG:magenta>
                           <xapG:yellow>92.187500</xapG:yellow>
                           <xapG:black>6.640625</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=237 G=28 B=36</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.390625</xapG:cyan>
                           <xapG:magenta>98.828125</xapG:magenta>
                           <xapG:yellow>96.875000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=241 G=90 B=36</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>79.296875</xapG:magenta>
                           <xapG:yellow>96.484375</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=247 G=147 B=30</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>98.046875</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=251 G=176 B=59</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>34.765625</xapG:magenta>
                           <xapG:yellow>86.718750</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=252 G=238 B=33</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>4.687500</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>92.968750</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=217 G=224 B=33</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>18.750000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>97.656250</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=140 G=198 B=63</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>98.828125</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=57 G=181 B=74</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>74.218750</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>99.218750</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=146 B=69</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>85.937500</xapG:cyan>
                           <xapG:magenta>17.578125</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>3.906250</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=104 B=55</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>89.843750</xapG:cyan>
                           <xapG:magenta>33.203125</xapG:magenta>
                           <xapG:yellow>98.437500</xapG:yellow>
                           <xapG:black>25.781250</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=34 G=181 B=115</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.781250</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>74.609375</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=169 B=157</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>78.125000</xapG:cyan>
                           <xapG:magenta>8.984375</xapG:magenta>
                           <xapG:yellow>45.703125</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=41 G=171 B=226</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>69.531250</xapG:cyan>
                           <xapG:magenta>14.843750</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=113 B=188</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>87.109375</xapG:cyan>
                           <xapG:magenta>52.343750</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=46 G=49 B=146</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>98.828125</xapG:cyan>
                           <xapG:magenta>96.093750</xapG:magenta>
                           <xapG:yellow>3.515625</xapG:yellow>
                           <xapG:black>0.390625</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=27 G=20 B=100</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>26.171875</xapG:yellow>
                           <xapG:black>24.609375</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=102 G=45 B=145</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>74.218750</xapG:cyan>
                           <xapG:magenta>98.046875</xapG:magenta>
                           <xapG:yellow>0.781250</xapG:yellow>
                           <xapG:black>0.390625</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=147 G=39 B=143</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>49.218750</xapG:cyan>
                           <xapG:magenta>98.828125</xapG:magenta>
                           <xapG:yellow>1.171875</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=158 G=0 B=93</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>34.765625</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>37.109375</xapG:yellow>
                           <xapG:black>10.937500</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=212 G=20 B=90</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>11.718750</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>49.218750</xapG:yellow>
                           <xapG:black>0.781250</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=237 G=30 B=121</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>96.484375</xapG:magenta>
                           <xapG:yellow>20.312500</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=199 G=178 B=153</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>22.656250</xapG:cyan>
                           <xapG:magenta>27.343750</xapG:magenta>
                           <xapG:yellow>39.843750</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=153 G=134 B=117</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.843750</xapG:cyan>
                           <xapG:magenta>42.578125</xapG:magenta>
                           <xapG:yellow>52.343750</xapG:yellow>
                           <xapG:black>6.640625</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=115 G=99 B=87</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.390625</xapG:cyan>
                           <xapG:magenta>52.734375</xapG:magenta>
                           <xapG:yellow>60.546875</xapG:yellow>
                           <xapG:black>23.437500</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=83 G=71 B=65</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>57.421875</xapG:cyan>
                           <xapG:magenta>60.156250</xapG:magenta>
                           <xapG:yellow>63.671875</xapG:yellow>
                           <xapG:black>41.796875</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=198 G=156 B=109</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>22.656250</xapG:cyan>
                           <xapG:magenta>38.281250</xapG:magenta>
                           <xapG:yellow>63.281250</xapG:yellow>
                           <xapG:black>1.171875</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=166 G=124 B=82</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>31.640625</xapG:cyan>
                           <xapG:magenta>48.828125</xapG:magenta>
                           <xapG:yellow>73.828125</xapG:yellow>
                           <xapG:black>9.765625</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=140 G=98 B=57</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>35.937500</xapG:cyan>
                           <xapG:magenta>57.031250</xapG:magenta>
                           <xapG:yellow>83.593750</xapG:yellow>
                           <xapG:black>22.656250</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=117 G=76 B=36</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.062500</xapG:cyan>
                           <xapG:magenta>63.671875</xapG:magenta>
                           <xapG:yellow>92.968750</xapG:yellow>
                           <xapG:black>35.546875</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=96 G=56 B=19</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>41.406250</xapG:cyan>
                           <xapG:magenta>69.531250</xapG:magenta>
                           <xapG:yellow>96.484375</xapG:yellow>
                           <xapG:black>48.828125</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=66 G=33 B=11</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>47.656250</xapG:cyan>
                           <xapG:magenta>73.046875</xapG:magenta>
                           <xapG:yellow>83.203125</xapG:yellow>
                           <xapG:black>67.968750</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Web Color Group</xapG:groupName>
                  <xapG:groupType>1</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=236 G=28 B=36</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.781250</xapG:cyan>
                           <xapG:magenta>98.828125</xapG:magenta>
                           <xapG:yellow>96.875000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=169 B=157</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>78.125000</xapG:cyan>
                           <xapG:magenta>8.984375</xapG:magenta>
                           <xapG:yellow>45.703125</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=102 G=45 B=145</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>74.218750</xapG:cyan>
                           <xapG:magenta>98.046875</xapG:magenta>
                           <xapG:yellow>0.781250</xapG:yellow>
                           <xapG:black>0.390625</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=139 G=146 B=152 1</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>48.437500</xapG:cyan>
                           <xapG:magenta>36.328125</xapG:magenta>
                           <xapG:yellow>33.593750</xapG:yellow>
                           <xapG:black>1.562500</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Grayscale</xapG:groupName>
                  <xapG:groupType>1</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=90</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>229</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=80</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>204</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=70</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>178</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=60</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>153</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=50</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>127</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=40</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>101</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=30</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>76</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=20</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>50</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=10</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>25</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=5</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>12</xapG:gray>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_AGM_Core/capture_currentpagedevice get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -25.1738 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 25.1738 li216.975 25.1738 li216.975 0 licpclp[1 0 0 1 0 0 ] concat3.57178 0.0908203 mo3.57178 22.7676 li0 22.7676 li0 0.0908203 li3.57178 0.0908203 licpfalse sop/0 [/DeviceCMYK] /CSA add_res0 0.91 0.72 0.23 cmykf20.2456 5.12109 mo20.2456 3.99414 li20.2456 2.63281 20.0464 1.62695 19.2876 0.893555 cv18.6494 0.277344 17.6938 0 16.5366 0 cv15.6528 0 14.6128 0.0722656 14.2578 0.132813 cv14.0776 0.162109 13.9751 0.265625 13.9751 0.469727 cv13.9751 8.64648 li13.9751 8.85547 14.0776 8.95215 14.2578 8.98242 cv14.6128 9.04297 15.6528 9.11523 16.5366 9.11523 cv17.7046 9.11523 18.667 8.8291 19.3057 8.19922 cv20.0537 7.46191 20.2456 6.4668 20.2456 5.12109 cvcp18.8691 5.06445 mo18.8691 6.18945 18.7358 6.87695 18.2515 7.36719 cv17.8306 7.79199 17.2261 7.94238 16.5366 7.94238 cv16.0317 7.94238 15.6826 7.93066 15.3643 7.91211 cv15.3643 1.20898 li15.6885 1.19141 16.0317 1.17285 16.5366 1.17285 cv17.1992 1.17285 17.7832 1.31055 18.2012 1.69727 cv18.7163 2.17383 18.8691 2.89063 18.8691 4.05078 cv18.8691 5.06445 licp34.7842 5.74805 mo34.7842 0.319336 li34.7842 0.1875 34.6763 0.0908203 34.5498 0.0908203 cv33.6299 0.0908203 li33.4976 0.0908203 33.3955 0.193359 33.3955 0.319336 cv33.3955 5.74805 li33.3955 7.21484 32.9868 7.9541 31.5923 7.9541 cv30.1973 7.9541 29.7886 7.20898 29.7886 5.74805 cv29.7886 0.319336 li29.7886 0.1875 29.6802 0.0908203 29.5542 0.0908203 cv28.6343 0.0908203 li28.502 0.0908203 28.3994 0.193359 28.3994 0.319336 cv28.3994 5.74805 li28.3994 8.17676 29.6504 9.11523 31.5923 9.11523 cv33.5337 9.11523 34.7842 8.17676 34.7842 5.74805 cvcp27.2676 1.05273 mo27.2676 0.3125 li27.2676 0.181641 27.1655 0.0908203 27.0327 0.0908203 cv21.2012 0.0908203 li21.0693 0.0908203 20.9609 0.1875 20.9609 0.3125 cv20.9609 1.05273 li20.9609 1.18555 21.0693 1.25684 21.2012 1.25684 cv23.4258 1.25684 li23.4258 8.78418 li23.4258 8.91602 23.5278 9.02441 23.6538 9.02441 cv24.5801 9.02441 li24.7124 9.02441 24.8086 8.91016 24.8086 8.78418 cv24.8086 1.25684 li27.0327 1.25684 li27.1655 1.25684 27.2676 1.17871 27.2676 1.05273 cvcp72.6523 7.84375 mo72.7603 7.83496 72.8682 7.89453 72.8682 8.01465 cv72.8682 8.61621 li72.8682 8.79004 72.8257 8.87305 72.6216 8.91016 cv71.8872 9.04492 71.3232 9.11523 70.3794 9.11523 cv68.7085 9.11523 67.5601 8.18164 67.5601 5.87891 cv67.5601 5.46094 li67.5601 3.66406 68.2554 2.24316 70.3374 2.24316 cv72.4438 2.24316 73.0903 3.71191 73.0903 5.46094 cv73.0903 5.83789 li73.0903 6.0127 73.0122 6.12109 72.856 6.12109 cv68.8823 6.12109 li68.8823 6.22266 li68.8823 7.28711 69.3096 7.9668 70.4395 7.9668 cv71.2271 7.9668 72.064 7.89063 72.6045 7.84766 cv72.6523 7.84375 licp71.7563 5.07422 mo71.7563 3.91406 71.2393 3.37402 70.3374 3.37402 cv69.4478 3.37402 68.8887 3.93848 68.8887 5.07422 cv68.8887 5.15332 li71.7563 5.15332 li71.7563 5.07422 licp65.9873 7.89648 mo66.1011 7.88867 66.21 7.95508 66.21 8.07422 cv66.21 8.68164 li66.21 8.85645 66.1621 8.92871 65.9634 8.9707 cv65.627 9.04297 65.0854 9.11523 64.436 9.11523 cv62.8374 9.11523 61.7852 8.05664 61.7852 6.19336 cv61.7852 5.16504 li61.7852 3.30078 62.8311 2.24316 64.436 2.24316 cv65.0796 2.24316 65.627 2.31543 65.9634 2.3877 cv66.1621 2.42969 66.21 2.49609 66.21 2.67578 cv66.21 3.2832 li66.21 3.4043 66.1064 3.46777 65.9927 3.46289 cv65.9502 3.46094 li65.4419 3.43652 65.1216 3.37988 64.436 3.37988 cv63.6729 3.37988 63.1079 3.86035 63.1079 5.16504 cv63.1079 6.19336 li63.1079 7.49219 63.6665 7.97852 64.436 7.97852 cv65.1216 7.97852 65.4434 7.9375 65.9448 7.90039 cv65.9873 7.89648 licp51.8408 5.2373 mo51.8408 4.11328 51.5728 3.33789 50.6152 3.33789 cv50.146 3.33789 49.4434 3.6123 49.1357 3.80859 cv49.1357 7.91797 li49.5024 7.97852 50.0796 8.02148 50.416 8.02148 cv51.5225 8.02148 51.8408 7.26953 51.8408 6.13281 cv51.8408 5.2373 licp47.813 3.2959 mo46.5635 2.92969 li46.4175 2.88672 46.3286 2.77734 46.3286 2.64551 cv46.3286 2.51367 46.3286 2.56836 46.3286 2.56836 cv46.3286 2.43555 46.4312 2.32813 46.5635 2.32813 cv48.7964 2.32813 li48.9238 2.32813 49.0342 2.43359 49.0386 2.56348 cv49.0425 2.66602 49.0488 2.84766 49.0488 2.84766 cv49.4424 2.58984 50.1348 2.24219 50.7852 2.24219 cv52.4243 2.24219 53.1636 3.39746 53.1636 5.2373 cv53.1636 6.13281 li53.1636 8.01465 52.2617 9.11523 50.416 9.11523 cv50.0854 9.11523 49.5923 9.0791 49.1357 9.00684 cv49.1357 11.1592 li49.1357 11.2852 49.0337 11.3936 48.9009 11.3936 cv48.0415 11.3936 li47.915 11.3936 47.813 11.291 47.813 11.1592 cv47.813 3.2959 licp42.6772 9.11523 mo41.8057 9.11523 41.1689 9.02734 40.6152 8.92285 cv40.4531 8.8916 40.3867 8.82617 40.3867 8.69336 cv40.3867 8.02148 li40.3867 7.88867 40.5063 7.79785 40.6201 7.80859 cv40.6504 7.81152 40.6201 7.80859 40.6504 7.81152 cv41.186 7.86328 42.207 7.90625 42.6895 7.90625 cv43.9458 7.90625 44.3008 7.42578 44.3008 6.65625 cv44.3008 6.12109 44.0122 5.83203 43.0679 5.26172 cv41.6914 4.43164 li40.5791 3.76367 40.1523 3.10938 40.1523 2.20703 cv40.1523 0.818359 41.0601 0.000976563 43.0923 0.000976563 cv43.8438 0.000976563 44.8599 0.0957031 45.2925 0.181641 cv45.4131 0.205078 45.5029 0.277344 45.5029 0.397461 cv45.5029 1.10156 li45.5029 1.2207 45.4102 1.31543 45.29 1.30664 cv45.2661 1.30469 45.29 1.30664 45.2661 1.30469 cv44.6025 1.25293 43.7959 1.20898 43.0562 1.20898 cv41.9917 1.20898 41.541 1.49805 41.541 2.20703 cv41.541 2.68848 41.8418 2.97656 42.6895 3.46973 cv43.9639 4.20313 li45.3228 4.98438 45.7437 5.7002 45.7437 6.65625 cv45.7437 7.83984 45.064 9.11523 42.6772 9.11523 cvcp60.7354 8.41406 mo60.8706 8.45703 60.9761 8.58691 60.9761 8.72461 cv60.9761 8.85645 60.9761 8.78418 60.9761 8.78418 cv60.9761 8.91602 60.8682 9.02539 60.7354 9.02539 cv58.7031 9.02539 li58.5708 9.02539 58.4585 8.91602 58.4541 8.78418 cv58.4448 8.51563 li57.9038 8.85938 57.2397 9.11523 56.6147 9.11523 cv55.6045 9.11523 54.5942 8.7002 54.5942 7.13672 cv54.5942 7.04102 li54.5942 5.70605 55.394 5.02734 57.5103 5.02734 cv58.334 5.02734 li58.334 4.52148 li58.334 3.62598 57.9854 3.35547 57.1616 3.35547 cv56.3857 3.35547 55.7095 3.42773 55.2686 3.44727 cv55.2085 3.4502 li55.0942 3.45508 54.9854 3.41602 54.9854 3.25391 cv54.9854 2.6582 li54.9854 2.52539 55.0635 2.44727 55.2256 2.41797 cv55.7129 2.32813 56.3379 2.24316 57.1616 2.24316 cv58.8511 2.24316 59.6563 3.04297 59.6563 4.52148 cv59.6563 8.06543 li60.7354 8.41406 licp58.334 5.93457 mo57.5103 5.93457 li56.2358 5.93457 55.9233 6.27148 55.9233 7.03516 cv55.9233 7.13086 li55.9233 7.8584 56.2598 8.05078 56.9092 8.05078 cv57.4019 8.05078 57.8711 7.89453 58.334 7.64258 cv58.334 5.93457 licp0 0 0 1 cmykf69.3662 16.9844 mo68.8135 16.9844 68.3081 17.1289 67.707 17.4893 cv67.707 22.5273 li67.707 22.6475 67.5991 22.7676 67.4668 22.7676 cv66.8774 22.7676 li66.7573 22.7676 66.6494 22.6602 66.6494 22.5273 cv66.6494 16.3955 li66.6494 16.2627 66.7451 16.1543 66.8774 16.1543 cv67.4424 16.1543 li67.5747 16.1543 67.6714 16.2627 67.6714 16.3955 cv67.6714 16.6475 li68.2725 16.2266 68.8257 16.0703 69.3662 16.0703 cv69.5347 16.0703 69.6187 16.1426 69.6187 16.2871 cv69.6187 16.7803 li69.6187 16.9121 69.5347 16.9844 69.3662 16.9844 cvcp64.1719 19.0039 mo64.1719 17.7773 63.6792 16.9961 62.5488 16.9961 cv61.4307 16.9961 60.938 17.7656 60.938 19.0039 cv60.938 19.918 li60.938 21.1445 61.4189 21.9258 62.5488 21.9258 cv63.667 21.9258 64.1719 21.1563 64.1719 19.918 cv64.1719 19.0039 licp62.5488 22.8516 mo60.7813 22.8516 59.8794 21.6855 59.8794 19.918 cv59.8794 19.0039 li59.8794 17.2363 60.7813 16.0703 62.5488 16.0703 cv64.3164 16.0703 65.2305 17.2363 65.2305 19.0039 cv65.2305 19.918 li65.2305 21.6855 64.3164 22.8516 62.5488 22.8516 cvcp59.1421 14.459 mo58.5654 14.459 li58.0005 14.459 57.832 14.6279 57.832 15.2891 cv57.832 16.1543 li59.0942 16.1543 li59.2266 16.1543 59.3228 16.251 59.3228 16.3711 cv59.3228 16.8398 li59.3228 16.9609 59.2266 17.0449 59.0942 17.0449 cv57.832 17.0449 li57.832 22.5273 li57.832 22.6475 57.7236 22.7676 57.6035 22.7676 cv57.0142 22.7676 li56.8818 22.7676 56.7734 22.6475 56.7734 22.5273 cv56.7734 17.0449 li55.6074 16.9121 li55.4751 16.9004 55.3789 16.8164 55.3789 16.6953 cv55.3789 16.3711 li55.3789 16.251 55.4751 16.1543 55.6074 16.1543 cv56.7734 16.1543 li56.7734 15.2891 li56.7734 14.002 57.3989 13.6172 58.457 13.6172 cv58.7817 13.6172 58.9741 13.6543 59.1304 13.6895 cv59.2622 13.7256 59.3589 13.7734 59.3589 13.8818 cv59.3589 14.2793 li59.3589 14.4111 59.2749 14.459 59.1421 14.459 cvcp51.563 22.792 mo51.3228 22.8281 51.0103 22.8516 50.7817 22.8516 cv49.6753 22.8516 49.1465 22.5635 49.1465 21.2402 cv49.1465 17.0449 li47.98 16.9121 li47.8477 16.9004 47.7515 16.8281 47.7515 16.6953 cv47.7515 16.3711 li47.7515 16.2383 47.8477 16.1543 47.98 16.1543 cv49.1465 16.1543 li49.1465 14.9766 li49.1465 14.8555 49.2305 14.7598 49.3628 14.7363 cv49.9878 14.6396 li50 14.6396 50.0122 14.6396 50.0239 14.6396 cv50.1201 14.6396 50.2046 14.7246 50.2046 14.8438 cv50.2046 16.1543 li51.5029 16.1543 li51.6353 16.1543 51.7437 16.2627 51.7437 16.3955 cv51.7437 16.8037 li51.7437 16.9355 51.6353 17.0449 51.5029 17.0449 cv50.2046 17.0449 li50.2046 21.2402 li50.2046 21.9023 50.3726 21.998 50.8535 21.998 cv51.5269 21.998 li51.6958 21.998 51.7798 22.0469 51.7798 22.166 cv51.7798 22.5879 li51.7798 22.6953 51.7192 22.7676 51.563 22.792 cvcp46.4048 22.7676 mo45.8037 22.7676 li45.6714 22.7676 45.5752 22.6602 45.5752 22.5273 cv45.5752 22.2988 li44.9141 22.6719 44.3726 22.8516 43.6636 22.8516 cv42.2207 22.8516 41.5718 21.9502 41.5718 20.3516 cv41.5718 16.3955 li41.5718 16.2627 41.6797 16.1543 41.812 16.1543 cv42.3892 16.1543 li42.5215 16.1543 42.6294 16.2627 42.6294 16.3955 cv42.6294 20.3516 li42.6294 21.5654 43.0386 21.9385 43.9521 21.9385 cv44.457 21.9385 45.022 21.7461 45.5752 21.4688 cv45.5752 16.3955 li45.5752 16.2754 45.6836 16.1543 45.8159 16.1543 cv46.4048 16.1543 li46.5249 16.1543 46.6333 16.2627 46.6333 16.3955 cv46.6333 22.5273 li46.6333 22.6602 46.5371 22.7676 46.4048 22.7676 cvcp40.1514 22.792 mo39.9111 22.8281 39.5986 22.8516 39.3701 22.8516 cv38.2637 22.8516 37.7349 22.5635 37.7349 21.2402 cv37.7349 17.0449 li36.5684 16.9121 li36.436 16.9004 36.3398 16.8281 36.3398 16.6953 cv36.3398 16.3711 li36.3398 16.2383 36.436 16.1543 36.5684 16.1543 cv37.7349 16.1543 li37.7349 14.9766 li37.7349 14.8555 37.8188 14.7598 37.9512 14.7363 cv38.5767 14.6396 li38.5884 14.6396 38.6006 14.6396 38.6128 14.6396 cv38.709 14.6396 38.793 14.7246 38.793 14.8438 cv38.793 16.1543 li40.0913 16.1543 li40.2236 16.1543 40.332 16.2627 40.332 16.3955 cv40.332 16.8037 li40.332 16.9355 40.2236 17.0449 40.0913 17.0449 cv38.793 17.0449 li38.793 21.2402 li38.793 21.9023 38.9614 21.998 39.4424 21.998 cv40.1157 21.998 li40.2837 21.998 40.3682 22.0469 40.3682 22.166 cv40.3682 22.5879 li40.3682 22.6953 40.3076 22.7676 40.1514 22.792 cvcp34.8369 22.7676 mo34.2598 22.7676 li34.1274 22.7676 34.0195 22.6602 34.0195 22.5273 cv34.0195 16.3955 li34.0195 16.2627 34.1274 16.1543 34.2598 16.1543 cv34.8369 16.1543 li34.9692 16.1543 35.0771 16.2627 35.0771 16.3955 cv35.0771 22.5273 li35.0771 22.6602 34.9692 22.7676 34.8369 22.7676 cvcp34.8608 15.0967 mo34.248 15.0967 li34.1157 15.0967 34.0073 14.9883 34.0073 14.8555 cv34.0073 13.8945 li34.0073 13.7617 34.1157 13.6543 34.248 13.6543 cv34.8608 13.6543 li34.9932 13.6543 35.1016 13.7617 35.1016 13.8945 cv35.1016 14.8555 li35.1016 14.9883 34.9932 15.0967 34.8608 15.0967 cvcp32.4673 22.792 mo32.2271 22.8281 31.9141 22.8516 31.686 22.8516 cv30.5796 22.8516 30.0503 22.5635 30.0503 21.2402 cv30.0503 17.0449 li28.8843 16.9121 li28.752 16.9004 28.6558 16.8281 28.6558 16.6953 cv28.6558 16.3711 li28.6558 16.2383 28.752 16.1543 28.8843 16.1543 cv30.0503 16.1543 li30.0503 14.9766 li30.0503 14.8555 30.1348 14.7598 30.2671 14.7363 cv30.8921 14.6396 li30.9043 14.6396 30.9165 14.6396 30.9282 14.6396 cv31.0244 14.6396 31.1089 14.7246 31.1089 14.8438 cv31.1089 16.1543 li32.4072 16.1543 li32.5396 16.1543 32.6475 16.2627 32.6475 16.3955 cv32.6475 16.8037 li32.6475 16.9355 32.5396 17.0449 32.4072 17.0449 cv31.1089 17.0449 li31.1089 21.2402 li31.1089 21.9023 31.2769 21.998 31.7578 21.998 cv32.4312 21.998 li32.5996 21.998 32.6836 22.0469 32.6836 22.166 cv32.6836 22.5879 li32.6836 22.6953 32.6235 22.7676 32.4673 22.792 cvcp25.6641 22.8516 mo25.2192 22.8516 24.3535 22.8164 23.7642 22.6719 cv23.6084 22.6357 23.5122 22.5635 23.5122 22.4316 cv23.5122 22.0098 li23.5122 21.9023 23.6084 21.8301 23.728 21.8301 cv23.7524 21.8301 23.7642 21.8301 23.7764 21.8301 cv24.3535 21.9023 25.231 21.9619 25.6641 21.9619 cv26.4458 21.9619 26.8545 21.7578 26.8545 21.1084 cv26.8545 20.748 26.6382 20.5195 25.9526 20.1104 cv24.7383 19.3887 li24.0049 18.9443 23.5122 18.4277 23.5122 17.6699 cv23.5122 16.4189 24.4497 16.0703 25.688 16.0703 cv26.3618 16.0703 26.999 16.1309 27.564 16.2266 cv27.7202 16.251 27.7925 16.335 27.7925 16.4668 cv27.7925 16.8643 li27.7925 17.0078 27.708 17.0684 27.5879 17.0684 cv27.5762 17.0684 27.564 17.0684 27.5522 17.0684 cv27.1313 17.0322 26.3618 16.9727 25.688 16.9727 cv25.0151 16.9727 24.5698 17.0566 24.5698 17.6699 cv24.5698 18.0303 24.8467 18.2588 25.3999 18.584 cv26.5898 19.293 li27.5879 19.8828 27.9126 20.3984 27.9126 21.1084 cv27.9126 22.335 27.0107 22.8516 25.6641 22.8516 cvcp21.853 22.7676 mo21.2754 22.7676 li21.1431 22.7676 21.0352 22.6602 21.0352 22.5273 cv21.0352 18.5713 li21.0352 17.3574 20.6265 16.9844 19.7124 16.9844 cv19.2075 16.9844 18.6426 17.1768 18.0894 17.4531 cv18.0894 22.5273 li18.0894 22.6475 17.981 22.7676 17.8486 22.7676 cv17.2598 22.7676 li17.1396 22.7676 17.0313 22.6602 17.0313 22.5273 cv17.0313 16.3955 li17.0313 16.2627 17.1274 16.1543 17.2598 16.1543 cv17.8608 16.1543 li17.9932 16.1543 18.0894 16.2627 18.0894 16.3955 cv18.0894 16.623 li18.7505 16.251 19.2915 16.0703 20.001 16.0703 cv21.4438 16.0703 22.0933 16.9727 22.0933 18.5713 cv22.0933 22.5273 li22.0933 22.6602 21.9849 22.7676 21.853 22.7676 cvcp14.939 22.7676 mo14.2778 22.7676 li14.1577 22.7676 14.061 22.6602 14.061 22.5273 cv14.061 14.0625 li14.061 13.9424 14.1455 13.834 14.2778 13.834 cv14.939 13.834 li15.0591 13.834 15.1558 13.9297 15.1558 14.0625 cv15.1558 22.5273 li15.1558 22.6475 15.0713 22.7676 14.939 22.7676 cvcp216.71 22.7686 mo216.133 22.7686 li216.001 22.7686 215.892 22.6602 215.892 22.5283 cv215.892 16.3955 li215.892 16.2637 216.001 16.1543 216.133 16.1543 cv216.71 16.1543 li216.843 16.1543 216.951 16.2637 216.951 16.3955 cv216.951 22.5283 li216.951 22.6602 216.843 22.7686 216.71 22.7686 cvcp216.734 15.0967 mo216.121 15.0967 li215.989 15.0967 215.88 14.9883 215.88 14.8555 cv215.88 13.8945 li215.88 13.7617 215.989 13.6533 216.121 13.6533 cv216.734 13.6533 li216.867 13.6533 216.975 13.7617 216.975 13.8945 cv216.975 14.8555 li216.975 14.9883 216.867 15.0967 216.734 15.0967 cvcp213.223 18.2832 mo213.223 17.5615 212.898 16.9961 211.599 16.9961 cv210.253 16.9961 209.976 17.6094 209.976 18.2832 cv209.976 18.3799 li209.976 18.9082 210.216 19.6055 211.599 19.6055 cv212.898 19.6055 213.223 19.1016 213.223 18.3799 cv213.223 18.2832 licp213.32 23.2139 mo213.32 22.7441 212.935 22.5527 211.852 22.2754 cv210.494 21.9277 li210.144 22.2275 209.904 22.5283 209.904 23.1543 cv209.904 23.2617 li209.904 23.9355 210.3 24.3555 211.636 24.3555 cv213.007 24.3555 213.32 23.9717 213.32 23.3105 cv213.32 23.2139 licp214.293 16.9609 mo213.861 17.0449 li214.078 17.2734 214.269 17.6338 214.269 18.2832 cv214.269 18.3799 li214.269 19.7021 213.452 20.4355 211.599 20.4355 cv210.962 20.4355 210.553 20.3398 210.205 20.1953 cv210 20.291 209.904 20.4238 209.904 20.6045 cv209.904 20.8086 210 20.917 210.277 20.9893 cv212.069 21.4463 li213.248 21.7461 214.377 22.084 214.377 23.2139 cv214.377 23.3105 li214.377 24.4648 213.608 25.1738 211.636 25.1738 cv209.736 25.1738 208.871 24.4404 208.871 23.2617 cv208.871 23.1543 li208.871 22.4805 209.23 21.9277 209.627 21.627 cv209.543 21.5898 li209.158 21.4219 208.99 21.0254 208.99 20.6523 cv208.99 20.6406 li208.99 20.3154 209.146 19.9668 209.484 19.7744 cv209.111 19.4258 208.93 18.9922 208.93 18.3799 cv208.93 18.2832 li208.93 17.2129 209.531 16.1543 211.599 16.1543 cv214.234 16.1543 li214.377 16.1543 214.509 16.2754 214.509 16.4199 cv214.509 16.7324 li214.509 16.8887 214.425 16.9365 214.293 16.9609 cvcp206.561 19.0049 mo206.561 17.7783 206.068 16.9961 204.937 16.9961 cv203.82 16.9961 203.326 17.7666 203.326 19.0049 cv203.326 19.9189 li203.326 21.1455 203.807 21.9277 204.937 21.9277 cv206.056 21.9277 206.561 21.1572 206.561 19.9189 cv206.561 19.0049 licp204.937 22.8535 mo203.169 22.8535 202.268 21.6865 202.268 19.9189 cv202.268 19.0049 li202.268 17.2373 203.169 16.0703 204.937 16.0703 cv206.705 16.0703 207.619 17.2373 207.619 19.0049 cv207.619 19.9189 li207.619 21.6865 206.705 22.8535 204.937 22.8535 cvcp200.569 22.7686 mo199.944 22.7686 li199.824 22.7686 199.728 22.6602 199.728 22.5283 cv199.728 13.9541 li199.728 13.834 199.812 13.7256 199.944 13.7256 cv200.569 13.7256 li200.689 13.7256 200.786 13.8223 200.786 13.9541 cv200.786 22.5283 li200.786 22.6484 200.701 22.7686 200.569 22.7686 cvcp197.13 19.0049 mo197.13 17.7783 196.636 16.9961 195.506 16.9961 cv194.388 16.9961 193.895 17.7666 193.895 19.0049 cv193.895 19.9189 li193.895 21.1455 194.376 21.9277 195.506 21.9277 cv196.625 21.9277 197.13 21.1572 197.13 19.9189 cv197.13 19.0049 licp195.506 22.8535 mo193.739 22.8535 192.837 21.6865 192.837 19.9189 cv192.837 19.0049 li192.837 17.2373 193.739 16.0703 195.506 16.0703 cv197.275 16.0703 198.188 17.2373 198.188 19.0049 cv198.188 19.9189 li198.188 21.6865 197.275 22.8535 195.506 22.8535 cvcp191.177 22.7686 mo190.6 22.7686 li190.468 22.7686 190.36 22.6602 190.36 22.5283 cv190.36 18.5723 li190.36 17.3574 189.951 16.9844 189.037 16.9844 cv188.532 16.9844 187.966 17.1768 187.414 17.4531 cv187.414 22.5283 li187.414 22.6484 187.305 22.7686 187.173 22.7686 cv186.583 22.7686 li186.463 22.7686 186.355 22.6602 186.355 22.5283 cv186.355 16.3955 li186.355 16.2637 186.451 16.1543 186.583 16.1543 cv187.185 16.1543 li187.317 16.1543 187.414 16.2637 187.414 16.3955 cv187.414 16.624 li188.075 16.251 188.617 16.0703 189.326 16.0703 cv190.769 16.0703 191.417 16.9727 191.417 18.5723 cv191.417 22.5283 li191.417 22.6602 191.31 22.7686 191.177 22.7686 cvcp185.07 22.7686 mo184.205 22.7686 li184.072 22.7686 184.023 22.7324 183.927 22.6123 cv181.535 19.6543 li181.535 22.5283 li181.535 22.6602 181.425 22.7686 181.293 22.7686 cv180.716 22.7686 li180.584 22.7686 180.476 22.6602 180.476 22.5283 cv180.476 13.9668 li180.476 13.834 180.584 13.7256 180.716 13.7256 cv181.293 13.7256 li181.425 13.7256 181.535 13.834 181.535 13.9668 cv181.535 18.9688 li183.939 16.2637 li184.011 16.1787 184.06 16.1543 184.179 16.1543 cv185.021 16.1543 li185.142 16.1543 185.203 16.2148 185.203 16.2871 cv185.203 16.335 185.178 16.3828 185.142 16.4199 cv182.496 19.2813 li185.166 22.5039 li185.19 22.5283 185.203 22.5762 185.203 22.6123 cv185.203 22.6973 185.154 22.7686 185.07 22.7686 cvcp177.962 18.8848 mo177.962 17.5254 177.446 16.9961 176.388 16.9961 cv175.353 16.9961 174.776 17.5859 174.776 18.8848 cv174.776 18.9922 li177.962 18.9922 li177.962 18.8848 licp178.804 19.7988 mo174.776 19.7988 li174.776 19.9668 li174.776 21.3984 175.341 21.9277 176.448 21.9277 cv177.145 21.9277 178.035 21.8789 178.588 21.7949 cv178.613 21.7949 178.625 21.7949 178.648 21.7949 cv178.745 21.7949 178.841 21.8428 178.841 21.9629 cv178.841 22.3721 li178.841 22.5283 178.792 22.6123 178.6 22.6484 cv177.915 22.7813 177.253 22.8535 176.448 22.8535 cv175.064 22.8535 173.718 22.2031 173.718 19.9668 cv173.718 18.8848 li173.718 17.165 174.667 16.0703 176.388 16.0703 cv178.143 16.0703 179.033 17.1768 179.033 18.8848 cv179.033 19.5342 li179.033 19.6904 178.949 19.7988 178.804 19.7988 cvcp172.599 22.793 mo172.359 22.8291 172.046 22.8535 171.818 22.8535 cv170.711 22.8535 170.182 22.5645 170.182 21.2422 cv170.182 17.0449 li169.016 16.9121 li168.884 16.9004 168.788 16.8281 168.788 16.6963 cv168.788 16.3711 li168.788 16.2393 168.884 16.1543 169.016 16.1543 cv170.182 16.1543 li170.182 14.9766 li170.182 14.8555 170.267 14.7598 170.399 14.7363 cv171.024 14.6396 li171.037 14.6396 171.048 14.6396 171.06 14.6396 cv171.156 14.6396 171.241 14.7236 171.241 14.8438 cv171.241 16.1543 li172.54 16.1543 li172.671 16.1543 172.78 16.2637 172.78 16.3955 cv172.78 16.8047 li172.78 16.9365 172.671 17.0449 172.54 17.0449 cv171.241 17.0449 li171.241 21.2422 li171.241 21.9033 171.41 21.999 171.89 21.999 cv172.564 21.999 li172.732 21.999 172.816 22.0469 172.816 22.168 cv172.816 22.5889 li172.816 22.6973 172.755 22.7686 172.599 22.793 cvcp167.937 19.6904 mo165.543 19.6904 li165.412 19.6904 165.315 19.6182 165.315 19.4863 cv165.315 19.0166 li165.315 18.8965 165.412 18.8008 165.543 18.8008 cv167.937 18.8008 li168.069 18.8008 168.166 18.8848 168.166 19.0166 cv168.166 19.4863 li168.166 19.6055 168.069 19.6904 167.937 19.6904 cvcp160.673 18.2832 mo160.673 17.5615 160.349 16.9961 159.05 16.9961 cv157.703 16.9961 157.426 17.6094 157.426 18.2832 cv157.426 18.3799 li157.426 18.9082 157.667 19.6055 159.05 19.6055 cv160.349 19.6055 160.673 19.1016 160.673 18.3799 cv160.673 18.2832 licp160.769 23.2139 mo160.769 22.7441 160.384 22.5527 159.302 22.2754 cv157.943 21.9277 li157.595 22.2275 157.354 22.5283 157.354 23.1543 cv157.354 23.2617 li157.354 23.9355 157.751 24.3555 159.085 24.3555 cv160.457 24.3555 160.769 23.9717 160.769 23.3105 cv160.769 23.2139 licp161.744 16.9609 mo161.31 17.0449 li161.527 17.2734 161.719 17.6338 161.719 18.2832 cv161.719 18.3799 li161.719 19.7021 160.902 20.4355 159.05 20.4355 cv158.413 20.4355 158.003 20.3398 157.655 20.1953 cv157.451 20.291 157.354 20.4238 157.354 20.6045 cv157.354 20.8086 157.451 20.917 157.727 20.9893 cv159.519 21.4463 li160.697 21.7461 161.828 22.084 161.828 23.2139 cv161.828 23.3105 li161.828 24.4648 161.058 25.1738 159.085 25.1738 cv157.185 25.1738 156.32 24.4404 156.32 23.2617 cv156.32 23.1543 li156.32 22.4805 156.681 21.9277 157.078 21.627 cv156.994 21.5898 li156.609 21.4219 156.441 21.0254 156.441 20.6523 cv156.441 20.6406 li156.441 20.3154 156.597 19.9668 156.933 19.7744 cv156.56 19.4258 156.38 18.9922 156.38 18.3799 cv156.38 18.2832 li156.38 17.2129 156.982 16.1543 159.05 16.1543 cv161.683 16.1543 li161.828 16.1543 161.96 16.2754 161.96 16.4199 cv161.96 16.7324 li161.96 16.8887 161.875 16.9365 161.744 16.9609 cvcp154.011 19.0049 mo154.011 17.7783 153.518 16.9961 152.388 16.9961 cv151.269 16.9961 150.777 17.7666 150.777 19.0049 cv150.777 19.9189 li150.777 21.1455 151.257 21.9277 152.388 21.9277 cv153.505 21.9277 154.011 21.1572 154.011 19.9189 cv154.011 19.0049 licp152.388 22.8535 mo150.621 22.8535 149.718 21.6865 149.718 19.9189 cv149.718 19.0049 li149.718 17.2373 150.621 16.0703 152.388 16.0703 cv154.156 16.0703 155.07 17.2373 155.07 19.0049 cv155.07 19.9189 li155.07 21.6865 154.156 22.8535 152.388 22.8535 cvcp144.427 18.2832 mo144.427 17.5615 144.103 16.9961 142.804 16.9961 cv141.457 16.9961 141.18 17.6094 141.18 18.2832 cv141.18 18.3799 li141.18 18.9082 141.421 19.6055 142.804 19.6055 cv144.103 19.6055 144.427 19.1016 144.427 18.3799 cv144.427 18.2832 licp144.523 23.2139 mo144.523 22.7441 144.138 22.5527 143.056 22.2754 cv141.697 21.9277 li141.349 22.2275 141.108 22.5283 141.108 23.1543 cv141.108 23.2617 li141.108 23.9355 141.505 24.3555 142.839 24.3555 cv144.21 24.3555 144.523 23.9717 144.523 23.3105 cv144.523 23.2139 licp145.498 16.9609 mo145.064 17.0449 li145.281 17.2734 145.473 17.6338 145.473 18.2832 cv145.473 18.3799 li145.473 19.7021 144.656 20.4355 142.804 20.4355 cv142.167 20.4355 141.757 20.3398 141.409 20.1953 cv141.205 20.291 141.108 20.4238 141.108 20.6045 cv141.108 20.8086 141.205 20.917 141.481 20.9893 cv143.273 21.4463 li144.451 21.7461 145.582 22.084 145.582 23.2139 cv145.582 23.3105 li145.582 24.4648 144.812 25.1738 142.839 25.1738 cv140.94 25.1738 140.074 24.4404 140.074 23.2617 cv140.074 23.1543 li140.074 22.4805 140.435 21.9277 140.832 21.627 cv140.748 21.5898 li140.363 21.4219 140.195 21.0254 140.195 20.6523 cv140.195 20.6406 li140.195 20.3154 140.351 19.9668 140.687 19.7744 cv140.314 19.4258 140.134 18.9922 140.134 18.3799 cv140.134 18.2832 li140.134 17.2129 140.736 16.1543 142.804 16.1543 cv145.437 16.1543 li145.582 16.1543 145.714 16.2754 145.714 16.4199 cv145.714 16.7324 li145.714 16.8887 145.629 16.9365 145.498 16.9609 cvcp138.367 22.7686 mo137.789 22.7686 li137.657 22.7686 137.548 22.6602 137.548 22.5283 cv137.548 18.5723 li137.548 17.3574 137.14 16.9844 136.226 16.9844 cv135.72 16.9844 135.156 17.1768 134.603 17.4531 cv134.603 22.5283 li134.603 22.6484 134.494 22.7686 134.362 22.7686 cv133.773 22.7686 li133.652 22.7686 133.544 22.6602 133.544 22.5283 cv133.544 16.3955 li133.544 16.2637 133.64 16.1543 133.773 16.1543 cv134.375 16.1543 li134.506 16.1543 134.603 16.2637 134.603 16.3955 cv134.603 16.624 li135.263 16.251 135.805 16.0703 136.515 16.0703 cv137.958 16.0703 138.607 16.9727 138.607 18.5723 cv138.607 22.5283 li138.607 22.6602 138.499 22.7686 138.367 22.7686 cvcp131.524 22.7686 mo130.947 22.7686 li130.814 22.7686 130.707 22.6602 130.707 22.5283 cv130.707 16.3955 li130.707 16.2637 130.814 16.1543 130.947 16.1543 cv131.524 16.1543 li131.656 16.1543 131.765 16.2637 131.765 16.3955 cv131.765 22.5283 li131.765 22.6602 131.656 22.7686 131.524 22.7686 cvcp131.548 15.0967 mo130.935 15.0967 li130.802 15.0967 130.695 14.9883 130.695 14.8555 cv130.695 13.8945 li130.695 13.7617 130.802 13.6533 130.935 13.6533 cv131.548 13.6533 li131.68 13.6533 131.789 13.7617 131.789 13.8945 cv131.789 14.8555 li131.789 14.9883 131.68 15.0967 131.548 15.0967 cvcp128.698 22.7686 mo128.121 22.7686 li127.989 22.7686 127.88 22.6602 127.88 22.5283 cv127.88 18.5723 li127.88 17.3574 127.472 16.9844 126.558 16.9844 cv126.052 16.9844 125.488 17.1768 124.934 17.4531 cv124.934 22.5283 li124.934 22.6484 124.826 22.7686 124.694 22.7686 cv124.104 22.7686 li123.984 22.7686 123.876 22.6602 123.876 22.5283 cv123.876 16.3955 li123.876 16.2637 123.972 16.1543 124.104 16.1543 cv124.706 16.1543 li124.837 16.1543 124.934 16.2637 124.934 16.3955 cv124.934 16.624 li125.595 16.251 126.136 16.0703 126.846 16.0703 cv128.289 16.0703 128.939 16.9727 128.939 18.5723 cv128.939 22.5283 li128.939 22.6602 128.831 22.7686 128.698 22.7686 cvcp122.505 22.7686 mo121.639 22.7686 li121.507 22.7686 121.458 22.7324 121.363 22.6123 cv118.97 19.6543 li118.97 22.5283 li118.97 22.6602 118.861 22.7686 118.729 22.7686 cv118.152 22.7686 li118.019 22.7686 117.912 22.6602 117.912 22.5283 cv117.912 13.9668 li117.912 13.834 118.019 13.7256 118.152 13.7256 cv118.729 13.7256 li118.861 13.7256 118.97 13.834 118.97 13.9668 cv118.97 18.9688 li121.375 16.2637 li121.447 16.1787 121.496 16.1543 121.615 16.1543 cv122.457 16.1543 li122.578 16.1543 122.638 16.2148 122.638 16.2871 cv122.638 16.335 122.613 16.3828 122.578 16.4199 cv119.931 19.2813 li122.601 22.5039 li122.625 22.5283 122.638 22.5762 122.638 22.6123 cv122.638 22.6973 122.589 22.7686 122.505 22.7686 cvcp114.244 22.8535 mo113.798 22.8535 112.933 22.8164 112.343 22.6729 cv112.187 22.6367 112.091 22.5645 112.091 22.4316 cv112.091 22.0117 li112.091 21.9033 112.187 21.8311 112.308 21.8311 cv112.332 21.8311 112.343 21.8311 112.356 21.8311 cv112.933 21.9033 113.811 21.9629 114.244 21.9629 cv115.025 21.9629 115.435 21.7588 115.435 21.1094 cv115.435 20.748 115.218 20.5195 114.533 20.1113 cv113.318 19.3896 li112.584 18.9453 112.091 18.4277 112.091 17.6699 cv112.091 16.4199 113.029 16.0703 114.268 16.0703 cv114.941 16.0703 115.579 16.1309 116.144 16.2266 cv116.3 16.251 116.373 16.335 116.373 16.4668 cv116.373 16.8643 li116.373 17.0088 116.289 17.0684 116.167 17.0684 cv116.156 17.0684 116.144 17.0684 116.132 17.0684 cv115.71 17.0332 114.941 16.9727 114.268 16.9727 cv113.594 16.9727 113.15 17.0566 113.15 17.6699 cv113.15 18.0313 113.426 18.2598 113.98 18.584 cv115.169 19.293 li116.167 19.8828 116.493 20.4004 116.493 21.1094 cv116.493 22.3359 115.591 22.8535 114.244 22.8535 cvcp110.913 16.9844 mo110.36 16.9844 109.855 17.1289 109.253 17.4902 cv109.253 22.5283 li109.253 22.6484 109.145 22.7686 109.013 22.7686 cv108.424 22.7686 li108.303 22.7686 108.195 22.6602 108.195 22.5283 cv108.195 16.3955 li108.195 16.2637 108.292 16.1543 108.424 16.1543 cv108.989 16.1543 li109.121 16.1543 109.217 16.2637 109.217 16.3955 cv109.217 16.6484 li109.818 16.2266 110.372 16.0703 110.913 16.0703 cv111.082 16.0703 111.166 16.1426 111.166 16.2871 cv111.166 16.7803 li111.166 16.9121 111.082 16.9844 110.913 16.9844 cvcp105.718 19.0049 mo105.718 17.7783 105.225 16.9961 104.095 16.9961 cv102.976 16.9961 102.483 17.7666 102.483 19.0049 cv102.483 19.9189 li102.483 21.1455 102.964 21.9277 104.095 21.9277 cv105.213 21.9277 105.718 21.1572 105.718 19.9189 cv105.718 19.0049 licp104.095 22.8535 mo102.327 22.8535 101.425 21.6865 101.425 19.9189 cv101.425 19.0049 li101.425 17.2373 102.327 16.0703 104.095 16.0703 cv105.862 16.0703 106.776 17.2373 106.776 19.0049 cv106.776 19.9189 li106.776 21.6865 105.862 22.8535 104.095 22.8535 cvcp100.307 14.459 mo99.729 14.459 li99.1641 14.459 98.9956 14.6279 98.9956 15.2891 cv98.9956 16.1543 li100.258 16.1543 li100.391 16.1543 100.487 16.251 100.487 16.3711 cv100.487 16.8398 li100.487 16.9609 100.391 17.0449 100.258 17.0449 cv98.9956 17.0449 li98.9956 22.5283 li98.9956 22.6484 98.8872 22.7686 98.7671 22.7686 cv98.1777 22.7686 li98.0454 22.7686 97.9375 22.6484 97.9375 22.5283 cv97.9375 17.0449 li96.771 16.9121 li96.6387 16.9004 96.5425 16.8164 96.5425 16.6963 cv96.5425 16.3711 li96.5425 16.251 96.6387 16.1543 96.771 16.1543 cv97.9375 16.1543 li97.9375 15.2891 li97.9375 14.002 98.563 13.6172 99.6211 13.6172 cv99.9458 13.6172 100.138 13.6533 100.294 13.6895 cv100.427 13.7256 100.523 13.7734 100.523 13.8818 cv100.523 14.2793 li100.523 14.4111 100.439 14.459 100.307 14.459 cvcp95.1841 22.7686 mo94.6064 22.7686 li94.4741 22.7686 94.3662 22.6602 94.3662 22.5283 cv94.3662 18.2715 li94.3662 17.2617 93.897 16.9844 93.272 16.9844 cv92.8384 16.9844 92.3335 17.1289 91.8647 17.3096 cv91.937 17.5742 91.9731 17.8867 91.9731 18.2471 cv91.9731 22.5283 li91.9731 22.6484 91.8892 22.7686 91.7563 22.7686 cv91.1191 22.7686 li90.999 22.7686 90.9146 22.6602 90.9146 22.5283 cv90.9146 18.2471 li90.9146 17.2012 90.6138 16.9844 89.9888 16.9844 cv89.5562 16.9844 89.0269 17.2012 88.5215 17.4531 cv88.5215 22.5283 li88.5215 22.6484 88.4375 22.7686 88.3052 22.7686 cv87.668 22.7686 li87.5479 22.7686 87.4634 22.6602 87.4634 22.5283 cv87.4634 16.3955 li87.4634 16.2637 87.5596 16.1543 87.6919 16.1543 cv88.2935 16.1543 li88.4258 16.1543 88.5215 16.2637 88.5215 16.3955 cv88.5215 16.624 li89.0029 16.3232 89.6157 16.0586 90.2773 16.0586 cv90.7944 16.0586 91.1792 16.2031 91.48 16.5518 cv92.1411 16.2393 92.8506 16.0586 93.4761 16.0586 cv94.5586 16.0586 95.4243 16.5996 95.4243 18.2715 cv95.4243 22.5283 li95.4243 22.6602 95.3164 22.7686 95.1841 22.7686 cvcp85.5996 22.7686 mo84.9985 22.7686 li84.8662 22.7686 84.77 22.6602 84.77 22.5283 cv84.77 22.2998 li84.1084 22.6729 83.5669 22.8535 82.8579 22.8535 cv81.415 22.8535 80.7656 21.9512 80.7656 20.3516 cv80.7656 16.3955 li80.7656 16.2637 80.8735 16.1543 81.0059 16.1543 cv81.583 16.1543 li81.7153 16.1543 81.8237 16.2637 81.8237 16.3955 cv81.8237 20.3516 li81.8237 21.5664 82.2324 21.9395 83.1465 21.9395 cv83.6514 21.9395 84.2168 21.7461 84.77 21.4707 cv84.77 16.3955 li84.77 16.2754 84.8779 16.1543 85.0103 16.1543 cv85.5996 16.1543 li85.7197 16.1543 85.8281 16.2637 85.8281 16.3955 cv85.8281 22.5283 li85.8281 22.6602 85.7319 22.7686 85.5996 22.7686 cvcp78.1733 16.335 mo78.1733 15.1328 77.3916 14.7363 75.8887 14.7363 cv75.5156 14.7363 74.8545 14.7363 74.5659 14.7715 cv74.5659 18.0664 li75.0947 18.0791 75.6118 18.0908 75.8887 18.0908 cv77.3677 18.0908 78.1733 17.7188 78.1733 16.4199 cv78.1733 16.335 licp79.436 22.7686 mo78.6665 22.7686 li78.522 22.7686 78.4497 22.7686 78.3535 22.6123 cv76.2012 19.0293 li76.165 19.0293 76.1289 19.0293 76.0928 19.0293 cv76.021 19.0293 75.9604 19.0293 75.8887 19.0293 cv75.4917 19.0293 75.2031 19.0166 74.5659 18.9922 cv74.5659 22.5283 li74.5659 22.6484 74.4814 22.7686 74.3491 22.7686 cv73.6997 22.7686 li73.5796 22.7686 73.4834 22.6602 73.4834 22.5283 cv73.4834 14.1104 li73.4834 13.9424 73.5557 13.8701 73.772 13.8457 cv74.2891 13.7852 75.1909 13.75 75.8887 13.75 cv77.7886 13.75 79.2559 14.3867 79.2559 16.335 cv79.2559 16.4199 li79.2559 17.7666 78.4619 18.5605 77.3677 18.8486 cv79.5562 22.5039 li79.5806 22.541 79.5923 22.5762 79.5923 22.6123 cv79.5923 22.6973 79.5322 22.7686 79.436 22.7686 cvcp0 0 0 0.56 cmykf%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5[[/CSA [/0 ]]] del_resAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 12.0%%AI8_CreatorVersion: 12.0.1%%For: (PeopleGroup) (PeopleGroup)%%Title: (DTU Space B.eps)%%CreationDate: 27/02/08 19:04%AI9_DataStream%Gb",KCNC^ZP2J!ls1g:J(e7hP$AE,P0.oSe`&Z_sO)TGhB4GGH6WUPL>3jS6QH%t\op:NZ"Am(3=B)aU;PkpI9dKfS*f57hn\l<N%S,;N\(Y:mtDZ9Hu8^fS]-MWEtogC<9IIY;V^A).4Z!V*Hq^,^eBcV"OZ#r.1NGkL_1MpqIT\f4`q>Jk7qX478S+Ga^O7SjaS(j!R%R=')L1B>`Js095L]_Q\*]0&1TV>B38C\q^`EOf?0gg6Q-9u=8,QtkL%mOp3MIX?S;e++8\>[%?s2mKX&I>"Ks15VV0r:TaYjo*rq%pX&'nmFPG/ogeqs^PSRi0CS=:#g`e[h4&oc+9-P6s7,O>.Q.8lIfAu35:h;upiq"0G'@qIrEio0dm#Ig5$X]8/`Qu$)C>^gnc)hq%\f\[emF4lL2$nC-+)Km(o6`+hEO#EVBB&jKqX3M+HQ(3(([!Uc8%3]G0E),";[-S?J($>@gg;[Ps)rg17q4OT\tuFagq6p!_XsZ#%Mp!mrB,r(ZIoCn?cYe5=hSH5K>i+KXrrQKfY@+5'c[K*TjqiF>@<qh3c+h4=^M3k0aOLWHX(foojd_gIn5"c5&jPoThkoBP'fCo/%?k^tsLB[GoQK5[4Mk;Z*rt;\?;fA+:nk(i!_!:5ddE;F\p>TqoE.DjaTNN[-i<uPX95g=]M]\nd0F`5MbA/.,@+5%Cgf@]V^NiO,%q=-Tjf_*o$bb5*F<c3Kp49IFM5!HS?qo_B3gJ%V@nt2-!Dg."92>h-I^R`:"D2Z0lF+J(cs(dVOC5q+c:#@Q==IX%cLS\Ac*WF&V%c=&0b((4i_D6Zdh@[S!\Y]ec1WOBcDp^)F[WVIN,c0&2M50%U(F"FY"i4"VuF'*do_!`'IW^AqHr_e70NV"gRPj^I@"8n.TE(p$G%9Au7KV">[f#_->%*"i1iEQ_$P>oXOW`kQI\p`!G3H(pUE7/._ANW14;a+WoWfqe@P.3'0'`\NGU_IS)!k;:49M_n*%RqgBmWV=nd%l5RDWHS0(Z-0PS,iV;n$[R;W:USdKn`UJ@.L#\@3VHKV(3'R8"J)TU)rUDi>*$P(r9B#[82m"94$-b!6+5\J+J3=_HOYrp5dB$h,%RQ$WN)EII3HVXO6pJT2??;s7?YRHOe0G?s3[;"._/WL?k@k#95*$<E3e]$EJ#"MaC+daj.LLuS'5hIYJ/@ZnVL-6nX+^C+W+_s^A%:;*E*Vt\WP@F&LRA8Kb>/1#54eu:i]:I!?Mg6mW=[,s2(eA<F/&H:hJ:3EQiA@L]l-1d@@T<MPh53!a9c8[(24g208EaB";Oj#*%%cEe[BQ2\pQWElO'<#pJXJ"hgXJ!u,+aoBg#1,JjMs3jd:Ks_'*s3m&'oQU;,IR9^B6]cKsr]*$6Dt<r#1RleLq1&7?^,S;'8H,61%:/:$Ar'1/0l%eI_Xr[M=Feuk70DZd1f9j+RX`b)>d,Wh4(:Iq)j8H5I`rBo9O);4*_!a837fg>ZIu@fLj19tG*sJ[tGl0c*QC?&)%f#7:CJ(rT[CL[Z%K<=]Ki-gMn$`u^eg>"'#a!/!<'X6ck(]IgGW=66JhfBL-4MkTb@r!:U$uSr9]Bjt22gu:6K3@]uBf>J:fG=.;%g;Y#ppR9*)p(L)"?bl+DRS+M_r796g$'hF!577/iIiS?%EMd"]2mnWVE0N2SZ8+r*A)#"L$X,c@'1-6T"d8_pQldo?<?'[RFulh-%;@AqkA"9t%WQc"Phae,;lM01os2Xq<#d3-B#_mc$OjutOQe_./$_JEh=7Z]K:OpcnI&7ZObbHo4D\rBUs7[lD,M\,=LRuRLV"$,/%?[3t17aRni+7O/@-.4l8Z*t<g/Dm:D/?#)'YJ/rB)8ThZ:AQ>T;Jl5ig-KPKmn:<f;YaZ@KsW!WI(/$)^J9NKn#(Zf>NpG$'C:?\%hH&AFp]C?WZ00W"b\1.fr.M+>Dp5=[m;ePZDof784lJ9'1c!!jDE#fjNL8;3=@HT2Q2[\*e,E!B_/83`PjNTpK.'[d&XAX;?bW;:%;9[-RogLk.Y-b:3bTd!;hf\+Qp,D@>q5,![3srKPoEe1<XRjZ+&?b\-2p\af>&[eKL3b&R<oTA1P+spFC'tG(f9Cd7oDCMLD=ZQ+%4"K>QNK.cJG>nNKJ**R*N%OUT?t<m@:+dr\aZV`FG7V*QqakoT[7u!6BUnEDTQRU5[U[MQO*Hi7cS&%rhkK7'TB8(6W47<kSacM\%:qD.Rn'^Co%;;+&+%YLQJ%tgQ#"jN6%k;5bD>Y`nq>Tq+^A@0_c2EF$YM\/8Il_n&o@%aNrRp$(am=%nrV#9<'8Fo,'<2)[du/],%#rXrYq!dBtmJV9fp4]+dhu33)bO[fob^fWUp&2kcEcXUOcV]V7S]l!?5JEcfG]RqoqUbZqFd'WRMWK'B*T+mEfABl_9Wu0e$hW=u%FF1K<Dh6@&hZ.$OEpN>'bKGg9DpLV[^Gm<]_8,g0:%[6W03_\Qh(EdIpo"$S!\Jo6qW[/5io=%Y`WG`0g$RV7q;q2?D]eG6=.<DU%?G=%^]dfm26;OcaZ+RaF:inHYcE?&"rr)3W_a@/Y1;1<0ILA4_mcQ]l2ch*JC--_>rp7NXG5(G',*mU>!f\kZY0Uu5&Y>FZncSXp%oW1]K#aQC:Dh'O-V!lj7#A@SA-F<$tqnM!Z]tFDdqj5Esi8\bFdd(K2$%]jmL;D:63."m.BD"KiqP^"9F*N`2PBrp!.;b;M7Tnj2%nLCJ<*N>HqX(-:H(/<V8_V44nJ55$!)/DRf2Fl#nR5^d<<R!k^>3Q5jEhfa[g?YCt.+U1;f>m_U02-5IBoE6ref&26$)TRMAd1<R%YrONH>?_hb%g+;`X/reH[e@efm+`Z:'>&3@FKKQ:).u7-pE5R*m`<Z.]_Ytp,[Ue$=r:F'3#\@sOG7FoLbqX?AfPJ&C/aY9BtT#;%.jKd'a!&X!A_8bW)*/9LLL8$jb7)H3a=PCpn4_2j*"6TRY\<.@[4;J?cNC5PCg>!Q6^uQOGWgfd-gM,WX'g%T\FmZ,A<Gn-duZcb%cU//Aa#qmQL&Y5N-==ERh876@\m(PH%ng;=0cG`mT*6dq0eD"Z5)R6J+G8p:p_>o.>\0N75nU,DgaRj=i1No;h[=K7qDo`V#_RXj%a+-Z9R.(lghSCra=HE`QV?S;.J]4(q\fJTo#$=M'X(l$b)d)8Af),[%IU3$n*!&A/5RdrH@K9OL5ar[2kQGj=%Tl/PiO5Pig`Eql%g4WL:UXH5#/5:3G<GI$'P:=t;'<3:Se&Fr=keGkgI()b$iaLfXjiqjqZRhp<]t'O(242ta'1kP3[mb/oj5M<\)0`ISl+!dp\CPY0%VlcM(<o2V"RYa!7d]L$g@<Ycn3h7ZVe#i&XmaA11Xuccu>#2DY[^I*A'q#l+)4?t7G1-:fSLGc22_SgC1J]i+10<RRV>7,(4iAem%PLc/1K"q!#iX0+qGQM`;1<)o`e/<8lB&omL,;L?H]ZDt8IQlbMI*-i,FEh2(rREr(ToXQTk:!Jc;D\Wr27R(W1(#Q+EV)07#^quP%UbCf0o#md+3*+_JBaY`!F^@sWTeTMCF\"HRh_nErI_.a(0;C#oo:K#G22qt":?nfZcI=ImA0!u$>.4K/PMdgjRTco"g?\$^2qqB&%I=sOJYf6a(LYWn6^q,3_Fgc%bXjRm3:'&l*(N!/&^'COk;@UZPP7LcjSnL8e`i8lnYn^a6\d>CQ@:ClPI/k6d;HW`D@(+C`O0*r7%-c`tX;qr=32Jm2Ep$4=gl__h6+Z@m'YnJXQp][?#<!7k]*SY$oVeg6t>^:"0G+96Wd0PJ,MOrNU;4p^d_P#:GP_m@gEO%Q1bSRV)%d@sp"KjV?D>o8ZL)k\YQal;CBjS3871-7KWBhuU&5B/%d6sU697)?lG*1n2m+4$!\a%+2;EN"orYrfD7#)(/(Lf6HDbYRBAoD*bl%5FT(Q0_]WI[rVZ2FTVcJSh4P%ZfB_d2Ob`3g0'g=R@@?@WV*=n/m27GMkcK2j.lFtm-"`BIn0LZ*EeIs2:+,_>B\Dc[)_RHS[Ct)%gP4:gY-kA4T%F%JXMZ6PK]=`s1GjT::^%qGYTUVL%"nMm5U4%9qjB\>XUj98k:HtT)G$b-C9VY)mb#cM><)be-%P^K5`7?^.3"p,%F_)A^iZ*TN1BWo?"kCXt#C=aCg!2f5h,WdZ].q`>8!%9p<t3Qe*p'O<[0-':*EUkSQ=:+BUS>NO\*<?u&G>qtgCKXoaU\A2].CAI%2.+.Zcq48>R1!fm\K[GQ4Y(;N.VZr#V`K\@#,5m?!jbbPm#,5k8c6`BnrNip>cl(TAjp:$(P5aiStl.@g9ZSX1/,m/Ud<;W.0%"G%['&t,'n[-Unrm&QC/t#c7eMO2Fg=cIgn_YA%m<o_3*Z-E%?Jb0<W:C0o%#t<qt(T;^eYoAU\N'mUuA[$a/O^5MpmFpLf9+nLsq.n%Bk*)3:*r_K>JZ9HSDpWe]Y_"2mmUZb5pZmE)CuA[2M^5pn?bIKNe$<o7?7AK'-Mr9OB$:U1_iW5J?BYp!2]4`N?3ooOO?-#e.Wt+%$]kHf,&I>[!A.\-fGWUO0lH+Z82?9S+O7b_WceET'1LLW-o]ip/9DcA&:gc&!Hk"8NB[VNIr_mr!EfI!Dh&-2S/#E<*`rNO#K:;j%/:cPU^c*#Oih74E!&lVlFYJ7Th8@hc!QUT1k5jEs?UQ`/ZP$oJQlDQd-I,@H5<d@gGD8k3L8$N.:nA0._X1UP:`F%\(2!p9kG1%$%2U2iY:?]sJ,&.=^ijl<V2`*<\BkA,pAnYLUR[5i]Bi<rT<,kB<:@a@:f,[kH#,mdfA95!S!SI,YZnTPAOQ-KU:^&Bk8,t>j$a\u(%5]$\J1P6Q.#,u!]8djo`+>$]c;T&h,,"NADJ$I)k5^pSme+TB.c8-uB3U,8h6CX5&Uj*[Nl-PCedhIkG=SX3`@?T%bO%YO0:In9N%Sg/N\8:P8GL$)$%4&3rPM5Y7_,eB8QQ%+<B=)@Mma7A9=j7r_W*+u5iD^R%@l9ilE@bW-:e\h$&n9L,Np@2r4euctWI]<EZ>_e]Q%CeO]P69haJe@4.-l;cXcIms2H.m4+0_bd9N=O^,h$gO4ie(,;7aVK$Y4/.=\aqEoX;:V\OAkNITXJ"g6Hm=Pf,P1S=\u;.#_VbS&%jlE))XAM_6;Ecuf0&mOdq0'P,2["j.SKR79QMG!57a=`9c8[+k'.NlhkiZKpF$0A"4i"`1FPlpkS)&t.c>urIYX^2@`D>\[St>^X%SjC1Hg\4!MF?sHt@%>^r'(=nr8Z#'"3>u=4P1Ysm[Hg-G>NSA@&oEO!.;T<^s&k?.h,%9WFkXhOQ5s-Z19GMn_?+(.a5*ZYM,>e?%e::)t.U!Q2<n3>=ZB`3%R"<9f4@%,j65Edjao%fZ('\>-I]BR/epD"ET)"f[(eRd6HH1Y)hs.Omkc$J^?2Z2nI#=Prg%;$]HH:`Z%:@Z1Tcnu9V#)sS1@im*M"BAkU.*VnJ:_6>)8SQB5Cf](_9q.!.<b4F[Puud<@b7SmH;K;!26A&C<qNbtVNm#WWG4#cC8DhQ.^FcN%<jC5!'LVMVk#Nn;Usb^-^h'p>e2UFgU+-tE\[m[P*9qUDd?.2e@[(V`RN:[:Uts9Ep)eFiW9)PA%@a0ZTsb4&?56I(<;HZV*6/.j%(@$A?W;dmYUB6@P"\-'7Fi!9OM]/:G=s<0b;;DEh*YlV,1l)YSIprZ",_U;NQBH^<J$Xk^5%r5f^n=^#/6[\b/41gi(puD:XbuLL%K!),X/[tg\mGhn=-*X)>,"kS)o;d%fCh5V%G(a[@a_$4C`):_o/?4>k5$8Q?ShONf9$N)+0e*/u<ZRDe@I$7g09Cn(G-I*JEE;(.%`l'@$@RA!J4;9=tE0.>$E3P+K'd4^[h`C+.MgGtKe6D4cI1t^PFm/q?H:Xgf@+BZ"WQ(mmj(t?(!I[d5hk[+[4On$qIZ"H>:A'.O%s-RG"%1$EI4<8G1dk*8EVqTiG^>Ts8O`0uqQukM2lA\6J/Q&bk=)9u3P&ciT*IWi9hr`=qH?ANqD#($VoFWYs*SX*1qU)^#PST@`%%AZGO7Ecmr&/+@QV'VqEKp:/MC_%sG,#r%c.Es'i0[^"u,g/`eNF_?G[Z@YHUah<K@OB3O&i#Z-Ysce^d9qPGK.SEZ1ML^AOB+*+%OQf/l-Y,Ca!t(GmaG</p'JcKJBX^trk[b>8.cg@#<-q['S5g$NZaR5SFU_MSPT@csZlZGd`MJK)X_Ni$CRo$PaL5)N[nq9.M;GPP%IB.;FlIra?.p$HJ3^Mr2R(BR\-ei^lL:G;[3g$KVMdGc"-W8VtW]RZQU\VbS55X$k7_O/Ts7nH7]?qb#@/[<]LD@(:OTe;kX,>he%eWU/bAZQhZcrJ+g+fbt-38"gS"82h:p1?h`/A&_[8f?!WERk53J9t>ANk25..q^P+eURb7FFfd]?;f-B2gFQm04!O69<49DTQH!r%VT(7HNiJD0[>sdM9(mn?ojGH2TVo;"&(hHi)I-uH..t*eQ;C`u6F%SDPB(APmb=m7=C5,?brfBJW&DS&5D7mO+^7=aO.baVd+Bq4%ql!->I?LhH))O>nNC3*5O5%c-edRqbN]*9D@%^N:lrEYp8ODc[JEWCD<m>)RJ_>Y0-5e"^$tC5Q]40R`)C;[l+sV:i:9:16J`,&c%NXM.c9J>lu\Nr8ra`[!'_XLM9Z=:3-PiI\LMqUi:)7j/1Yna"R\7lq;r)2[V(r<:&)Rn8G#)'PBm)G2&F0(p6P0#2cPO"'@VA`:F%#WCO=Os>9]lbo`:%(&J?3:,k?,o=(/Vmm`pg.[-"SWM\[C=.ALQo*j#<[e9;2Kdk5j(>l0M;BG:G,7#q!0u2X#dj;mFUbp@durTC%]#lr!cbEamT3X&+:4=f9o`N!^oCLo<4?,P9cHh.7oAKO/3'Rr!c\(i\i;>\s57c&cKCe]mr&cr'&'iLRoCLo<4?,S"Z,*>^/ae(?%#Nt9dq0?q.*h8i-kNB\WH#S63JXi?)&%Xt+>TQn*U@BFba!XGHSjtN'"D&:4gZ66C.@[$mCl0Dt2^CRgP27lVjP;o[4GVqX4%f;Y%akN02VFa66'>7'K3M[?8YiIo]iWqYAM:-"+X&?78O^HJeP0T'bK-Esp'G]B_lu!j"D4UC/:4F3BNEn]?_6)2F<jXheiM$rd%;9`s%%VDolj)"I+G#daGP`G2'l*E2ce`.1<&"cS"*e-.tphY7V*_r&dHl3AdA/']]VtAI"T>GJ>Qs(41HW$MR7UC@4"(J],Q<'lCkpfoM%8g@MRPoJ9t9>r#s<"dO.]GCo-`>J[1`d/h^eq<=RZbEEaH1oYIl+HoCGXkp45e]jij8*EH+"Hr?[*]<27an&j/+/!OH_o:RA>UG(%D&/GXi@'4"^].-1R,li%ep-eASG,C2qA#'=eT8V=A;M2rWNT#0;tVobXN_KtcYBbQ10k:ooMq;8L7^@e8*QG<B:b^Ti]3.!@fAkh%<pS9=B%s+7>EcV1qOG[N:]m]J3'0VW0C*jCUWu^_-YM]'bh>PNhE4PZ7['A2^.8\JQ&@-&geB.F<([JI9*j'B#LuBM7J^s\QjRS%%,,c[p<1*oilDB,9\+#lQrkZRWRXr-E/'G[F!>5`=CNA$F7Y3L2:p'D6Y9Lh1</AUl%:MUWraJ#O$m7sg_h\@A*g[nKlJfd_Vg,ht%I;>pJgGj4D35qnWDQ^AWdc!a'@5$eY^tD!"fg+s\GcGo&B57UrL4dhc!ui&62B7Z6(m%d@RGPO9=2T<e,it<43@p:dgR?Sb'k32)%dh]s3.NFGIoSJ`j*L:MX2\kSEi5<faOe/QhQ&&WojWH\Rj<)ScV+XAU>c#VFJ<j.T@R<*N7hDf)\6&DF:!X3s]`Vd;Ef]W?(cbIm%#n'"uaVSARk0QhDhBp'MSj\f38p2h1H&5H7`o0k+<*O>dpfY03j>a`k,kA,s2=HNZDp?Y!jcuP@M:4Gu7DiX/I7jH1an[!sc\FN,%Uu,0<^e5<3q0FCIR>`pF:]*A2*HC^U?q,X1N-[MHXWM=(<kHm9UM,Cb`"Gf)+)<5EirGI1"5mTLBfCEYQGNl&"q7=^?e#?bBss<S%HRW/mCDPWnj:[8E`R[u:(QQ(IE?QBG"JepV((hu'8b$D[HnS/Of8HT7-Je\e[XZ$b-J])omY8im_jH,7534S<dlfE"7Q?G`!QR<7%5`^e>rB8[j-!/FhWRW^4r/+Of\L<jXf`F-UBG/hb6St[GH.,-)0e"<*[^9(Q;i?UPS?4uC2a`N%M4+?Qg-i=Ip65,e;sDbuQQB2N%onlrPfsS06\lmkrMIjPmjSH-j-FMBmRoNMX:%Dkie@oJI2+MaWbHC3aPn'!7fTl1lk(ZcAlT$dkMb_rK0<$rn2_fE%*[AgV)QpKc%Vh<^kq&g0ujbRs!$(ZHVh5&D80Vl?TI]TT%4g*+\]W0luCV<!uWsssTT^)DN!p#4p+P.h24?Anp)N/Uc0c@/fBY%Y1?EkFsbAl'j%C!5XK0d'+GPf,pX.l,kAac]?+A@*\mjk)fLc#TPJ=-'i;%#_XGj"3+*#+FiI(7JY6:%``=bqPSeSOD:JWSI!(m6!tUNJCOk#7scE%+[0F,O()N4"!Wac:2M$S=,nQ30Li/>fVScf;V^!;nA7H-oMG>:naH]rT4JE0Z1A84,iJ%r2a(j8;TN@LSV")@-UCO:*u</VTeH4Z%&S!1pK>=C5fm3ZF*_:59-cPM*@nCcdGS%<6#([%:Kpa=t$:A0LXufBZQsqki.@Z>k<`n$>bO^Z%*fkZJ61E";B<h;4V&Nn5)7G$s%T(h9;8j6q;HYi5^cJsg1Uo1&ei_V(LB'G`TF.AhcCj@G1%s>2'712N61I?3.&3d(.?$5NXKoI[aAFF:X"4l^k)Tus47s8.o@8bri%d^d,g>'kfl53jTt?$!QkU^6;OhU(6#d8HP`lWmmr=PCBrF7aB(@>fK_$X`7m.soY.5/cN_biS'hpO7#IOkY+o#?TYuh?S8-W^^gZ%ma$Xd>-2VmQ-DA";u?GKmF&#@:"<E'iT^nYZTG4p4k&OEp871Me(L/N^0K?V<=r25m`C_EKi[s.^i#)`cYaTi]X&9@Q$\1q;8iDP%EaT8UBa8O;Z$R\gOFS@jlRL$.=h5C%3\,b,<jPWI+uK\V-r,s[9qo#7-m+\K;2UB7KI;St5;[UuE$$%S_4qtp)gq3<cOUI+)Vi(3%<At'OZTZ'9K=qgjcZ'-Q6`lUJItF+m*UH2IW<[`M`$0"r.p=.0f](X^)qRiB3;IY:o\a"[gK+5/.n)U7VPq+X%i^+&qXH'H7&tE=%</0F1L*A3.>fTp*MR-PZ7'o.jZ<E*em)N-"""O2aPXQ_V_m*+W;,IjXa/74\ILoFB.cg]W<*H)(%]aV)]$!oFIMptqSaU$bb:(q^%Em&_[kL=^M3nhkAdMt_D-9XkHQF`'BS,-gNFO=K(U3T[t_lFXC/a'1X6h.8d<O><XK@ZJcg1sI'(Ue*bS@HjGWm.R'<jhL)[I2:S%IB3$[#/,98\lsHqg=dLsf&tHH#3P9OL#OmGpfKo(TJ^elrGnY^U`*YXO_7Bn?e7hHXgOE&gGo(RP8.;7eMDDmXXIIJ9%TM0>!B8e%AR5fa5RSfM@0Z,R=L+KoYdIGHCfuV<l5<%0n3Wug0o^@9UCto$0p!ks"hJ?*.1N,%;^n,GfJ$5MMeTVfAckacRs#7=V5]3.2<b2+%C?;&I-=r3I/*];;,sPhQDDFgJ\/U43@'sV8Xn=&X1/1f?*VQ-R@@V>CHI.GoCkuQmX6.N=^jGR4Gu?k?SqNXWrqpoJSe'\'rfD]:%.P-hGIHRr%Zf%lMq4[7*5SI]D-'3Qe^rA'Yohb^R"L0$O:ketoef#uu3^u`dnb;DB#<4gCak`$'Ie<91$b:K.8G$@0r7r%>CjLF'%lTSNJZ>K2qD+l_9bt%IF;MeBaT%&!QG^e3=F85+AOQ*nGn4#9KQ<83CA&EkW8@ki,:2/e,)$_DKTts*K>;s(`7a/8/\j?%Q'Vh7O%OJ=fBLCG(CeT=.E2\`&d>@WV`c:i"`g+?$q;N$.8>YPI7db1ct2U]u1505cFQjZ;lW3\/&K]Sm"ILuI60`(c'fBUhG3Hp*hX)3kW%'E?])Ol&=<<M&+5#NN-B294\]*q)sG@On'Nd4<7aAa&`58>Re2W8r?mrJ^)*'/ZL\3G<B]4bSFiWs4V&FGIj@,<D/;F9a2Z3\(^!%Yc?7rSh+nejsT?_^HXG(e,T-cRO^j%auU.kLZAgqf\W$6\4D<5QcO/%M2G0[f</m#mA82]PA$8jgsVA_i&rJgE=p?t%<n[_0\hu$%QJ:F82e:o)rS'W<NRre>MDdpB8,qCWj1AS8'FtT/?1k;JZB26`k44&d0W#:"cRJOOm]d`Dp=$"pPB<t1Hg3G+mdc%e+Pk0f:.mX=%cTIJjT";jdQ!AM=G.!oN%rH/@0ItD*%Vf'W-d>H;RA*iXicG\\WC-m\>a;X\k,V,Hn6"I[l/YjiPhA3t>EZr?_C.oD]([&[8c7'U%EU.5tW&Gr(]dr7jccGtYLbnTNo.b2jZWbBuoPngH8-6!S\tiMLNijRuQUtP\0.$RZUcZ_+(@;o``_>7+"^R[c<*<m.rt;&"U"`83%qsCP+?M-)TU3f"[Q!2So[V<YTk->70r1jKfdha)'mAb0W4[+X)2dXN="Eah4&kH&(;f.ekR/Y4RX_NugNS3]@EEo\kDGTSt19Si[%0X=#]?-?)Em"M>JF=*8K"o9ZU[a2(:X[$$gpqS'ZoXHj>CtdG2N9TX_1[@;KBM#"<m+@/[9)O:f;UUB&*\aBg2RbiPr$SHWKBI>N%2prnBOj3(.=&4d5Wj-k^4ENP$q;==CXde=X086Gnobc\$a41Mi1Fj)_H+?W"7<6i.Q(1.p*CtW%B@(9b(f`_<43kq-M!O-o:"&Ne%OMsp`l]Hq^FiNGnmCbYC3q1UBInE]:3kruZcVMLic[!*>kbR8'PT-q)hObd\hE*8dX[K.T.=o+o7Cn=UqH":!al]UI)j0A2]9jnb%ct^k'*5c*QCT`ha.%_7!Y+kL"kfK@m4E4Eu?JsA?2#.olmL5Y.ZHY3l=)6+1X@o"P05:j-g#5lerBqc>)N`oV2>tG!^#QG!OVmm+%q5dI,mrXAo)LL*u44cArV"/J2W>/c.2<]Nlj([`(N+$p^Xr\"T)b=O"*+#!'(fg_>G&,PD4re$%k*'OS!^em\BK+6+1#D7N18oT,%O)Uk@Dp/$.]$J9\q)lNJ<Xg23>.<1rKO7[8C-S6"6G=Z6P@[9YD&pMt7=)kGI]?V6LAM4&\#9tt&LaJJOnU%GdN5\8O":3DZJJtY%0n:>5d669[HalT?E0'GG*o4^s\qbWS&,59/ma42QUH?a2FLXhb9C6BM3S^D,GcWp\U\bp*nSjQWi?$gm4h?DqF:\-0^:4A+lJ7rc%HCs`\N<TpfkT90>4kuge[ko)md669[HalT?E0'G1]gpZah@j;W2$#0)nJ]`oqIbFNUak1C4[EW2\+.f[MEj;)JP89q=anL-"Y$2H%MhO/OJ0r.j^PF9[nNTW#^A/P=m]A%oPddrC$7-4QbX.gJ=U;%VWI,#e'2b\Y$l.bueMC$g!H"Ze\t<J^m6sq'8j_Cpo%Ma`Smg4k%?c"hCJ%+9?[urAD)B$oM`MB1U(.Op2?#HDp\<@S!j:i4I`2Q46:;4uNLH-l@__I2iF&Yaj.milSh!+^q=PTiUh/RHhBA9&6]TkpU%ds<\;i.:,6:*miX*k9(pM^KMJ=cXKOW,u*HKLk?!3eW/`TirT`_hbOWJ@OTD=[[kAE+c;9O"Lcq@r#)u/.eI(14Acbs3<"D[Q&7"%OK2r`VYdSlhuWl"Yap-B0m^Vp>cg%2*f/p&.#+L<%HZa9_HqWKqXD@:FcUZ@.U,0S-q[(0QNen`jLG*;bDf!C+NZ@[2^tCa+-DZ.%--D^ea-HZ]WG(c(!'n#XMFPO;A?;oa83a/\cOe\H&::E7;U<HGWM`:41e=gM#A'LWS*2Wj3pP-E<fL,P+Qo2s8j+2ga03jlPA3q^%l/"&"HA1J`(CX:o?MUN>O-bgVa[$"Q:pj=*)L!Y+MVqEMP^N<IDH6&f+A]BhpPd+_@FV7\jIZ?&L5"F3`L\68\QY,C\r<i2+>L:r%7%Z(=<Puhpn^>f'8SCX')GV:DE,sJm\o\L[l:F3u!U6MSla)Wh)(d%(3>rZe+$bW^F=<6E=t9XbOc^6E;oPb8=@Iferq<I2/&>mf%I#fmui=.pQGa'';J9Y"pPB98"326VFLP;,gT'[f.<("\L*]OJ2.];o^7b-0%II-F_r<TL.<'QN7HE:JGj0g(fe_3F#Kp:Xd.PYBF%8fp%)b,Uu=7@b$R&mFSE(6VQFs(RWo4")Pc6W]`=9210of?K'ITtDr0I"+JFZe`fILVgJ9K?*t4d.ZpLe`r5<@>e'DlcI9o!mubq%UbR>I<F>B.01BaQ@c/T;BiYY36areM./ZZhl3<HN]9l"BN4OO`4^P4!#3/1\Jt_"Q]VQi1@nGRGRW0W#cHRE.[P(lM?r--Y"B[R^%<_dj^0*5oj/ct?G"kH=W>8:cfKl>C"7L>1$k<2W)bU9#tXI6pam)@E4V_rKs2*/.dYshIfC"%.QH"O*QPs0"Q#hG/jTgR+R\)Ot]%,ag4-=-f>46a^O:93HMg@\4?dYc9_hH.OY@`eD_(>ch/kj0[$UOo%dfp^CqNFfWgIp6SbpEaClKS`cgK<9Zd5P3XG,4I^SZ:BF@T%Y@^M?)FfW78M*;T7uia+h@WD,!_GlfYEEu'+nO_]hMb>Lk=d1uMC(oR]?,tdOqt73orq'D@=>TQr+"2Sgf'\?IRf*q8t!G8mdGT7%nGLKOGW83<Ps.<TZbpCKHYmTH"3/:H:Q\\IU0L1kY7;mdIJA'Y(5Z0Q#<f8^7=4O'#(Z#[\rM*b*@PKLFikN9i=G2"L#UiPF:*\_%1I@[9am'?"a-]BTKYp^QF=KZ'%7uA/948GG"!g`/'F2PW',33!EB$e4)pb=QTJCbD_C$TgLr+cUZ.IcdrTH)jeRNO8??_RIHLu(,%3'7]=/AjQ]!M1d[hB)F^Uf!@hR458Sq^Uo&.s%X:*T.r1eWpiFXW0X',JEUYC;m)I3B,ARl0aF]W,g+k^u#&c=P[;a4*9E-paT9G%V'E&%B9c."`1`3JVTe1]@LL1cE5s[qR3)/aihtm2n*,u3A,-$+\s+AcG?EfR7Q&X>l9EOT7#IOSfK)/MMFcTH6pE7f;51"L=E<B6%9DMD;gCR_VE!#%`j<CF!c5b-%6b^a:mkX8,Yp''#r-S)Po:Z0R?3kd5&C*K[bb'L&#qrp4NC4iQ$H;?'j,oaZ4t65%p#(\@_;%73%Yfu?S8,0Cors]t\n>P8^/,At?_Oe0(P-6AE[Y;8,XZ0DtnmF@MXU9^HXAMP"f6W=KhiN_e^P[=u]'Q/tcJnJa:=;"W4,OrdF]34C%.sud"e_B6'[2)=+,ZkK/.UoS&;jf8PDaGC!YYeL;0M8CXVDbU-[F&hil]Z,u_%#'E!*]4=[u*YsApDc<qNJ^%Fl`KPlR+-r&F[6?%OfZ)A\QX'4q8tiG6p'"2Wd#p``C!EY#bF3YW<T\4$p6?d$1"sha)iBYHb($HFI^6K2a9Y_bt%Nk\F[p+cV0o[rcck;g>3JhA8uO)%@Jno.>.aWqo[lNQ]m:g#>BrQiG&?n$Y@Jh#XfBM"BWSDF=q_4SANd?P;nspuD1ujf_[-an(f-IB#,m>-YHclchF!M4!,oTb\c2U%%iqi*&qWCq`$A)6+;18<B^X;\upLe\obM-g*<:fk-o3["p0a+FS++ce^\CqTh+Wj;WF/^*CnJHFSHPk.YA3Pn(cej51J,UPbptl)L%F^c]T9`FXulH.cds8*>r?a%_T!lW>Y:'&pq<u8rC:KQ:<cuj`jG?A;E1]5gf?f?3=WM!/bc!%5K?5,iqC.YBV7=fN"ZHe]NP*)W5%r"Ans_ase#Iq*u5VnS]_f=(I#UsSZ11\g/2PcInYk^QS4'd0et<U?)3;e-*"-kpcu#RY0YgX_W4bd7`B6*0<n#D@#O(AcLRf-9^^%iMFJ1)DtO&NfDEVinoW"NK,NjDIF`*gBDlTG;/<&+:)cPk(<0SAc'mj_MmDRk"Ma.jdG9TiA],UWDTADXoQWTW&h`Tpi>(tMq[D1%=Q_9t*+=N7DPp?J.OM-4TjaGsk<ajB8[4.\crc_O2_cZ=9*PQYG?7$jnoX_"j/5b%3L(DrK!2tIQV&W21Bma3j)K[j[NTe!^Eclr%<c7Tt"+<Qoni.9d9Fqr>[`Y[=hB<j\65LV7ld4Ifj&ggpV6TZsrG$RQ7$./6%Ui(>7'Yd\d06]F@>$/9Y19TJ@ogsX\*XN!7V[<,%+AZ[^3/nb']tEXF?'VUFh,)CB!_/\p6d\[M0uGARMm!/E[L.-4,tmiiL$c7L)r6p+S3;6=m'StGeor$m0HDLC`a]u<cTI;9>lV7s%p:^X(cGuqsFZd[G%U<`*=^:2tB1lVKm522Pl#)?j+4kC7KE2b%/iCAY=RLImXV3VsoJsc\l4#NeLJo!Cf3KKO:us_JOGcM\XGP/#%\_[OG/pTZM0nb9;cqPBe3?01h&a#MjK13`P)VZ.;]L'1DR2j)3^N]/Nq*(%PN(3tp+=L3`MbI#/EC1BjYh5f'FAP\<gYIL9*7EYr%Z:mk*S$:Y"%`X73"?*:/LVuX(:9;++1P%'`TheNS7-IS++ljM-ZD"B]ZtG,Lj:F$dUA/^bnOarl9E[$dq[LcVNg)AD]V\tn>i0L)%+DQJS72rFB-4Y]0"k/#[B%m$Ga/Up(=\<MafMiYD+6nK%nr?J[Uq^Cb\mL1ms/H4)_n\HP'm4itoWHn74Bs7J+fln#%8)*<$6IcD%eWB\C#8#Z5Cf'n1Gu]nsQ[F,n?B#VNAa7DY;XTtgnf!6JRj=PK<K`P6FLnL'$#WUF*eFhl>p\]?ae4Ou)e@[?!lHF+2krV]>BCFg%S=u*NoO3B(8UoTMNX-**.UYV;EYIL"\(AHJJlc2W_n;_]dX&,@51ADfI=\(+,1^ee*c+9tkQr@L'ab!0Wp92>\l<bIHu#NKpeF@m%%>>`F]2o.E74C'*PiQol-?W)hg6;:/XZ@V8`l[mX2H)`\)A;8'g$SaYpX2gBd]2eJ<DSY5hqrpcmc!D43/6f>dCSj?""=4t"7g"C%HjY*Y`YF#V_Hb,u#sRa-@2?4b,.MH"%6-4c*P;%d)T#A06sB!=g-8(tZ>67f80WLcI3kR/JK"bGlFmnIYhTZ,lo[Z6-CfE!^HaR]%i(*^^[B8WC!F/!k#kl=t);*"\Tu5AtgKMQ=@&e9sRgC3Md+`s.;^ZtXZEB2M(-qcG"H8Y7_-W\1m]'YHIt9Kokq5FY0t7Eg:-di%%\*Pun'*P\@8e<\l-Co2[`Y]bP6^a3HAfBnP@eX7@k1$dC(;#\pa4FT'(p-F>%^?TG3ZkF'@AF<*CBXU-F*1m.1?XX>>V]*NQPOpd%kAFusNCWjj%KaZ>N1o"J(f+Q3;:#s?Anq*`@EOM%@EK-#\YtF-USB2k$T@W@"p_%DN&'0;O$]UHaA"M@AHriRA,0D\q@OQi%KgJS%N1-VpDndR%1KMY%)-YkY#$NU\,+1KQ%;6=M[$:6@HD%1Pd/jRP4&-e2Wb#!4Y.]@nBr%i^?@&EC4f'*C8X&I1(EZA/[;@H&1L1CF%\!@tHcr)3/6FK/h.-)$C7]R4*lQ@4HPnbDP'3[7&Do`-=74nB]['Vu(-*S0$>YSEBN<64)->K-Z4TJa1:&m;ciNbL(.GG3RW1#Xt%C_P"b%D2_lgdm^3V[dCQ-:uCPF0`KLeP>Vi\?nJ;gW0RX:8gQW[Lo0QWI\(UTW;XV_p#\7,fqo``rQa/b-3E!2.0FY4buAO5c/W=%Oaq*`Y-$\19X(K&Vjh-,"H3[5[G13!!n<Z>Aqgm:)[1dlhF5MCoo8<WMoGdcg3C"?:T^C9)8H]Lmq>uoTUf8)KQ862Ta!'LBJ&VG%&VAUmOZpgF3g^CiUnI&a!;ff/^j75Md!?LS$gqF:H^,PHqCToVOGWX`SAdrGW2>,L<e-1iV/7b+Q]^*41i3BR0_-EW#\9[I?J._R%]l&Me\iLF%S`m*\lNf%ngO^H]#`4_R"hFe2=JhHTfu3*59b]Ad,BU`.6ARq``Tt9`Z'n3>1a5[HgDHRh6ijVP1'0l'8FSlh&%:'F%"q7d;fc6YRa3gXEg^3EOilr]8E8!ju(o1gh%ri!\$u'X7)MeLGLCN9T-O3.X_ZC^aTss'`6"H)fTJ:s85]Bnq&ERU/6dOLT$k8%?%%M(-:]#F&gbj'F\9XeNDcJnO2<_sGiFobq#2FUaKHGDl/KGu,7M%(T;%ak@JW7WiO>T>/(>WU67pHC;a6j9;^^+D6+&/D&GTg=tp%1QK`m"N!2<g3#ZbR3`*1`"ch3MK_C#Yrb*O$8a\qoIcFehF-MR2M`$pJ2P"%X\DKK8H](qo9iBADaU%!TIrfP6UoDVWNAI51PsAb%EAP(HPf`]32KkaQQLgPlV4\m[8*V*O(H%>Q!H"7a!@iO_P#)9Nla(]U1GO_oUBETYnLTK#+NW+M(e-b$4I0V<`6HXYFHIl;6?!.P%[Off-=9Z\23qU2.K^1O8'<Z=+JJc&3Rt/4Inrh?P":$/MUK+[:+W+1+04L0km/lDq8^>[*TVN@9<J\J4DP5BFIsH@l[L.[C[u+@m%1k6a?4MOV['@LN^>#n-,rFot.6GO/]k,eI0-=I?<>Qe4V]J\2>>#gD^7?ai1OD,GfjAD[E\-Trq![d:Bk_)P;p`PrskuDHk;L\Zu%"9h%r8i:II%Gm1&S%sb-)OKTl[7JLN;CO4Ija^+h),UjXbQ+Etkm+TR=%+>=!C;+kH$8'-7E#O9!Cr;J^q^m<l6??E+kSe\/?0=X%C!j6/=91Y"*WZ40(GReoVug7qOA8;01Ic70P'esjlVW>>64O#b"__"q_Pn&kHXTrXksM4WM]7eUUJ756JSi%L8l>aP.=ct+(^)`^%N's1[[;l[l]rW$k4\]IRZ)j)tK>D.5U.28c\Qb(BH6c@%_aLae;6Eq*RVTV!ZG%+.)c<)U7^f!l9dY9_9dE27Y3K2FA=R8;C"lhV%!ls<3BSERj:tV`3[WP59:TNKg@A*<#"Th>Z&ZgY'`ip3[2X+e5M+B0HWtJE6C&ljfg1=h7$,95/'r3$ge^7PSZIFFEY_[;i1;X%L%-EtI7Wa!gm)/'qf&#dgdWs6\_"R-^t,QUo,q2Zj;"G5.\-n?U?IT)m^bRj5gjE$/C8!t$AFeO,,`=ml$M-eQ:8K8=P'Eta.:#^$E%P#t6aYdaa"$bET:N+UlR^g[[C012=92f3:PJq2niWZqF?A_>d=8/B9K;+5A2"cVqglU`$c?u9HRS7UrtL"U(k/F?m\.7,d2fS3t#%QJ1>L)P:OQ<t"&HXS7sq>1M^]5TgDBK#Ye8b<VC>"c^`sg5U@2$8E%=J2;e2RMFWi$M?O`V1GM/l"4[jJe]D1&lfQ@Pi=qH&iG2k%BHl8EZ5+.^:nI#WVom-ieW#$&"9KUO/g20*O9!K/*:$$!7<"u2;;Rsk[=oT970&5'A=%js;7o=?Leb5[W=KkV>cUS^9aehU2@LZu%*hu"XUaUKr16EDCU@F:tAiiGtQTM(`i.OEQ>Jdn,"ATof7+.,MY@Mfc_[Md`6&]D^(G[df%[>]=VBsV&@<F>B)8i70K%!JR/>&bf%B*A[iZH=JQPg$2oePmo.TEu'U2O,KNG(tRnV+taJJinVu;`C#N/HV1C.rbb2(_X\0'.+_).DBmH%Ldn0NOii2A?c/P8-R[:)7c;5%Ae\3V,3K#u2JI(h04Yi;FY[!j?mR-E":(?t"r)C7hP0'[3Z3cc!O%E)6G"2tC8Cic[/d=@Z8S@A.[M`GA/PAQds>G09s$fdc*g0n%qQ/:\XY;Xu*CDlYoPd<8V88!(W[c"'K=24T=eP@K@,iuV6aEXO*jBVfX]1TcD?,9iD[Ql6J5)3;l;mOr"1pCpEHZ&[Ic&^_C_Wup%r>t,qk!?=Jc_)+#oM6cc(4\]O(U+^n"+[/_LqlF4!<tVUPiEluLS?h5jJZ&Y(Q'LVoakf#9bt8_!S\mE`i&oQTSBa9OUjc@h4h,%%g*/,$%L!f4NKQF.jiXt'C0:`]$>Ct>]OXg;flDXg7mp(`68M?))M5<^ga$Y<J>3Pt@pT3a96+HI\#9uK2l.N7/NotYhl@p$]m(Dq%9[$QEC^82=NNeua0K%e,fRdM#'PH;MHaX[oOmL?q7dbK%?.^Dh7g\NS^ki(]SUl?ooJ`@?H!'HJ6sL>G/t*N/b9V(SV$H3BqHMKF%rq,=5n,M8?'Rbidf5E_l`D)B4#fUcK8^m2hNqPDXR+Wo@mf_,c"f0tKfD:bV./Xr*Hl7=c"\4-[7eTqBZ3Hg<\_b?\(n4>mD4kI-%6>oTb*eGu[!X=&q"QO0[6"!>_`SGu/a[!-lJMiDg)[-P/J9XpA!?KUr_:M3<Ji^t$4dU&GidQH'*l[<p$]gGi!]A@s.][].):SlC%er!'<(&`:Y[M\$i@,!(YX,Z5GeIBE*3*_-9RM[W:"_?GXlP"FD&24meL(UA0_E`+Xi$b!4'=\)0U>aDWjX[^&W-]ZhG@h)1[L&E"%'a==;$qa*(JIlk6#hCb>;0Ro5W.biq%lQ*Q=?H8-F\6DaqR"$rc2r<_gRtBo+@$d=oRJ>^KN_YS;3\F*QmX&gJ0QagAEj0?[knZV%'WD,cj"rQj-_mT-AfTJA!SaJ`$u6e$B,o_hg@:=r^DjQg?lV50,YGQLN:q2l@Xo<u>GM#se*,WMM'4knJ;3Cq[,`h5as$ju+<+H.%e>E<a_fKK?m"P:nLsP`-Ej9.D;"UhDassD%&k+>D8L99[K+h$GUu0Z%)CVE_10I%RgU7NLg*ZqfJN(mG>f1;q!uSA2Q9_j8<sJU^%RU=Z)WJO0;H*f]gW+O.f7nYeKb8cB8)es)R,uA?cV>V7mAa(l$+sYH;=W6U3PM1.Kp9Sg_PM-H_.m_)Uj6-ddm0M30'Mnf9e$$1G%njXB-T\[)J1,p1QntZjO0F;QP1c#]&=k!JHFp*P*aPF6R8-:2ID7#fFd$_P0L<&$sTFS7=:=7X0!:>b_"W;$]j;+(*=N:fs(_Z)3%[uHH4J.\0WQ5N3PcG1PiBO&r8dB[:[d##!JB*]:5#U0g5Pi=X0ZM+q>7$bZ?YQdo!TT%<9!;)UIaHT.=(c>^#MmRU.OZrhTH2tb`%,5.!BRZhAg)SguCg]M.4#W./.)?[0@8aZUcF-%;rTiokF`^Cs][;55B@M@**fci=K!W1Y6A-.98Rke9f'bFua9T'N7!cUPMC:+LK%<p1fm6j-saTqK'G7V2XsA)jC:+ZBD'8_g0d3X%b[>TM.+N9#d[V]$_-BP`u8Xh;df]0m27c-cT>Jn<Z,Qr4U8(M"n/+u'NV$>I7/%m/nI:rGBq0C*8V)QF@'T/I60'^VkaFrt3H6EZ3X(27JJH^a+Sm*RK&P>"05U9mi;18Ta--WP56Cj"C)R,mS:Wnu70W,Jmr(k[bk\%2,+]o8E<&iZ5<'E1nt$bD7"C-7Q(kjPeGofl=^IN"Y#Z?!_*3'6;M0^3pgcHmQr5S]#2:]!H`%u.b(>,5o!a^Af23`g)qER1bU%]%WRS(H&rVptJaKH[Z2sQDh'?DhMan[KSZN^u-r"PGk<5cYd9[8INF=T!54I':$94`Y8_Y3"dC7/SlO9-Qc8_41')\tb7a'e#/-@a0%Pg^n\LAUk4_<<agYiCk6,V(,0-b0\:-IEiPRl7[4WEC&QD!ea6Fb9>J6]F?m[=du!VF_4bN@]8^JJNPNVl$Sk-q#ap$UG#h/kBJl%'?eUE-hT92GD;J/2Q@Dmc"ggO$Hg([7`o0e#AKhHTMO@`Yn;T'$,rZ4l]f5f=$DOP#Qs)>-s]Lj!EC@;*[>g,=\!I4h5,\.?:4m?%L!0s3aXG#j$E8Rn76m'XZ3;-^0\@WPJKROn@alM&7?@PS6Os/U5VsL4NH3IL>)$F;OJsYK9*;;Q])gYt0iqkXGiWT>Ch*egq-pl>%RNo?KCuZK8(oBrIfbg8Kh9ntD4PA$D<BBLd2#CE^KFglM&]hTdb)/`L#A%!``qtC'Po>JXI`=dQ^b(8?;f>eW7%c;?;Cdme2%(lj%>dUdj&;26F'dGUB#\teNd,(Z)N#&BcjA@a2O\h$KdIKjoh\m^q/&I._OXo[u:-HB,I,"]0Gh?c3"DC1'f-jufDBKDnJ7pqf@Z?T(%'(n"P6lmoD>:)N>-K1\Yk$'J'NT[#g"/A#?J;m@TR:0RtQCKuJ*50AI/O_8LrC@BaAR3s,Z^qS@Rac-u.O-,R^HRCUdo6PrHq'5q%T5#a%d@e1^jgR`rTI-GQNLFsBn-Eh5M46mnYua>)]A:N7$et^ij(M>uQ4ZKjY:G31E85uh@g1ON[%]hF9l(rG>7usTL<V?o,$9YU%>3L6u5[[1D'"YJ/25!O\`ZYK09Ei79[YLtVlnc`8HoVQ;Zt[i3=VRQ#D=UFgTV4Fg#W5`-J<Fb"8CSKS;?LbKEEb/9@2"dN'A,)^%)d:bZ1)Q_6fE6<V&_NnMjEPR(KdPkm,6J"\8Y[#4Kj`E],<1ik!d^'XZ^(gdSr8t(%9V#8,'jnW0Gm_;W$o6CiIeSO'h(Y\?\"Cn%DV1aocj25A+ED?$7\qD08SJ/m<p>1thE!A+'tXsZ7$F/YUTd\q<gZKA=[YNYKlY.bq?.5/@#PR^dLkh\=Tl]jbbH,]Utu652E#/I%C#a1a&#"FDf+AQ'mS"lDB@0*u,u&&HC&msu1dISe">Mssb+_7mJ2*K=o*MGC*^(RHPHs^t4VM@t(Q@^c_Wm(Poj+V]9o:3E'.=Xu%^PdGmHFf1OQ#&bkFb,3N87bO6*3X0e<[B>BXT`2l),h"8#q(pJ>EbM8/pCn6KUh8jC4p[sH'Ei%&;h7LFiO]&9lVgt#:tsD,@o6/%W<sk;Q#,0u.M:I5iO2/PCkHK.+<7G?(>Z$JFt-p"(.kp,O[\R_\*?):<dE\(Ym2JH`^%Z$"-nt>9G,o,\iOP3=:Ic.U@\ZWNR@o&%Yp2d]Upo&'K#i$=LYs*pl:tkBFA<#p)T8ul"H5't6p+tT,lk@*12sI$"EFXs3c-t4*XFT+HGHB`X%?B)1se-<&=rRf18GY_$uV9i%)=8=FoYCh#@p;(t>?UNc@p>l40A',XF1$`<RUoH]jXcjWU^($-Z=nY^&p5FJ$u62n,s)Wf0%%e0eI!6k$\e_JUto?[BpZ(bP+Pdd%#4,:.`cc68dI&XsTQV^MB%^*""89P[&P%G=Nj6\\U7IZX@t/'1@M0IE6/kt#Q*]+qZlr/HO84RBZE(BTik6T7=t<&gO[Z2LMq8uj%6A/Crjg7U\NRur`-nYP&E17+K*ai+A`Z,Ulp7>i.&8#BbN*ek?i/K@Rqik<%X\8a'!XL(95R;%<5h0]^6a;3(3'`tEeHiG*Q9"9p%Zk.-rRBA*(4#Y8I_59u5T5IZ/Y7_MB0I6cI/f]-]^Ia@Ufd*#P%!IH6ipf<J'([<<8`7g6\[.;+B6U9#M;^_H:gOpLfHm3+Z#*Dh%G6DI2@$Kj&BKb])+UFgQ"#-2H$t:I_j"YjLDNRL&lnWmr/IsC8&kbp:ZPdW.9.\!77W_ZkpqgEIY7Y?EfcY/j"I%>C6Ree8An6O]%.9akD39TS0&\;eGe7&iHfHMP[,bT(=[ZSKo!"7`u$^>MI@+T#Pf!^8>iqR1Q"<0#$,gC*T7f'RU-q<YG$B)2n=V=&?P#!Y'!.g-r%D[LBA^b!r)%jNs)0^MtT]-[&V%/^]I5g*bDf8(LW9@b:a"'Bf@==:AL$aL:g!YOX[I=O\9,M;6AYqV>gj%0`cf!Xl8EYu)44\_CR%Tsa-!_4@=/-#qS2[[Hb(0>a[*<,P#o@Q"Aml9_!nJ6?=+1)#C;C"\;>+69_eN7QIh!\F2^BO-f<%#ZH=BinecL*AVJhBH@V-=]^n%dE[hqTAF_5ciQ"bgC)Zf//s]21'30FYWNE"Qm@7EC"_;J%T673-NHN)W2UtINPM?j74pq:TOgs.]P!i$CdC\3H&MuPd_nW,YVZos%Ebedb"DDS(USNm"P[!jo2iJ`bYZ_ac\jH+6Cb>iu`_Ne[4""'9OjBs,:Qait#$Jth?FX$u3?!Hc3Ek2ee,VNf74S[=9[Z8c)#2DO%7E!rcRuH(o9I!_%(.mn>ER%tp::,VgjsSd/JZcX)\,ktb6543c@l#?f(*q9'Ra0[7e?W]n0/l5B.utf2JDf"V8K\,=YJhk#&ZKUa%(o98?4JFVVQmM,^MZC+UL%1t>`'?p5JBAp\?^&$hkI[#EEL$D'a9G_4e/D[144j'YB)jH%:_oN7#FfNuMC!Zm"8:CTRVhej[h++1%MGE8U/ii-_VI@*r"_)s:7?`UU&l&Dtp!rSg]bp3B,tj=7q.P5Go<=rZLIOPW7N?0;B<4K&&0rp^?:sDWRA]UFnp%TL:fG^M?dp@S%&q-o\hkU^]">c:\j0[LDk:nA^HCC72m!qmS/WkN6>DnUkYZBjY$YGkrQl,]N9I82f!GPJ[7Ie0d+@,S$4]&gXnO-^&5'Gh>#7BuY%Y<YJ.2'Q.UDNF]g"DN_^M$_(1B/Fuu,D+V9))4<4OR6Rf^r$A6.9*j/GQs)XRs,\4TY=0S7-_f+kgY0B"$-`SMK2'=0^ilppYs`.%,'<]mZ1`EG>_F6?p*?i\.>0@<l7m<),GnFa.DDsN#S;Lns->6eR]\>jnXa/OH!qt_+W6-BLeu(kjKe\!Fp]G7#[q]c`</r+)^I[,%XuSDX@<d-^ZfAVgA]%PL7?K%\X0]@[B1Y?'<gf[CA`+f#o.aVSMm?%\qnuN:<Ho#cClFUDciA!IS?A"[`++#rWC8;9nd%qXb)R>B%.g]R!fWp2r[Sj.oI&o<i,?:)g!'F^e)^b8>nOil&X?X(;A=lu`e@bKc)$=8/j3@KWf[R'D@U/N,859/F_$3#[bV1RO)g!>ICc@bn%>ValW4Ld#uVle'sjO$Pe`p:-ES@FhS-6`eI)[bcGOeHAU5c$6ZZO@KTJL^R4fIX''88Zej>bRXC<Be,ipZ+I*k]BY`g!XaRe0OG^%J0E".Z^Elje@^mCXRD^=X'qd9a!6GWMM+=u*B'@F]WLBOhC#,"PCj>aD-M:P+gF-NcPEf_+?23>:e!"#hA67#KU'R$IgJ%PQ[;PB%m7s2K*b1n-HA`OJ!HXW6<#\DR_j3$%N4<3^DiE+R>@M%qGXBu;(RrZ9*fi?0]-E(V!jGCM=Ts\0Zr%1\GKc*;8?tc=ic=d@jrl<$%eITbO<3015+fD/AHP+mGQF-d*8n3-S++hN54!=k:U\^sc\AL!BOXTX"ed.7q<_7`X3Lb#@#i!6f3lMP=6V2):;(<&?_46KkQ8e2N%%XSLR[?(U"(:-i%0=fVLkN-):m$:5?LZI")Z:R_$6NNKQ,&2u=*FG)uqJrqhK%ZZO)R2!\<^NSoBV\^9#qDF'"W0Utj>Y?%)SOrZ%),s0$p)G$n%*YXGX\/7j,I>A:N,<a"KbtFFP!eeApf9_3U;!;^?,6d[j3WtqF$_%52\2BhT91>(r$d86f>uD2Z/l8RnCU9/9^3LB%OVR\b6_4-j**"Z\io&V5Qu\\1()A+*'t2689bC;*C.9s/5"0>n'Tfph*+.U1L#g,>%V!eAG0AC3jSb?/II'fdIKam/@&%R:G!_\=%jHDkq#^:Za:PKeY_$<C]9\KRtl5[UmW$>0>JU(:/%j3RnQ5lP!@%T8FiQFM5'0Yr6"JW@o-<2?")M1uO4li.@%3:E]Gn7]4;KdGN%PX@ee>ru"LW5=,6Z;h:QRPmXZCFUR5XXM&Dbs)68!8:sOc+l^SZVq!>`n&8R&8[df$*%H3)e%q:k<Q'pf/Fk,Jod.gp*rTiWi.EJ%A3M%/oRo':U0nQ5(/u0k^a;;L)@9opF=8Q+3<JMMer-<Bg)RGNa%DO('a#+[&Rmq0ifeqL('9\?,q;;J/Lp">.8UAe0fpj<!m,gU%P=;d8aI:DO&X*iV#11SmUDAMJ;qgV%EKac;^6>[lcp7:o;HAJWoI;T+_#%%XZP_s9@MZic."i#Fm$>Mo.8if\<WokQS5\%f"-YjY%MHC/Y2RGVVNoN`tn49ud&$4EeAA(TnUP&dn:e=2nFSAB4D!"u=p^!`&*_d=Qh14`(:Pt+He2Od0GY"nhADJC4+pM8ikX6_LlD%c`%!_NQA3J+$>g(C@c(_`uj!so?_p.8'Dms$HELDpl10bT+PKpBZAi$g"@9b(:_aX.]R*)"^l_-SJA4<t4g`YBC%Z,5P^a`%q.PIGcd%1W:X2k/L>baVuh?4"L`5n0CNrShc\@X>gK"22<iCM]..A`YC'7dVKCi[6gS_>Wm4f75?E.,V2)*'T`NXQZ4Ht;1s0$?Ar,M2:/5q%eeg_+%ENfBmO\mLQ0>P&0N5Ji$kmP*Y*p4`U0&&%1G*Fj7kS^IM\;SfWs&k5T<Ljo("2#2jDJa*[?uTY#mg,S6Sf$[OgrT6XcNVM%@aqTOQ`2tT".(maCb$kX""bpld?$_-fPHFcQ&sc\VeOE/$B*HI`&>U@Ance[F:@X#X]S>nSB$FI6dRib=HNf.KM3uiYSFoLN;0:7%MPa%('FpoR9*5fK)8oVj_fuW_qMOEH#!/"Vb!A7ncR2<d\M"d]Cbu8>&>Rb]aI[SYB"$Jmp*=sPD.Sd89$SqVl\AlH9PcnTLL;W&%(t6Yp3]@i&OVHRZHp"FX"$?f7?8.5;#X4e6$Zop2BaPq29W+/-Vt>D2N4BIDG$K3MiW0"oM2F9#^!7ltc3^qTdk]:l^5\8F9Vfb9%(/([_"4Kf>FQ1'6qkg+g-50!%B*WiGq%i4uBo8a`h;RSU,W-`%YllE?G%<`^@$[1]Yi(mbKINHdnbE@8&;)69(3n1b-H@=*WdQ?:%0HG]YoeWo(7SZ%NOp41<c8.lOS?Up\*__b#<tbLd^_/>-j?P#,SOL*#<Oui[JTX$*'!q9W?/#`2RcK)f:".6f>44:<,t(a5G,)G1%)-]FQmae9amWe*+c+7fLH/`-$TpT-J6>0LE*ZTBXO97=,e8f/#*-#Wr+`@f"N9)PiMSp)tC.fnF+Ibd:mS:3oGX+:Iam,2/8C7"j%Kck=?#+G043)Ja69R8n99L;+n-<PU>HT[+Xcr_lh1`]kXVGUJdM6mFo]T\/%]LQGB5pt\bThf@mAZJVJVCS4_U*3HJdtFT3$>rl!%QKT&k_8DJ&M*Oo3N--n4a^Z[<$pB<Q-MJW)IL's'`2i+tjHpUV7'%)qO4;<-ee2hM8SBt'H;F5PJ6J7D390KWK38f*;/haG\qG^`%1(!<E`C(V:RSC4HoI=(67nNUjJV#^B8UBU"Y%`f=3rCTOE/n5@0j%o'#imeM?C[/AQZnJQ/!KWC7aNhK[%naQ^k%XYKH(3D2C'[A%71[gsS?;>B\NFGB*'0.I^%_jAN&@=E@(Ue]3##[HN1+.JNie$=bkjkd>J*N4eU2O[3(406eRq%neRHOXJhI?a@#UUgg^)"F&6$aT%?ErSU7\uJ5i9>n>!>Q]"oI1;HN1=mq1a#O[b9@Xq<sfOK[34P3^BC]N`Z;+-3V96$5]%-W$(ZuO7Y:<\$1L3\>0AD8\2S0<Vh=4t%;1%UAA'*@8j5NDH-qEri3,aFFnptXK"QDG+T\>ciL1%<TD)s'X]\Mh.@.lQXY9^!Q(4.d1L.">&>j]%P'ZZ#\ae[!I@R0hIjR`X?%C/P1mX$Q4#61\r&cCPY.]V6flmtI.%#D7Q7d0YS]c6Bc`c/I=2AV('Y"[9?>5juDQg2qon7A;#IZNK'/Z/?D-M.-.+fJ2R-VQbCt%HR=(<#jABaJN/>qk_2jb.0'k4[3@UgMU-3#3QHe9OM`7P2SCgB'Es&39[t:P3C;U8!FR`Z*KVMD(hbRE#?)%X@I<<dMP^Id1gM)1%K-tGTY7e#oWn@#^3\DY4OYJ"]/#SK]!uEp/NRX:NnX()J(b5ZW7Rk16DE\7>ft,?9.'ftpJT6KpSW4"sMBN&`29=rbA%!R/,YlW4%eLB<>a9Qm'8lj$OeD&IQa*!(YmS,h"PnXCYpXX1R<'i$q@WgL)QF\V"S2-J&#*F[>bdn:<"sgLgp(Bu)mWq!tl",(W5kJ-"m^Eqd%N5F>MGT</8JAE%7Z1.6CSV0<`HNGnS!(@Ko+O;+A7MWEJO*OP(BV#hp+ic(%GX+a,@UgZ<JfO:Q.0E`Vq`9kL7aa9kN.rZjB(33e%+A:"['pCBGMfpHpHtW\k6mY)@+7JmAd>OA38XR3dAgu?3&9G;!a-=K1#EV<l0t2*RZp]ok+HT=3=bsp!66`:`G@@'S0-Z3I8dU)D%c"e9s*s2/DX@(.Z@=c?fIiAlE<*"AOP'i'lf2.PJJ6`dt0[4ZKKJ.CKG0L?8kuHu@7IA&E-E8Ns>r#+LA;I?>q'^N+KrNQ_R0\1t%h5D%qhb9gaMUL^c<JiU7)aJ@5ZEn6.X-nbBND^C_Z*Z2+1_$?Tih3q\k1Dt@&"U=la`+3?[P#em3E.>/>Eu/_*/u&r1a8[9NaD)R%B1iRK$Bekn)nORR^c%`$i>D6$rCu7mgbf53!-+KuXOocJ`>54jZJN#MPRE%;_?k&dd0T!\H?>]=Bu%)^il51WX7o(+6YhS+Fkaj(%5oK%.)3[+T;g\^p\Hp8WLhJCW9"NaE.DJ]UWDI,n]OGj/84Z0Z`CJ>fpPs5FXnYGGDO^]DG''uo(P?"FPa*)7Pp5$b4"sGnA#2lY%;P[t$G_/_^W)Gs"n3QC@D$nn<Vt%h[,u+Ya@4KCj&jo++IFNU.G79*467ZQ@9,JPJPXK<;&u=HF8l6a<J/lU#r_cVG`K+0?A-=s[%6,$L1&?ifSqN\ru'R'im6=*p4Fjg"o@VBqu3!hgk?F_UQTPYg*WmkiXNb)-;JLLHlS3M`u-)Z7G-UtXkE_q-'Hoj(i]la\[N@mCT%,Zps`hImoh*H$O7f1ls*i>5%XXr*[7_K(MIo+7_mZ^`e%9pTXA&/LaX;W"c>WQQNeilG?k!3_Hdj]#NmiHrQ`c"G6,bS`)@*$fr$%r,b!TaD"<Lpk]=WoHtp^'-"P[/*kCF2G@pJ?l^Y_kd5#3#aVO?]ja3*j)-JNct0k$rKX9O\4@,bne-0)<>QYM8BE1DZ[<*@8d)`i%K0:U9^8tYY>E1mdqS@D0W1(Y4IdWbfU#C7^3_UZ#48C]m)C."qi2R%U.:$(1P538PktDT`p1tF["F/48F$@?;P\o`(KCh+;pUh,p%%69@j2$9;U7-<T4$Lk^nFK[6b##_n@1?e>pVmr$PG;2SmbSr__Or]1VI]4#5*QC-:%(&qYY?\=mS,;8UHGnn(j"kueFin>NS`2rY%Nc_:t^Z@#>r1,2_6cAL?Itqp$'SKca9#m=N;],Y-m(r9BNIWn?Q_X0^81?L=Q!gL\a#Y64#MekhOH/U/Z45_0/W;@Kc(Aj2GgGS`%MScTm_[m+miaE*oVi6GZ).[sq7*].FJH!3GX#2T,ob3G'L4..@_rIM;BlnIp&Q1&"NLmlnY=9V-b,$VT38kLh($!;K`P5nRkpn]m%*T!`fG*6"//8OJ5AH^-V7LX1-,FiG#2WCj[o+3H-WJ@]l#koOs&=(0n`#//<k=U7?$JH=Wl@K77;_HKH#C@d$P1pD#UpTS&!]s(4%dRhWf/6fO0J4j]t#SlM5iU$U\XN-_1>Z4\4e)<$RG#IW=W?7C:G!)+#%^k":&dqTD/HNVDp'=)W4`$-:beO\tb?tb?Ao4Edf#9$o%Lf`bU!95cUU9*<!J=T^sYg\45/pa!k/]P1Z#NsVgZO,fh*!HBM>%<9)&Y$"rNQb4#drD:QE`g/@2Gp-equF7q!/RdS'kQQq-Af&5%2OH2U&hpmUa[UoN`]Pn>ZKG?4j;!6/9r-a;i?HVM3L'@&=Eu`ueXQsrWS=9c#Fo\Mi/VtCbHnC3,UL7=6PNRp/]@`u?;J:f/)%Km%=qXcu@#@LT+!e+DBp,3nK,cM!\OnmC33Qco7cWAdg[6U1:be5qf/_edgk;'87WQPBcKQ0J(niPCE!L>QM78G1oWHc@_a55sc5ng`%SQ?gc*_)=Z2-)K8@K<h[LDGo)D<n2]8/F'?OY]G&YWu.9,s;hg))(P#TRM``-^hntHnBq=J\mhO,[hNOg=Er;#^if<]]uR87`ega%WU4qE1!iuQTEtu[,e6K[O:VV+aP"\,;%%fpX9</eoRZ@(KSBeCI7Rm-j*"BVS*i2Md!E`0@`=X!=#6sfZ+2iQ\CcKi4H^5+=:cV.%:5GeJBW)[k,g"d,NJ%_n2FmqqPERsa&>RdNV8]kU<+s[.6W+5&2'JI3!$.I,?Kol)-Yc<E^SiVBT?b_)m'I.Y*ZNp4M$?4M1LIi.%RJHb9e<u]IX-EcC2Q>TX7:P>3S@3=Sl@Zq9U>ZhpVi.@3"df`hAbS8?$&\#UJB*C<%"5o9/XUlS8kV-2dCJ\PTZH/^(k.09j30Yg%eqlPJl3Yf&<>TC1=S]<3p5U?'HJifr/-_rU4+%lM2H#(K<u0_7h,ensUE$c0(0!&L5a/`(V&delcLtka5fRi8MN4e@Q]2F"Ku7]<%IGMdmLY&YJK!^(\O^TXk2\MB$[0K/K<i7Qj?`c]UDppURA3hdKM,Y2\J:K,m'A7[l81(aJ])D(-2M4$!pY+#t6(QR#n^(<lZ$nb^%=P8TFgtC#@16DE`_qVijaEEg!,4Njd2qQsE?<lAn>lX`e'nIS10#+@!rIEe(R_F+HDgu%t>XC6sT@:j&?`H?jrL;8SDr*,:j71+a%h8RY3g$N\gIIYkK:]J)=]S<Ur6+:_bI_*9uIf+6W5H6pih;4ar8t<Z2\9rY8]Z0E0ae->^^<>EmYIi[U/Fg>:*I[nKkjlXgZT%0m%ae/TVI;oa(^4t4BJ*pA4a4]Q;e[Ti3-&7@#f>/*H%4q*8SpDgX(Lr6ic\DlD"8V+9N8s&us'D;Sc#2sQha5q,2]I(4L\38D(DOR[%3-p+G3_qq=<KCLo?SC9m]cTBi0"o.nptP#;r3kW9o6tuToD?/I_i`sY@mnpmKhU@Zhu7_I\\(+5Nh$la3c[jR4\q'=e(Tg&cVJ0q%Q]'V[s1=%X(lu8A>#.?!l^QLM(O,$]kXHWTa&r2YMp(4,'&'>Vj<JK\%dj,llFZZ"Z[ZdGZEhW:%h,r&fWj6b5Mfb-Va+.-$jBh`%FnJ#OLW-$?:G72KaiVGkI:1p(GX5Zngu"\Vs*B%ciVgakBPI!_oVu/$56I3gl<bUSc%kEJg"jp?kjd^@42#hjXuDH(c4W"\\814c%=!)<D?JLOn1quNcU8Y`ph1%Up^70MXj4^(bBR9g`3G<b$UJi/>]j4p35Cg3:me.(-hTKhU/j@!'I;cKXn"B+9VRe^TE?E]DK=Z8'%pC?KF6/DE*X*_275F.Y>hk.Tqq=Op$pg,g27I=%9V<L>$XNcc@6X-Y:+$^b`/TQ<QH[EF'a2Jp>BFAgkXRtRh9i=_CMS0]AkGQN#%%8tCK9%&2P]DqZrip:t\A)%l'HLqu!4.\4AI1F[bIN[\(n([$`^Y<Rf?/P-1n(rIthT]Br[f7t?E/upTkcfr*pUBV:cBk`\cS!8-%&%e*u?9T8j\.?dSqoc>#q9ATQ]<ghn#e+"-),0&ENq28'+)\6JNu2H2puJ3_6u`p9=jM"=Df5UGl[)O=7uDZ.D1f/oqEX7/@4[3g%hq`39YU?.8]0^-rl%G\6'Cr?SF7HHs:n[1k6eQ>B`[eIAZ>=4aGU=<hqjWN0]2R;ST>M_\I*MTKP_o)Ta[991Y$EEn0@PpM-sOdD%hLs_)]RA7f[W.Js$8ECB(k1.GDC?8%Msd_loZR#8o#l)jP4:'.@E@Oqe5!3'*^:57Cp`tkH/Hqc0CI\(/ap]?BV3r?ehYORZd-aP%]C4&u2An@Ni4O,\FQMo7`*:]SB3NApQFB(3E@1EN#hjHC]u7>RrAnm')1!Q3*e"!!IWKQj]3R&h2;/\U]CA5]MjIjKq]hXE;(jOW%C5[>26Y+[f8Q9FcqXjIJg"VG^nQShImtV?k\$aMj(RJdp]pehoEK4A"7r)_K3hRm@N5W99cRB=\gjXKtF*[BKDgS:K]KicG+D*]2%b^TT@?b8@l"#9[YL$t?@Hb76/YMH'a5E5Bbm*/SgmV(,lm.J&M\:(>hp:!;h*T-S`Gd6h$I:1kJT/ZY_kcjc/b<GFEG`??C=OQCF%m0cS@b:EubN:oK[hk+1]0/$Zc0:1kVW,/LLT,cH@`6o>6DnBL3cZHn_BXG&DZ"pdOnK:mq"f9uLOIMk3Dl(/+6_d/Y07<!Yio>g;%Zh*;/o(qdDZO_E$N3:I!WR7m/IF+#>M*-ueO/hekm&8sBnPZD%hrT9olh#P2Kl1gBhKJ-`pOMDNnTa7V69b*shMjau]SDnJ[Qq-(%-NKpd$@>,?7ZZbW+99$Zqqc0)6hp*/noC3*[EE2bf%XaMr5K62m-WPc]8M/t(SYr(Vml#0&:"UAfr"Q7dSG&d/-dn!;tFJ#jRqEM%hN(sHDQTfICUj<8m'k@m#NYCBlujoM8`b0j(tZCSS#c'Y,8P`_@l2f\ZdED<cHe,h^U\VO*X?b?B5i*#O!f\FkP&'PRtFebh,RG-%?!#)&c$1Q1juHE%dIcBF]WZ:e[uF!EP=fk=I;sE'CoLk;2%SNDE!V3O1$.Tr`<F/<+47f)57YL`4(@X6!k!3!gE3S)>d_E8>;XS!%'S6,s%WhX/_I:HFBO@.T+WP*59m.X!B!dYJ#`"i78iY&<OY!r6F?:QSF8k19@E+@A?hhtk*+iSIFsS+trDCF?[b+Zn:;:.@36_.0%m0h0#KYn5_im/MQZNZNZ3WXJFi@s:^ZnDR?F8:=Z-^n\+2;EA)4jt>;A(JFI!m;(Sn@Pg>n!?aZ%i4-ulbG<ir'_lJ4H=\qhJ?h1%G[UWNj,HKSP-sLB-38V5$qAQ39t/6.F.d1W;`+5=VJ)_0J"UH[MKYY+4&40uD?4\fd1-:rf*U.D&bSE8%eOQG4Z`p_#C:QdB*Wak%s7EC7lFbfqBDo]gg??A&(/OILq!\dJB$@^RJ)kH&HLQ],o*=/2[[u.!0mGP3+1;Hm.r%1p\G4Zo^;'I+o()\$ZesVUG8,!13I'QB%4Qjsnqa:0sQWH,8&tSAjXqrrm?T%LE=nl8ui87W*)?0XC^6lR?kh-cBfLCkHJ$Ag<D+8Pt6X#rg@?Ag"f&kutbQTeG>_c!,]9*E^%G>Fn&`8eD<I_0uOEIBRuAI7^3H$4DE"aMY6m!ODP?'1hP<dT30]CLlk=7W7@DGoAY8H!DFoLFhihrU]enZB*rJ"Oj[Z6-fdSNh4E%F7nMS,DZT^h/ArgT7O^>'2=k;)#&h/N4'Q%ZGCrf/-H`:HBimM5fR`-?_1c*N*h\V6S8V<G'ZS8"E9V.d<e3lG+EoMh-SmM^KTKR%k:ukS7(6,(p5+M&rqRT/R>:3kMrRZMH8ko79a;0rjF]P)5I?G4H+P>N#C#aTS\-K@jL@S)U"n.)D7*RY0'(-jKm[h_Dlkk0:`&]]%16K\pKm[h_+'cm>lZ-qfpXF^62shVja9NOPn#:Df-3s:Smm),I]j3hm:8K>YZeq(8QT)[>*T?,!cgU>\qcDsJ\o[K\qpflA1IM%f%]+s\^g"i@8]m0;>ro8$JEt)%Aolq+Z;K'$YiK!LZT$<VAY-o>$$bih=jVcm17==e"m;dLN($rp$=.m'.r-\+d5;$h+QZlfm0&M,#%F*i*/oB9$nXDsG:\&Q+WX,=@u9+E;ZK1YK=Ouo&l%OS`71<HLLg=:E@YD]IY]+#Q'QMX1p5<6$[d:6?d_B2ub)2fEZB(%aoL`5;&%Ep)VCLcHg$jHLsDI7!`GD0HnJlfZ;!bB%'0[p'e(<\$@dPeHH4:]C.j`.^^?108i-2/.\(^]+MVQXk[\N7j2C.D%oa?_6).XYaRt%@3\N(h]1u@4c/]:[lN)X%X+=oh<&+S=WQ23DKE&:*:,SS5s:XljuM)a9+*f7"XDN4f!tG#$M=[9ES'm@Q^gP*Kq/5#/Q9XW65pCp%1a^P86Y$$ZG!(Q"ps]s=SjR#cMX5QtN>HjDaNI>QZ#('4cEkj?MnAH(/iG_R%_QjA$/CR4c9qT1?/qJ/-NDT(FR-_#T9F+Ub!`He%XRhNtlI4mE=4lrllZpQ3[7pmtl/hf7F6_uT2m;,2]tO77E66G`rYSe+7VCU>A/El)iU'4B$To*of[CN0UG(2GqqLlOW8F0I\&Jqh%""c)0o$8?6,eLeLDr/2)\@f^2EP$V1'e.nHmJgH3koW7nGl4SU6qq&j<on&.,^Za<#M!XG<O;X"R/9M/0?+K2]Vt??P/_PmR87\G%2tcB'qt8t9(9s'.HDf/0]]f>7P.T0&fB3$PF'rQ6*%ATt7LaPqC4)J+ZGZOm^1fHOC=EMB`MbM?+:"[]*iQjN[f$_+NBaEQ]dp.(%0PVSd)S9h8\3&Fh&ntuQ)@(3PW/F8ccd)")0#,*1(a%C(Pt0,Y]]k9nFoM7AniV'il#_$1TV'Ln/f2"?s*)5j4s-s2oP-Pb!3^<I%hd,$.Dm3!%-3>asj2L*qWCApkT&(;@3e[;)rouStO8mjABP!I,he&WXhtrS9HMiR/8ZMM5g!L1&q=Bb)rbTEe%LIVCd*H>spp5[e%o'Z56C-:I2KqBO8s,b!/&+^T37pj\eG;EQl\Trq'*)[S9J^N]%qqIb207iBSP9"WN;0Bp%gdB5L`uf\U-9LZSkJIe,efjZFqYEo5%4)["s\_R@?lhH!s6Nl)F7$,qP/V7g:G]l2uCl=SS"2p8VQ1EUdEDk<8qI&'mfl,XEk\-iA1[X4gH`8_bH`?FMZQKL,n"B/ujumc^%pcbmu2k'=['Y]4:G>S&E$JuptiHqPDC%ZRi:5=JA\!n;nkQO(^Hj>Z"T^a$Z^A^G>1ql29`qSp\2fF2[4WBI]40.e_;?qnortIZo%dM0E4cu@$*^+Ipu&"rKQQE0a=8&PeImc-mE7-sE1p>q=H4jA4k8E9Nm5RnYb5#DT5qMZ6:1;]AIbW\1>a&AJ500oc;/'S%ae)f9Y%04.EZFS"JXr8R.R^MI<lrcn1lj`h_'Q[\cePhTHp^+[*4X$Q-rAm-<$ma5@pD@q&^"2.BlkbmJ]g@\["?G=YQ0kRe`^I287O1,.M%%MJV_J,A[#I/3X:C`E2C;sDDDmFV):*,<.I]?suF?ie4Xqph:paL<1DfPU^OF`qtBHu\HLk5+,ofqrQ^8fbBJn"B0!_H=7Z^33jC%f!`'Y^>,eA8rmR#BE,QQ]&1BXPKH,co"*5ZPEqR)a&YBTU;iCX.l+!bbVf%)aB6J!O]%gWZg'QF#+uKh+Ik4M5=g.5+mk8T(?E3^%Xi6"EMU)jQ]Bq"BrqYO8HMN@ok)'D[r?1rbp+)M[`rOFk+h%]%C#A!JK=LRLqs^%g_]HrnO1JJC[jh!noEdWSR.TfVhnGYMfLM/$%B`@bL#-WBY&6SShO,Ao<aS;=sbB%Kad@/rG)bQCu;*2H8)mXaS"4>FaO'c!GlIkRDh>=87(3`jH'+<XIbe<W7oCCo/qm22TL5uH*%ge@jZj1KFqbLpml3IXD?S9L!#OWEVUgX<2+gO)c)q'ZomJT\[,f"""gkef!3]-n'cmW<mgf&HGi^`FZ992.kI!j=1?jO<LUErWEq%^"g6jIbZu>otJObH^SF/l3s+"SH37C#eQPTr!\!GOKh05T>p=S.D?&aCY.7m?_Qc*bqX\E9/,?cUMjZFmL.#/"!f@A;,ZA:T%A=d%S[>:D5$j57f69Bua/^#?jPrf?;,9<On"0O:mP>H,]h=Ek[?.`\\Fq[Fp`@2&G2JpDrWX@qO"WHnnihdQW:<q\n"Zi[(pr%?i`D.S%o]aADgIllCCqhr)MobVdGK\a[`U,:F89SR8n'6A#^W-.Yctk&(SH<fts0eK;Z;]r^;K:N"TDu,ceE"SWg!ig_aWCW2rd)AdB>cV!%7j2NOk6`r#apoJQs7,gLqW#1"[n,iq^->)cfl]UJAXZ".H&?2UX<BF-*KdB5p(1Pu(cce^H+=#mZ7AlE3+P1jC2VLOB6sASf0=\'%oX1^VS6Wg'f0CM#,37"X2qQqS'/?!#.g"%_5@7Z^?W>p3i&9RrYCF1\l/o;Je*QGpbGq-R_8!bb>2@)Ghc2\(k3p($+9)R0r&9.T%SX@MXPQ1QaHL_hEs%pE"^1jI<dENpRhbKG;@<0m#ql00]4$fO2[^FQiFApZ>9a'0a@oQA,kKlJuId1bU"o'p+gM,I^he=:EHE+Uc%SX5U,mT=9aJShNe_$+_c!8FJj]UG'<ZaH:V\dak/@gP,uBGaMAZKu9.S#NPjkVSDLa4=kVlItu_H>:+`h!W>_SlW1i!:BdX[qeBo%\!*G&ce_uY+?0\qbK6f2=t;#T^llBG@3)7ge**+LPCCi,Y-8cB^bBmoFY18nPqm*SXgSoBcGa,?WE3uk>,*Eo^Zs='^,kX>f%.'/%(05^(?IjkaE>E/7j1Cdp)hO[**qO:0_c1EJnD3O5DeCk4R+f?o";C("%LI%e(oFq=8i)@)g)4Y*Xog7"N(=+V!"!RPR=cs)Vi8op%Kt`jI"<1`@^$WJ6!(t;1>litr39=[8A2%i&-MU1.ZA;k)'/rMJ=99+aaY4A&Zmpi91m'/`GZb@6Nm3@BG:hYi)t?su`bUk/<eo7q%Fa+;Md2r"2$X6nNQidN0mAta]]i#'u$WJPD(2LBX5`TGdD$sigi%9I@cnR[`Y#_$-.6Z35X:!l9%VJsL(sM,G2>#"+Xp'=>7W5A-%.j/*$'&B[`'J)-TZ%m)s!M.(EV5);b2PJteV2275$a+m?paJYKm;YG_Fp+ZETLQc#W*uIQ`jN(S&$RALK*Jb=q$$<E!"j$1ZB/)h%ETV*W@$t2.9CQX+m&%T)\7fC^3&U7ZIUT.oZq*eU$YZR9V7F6hf/D)lA.:LWnugTUS_@,JN)[U+Ofmrl3cJip?1k\,Sc%`qal!+=%5(2r*`4ijDFSj%HHLg7Pc->A2:EW*imm0QNhHlgZUFkW3pD7a>>5[B>845n?+$ecZG]t+?O?^$ioYm;3[30)Z]=lBV5jEWYHBeXV%&m^6GRE7BHpE,`cj-sDZ=65mM#tB8P'\_du./]au"<cU/Y-ELh#O,m!V4Vt(OaX]kls"DE^;CNZ%`@Wp%(#CVRXOKZm(7[@p8u*J%bldj"=Z;F]j"7L<oeIn:cT:"PbUUh?jp&LqNUOuZ%Es!4e]-;c+4btn`4P?_08mJ^bMo]6LptVE,Ec5QK>Q5p=s3!%X_h@DV49Dl%F"Nbj=Lp%Z^mAJN/J,UC?dp,WjbPIrD-b!4J[.7fA?SHbA/=Wa$la$"iHGOPrqgd1IHBYdGBYuO5(4#1ki`,To;2Qe&Le00E^mF<%(q<*3^-TWm!YU,87=6A56e"LJRc?o2rCHCHWE46'l<(03-1Do+TuK;8djZ5$.bCm03is/_ks9,.JWVPiHu7Q:Ks-%BfhN%j&0&^(%rVu5t$$]u^EA6Yq0/L%,j(3&>NnmlBC+\7ipI0G4g.2$(>$B`6WCO)Y<\IdB5J.!b:IkbE@<!&L*<%3J":-=t5=qA1Sq.[kpdi2R%4L:7@OVhmmj4N8n^U)_/n%F-RdTA:p4dOka\'Cs6FfO_+eQK$j<p>sJ<>-E]mD]+6&3jhMbHPFnS!7B49b9`_@Zs%iBNh3_=$R,t%2G&TXRj`k8Fg.MoM!L2pUUI0Oe?__!L)m!Vd\Udp7T:q^E<\$eKeeuKZ!(8+>ABo[*.U^,[?>^S-OW*=a$H#gi23Ia6'?&jEfA?&%2in(`SRbuM;O7<D.E0k?_?B!P9ghR7+q*uKTE9[-I+d]7Qj?S.3!",OPOi&E^nG5#a"A#5@T51'*#Ja;a2,7OeUhL6Ui@R_W1-%C%=t&sW^S`KZ(et<tn_boJ8mWSIB2bc@p.V:_O$"tJK`^c2)2np2M.e24ge?u&_a<#d@9P*o3&uQ.L.ptcBU,B-QRN/+J=EG-L4:IL%f[A(g".=M!q-l+1c+Hpo8uH^?'YJEe<uasMi%-*=cZOeG-1i/oG5+:];Rok*2ER@"-em`IckJ2H/"dUO$CFN&./&41Moq\Z`Z[-0%]9Z^;?m>-/gU)]d72QO7(,Sq1J:@^?m7)oLZ!sfj7FP_jgqYe6mHRV'"T*t/LPP_Y6G6Rfl9(Pch/Am7a#i/OVUlV"4)1VO\tSa8%+8kWcJ+CuW5P;8l5PXPK""mQ#>:B06s8-=+o!Rq6pUf>Yg:r%%:Z%NJg]kq@a7&u_^\[<KT6fYqkF[%bl_"!r#E!#/=Pb`TcgUen%5CMpGci!-BcTM$R7j!%IiCj>)^GWOslgOZ(c[>QC:H\1707W,Zms`/XcYXM;?h.:Tq>S-Wj<+ElOh^n%\)4q9Q3k-\ktD$H)rLMc%\%h%VmTGOtGA0,#l%ffZ%hF>I`n`B31<=%b&O7C)alo(H*0_lSI`>VB8_':B?.%(RrR1Ws.&S!(_n?*l+iXC^R;2u@!.;MZGWN?g%iDaD^QHfuii/43Wm!^oQ0fE>DJk4C19'uk;:]dQf?jJ>L#phA-Lt]F@7>qQtX+sI>8SD#;Y9au0\l]"aLBRf3_GL$:i.>ZG;UF]`%<\m-pTQdRXk+@]anGV6ao!=rJpZ(:umYe>Gqa(*Fp#SNer^ukFQ(\(Bp>mF\hp6`k,lRVfO+X<XYPgFoRePNsK;NdprA\I/pY([\%VJSQoER8gp[1<L:dsgrLT]t-F*tFa*rTM9fdrF#q9:Po^9-4Xn%Y"t<%Y"t<%Y"t<%Y$,'c_^%c]iogP_`f(<c_V[]^Y85sQXW2'%k^U#4iDSoq*W;<k5Fg)M1&%F]qCfj;m"YLtW?6J\s'k34IaES+rRapB?g5:0.,&$b^:[@N?\lE9'^\qnMhL4;b/YCldE=2X!du]9%r+O&A!;aj=NaHkp$1PM!R]DKTH,WXm.M2OQM&U?Hm>a8(T>'oWgKns]a_QoB$1M&L?[_LB45F44B^b.u(DpMCla@aJNa#ICEqIN7%2)jFC_FH!!XsH"bf%64b#.pk3dl2h--8gfgIatj(::H$H9A.qrk4s3bnA%-Cp86I!ZSC2f[%'=&m8]JlCE0n_fZ@>:q8&?UDu@EV%rqbZ9I,Yg#I/In(qVue4@:s;9DnPc(0ggpFQQO!A:2b(pru2LJjX3:mj_oP45Q9^#^[[RBIcfZ$^&*dNo0Mi9f,rVpJFKJYJ`Q.R%obX7sf5EhBr?"9&PFju9iu^J\SZb9OahN)Pl]MA2BjD05ch438iN5&Pp]#O*>Mo>JJ,f0:(Vo50T0;qm&&8"da8Y&2DqZ,,:1(2&%Fl_ad-gr=9[t"9BO+-bY+$KM-(LR#!qRlI[$U9"37o+O*d1?3Lp+UdTafArY*PM$t>J1,C^]!-;Ie0OO+Sa..#M/_(1J`GjZQK26%XT@mmf3WGbm_GgA@.I#6qWt\?nE^N433Ml$$d\h1>G(l@S!(V-;c5Q7?<M?<?[1CR+8t=4Shn6Y)UJB?Rub;X=6J3t:L&/J,Ij^a%E9CO,nC=G.IDH2LWk@if;d]@qmq&4f2]dUb3-+,;48G^[s6pj(l^8Pq14arNjd0:uk.goWcX/n0h0'7o`R/0S\>.`$IH$_\qH4\!%10$R;iR^9eNf@r.8O*r^k[s;%CHq=a-iVkb+AC9@htbJ<h_XHs1k?"cgr>l_c&Y'frL]Ml"=q.[h"SPXd-IV.YIXN#,=eoHp'r6p%raXj\nafce5VIT[_ls!_S!KGrY(7<_gtBF@c:>VAZmA-@`Uc=n`lHsP([_95#:c83gj%`js7$c7$84O?muP,&^#RBO;MEBQq.,0d%5P^@94L!4Y\s`tur12(q<2eRW*D(Hu!&"5^/XLRML?%d3O5#\INid8rQeq?n?hqOa/4UTeg^hnc]DUsGpnhBlTeCl`fbZ5Ol,@;M%pVdZVDTW2Q"%_a;9nT;:I/;S^Z)$XIci<(\T70RM&1Rh4LQcq+--ngRjmPEHJHEpLpV6Xqq./+5:qWL3hF^K@b'QAEmAHR8<J[9^%o_d1qrlf_=AWjRr)Q;.UJ-Ik62U;?qQbN@SVCM>g$ig1]0E(S>NBkAj84>06N4k2f]D'-3^@kNodD0ASWNSJUi4WX=D3CFjG3jNV%qpHG?pZZUFhpfkts-oX0h]%m8?.[8cm)ToChrG*I^Ze+Xq$&`fEZN8`IH*+*HII2mF48[&+bN_8M;*E1>As=YCareRCo(Sjs84HQ%K>-)8W7))/XopT$s7"Z"^\bo]T)7447Uo,*9Ii$Yf:=7M\c:`#?iSE856U[dBC:W*f,ZYB&D)I>AU`g%msaK\TD@JJ^@C[lY+JOn%4'jfKi@/PVk7-nTj+mU<bZXX<Q80lrrNdI;]`(WDHY90H;4;ZH3o*2H%o+^Y-.e=qVHq:SW4DFV=-F0?lkLmkWQMJ]:>Yaai&f^s%fl]P[NZ>alb%"Ktn&0cuJu^=!Nt_7XWFYC(WCJf'!=f"tN&-p_R>6RXp??N9,@0X=O-(&=RY=9+JUE:g!DcR6,$T5&cGpMJ3p\Hn%#^Fimo0n+]]#,('04"H?Mh:'oS]-`M$[hS^QY4"Y'bfNWP)H/BXSH!P'a>F^3;gDJ=YED*f_n"]nd9e'ht!oThZH%Q^?a&,*7fAh%qnMdQZd6DUieoHPs6N\aqSBXY<31-.&&.hgMq\!l`?uc-i7i,=D7o1AIp>0s^A*=6r.-`:r1cJ1G6_IR_'_kkFUFafhP/<=0>I"%%o3-jo>Iue$WrMF6Ap+++Xq$h_^JKs6*Y685Dj>QDXj7gUI/B8QFT=B";9ScpIsf'uSX3]4l<TiNIqU]'`m;D2PrbCAE*2;bBATai%HJA1b<dOQL8\*7S?E=PeID5FkRCY%3Y4M4*IkF`Ib>Z\:^&7n%>^tA3<E+;8c+)1D=UTHLkLnb5Q/:P;AF\jY#B?U?jd^T]Phra)%8h]V4df4X4._TI2gliWG?o?siZb.cEO9bO)e]?TGP*hm=f.&75-C]i&39S4Us%HJ1[slYCV'jR3PnMC,qj3OV,T_?e@@a<F:GlS8%:)3bLgD\!(HVZ]&o7Y[s?C(An'=7Vc:StLa0"]_I6BaVeIRZO&^o=2/SX2NacXk,BrVp\pl_Vpq9qXpZMuM/fN)Q0ula+o?ep65\%<n$rkUHc&_oDS]uBMmrubI6:#L$t::Hg\NGr,,_G-i)=(4oPPcc$82oTDu7h.D%(nPBt7S^A,Xqci3R75CN7G:OM+'DfOus?'bDj%huCSYqP-:O_r(KrauD#jc_Y]I+$0CcK6-mBrgZ1>dTnY>32Bms#*XgNn/fJTI+''oJdKd<c+;7jYnY+.gi#mW5)KL\jSu9)R\;fA%35f&e3<a=Y<5[TdpYHRHQL?Y=./9EK/50jJ4i)+4^P]9Ma`IA1((33/jZ@KN=l69a<-Q<H<ujMSr9C>D+$Xo`9V#>(*P_I)RZl?/%GMUB)-a(/Z\-;5]bHF$Wc&(b(\FJ(nYIXJk;`A$4o#0)!Xu&]t*kgR5X%uuEj3>'gG5LZNgi<4.\))/s%G./\qPl'+Q2r&=VWNW&%DnZ+pds'^:Enu/qkrWegYVk#P1OpOW!bDj[^[j'Z?$uhMeCV8!\eCtQYL)H6Y6'6`gi8[]^7hgR"$TG=%<\i&\).6PFfE]^='f/7%!G`Vm4frR-YICX9`REI9He0:I^bk1N%IW7(DKsFnGLa6n>2+FRW)%kL>>#V0^&9fISC$1YHK@$9h0duA>.:E[k9h\sHmmG3D$?T1%DnGhVX-H._P;h?=VlQMjeONFmZlUbc;hP[3]'d371b)FMjN=O,],BOED"/,P_Z@(gn3"ljKX[e_m]P;>SQ,198$BMt#2#`Lbmsi+%ob0cFk8;Y)"rb282:l2VePV/la%kE7lY4_AO/,obCkiD)m39m)TM]q#S[U*4!LY<2h0)kJ;_)Ys0&UnrG'&NAB[kXkd+98P6@lfF%p:KX[!-6^;!!Jsf;24YN2Ut/]'hHt#/S'&aJn-;qB`25GCET1W$0]%X+e:JLhIbI8e$n24oGqnmPb3J"&)uc[no2HSIgmOM@Z51g%H1dHnBEIh(DUje0X,d(:-]T^X(RH5Up3J!+5aD[EQ@,eU2j,JH/Ap7+&ELGHW)o9\+E[$4+NcWn-5BC4b&JH;Is50c;[\b6Dd09?%WM/`t+S1+UNHuSXiqTn]'W=O8]?/M'5+X*F4]%/C:L/1H:?CEf_27IYkio]plPnX;dnjCu2c)I6G[.Gl#kY],YIP+X\n](%Fn]U[%%Y+P=Wub=`^\6^td"K3bJiiG2rRP1Jh#OjrbVXlONra<C"0bD,gj89<\(hDMJ714>@E?r(F5l8'fACQ-NAk*l?-N[K@g=ElilYcR%`e`ZqY.VWidRg*%NWS.>NaY"bDjBG_)4+D)PC]9Bqq1f/dd^^8X1`@Bmqu!LFLR@TUqa^&B,p`el7MJ!+Q*X<78A@lFIQO`a,@a:%'e&FQBfp%)R-4"!^X*j0I3alV9a0CNa^q$Mk)qi(n-QJ;k[4RGn^0J>l<;^PaqS78>:kSC,r]+D<=nYZJ3"%u6L6``e7rAKh,RZ2%k<]$o^8?r]G7F^VPQjDj@=CqC!X"?7*<'6k?01eO0!ZGbFp#YNEP$*>HZZsEgH@MV4$Pqk51n[lH\;%F8Jfu;PK;SSg0ag/fA;ie%bk//af;KG=!]->?rm12N$UXf9s6a+kms@!kHX#Us-Tn)Vm-DssiVWZ7Y9/5gUOVfHmlpcPRJDs-"FbYeqond"hsi(DnZbmge)rph%:S7L\&-'c+?^I?"mm%DeC$CQ3pZ;]Fr:*R4iSP]+r(EZ3oOACppfmL3qH=F`DBsur?MjHrrI7$,ci<^hDg_Ma?i&P*rp!;:rn<??%'(tT\@Q=06Du8"uqS_R2oTcV0m4855fge6s-ZAmIV"F9t:Lq$.Rt'qDLHkIBa1h2Ba$06s^\ts[I\X7inR+!,cAui?O15&G#<qtp%T6g.W:]832H2euaeh:s#EOSS(C1n^H\F5Cf]]]58rl@Snr;Jp,kHEd,(i-<>+a<^!G&V0mQ[eBS&,b;Q4n.$0]74V$T=IU+en$cs%LkE&(D!A\29A0)65Mr,D1n_LiXa>#'C20ibUTLtPPV0T7eD1RnN=C*&W\Djr5F9k.iS<!bF'G?:1]*nh8d#cc%#77]`:..n=V06(%*qLMQM*5E::d=Z<$ZW@\/1eC1.Q1[0!s>\kWL.g:3D9=6jrJ'>*$hh*aV?35UMGQorgmY0ALMj($3lYGp\#O\)#s;e/1jbm(P6b@%2h'Xt2S\&X^*L#=Y!Q#2HPC&=DO'V9Uj5&3;_FoPk2g;4C)[_p<>uL4WsDT@Jg?fXK.rB9'P!PUEWoX(Q%:X9ceSLR8u?g9mHdb-%ANbh.(V)1:0>U]^I*gLn&qFW#)0i3bh$[n>GC@-s)e"s>/^R@$CUbj!),J&-,j;ghM?9fkXY1G<+*u$;1]tN*(3rc_7A=mD21.Ct%b@h7Er%61BX:?"P"&G((WG>L4-rV6q)39^G>:+%?V/;JD.3HkcQW7N&PX=_jb1(07Q%!FN2;s+M$nb!,I8'.]DY/G(`ULZ(;XefA%,#<8kgR)X[">=9i8-hi`^K5l7q]bM4LIko69b-o:XS+DM./5#8kTpdZT,G\c(C"jJNIpYR7>?ra6*(/qcU/%'MW]6Gs'GMPe.[FG%n5RG)K&OT?]j>E3pr:1`2[B@=\^FT25Zr##rNFY7`WELH8ahSu-r%\,V07g^;EI3g.3@An-"u.Rg0[F?pP\`tTR!`J+!f+CV>[(O%h$r`V:$6D-5A9n:6i00u[9M>qR\nofIF.WQQM,s.AN+]Q1`a=ZFN_$51_#4^+9!8Z*<$rW*<'405F8DK5,A(;DPqS`C:%@5n]mt!%pT#U3^D(@jUA7]aqdQD8'$V4;m7qB0QtW[hk)4fah9p\4[-s:B=.8j]UA'qKs$G+\U$-tPkhRog0*!FkNZ<`p7jg<W?@Mh5WLIe:%l.!i8Q&^Z*IdH-p>FW3Y7`RuR\sdM"ATGnZ$@D]8]5)XLF8gRu4nR+uc=^aE]A0<CQ\\5*UW6+eL/[9mpQ866rgutMq;d#hreZ]K%msHV?Gj:[dA01MNI\JHZHJn65s0&>Lr7m2`^%Ba2ci*X<s*FV3*_;"M:0_*8lrc=Jn<]bn::Zc%hR*"3;dY"Kr.;rpIeei_jTclS%dWg8tcX2(fai>H-DUsG-i:m0(djB:prVXX4s6VsqE")XXMgHXtU'Eo/_IF$+JU:-_S2kVkDW*ls?j-Je6JXB?pWH?dc9M$0mDV+^%5B]54$INnTG[p$t-ge,#Gk&n2;f:+[jej:5I/,egq[;BGkKc;?^ABs9=l;#YlJ\Wjh>Hg&'-EaW"d!ccACpXt.l7\`s3W(G9ui<"%G4a;2qu3q]V';"cY*/k^VQkoJXF(2iMuWUeTi4H7]DT+j^O"&=h*4\aB^DUk7ufN>54RZ*A4,R9+LIn=b0\EpWBf>tqP!@<\E@<[%D-'5OFZb6QreP'5K977!6F\k<c3Tcu";&<GaH%g5o&<T23a@-Wj9P^c_UU2%J*tJj7$+Dh]rp\G?a.pd\`q,okZ5l:[>TP*oq0r8%Xu6a6M)Y$M[V?59(cMospnk9tM9m)qMWP.I6IkiZVTm=uJqea^XfQ!aC^`(8pa9GKq_AP^)LDoU2"sd0p*Z:!fg2&td,Z<t?@;02%:H\XGq*jaHjYIF=UqjnNV^V35cc7.'oCHYL0q$S=NQ#j7HV""Gn,2li\(c!sPMt>:C.04(^YX"%p%0_.`]$I24Ek#H,'`Ge=SN'n%QV!Y$UENnjBsP'gq]aZqHgnY*/+;kjY*5YL(7sjqk]rfAO=kc3L8A0^b\$?/P2esXa"j.j^/?fN@p#0ff4tAnKF%<ZdtCNT(d\+p%49<,?!1bs%O1T?6am#sp<6l#ADY<aKBckHYX@R-P<<Rr*GeCCHOY+QqXR:TP5\>H*'VFYF&K(J!?&8tRn$=C8_+1-k,W>5@V`b<G%jfp&nA"btJipr_`(+5:8Cd%lq%mI-A>5j@h/3OUJ)"'a]h*Q[D5"TFci/n]NaQ/!\TR!hfIlb-7ig0r)pCgJ[o.%CpUq)/eY`C96%[q2pJ4O>jLTic]sWkd*Y."\=\_<M(073>5ZW"=mt-_3,IgZM.F+[3OI7U"`/YUhmDTkdRU_T6_&\VpdgU]\bSF+TJ3"kJ3-.`@WN%,u]NJF@^8VXRGZ*ntgHI/5S[*I%&BhjFRUZ9[>1-i(u.[`P3p1Y<u;LYP_7BiRuP,r)*7fLY0rJ+oEs<=YIY\dd<Dt,'\4SlM(;o%f7*Lo+$=?u<F7fM=a,.(f./Clqf"n$U63+;9VARRaI\.DWVP=&s,W^>)LcV^I)GchrQfO*n2n>]g,HeBs&s!lpUbcRGBR#5>e"rM%B4oC@[,gJ)_<,F<aY[EWho/!7Rb7:4JSX^_ZG8WUbB37]Sr#ALnA9XG8F=`@-Zt2@[Du*l^b;IU:JM1i!52On(%Le;H'p`kiIn5p%K=@.SkDk2tZn5Q=,4I]UIj`#fIB73d<t*o,63&&E/d>fRP,(f,4<GsW\/5Z9,rJ"f1kgej+D2rmd2GVr1$PGNf`sDc#&Z(!qB<7@%qa?n4Cl14p#pYdFaXQ1n;R@n(2Bn65ko=DCX<l5HZ,=A<OWmcXmt7Dj5+WA5I5&<pTkFH;!+7n718:Xj=C2KH8.csW)qHrW;62[]%/rpE8E^li+KE!VJ<Ju"%X,U3qCQVX+ii:OhJIM2AEBKprP*QKL-\.JH!&$KG5c@:1+sRO1-t[1-4Q*naP#VVS'T!2$6F*.iY,):7%T4he]d$3l5ZP:!S!f@:7:bKsYJYo50q*kWd#V7/LA3a'9+H&lY!@UD(ZFD>g8:ecg+m7lfN]%UB5(QT[:lBn[',2r?6ap;%*@6:%%d\8RN#iHLOA7,pfA,pqqT]h_m_'UI2H\rB21=36f"&RWpJ;B@$j;X@$+%\6i[LsQ-?s%,t5su$lW"]m.js*\nd4D%L+;YFND&Wnf%%p3EEh`-4N$A$[D@1I65cRY[u9oout8DkIZ':UB_'P=$eZIj'sga!&?+`;gc0@ld*YQC3]BItuf+WOum]i>CU6^(&=dZpT#?bgF8%.@=_C#,#dhU8Ca."-TKp4Y.R@JsYV=Jg>=Z#AaH5iDC/#:33J#1d/`5!_u>f`MZ9i$]'$Cckl7<X5s+l.H%'OAL(A"+``_Tj@N76%#XCl:W!HcP#?Diq%7<Z1$^`36bHaA<iPg=fY)#F,)>9M#=9)oq6KVGCnZmMX0Ed#d8<,Wn!PtF2[B`a=6i`mH6)BKI31qLZ>YmVU%_DYCD<.khF[.LS[d/^;s/B\q=JMF'R`tC-d0PP@(Tj#@=6eB_A/C:tF6SYeW@-f-R6WO[2_WH)@U)8`Z=t"T_`las*Kdoj&'Q020%,WSa1!<j/h.&KWi-@E29np6nDgW*DF#mKp*]XCZ!)8Vuf9FIop$eQ2Wia&EDJ4Y<XBmc,+K<VK3fjuoVbJuON'8r$_fh^c=\4cVJ%2M*/bk6hPB/b"qQ6UNH;,mX]jLchZ`'M1qr0MT^#<07n@V*T")4PhX%1C,E3/I:odd2YNsg7[XG6VFujPa'#d.KIX[Efq.+0Hi!Z%5GZBJ0'SNZ;SIEOp9t#'MP?q69&rC1>Qha''V>W=Ntit'!snBr7mQTqk%!@<:4t(.6<<j6&^h+FE+E8Eluk!cas:5GbucU_g<M%.%)XkA6B0nXtX"7:%WUUmk*;Eb3rGWt46iui[;[/VpWf4&'V/=,&@HBfNka7B?q3XflQck37[])N[8m[pMW_FER$nDk2L##-Gb1.kM%`GF24K`l\ZNFsfhlUlHh.`B5l>>T3-%%uLnba9`0b`)n.0i:5qbY3j5@.2g:a90,&F+Qt;0duUHBR;E^ZMNq(W)tAXW\>sCZ1a-q%MOWq29HomK9pS\rA@",6F(>)TG4o]LP-4-rQ0VLK3(:Eq2=`SaK240<SDo;0,0NT]/&&_f!'VYsb2EG[e"md,OcXrt$F!^E&=)>o%(42&ELZ/i3$in16A$P&3RZ^k9BIn2>dH=))n\0S39k)_4L@-8ZK[;TTfV&s,ae=pZ=:K_085OmP]H[XklNWFQ$@B9FFNR9<+%OM<%11*Rs_\>ugPlB=$Oq%OD?g=Z0-,:+'#`10rP4"cm0b.BF6`C;kI7jZ0d#p^N'I-/=+_[Ic@A$-sQnp#]i"3j9UGu?u\-/fUdEG6$%4&/pm"T4L&`fb^?*1*ldX+V4^J2@j-7W;L2Z4ec@7Ah+Sb"egb#EjkNJ((_JMM,c^<nrIF:p9rDcb1sV20(+VAYNBg'O?(5/aT\)%:=i%Ff%`W/_/<^aob)ZS/P.fnPS!&e3tQu71ap8EUPVN5F8i=r9(j*F/QQo[Ih,_:]='*#_Ccj[fP)h/dT2CAaf+"g*i)bTGBY^<%nlj9ZZk]pj9&'s*%G%LIPoaqU_7s**o7/\TUXKYco=lq&or:lmN/_^[TP2,t2dar51@t6_?BNh)-hUgG^9?'\DJ&E>#\-&Xh#DL8%TMRJn:([1t/1!A7YS^"^"-d((>pp;:PV!X/g9DHjiX(X/$Um'KKbE=F[TJ]@0Ib2IZ@Yuqn1k0[TJV1bJl&C<'8-ced"E+tZChAh%!hPP6@O0L0Y=OfbXXTS5V$+RX,J$Qo@/8Xa&%Yu3"OX]RXcm(Ukbf7aMQD*]O=3bWE\XeU&p<+_`J@Ep*3mhJo)Er;6Re8ks#_m]%#$:mC;e-cQXf@'f"gU?D(K8+c&Fu9VgoALR%0]o>CT,e!Wr:AQ>/gZc?tJ#rP&b#:BMf+>9a3'ng5l^oR_Xf>VKc5"j@]k)2IZ_]%YfQ.9'L>RJ&s<q[SHLE"#ZTiSe=+J%9,3&OXRZGJ1g60,Md\ct#KkE1C_0pmLFePG)7]Yj4WkVK:1(mXZ3=sq?PFmm_+SMnX`fOH%cXLCDAi=qVRj':YfD/!`D1rZLG`a=t2+YPV:'Pr"gChpq+U<?>Vq#Kq]`QD)!mO:*E;nf57[afTGhK=VDm[*O(.3>a>7?H0G:pgC%`)LQt?o^gGFl\KKgB_$k0NF>#D$N10(#ILXMf@:-Lo!`r7LOp3?*KF,0>0YuJ4Ra<=@i5n\3!bD6jj2=9HDQWVAMlV$\hdq8R2ul%bMa1E/Ma_1+UkcZ(<bMN2XfHUgu!#GH:X077P'11.C+CE,\Re"5I??(gF.TkQQFMPc[lb`gpXYkkbK[1Q_jpf0FihnL)qPC'[DdD%[m:`En/#i#I22Oo8d]5NWWJOR8=$>V79Tmc<@C[tB.?o4CVde#Tc.<@3=a+tKc6$g+:#`_q$*1l7Hcr@j6@K_q`T!9dVjB'b.mql%Xu$-hT4U-7*pcT/E"aRE@+!G3jN4G!e6"/nL0ZIj]tgcL^a\DZr2ph9+Th6G?g5PH#\U1Bo:Nl=SNsOFq6mFCRX:J="\B`b@N&#m%Qnj7/V>Z"o,/6CZ%>KJC&?E>IVJ\N`8B&K0p59p,kaDK;%N#m`e039V8qc/Hj^P&*_reYMH_h4SVJJ-[45L5T^13(?Gt%?8+-@^\%_:jQg.HG^U]#ka+NeC(iR*(!5dG%JN0Er5F[XQq2VSS@X!!b9SKMtjk;H3th"d-R8+j[j%8gFBO.o\i>RRBHD7#>U'P'nA/YUQo0%QUEKP@k(N2Vlr'PDg*5m)K+'_H%InUhEtdWDJ[QV+RenPPf0TZHmCb%gX**1bJW$/^4a&uT;9M:`F:TpM.GP$LqZb:OXu_C'4mgC%i"6c_GncB9h4Kmo.o\N:jM"kW?W9=kp9moaUtNA0?rR@8)%<bXb8H3+(mG%Hd.S__[*$$X0Ms6c3or1(4ub+fXH.uX[U!35n-h5,%8hlPg&/9sJ`AA9!4DDT:D(&t'/=+.Eo4!E:@<2L*dJ=II*%1jn[6C$E]>!d[((bmb'.kLZ0CU,n/p4cu1tI$SZS`-k2/NknUP+gj%4QQVgEf!h2j#(j)8XpCpd49$Y>?@nAf`GTI_ZUo%GsR('fUNRJ2+f#WmU@OP=C_X'G1\Pl6lYQ_1.EaZ[cs4r6\5T,iN2-Q?.B9Q%.E*Gf+CK?p:b@gP8:+"Q3,QZpW^Y]BQHN+)]C,c)!%VGP7TO/I0>9<;A`I8L.;C(C`B&m"R3=h.SQ=$H1Ln5#(P-#hH8VlidQXTi%PClX6r+%?a!l%7Wc6_Mi)JPKCk"CD&f17G+gIUI4U\R;5he`>:Kcc%Yl#[8WLUkZ/>_8IIVVU^8>e-TT20r%,HnP_AG'Q@e>'SU6%?3a(I:t.li*@k0Da%`%RU*ctqT7DdrMJ]+8q!nc"3(GbY^TW8"D8u/:XP-)GKpjCl*D:#(WO0k7RbCGHlrsq=:_T6*(`osq."\2k%bq:(R#p;SrJ_4VOZ="X`+B:\B+!Bd&s#:S]]1<_:-V^:XFRBJfXU#"q97q^<pa7:4/g+%;+:;/4+OH23hnJ,^opoZ"XISen0/QR<%?m/D\+nPiZ8)o^X0*#>8^gnMaX-1U%.J[Q_#j@F.O@1#FGKBkDL&p3bf'ee%+lAGq=>[#J!e\-:NhYKINZX`eUa>TXmRP`t=NZe/%>#-]g&u'n_jphJp!p3U0T[]-m]Wecc[agOA8u38ci-->),^n0rU.Aq6%:kTQ3Ao)qWEN%cr'\9mU/9klb%0tcTKdt5Th,RecN*f,%biB97BB5Y[%,h^g9A@in)?a0H%UaN2j2(f+'^*sD&kJKpV9*0t^1CY#(b;EAg)BeR<mnD`KtaHTo+ETf`9pqD56d=_k&S0f(8X"g%iT.SN_c>afBUXKLAqpb&F`l3Dr+!!ZdA/FhCaN"O'eR"jXgfm))mDW"fN5<;OqOQd(Qso-P*s]#8i\"hX/m6tO*.RK'aN@+E)jFe%K5sX8h\?J<E]odbAeM^gKHJ`G]BjXE9dNnY^k-%eY8=\jcA&I$?I\b8*"dLIl<;gYma0N)g6r,K29sf-/hY%_!>P6j'EUd?PuW^a%mK^9RbtdQ8X=!CaYuD4c4RC8-COIJokL$0jVc(KU7AHSrW[QJ`dbZBnXus[]"mAu#D/"#R%G]$MW=[pZ"q'<IYN3h/d#])^"hqEL%IThQJd`MKRBImK6k04g66T*"9N$\(8TQ'ZLX*Zh$IE4qcr#B[ZZRK,`!ZehgG4ls_?^0e1[\TZkXjSk(Ogf"99&$%U/sXq-#rOK.%asb4iNeET8q':E23,ctVfH&8l(WF%8M+ka+js@NO3ZHg\0"SLu\Y@aekHd2#jCTs*]sl4)_e8b,V<-9.GAOmrJ_A90IgHuLRIRgi%.^(^2C["MZqff]7O(/Qr(dN?/SAcJi1E9`Yi-;U@'4.`V_hB>P#Buqpa`7o5A0IPaV"t4^P\_rfQb%eWf$^BW[eraa'=%JdJ]2FA%+D@gqC^Pr0o,$.tidVck0s,-UZr\7dC`Rg9=^MEJS>EKK-=b"ha<"uK%USMG;mP[Uca%*C7U6G`;K*^0].7o/?2gC>BW*Nr6Zji3%j9,LR$lUHj"9F;=+t(/Cr@erCF!qNH\EZEN13dZ?9iMpbHV)XB&;OuhM^8kJ(a]g>dG/_ulM#`4I3aZ5Y])ZBM#'N.712=&raWlp%:;X_;N<37"EfR@sc;eQl#kQR$Tfpa`Pf1Q!9Ys35rqhn72@S7m.<U>>P/H#Wi;I<XA2m#N`/D]C&6!`P3@cuI[/6rT7@^]Yp*XKq%37Akm1^>eb*;i2l?\kf&,rs/!kl@8="5shGAnXnB?DW,46X`gIbRd2upE\5@>g`f"Jnm91cWNjaI-=N<d8VNP,/u_Y9:$4/-I;Op%q:%'3eK,MWSQ'2<F9Mt#6KGMc!q96&oe]l4<QM"HpZ"J\)CuID9fTnt(*(QU<-:[C$smG@W@D!?8]K87_qi1bAm?Pebe]cg(bZ0M%Td@H=nH.Gr6!Vo$>fd@8QbQ^jh_$5&L2ZR7Vpn:cZBR^XBH/AapL2Af>A^TTXK\TcF,)j>/1*7ETGCO[8`4?q-F<$W_e%@#>ZS6Y%q@YaLqm%T@-..#IQl"\RdB!jaqa1--T&hUr(@r9tN8cB+^Y]ZS]/mO;?:Yjj)8se*^>`epO_%U:eK&:UOSqA0.H[),TuD19[1*M.%p#57`_.dk98Vo6UM=WJnP,UTkgqQZI]n</h2;#q-KQUZ9eh>0N<$>jc`E.5P^dYe%Hmf@^ImP7$HL%Ub9KcY-X#:W=-j.4T12poG%Ohp.89-djR0@o$1=8A#D!?Y#J1tma[M[WpIQJNI$&BiD'peE-=PH@GfKrmtc`H8mj$/P@OJDI8K?LnbN[8WR"Jo5=upLS(q;K\,G%DQj%=7UJ?&^C+m9a_$E\7=EVFVFbZ!VRCP[-+Qmt9PSX`L^RQ@@QneSl95D!OeO`#';3`SQumA@86;nd@0YsMK64@Me6ac@$KWMC%WgsmQi2gT2Z11jCp^07f^>4B1G918?:tXO.^ZqZbXO0anYK\eJ.]a:RjVMZX=p1\,;S'A;_5OD,1#^4H[((_EUede?5t@827PY;C%b/fJ7:6#@I"Sd%ogp+7*I%M_LngnOZm9bJ*1fpV1QI_#62?!0kDSl,kU-_AA2Ad#[(!*MuVblo\>L,]EcikapWB#?/5<>Kq2sAC,%o>u(mW%WnB5ahoRJ4l/i*jX4*m-*!4X9oWP5:2!g4M(5*:s[7f1/ng&MT&C+-Z'X=Di.J%7Ud<E5)r3BUtf=>8,IJF(Q(W$CXIJ9%#nBu$K!23<l_6gLY_urOh@_ZB_rP2XW'\loW'Uf`$I($dj$cSWa"`/[4$m>0"Mhf3ciLJOEV).!"V*F_K&6Qi:]P5*`<cUdPCfGm%Z`mGmk5[=hb%*:@Q*@;5VhLuj_).mRQMI;k9)OfZ8^obXdDAM+&iV)U0a&afKT1#Z,'FZt'&F*gBaA<Jmm-8J(XL1?c&29g1(qbY%19Zf21p2JbB4)N9\VlX;_TU+NquR%!^=Ne-0p:&;,[_EjGt`M](lacU)]4lQ'[#?O6ODK/V4)H%*0_>(j^mD+;@1=$A2&uu0S>,f%,+p>Z&U!=fI?pUMd&:[*%VT#W,[cTK9&&A4)QJuo&QOdG"*GJL'nc$aSgs1ETQ%sA329o:@L6LP_rrPDW?+pgiZSUV:(3$laW+eY%V633;J`#gfL^Pm%)9KtZ6E;b)TOik.s1n`TPun&dJjbKRfTJc9:]a9Z.8_P90-tg9<7OOj8KX08b+Qj5iW;Qkp4\[r"j@!U@?[K^%[MU2,:]V$?dM5n?)+lZoo#U+@%1CDi8M`omAD(C&K>U<,-Qbj_GQ_D!$9Lcog(MIo6)b1r9ggj09K%9<,:[+m*l%@L<#$NZ,_I(P%lmE5I%+g`X84+bI(QJN\2CL&\,1:-,,X`ge2c%WWNXUeER=d7d,&8B!Ea;i:O\R(W9"p0ZU.Jj&OF9uj%'g0gVUA&hdXbF2a!=-j%ECJGU2S+DXBZHu>;&,ddqLGT'OC6jH\Z^rSJag%B(4p@Ni#EsI\0gJjNAMH0&rmc:`Z^XL,#L@*ZjIRCi2*mSR:hc!8NUk!**sp'%#0d@ZQ!,uCTsf^h#h:eG>/dl/A#2;,oj!7N<+t-_&ju`:\n$0roLDNT2=&u4rt[JO0"H#aF_&8'qEb^'D)e<JYa^J]:KH2c/YK=#%/LkfpHo\cK)I4:>Sfu@+6/ht!cMAse[ik]Fj1fm8D[-6daa^YlDcZk,_gaJbI"_Nch'&D@s/+kl7@>:oDn/1+pK173^L](1Retrs%JYT=V2O#dWek%3Xe<uKVd;<eRM\m#Rh-=!aIi0&=jt]JHZ'`cmb?nL!fhqi=m3%d2Q<oU;$-)Q2\)AKVQ^=U7]++d!OF`7$r(_%p%9?B>\5[EE>c,M^0@.`%+O>n9+`_5':3Uh`9k[eSYh_*A:]ZlEET?/FCV@PanT)5tF)=Z8d'Jc:a.i%/)UA4n:3$tgs'Dp.j"tI?T%8gj1$kq1ocmR6k"r)H^&e`LSi'NXXYjU3)t1O`NSHfRPJ!#Ck:/DsoN'8&l@'Qeh1U>3k$1J%h18S=_kGJY48ZL)&s[?er\!263@%^&d2[9GYsI:/pYR(4)U-Iug*BD)pRRs!d`K6mmRnEE!HNdGq&i0tVk-<;f_#@dWnLmMl@P0$4u*%bh@GR&Yg\*`+Shicr<4!mks"%On*86d_bjo(\)<h^hQ\:VrF&S/Z(qY8+;bK@UhF8N^ic9NA!_@5*9L"9"hboPpgN2l&c*n^qCA*&6cDLV-`!HUdt/$G]-\+ajUt.%DDR^7fQ:TJ(!)$pQEksTeY0B%#[b&rPO$38HjU":::aJ4k9?;lOkH5JQLaQV&FM,0nED#g;?oq5G-VrXTN@lVN=KrhFOV\6oRdhA%dK&SY3&!U\Y-EA[ONcUGFA4(M/%Qp]<&(hI8uIQ0rK)6&+]p&R!PG"%c8?TbCm8BJ8_7'&=-DDfDq%3Zft3?(,n`h>R"0$q$qFAu%aCU9aU0'H&8Ne`-Ag3T4i?D=Z/Wn"6(%<10#@)gX1$b9a'oL,G[*]G(D/ghh8<pVh'?NR!?'5u((&jVD&\_DUR"VZa7!pJqe1d*5%Yu,,<CF]M(m;/ccg;mo<VNC)WLqnQ))G(]&("uKY8ja2n5nggJUSVE01hg;e6]gNS`H$Lm6>F,sNi=-@bL3IIU7s0(0<Skrq1K-[%0:R0JXpq`BDV)W;5T2."?#+D3KQJ<"C,9:nB_,jh#%TlG5A2a9!+c"*;QkT3aJIjk)!I_s&P)r0Z49h:eb#[^CgKku<90-55XeMG%;(X:)f=E/)5YTV*9[ZoDWeV`89m`&i6.m52`Loi7L1*!K>`6k\/>1g2ZJqg)l@AIsTY1"EiDrt1=tC];`/XAYTh7G<b(1VNYjaj'%_[R_m"`r5GcV]nJFFU@te8%#_O/8Ng(!q$.q+Q>C1ahks@4e;KnJ$qt+BEiPF0^YGhNQ1H?ui`L2f>=:2AaF^@sAMo)+>ThFbPL(%NPWZSo-3F/V=0$4*Op%WHS_aX$Q/!!C29W*.!X;1.GLs#dTJ7F'?OK.>u:1&"$T`Y3#Ph9g]F<^M!2ulec*0Y))R*$6E6F&o3tdU%^)XOs&H&QkifA$T!:FAi1D-%kCkMOV1>('i8Y9cV\`O61J^$crc?^gM8&rn5]C)?m1T*%.3.R:]\"T3p5.dCY-Z)`&OqHTcInS)l%$c";WrFlG'gXtBR+n]3#j]*JA,?b9WKK#=?Y-7`Nan;B<i*nV-(cJRDbRU;N(Fg:]9CV=NI]K->g&\EE[0'M?eIJ7[<1=?gHD]n!%UfF*D)`J1hbHGR%CkE>$:g,@`D>ab[Z+MaQb@hoP1(<tH^>K+M)]4c,"fV)l-8*\SNtan#17>5DG3(j*9hHb=:h[::i`lKm]J9k_%.RCn[Q@a:r(*o+!LoJtV!XRL.TQp^CO(/Zd.ACAe)jiGg>Dj6>*%V1s@5F3?k*%]4!.g;%a=NTVVG,6CQE!d(4DYQ9h9:dJ1P<j5%%3?V^/'T1qN0"foJ8]C"Z0Hh+.?FmlI0t>BF=Lp]17O27.f^9""qgq^9#`ii9U,(QK<2!!\i?3Pr%k<?1@$%(Jg`!L6!]$fLSoq.%(KIs%XP\_@g6]T'd.Ae`&JYun<g2HAX5KdK/cj4"3ocU+>f(L@QuP_-;u+c$Fo4,7%UgXLP%,`BVCDZ*1s%\-TraookoWg-JkBk^%5=I@c<J"34-'m`]+Z6Th5a\Ua!iqlUi$GeH+]#W!mWXBV^uFJC#6D9-Rj?,g`=6(Y#1>9OVPu,XJZ*$f#-`,<#st?TcPkqNFq"^H%+gmH[`2.&Z%0T)QYpLchlrlf-)Lp'K/ll(I't7[2Fp`h1(o&7VTL#fVr<scDkC*'L#_\9KDD#_fO$H7TVdDggj"WW@;s8VGQd*DW%4u)qk!<TD+4"_UX;6qfC-knp[gG4m2KQY1F/#j5@[-C5Occm".*K-0:WX*g0I3/je>WR>K9n7b%igGCha9.f=.]js_XSW7B.36T3%k(<eL6Tajg.lrLmWZ[pAW@5;:F?rr5<?il6JB/PcBdefNc)&`tTO:*:\I#t21++%F-'\P6I+CcB&P*C6j&BXH`oB<lH-Jnq9bn>;%7q&nIOPsJ[[\7_"O`CU0lnXCNHj,*2_;%XRb,n?NF";nUFAtm(9I[-6PO)mlCsjau(t]]p(q,s1$980/pC3O)0Pk,8fs#I7+BW&&%PlkVO@hZIAYWR_CnqA>WC_OEJ8EfQ^MFfT9(sK/!SV8]fFH^T9-EU0a#RVr!rA-Fr(=_I$[!?*hX_`QC2u2LPZ!F@H=+XY??%G,@%K_"uZ8u.$:;+"rs>S8N0%YHe0*<r^UHam*VrKG;]FO2+'a^Q-T$k3UNCcDaG*.5j"N&E;sG0Y7gFi<Fr#3j-)Dm21X\%UJ/Of9@[%f!]jm6E-?Ud(iBM8%AEhhW_cB&Z2ISph\DMDnZqKUCh6/E0C]/:Cr6L\aW'-dEpXQltbkQCs*Q>$U^/n`nfB(>aq(2#)g<Wrpet(%:*qt=8p,9s_`hGV7N&5b`&tiULSO9\I\Eq^5.;5:(;+L8mHed80JHYbD!gBM9@5HB0H3-@DOR\ILY%C!2:KP`G]B:H).,KFQjWY$%XH@8Vg6[+I\"ZO/m02BjCUhVpML,+3lSWRuXQ\rlBIUU.1s6-Q^$3*$p#'F:[)jt_3d.S_L?%@a:2ac@dk#AAOB`&CD_,P;\&P!.%5[pBEkS;B#"=ChT),.qQ/5`EeMs!4)nOT/jpOkGmQ&a.?Rr3$OSnVDGm0tpI7mkBr9D?Y<rFSP^*nu;(;QZ)SiD#9!,lBA\T5%JF%:G!)(Jn]F)P;hBF[M0RMCtsU62tqJ(DULC[Y%)(C2irkTD7=\JFSP\!ZX##OpD;EF5X%@s[ViL:8rN6/?ss8DNGhG[ZS[eX:PJ^$%0YZU=QcIjH%&Wj*D;9d>@<ZX'TX0)*dO)7'0J3Hc>^\OQatC/Hc6O1[WO;RKe80?K%6E"`[FE);=la2*nI4JWGAsUNo1G`;P8GXf%V>?=Y5M"L)X_h@b6S'4)Y`)aO+>n%GX_rYThcm^fS^P!mfuO^/&%+i,EF[K\2#p$gNbIhJNjM[BSrGA%S_:0kNl8Iab@i.9JjFaY%5uti(J:`C\!D=mCUo.u0![S^``mt@3.u;a7A>+e;(:\GU^f:)6CO"Z"ZkJ;8RMpe5g@TW&Is@eO0XVcO#0%S@,Cq;$#,<9uQfdU"%S]!j*DRHC<YR!n(:/%"`eAd0K0AeDnfR,Ti4rHp7IY)0Ac)ogp*OC!D@*:Fqa9pT]'4g50UV6L$jttON1>@FN875AA%LcZ:>AGoC%/fRrmn$n\P18"'O_PV)'*N`Tn:GeRgK>\ne%Y"'_.GRZW\!HFKQn$YjV?VsTE`O)J;T!^(i90[=Y\X[!YoR1$@,t7#6;0j3NOe2u%-9&1@=X,t3_T@2>NC](PFXVoNFstQOmL-*)P"=:f]rP#/WC+Dh^c=T5FWV-m0Y+MQ'Gt*cN^Q8#K-3]+>"_7NM=#S!4AEhg0::n5%B%=?#ic*L9Y^`[eb<SFS)c2Y:%JO_MP5s-X-aYQaZ/.[6/Z7/*(C/jOMLE%H2,S2W@*TTKdP4S>Y(oo/'F1b:GB&RVXrlk/He"6p%DqkPc4OFSVCS\@RE+)R4\oAM<0cE/s&%D0G<ta8=ajn535K2,@E!,E#rEN`F,eMGc1Go`%7YL<B)L)'L/#?q]NWCY+/JHOq8osBs%<1?u9+s<%?+[ar92W)t"i0S3e!M[3EX)O1Ys'e?'XK?+I;[<hRN>n9tm;m2lUpI0e2&DXKC2DAC4s[C6MDSna(6rmmDN2laoue"@%94N305USFT?[2uJ?[<dH$kMK)<m,9f/TJ,2+[3P&Q06#:c#](sm_1uALn="1iR9?F]/E:/5^[Pl.!T2+J;hbUn`eF`"at(q9[obf%W(5p;,MokO-6+">oI*2/[G@I9eFF8G#n[G_D_Ll#MSNRq\Y9-#)\8Qq\m\aFXt1Ioel#]W6Rig<+f-CZ2MUKF[2$3MngbE.^F%mB%YRJC,#YR"K6\U%Im3!t=ng7>qeJ__%R2Sas#do8h"I3kJ.n!+SA[o",Jn</Z70+p7SVT4lA$EpKO03XZI,5%M]$r&.$?32c`Gln+%0L*l3XT[.fBEu[tBUoZe@2L[6FWgMpAqcJTDM:l4G2Q]+Ig22+7L_1^/BV'5qVkmR:gNuNW^j)b'4EU3N65TaXQu-$.V1AnYZNXg%o/im\LSiC]<_V%ZALOQNE`k?_3r#2mKRoSj6)M9e85X`IG[+3k7*A(8o.Hic(a7+'"nNa8lV`rK94_'CIGCo6<]cN^`:@f)APB(u%%(rI_Ug.mU@YePUTGd]iJpUJm2Q:d#&Ut"s,!DEL&t\iT_ZQ[Iq4`3[0NiGJkpME@nDjruDIGW4%D4m_"qCDfZYkd?N9l4jWG`*`%6_SATF9f:j`1(3ni<:Z^n7!fe2$$4LH!KBo9F[:k[8WY4DAmbJYo%6t-#)23Xp*&iVaNa_p-Bi%$jGD$UqP-SlOZqN44E6k(+,PB%%kgAhliLb6_KRO>7g!S2IlcBRaj^QMjsMsrVm3R5I_:09\'rOPKa1iJ=^ArNJkP<8kri,[(2=^#>h]N3>9^trSnadT<Y1?dm0(E5%Ra6`?5S.\Y!"OL@a'@ZEPehU%/S$2[fXEEoI,h=l1U.tRQPEtVnR\D4.=&8(Yt<l%N/!4PKnOf*>4(Y_@j_>(e=EY2dI8cZF,38)%cP6aT?'?73ZN"`#QKalm?L:cM6@qaIOqT9rbVg+3Apk<]K]?5Ms2Z$[TVcJZ;IdUL0\RC)lVfn^T7(tG1q8-3nMP35H7:ig?6:go%qGUm^5tPcuYA("Sd6:lY'J7V%"#7),'@ZA$.1)[Y&R'5rX&74>O=rk@:+];e%Ek<J_l)TpGf/:kK*>eUhT5tVB'1(_qQqI:M1E<R%`kXd:ck$8ks(EOF<4%!=)@aX2fe0J.!9.%"-j2-G8>7uQ]$`0bK>[:b-A95iARdIK4I5D#g8d^=m=UYT@q\o&-e)f27nJ.9D1G`I%,_YqJ0t7taVcGl_`o'di4gCP)J@-X-Ol<UpX!tcl@q`Rd`&*skb36<e-n4QO)%B:5--cN/lcN/>e$UB#OL>An@[Eu\,sce+\;hXZ%_N&)9ZHX$qojOII#4<U[3`[DibY3gp(IJ:&nt7i.%ZKP%rB[:p,fmFYJtfSE5%$;cQNL^;OB6]],mU='X#rVsOsC8/lT,$TIB=N*%m@-5T>iR`[^#,49/;A.;,&'`V:^^M#U!9pOmB,2m.kA3>I7(iQOk,9<m]gn7"5Dc?/-iY_Y$1KaNEaMP:uPsPpmGMN)'hSKg;PCH%;M4"<U1#hhM/Vc<U<sOuji(nTGs0Ri%?(et"5c%tiuE[1!f`@cSf8)i-tl?IO%c&Q^m8\OY-2)>!i-6MN](UqU%\2,!>]qjXJ!=;%3gs>uU:j_sUt?\q;5/HD0/SnO[Q)j1T$]$V5F;dp/r"nJF!IaIbne?!m;;6^?YY_CKqQ#$[XeJ3W9rF*M'qCnCaoUA[G6Ltm%8!E%E\I[Wo_J!fYEm0*ll+(aLk3OZ:1]$7Zk(1-I+X$oF(Yc/C9"\VlRYEf1;-ZefquPaBQQ#rRn.dNgWs]4e/:oE4.K)`m%9Yt61JE[%/NZi;M#MLSg6@g)KX&.%1c#:k,R`I/0MefFK=9g)3d45Y_(6.Z8U<6V1mIA5X_n:[i(e6diIQ7>3%17?-!ro(h\OquN-^&%k,B"@%4)t^k2*\>H]SeZI6E:".7Rnr62V#=4G@W\'.@Y'gR#J2t2blbB`WASrX'RS0I`&i&`_W[gg!>,o?A&cbq=.KnP?%>]:IeZfV`4&Z%97cW!n9WI9T$/(6[Za&FR:u3i=:odRA3tPqgtFW--4s!hMesqUcp*QraB1:G3"(t\PL2O.g@T;1QWN8qP+&:Vr;(/Z<[O,ZGCj?1%0Lp55`*;QfN*TB?^utmAme6=hd#]Ob"<$-@r#J`S8:&])?.f:j34:ek2A5ImAA^b:[?KU;qcpM;0K=GTb/$[cVHf!FWO`:/;T&26%THT\<1WkHZ8E&ImSQVQp_BI3=]gJbJ0J7cHI'Z&Qp+Hm=I8jq=KiB`A=cQD/Janb'\&J`?##Y#G#7G#ZT\H!?ceWeg-'7A\N^Z&,%8<;I=p;[ppU%9RV`Qb`?1f33$875o,G=UtE99f7'o/bY>i6QS"HJ<(V;Z&(?-Nd:uCmi@Am++pnD<?A@*6@c]lpNq1nUa54]"9q*%C)2EE%OV&DXA2B6#0[7(X02U^,WC%[Cr77>b&MWko4H^R'R-R8%SY.>D"VspkKX4-rBm-<[3jH;A-P^1blp'C"r)+]=kR.(%0`%U%^b>.KNB8%")kkED.(&YZ]i4kpBf\/3C15doAPk_Ib$t,s^sX*/cN%!iDlR:WD">qPBTk$.L&J'_QJf=5G"UN_C_m1cLl"Ho[=qi:%3p5Ff2n'E)m[\&?(0.r]k][K<QGg&EKdBHKTb40XnSM$4[?=<-7Kte*=^4XSf,OV9!h8YG7E[D+alTd%'6sU6"t-VU?ufEhUS4@5%!aW2i^on.,,I,cfO*3eK]qt3frRlH-I!FY537lq'+M%fe%C4lRS>P<)_3*tB?q^C15c,@p!690ge;b0HfYr`oSQQ2>pD&6t3O]nJ%m%UK#o'"e*G^V(%;k&J6+[%6`";=)uTX=It63Yn+9(<:&CfLn&B&boA%(e8#L*SPU>g:>hJ/9RkoX]8W]0YB0VW)""#3rZ!FKm,3%R)k5>,AZTq?"R1=&E=?m_-B<c8)gkgJl0RE6JDRN0[UL8N_IolfaP^I77S9T#_^'I[HiJL(3ZB.C>D;P1_U2"4mU!_cVU74M4AB=%<>'WrMk/cVanLL".+QimTG8")MNtYo9*&o2/k!Mp*Z0G,O$B!A-Td[\J;"j[?T8/#U>UiNdLu`;^c@d!O?s7f0leEk\X$I?90uTZ%18sH:-3_5//TBP5UT>BL)eD]!D1f:O2?HfUmTIdWUU_"%Qp(bMcB]*%(4iFVSf<]m'^O@N:J&0]W6R%%$P:dnX.XWc%Z(!WYftdf%RbRsl@N'd]3P-#3cCPUmCYjTL#JbKF'#7\&ILXf]q@o.lob6-_nF[ER[W#/A%7up@aRfLGd\gQ?7UO+dNm?'o:m.T2%rQ&s;:Ra<%:Z6s>3YN*,"51rHQIbK@JgfA.BKh!*j_O;TN&T&fa2`MPpf$kQSSCiY5b]cC56kFO0&=^sD+"Fl?_IbW^V*LjTQ__N:2^ru,q(?W%i4>ZH<U[Rm5)d=1*L>L5nQ8!mg+:XV?:s@VV/O<mB3W6%9asN5E*kSBLD2+%TKF*Op29N"JW*;L,fXeu1TDk2He1@NWi\]%1u\UD%Sa,?L.59&<,D!tF?Jn.dZt-OGi+c@m,[RKT#majE?$O`FbSeEsZS.k@#+;S]Jt&07RM#=d:d:2#3lqR9p\+b]?LgPf'=E+mP-8('%VjfJ!+Gu!Zf_K?bWnIU3!lugM:X"@jRr6,5a=nRKW#Fj>$Bi_"f%A^,leN8*?#Aon>7d[WJr(j/)r=sA;cmk#Gu6:dZ3aI2(S4Qj%BHrXq".p[;*s1F`GG9YnhH]qKTp4)?-IJbdK]AcY<k'I;O7Soa,T0`e+,D>E5Ma*f`>I`!Qk9.V0VC;;Ym#Sk[GN&8QND-Ro%Z3D%I@In.BI5D7@u'4)<_'&hE^8t[Kj!ZU1+"k>?3gD5W#nDCM>$F.fJgCpWI$g/+73o;:+<iF%SUDg=1Raijt0;R'(Is6e2\L_>7,u/%S"nIV_9D1\/"KB8Ncjft%#3BrOqYZQkIUQfk#ZT(qAI5'o?,u^BeU[^S_e$Cbff^5f:.()<C81ta/EuR1$TX4F`Pr@#sXT?W13Eq%5QPUe1S;)\(cY$+1HXn',^3,[0]-b]>60JZU5]O"RIGNGW>-^u9JbMSpt9u?^Ru,T%0`[+9"s)$?tc6::e+ki\7K*UT:Q\[[_\!f%9&!%OTeB#";irW8N8Ai4TIK90_C;DiY'LI:P*H5l>[JVc;t.]\*M_Sie3'tWRaK!Y;n10U6L'sN[K!h.pGhY98"r_+mV"fji579)%Qkk4u0K%VC6O@cbk&djO&moEI^_h?_lB+]JlPe`tYEUF$Qh]EtAT%mnl21m-G8#sD;YS04fg%<m&r0\b4b8XMNhtt_T,F"?_b1qA%+PmW&VL/8^A&+n!-%Puk3^JPoM>_*thf)?HNo[6X'PBCC0X\_kH06!B8?Fi7hom?T%H>BD*miX0;%lGb?Wp[n4(4l"Rm@W.>8q<#%J[`@!(M)[+fD8lEe4nApm8eBc;K*/ACGZ9?aVA&hFGg1R`5ddhFuu?4C/R2WO5HZc(62#a7cDAE/-[nJHe#QtmOkWG)q8\"Ah(-P%/eia(Ce6fH.W<HLaDAEFc&MSuR*+)r_ZA=n/0gchX$DAOE?Lf)TtS7p]M!<ks#qD9K"M-^>F@%^^o6C4[Pu)V6HHFa7WQ:fqm$VJ%N>7>WagIO9nm7dpjt_#im]N.[E&9rf4KP-QZ(V5OVX-5%b+M]/eFj/1_c[j6":rudPlnF;"=W"eV1T>DfuXC8(uB`LY7S[>S.38t%4+Xg+4n^+6;KF7O8Q;jFH=9j2@_#+]i!lTa.U)>aral180uJdni,D@=Q]RT+<HN\>5\6(HP'?@r3+X55NV#8gq__Go=<'4Qb1NfX%'U1sqpr3d<!ZlI!AKV#48SUC7D]gu'UFG4Da_%jKc$X[rWK+H-LU'9._T>,!Ko\i+1bOs(i$5RZ]\O077:4DuXsbD-^u(X+DeY/^%XTH;sNtmjWS#,M[9IuHpFH`jm)<cnMFrA_oNK^1r86e&OS:D$PQ".b6ks?#>ns',=Nj[9QJiom?YbZ:c+GLfHAS:0`@lK]JVrYkb%ZlL'NOF$+n2%l2).B#B7DgF+i_@d_4e(u-3$MEQ&:/9m)Kf"uC]OD/*:+2FG(Cd4(%TnS<&RG^*.?<AF*M>H,ft'8aXt3O;3c_d,%;Zj3@4R(90gPQ_aDK3PK5WkZEM\V"WpEqK8Od(SqGegO[/t,em$H7O2:3PhO3kFXu?<Hl!Xg)bd":s8E=CG>c=Q,,DRBr&e%V4Qa%g't-++99tolW!FDXJCkr1eF)RS;KLeBe>6Y'cc+>`Rr<7,h^m[X3(F,R1e7AFS<sok7[8(LIZ*Kp.hR&(g#aOR^j=$:jAiq!?EdH%Xgs=Y8XFN9hZZQ'k-s9[G;GY,'k6pQ*lTleD:er9ieeIYYo<;W2h:^/@%)dDK&?FEma%2(3T'tM^q_;%Pt.cmEuXUsKIIq92A\WU%<6]qbbZ2m(-K7Tu$=-ODF/<C@_qW[k%0jCsKr.\(DaO"!i(@Hn,GR/LZ"8I\_:Jd"f2_IBJub-hK!/eX3Hi'pq,C+5+r$:%_$qh*%TDYcAOAoSkVLNXe*'F-g!I/QXITD(*<EipY19IsR%<$f:J$kb:1f!b=5J+o6L3)V^3[i>V\%li6TT^:-*DBD6IjGuTkIY5l^@]X[%[G^>kGTbA!NOD;g6ZmJLrkQA^+L.R)#t:b<R(6OQZ*OFF%rN'ZX(.jST$8J(eqTV`REk>GWjQJObtenq%0AZCOUnSgSZN?[/l,23%4!Vs0r7'Ub>fc*-6EIV<_)#3Jg:,O:lU_Z%)L&<-Z=g&c.sQp)[`rkl[GKh(6hn:U4URKpVSKQ5^i)NE-#bbMem6e!6L@ZLQtkoh%$QD?Ggcg3RkbEIhqj0T7?Q-.c5-1T^UG.lrRhg_a5;S-NCRQ"7giIT+\An]OOVpm6]-b&4r)0Jif1->Z,rdN*[>dk2.Z>LW#Utt.%R*8YU?-Y+*Cee.Vm94(F>&o8s.9maEBU?8`0ne*\Bn(PWc+dYH['Oq\:d6a#Ar^uGX/W]oZoD1J2X>-o8"AhN5g!uQ2"WIHk"(p9%3?h)&N#7WX/-p)u1r2'='?t16O:os?frtWXY22<")$j=f>p]@4(T%3KZbG#`H$c"bepMP9UO)W=N0B?`2)Q8kPjTrs'*p#uaL):?%$F*-s3hKcR#1#Q1c/k_c>@b<76EL5:P:[HEjj'eN;Dp[A=%'X'7B7Pjjd-qB1DWNVEA#_YdABGBJL0$#<3e2KPaLgsI+B9OB:YsI%`&Hi'OQK3:Uq>=/ZaaP#['d4BY$"s#Q)h+G.4t&O8=B9B,!+46B%k_FkdK\ec@j5<Uc!%l-tQ>0Q:Mrb7[&7$8<ZI!Gl<4SHdBnK%2/`/SIqB=dj`?0j(7P)#A-UA,4U._KcIV%Z7N+;!("FI5kU)#h6lI7d5tKCkA>QL.><=q\ls\,"'#WJi8P>kr87["j$L'=-jO*V`%Ul&32FJrn^aQLb/9p&22d(C[QiBCk0;3:nte"U,YLoGsIAdbE2ioG(9,&`?\L+&oMOk.%?P%X]^(4BI.+D-q/]$6?IMbQ"!g+tmh%88#UlN@Ig[/pan2!Dc5!("*f$d+5U@NqCO\nm$%E`FFW:N6BXQh2#WL\(];*K,.#(p(5Ej!QH,DBPUnV"W2H:'X$ulqmoDGGq>*/%bqHR$c&m2#f&lSOYq:d=eUY$H>nBK)hUX`]1Chd?mhi0)M9O178@QMQ"4E_TIQNUPK%]#0YNooo=DN8l(kG5OVc9Oo;h"ISC1IAg%m4B0%)EF!+,c&DN<l:Hm-5ophdSNTUp-BF-N>idlE?Z$`N^C+eE`;2)D+]-LH%7_T17H'4^NUG<m3.7t#,HB?K2^Dbe@=b7l/?'A%4&sMS;P@P>+skBX3^]N&2](mu!D!H2NU4pQ,H^O,3jr>V?.;d3^q/3?r033PGV,PrG'@NH2G_@3o8;W_IniBm'5d<haYI42\@6rb%IQCu/<J]UjW>5)?\Kh\5<o_c=7r$Kl2G]_FT@m/"A&N%pl^W+baVds_H+Fk">!JRHaH!8?.smj@[ScUkei-rR*iJfSq<;%WRLq=p%Tp#8ZS7Al7@h%"sB=Y>iS#?4S@C)je`tm=H<pSI4>Fn^XVop,ncK=B2E`2"$flJj\GB[7UAS/S0l_e%&ok>A*O[5+<XD=HmVR+iL%7sEZKCcL#&R*2X7euik+%C,KQQ+ZX$_asNfr,g1sq._?&]WH2_5L12k0PG&FAG\12Ln8eQRQGT+5)j(udhA2V9&EYSH^*0U^M>=3%7>?En6$O2;I<'9^gs\;E-$X2E9Aj%3(l0l86IE?Md=`FQJL9ZO'R\r`[sEP(CTSH_@U0,ho:?8Zjic7Q9jM78M.7s^dIaiYSo-l7%/2F@^d[=/GY(&j\1kF"pXotX7-sl51Ak7J9D^Q"nR"SN21-q^GJX!3jER'^NdeU4]88I"jYBA54D:VdI'Lk-L87A$p+X?AICQWek%2C##T5K6ATBGiqP;Au?f`l<<>.J!HQUpLU\]*Z1NZiMV7OsC5bC&=o#=r31o/<M.FhZ>6_#D)WaWqp6%^,#:12G!]`3,>>:q_oWd%;3E1sd&2\&+e>i,.\%BFYso'`$CukOBH,n$2W^E0EgKt@r/T_!&7GbJqkA]g<a48[%U)9GQ>/!Zk(_8oKli4,,XnnO@]!ArRgW(f%4i@>2%#oP5<pX^^ZtXuC]Ib9Q=9ga@DA\.?'<3qkVQrHo>(bMF),(5/(5@*e#f:C39`Y.a)#1ELjrm>K1'6ff9*dB(N&Ba.ONCg7%((Qcr@ZY`EeR.,m:LZreQr,rFiW<LQB^ZE8OV(Cs_*S*51@0b15l@?qVaYB]jUQna/;D8K6W:b:5V;02]-D4X=5-9sOsHEM_*g^"%[RAZ0D:<#7r3`KJ\`hLnLugdkaH1u7'$%@Q8&&MS@5Y2GlQ=s00f3.7J++6o*0e">*5SL5FTa;:&*i>Z2Pqql+3O89D*&S##NJ<"%cR!5JjKljC`@SX@$<si:#s5RLB&]C.,>3a)]h"G?<uo!np\o+Q3B*7OYAmXaq=ThfZ$ORnk8+fl'04h'U,P4IUZp1%lRSDF2+%H@%4l;RW0i0#rDgIRV^..IRQ1HU0A*F!r20uB0.5_.\516=tc==]&jTr7n$4`JnD%!Ja)7acRS+kM$]k]duj!3"M@`.K]k!l.6(50'V%'FhD:("3&S7VVKh`'&-!m+l`<&=3-^<mh^?e6//.phR`eR##mjDVgO.2/]=NZ(%SB*_C%V7f7;IED"8VP&jTA5oeZk@n*SYeb-<o%XckQSi-TQ!HDdTON@Gf8;XsSEZ%Rlmg<_Lp$DKrr'=!ADXjg>l:@r<gTB@kkNbFgqe2GlN,`C.N1:l'#ArCq!<]<?J$ES_5gY,Zq%L"Qk@p(J0.M#FTm8m[lpe!&u?>Cu%4L1psr^Gtg&2<2:p'^_eE!uI4[^@Ldt`%RJN`I$m&=S.ojS67GtM:\2lA=XH,_"'#J3$HGg%V3=IhSPXFZ3.?a/Tc:g?/tM%m'/fB>UCjkCer83e(i$'cbZC'?WD2W`el$#W>rH<C'X=8M,PRC3e:)Fsh@%B"Biu(U2TbOU!nWE\%,1.*_m+FItJo_6Xh8"3X3g;>MK47WYA,"\L.l[=tF8YI6ZImW&8]JmSA[ELob+59]50U$H^n&KF\7<Mtd$J9ZA_LRs@-SS\^8t;\%iu0;@<"n8Z&lRbEUf:/r-\N=a90FGUDcqoE'f=GX)91s!IHgs3nbW)ZlFNFO][^PVOh@[8'@$[`?OUX3-#0E`;60tQ<Dql4J6?Qf%pb6=B_b*4\$9OPp]I?F8[59+CT*t_h'\n`.I4#5,WT\&t0&F'L3o)SJ2<*D#b9WA!02%#D$CYdq=pn,T!%mHW^?&[TMHFfNRBs@2%2>Y,/+smQC?`Z#bW#Is<PQ[Dnll3:<$=7GL/7Xu3`Q>rJWoAgQ\j=Q*$uqQP_Gl`NgE+kF\4)-?c6UIk-,#u!%IK_kgRur.:bde(%G6\uu#:\?n6,!;9lroCREu&%k4F9Y<T^:n9TQ+/<548U7TVN)I2'&]:RuN_ZLVt4e15rZfqe0MV&2!><1%,4sZJP"PYg)hYF!/&M%?I'X]Hqh.#J66p(#/)h[04+h(%I%0_$4)kZ=!hG(1Yl6L8)E?^e7fJT90#.1-c5TI-3k/\j('>:?#/?0^>t%@F'o0PA3l$@[-UeP%gKr;CP)%PTYPJa.OpkmA0^7uA!47g=l=W34ard\&(s]s:)gkeJ5GmV(hNp+_N[%mH/lgk9ckG-l#,Tl9SQX",$#VUgI(RIFLVPSu%p6H68FuXPS5Ms;sg)VjYk?H3d%ZO2;NHH!1BNO=Cd3;"jRr"^TLSIoCPc%VV6Tb-0EYh@qYSBV,A?Tp\mF\O?W3+RZ/%&;>o2S$D%8LqHn'uHshe#11D19\aVDo/Tm\YRR.BK/_[_57LEVPNF`WjiEpembuLA$O$diC(JpS;p^NF[&SPR]McnngLt\TPRsd)B>*\et,t5%6=j@NFEU$o>WMH7@:R3pi5C181S%l\@q2on[:n$h7GEagK2H]'dHkut[^119#'URGh5<Nfm)Rg1C.E3iFA":Il7.g^0;(ItJ;;?$%8Z#]Q1s`\n[&UFcghN,oT:=N;"k^QbS/Ok$H/fW&1H:o%QI3ptf!m5t=jWQ/EiDt^/)+U]fPZ=2NA=#LSi$t(nCjpAFe1&:eE"h%%(hIMq0<W!k($u22m(r+m*TmI2ATecqA$bj,P"Vrn$@*HbQE,c=/"[4.mdtqumsuMNmlfY<!CJVT5Clt`Kt;]:;Ie#H;qRr^@8gt7%qAej>"Du`6^TW)%"(Sn)Pa40&q_/rjC2E'"Vm@4Va-hEqeqt)sUNUfF)]At*5+c*YD!3HHDU$EDk!JI8BXP2*9&:noXPGqfVV*tG%g&F("W9^o0&hPV6KsY07$N[VMp)^&?:DYjq=ms<"44.rmfTppq]kjm[%EG!;\6X'Q9(GU2Oe1=0SjHHHRAI(:h,"iqe*4ip:.`Wn%$]g55`3`PnT:"1:<D?,*Y-a^d69a^7Um%?bqKRLl@$V!R;m4?<1;Am^D*_Zdh,h&$1EI@5eJm-X3AeB5)3VCZUO9B4@[-=J<(>;S%[e\Kh:#*V)JGTYS4aikhBLssd9gD*,PR+n7Wfg7f5C&VTO">D9jnSMfF[!GLSXJj;(PBVfr,UDHHA9`E"<FjZqf.A9rWF7U;e>E1%kff-g-g6e2cQ:EZfq4q$:SdFO%%T/gR%BsL1F.</6YCn#:-C2=[ki."-g3*V$W_\1Y1<4KSU+IYDeJ;+@qn-H-Jtc.f/%OB-g3B7%m.POUcG[O-freEEl3s6^#s./=gMTQj4pf`(WuUcspV:"*"If)Y=i:?d8OE7dZ4H9eFU$_!G[S@.Q]&/Qcf&"-A#@k<:DGXu@H21=%l_0fLX0>CA.A*pBM;Dd8fgrQkiF/t49Qba22l2@<_IZ<>h=o7"\PI_S7IHkUrggG]-E862ro@R![c6F57jL+:>hSVgiK6.TI7atQ%2KEuVnq`6JkAZ+W<0c%M.W,De4P4ptm@MeHEnBH5W@u_+C)+<\rDo#cSWN?F>O+Hm9[p&u/i131YZhjc2HK!IkM(#85/4E-#KR\@%3=A?.LfIq"U>-ZrI:N+*==rW06nDLj-?j-eULmqQ<C*f,,KHNY*AY#_@_,%r)"^pKPH0W/!OHUnZF+BZm7nD.`$&'N^Y][pQL7/+%.or<EF4O!5:/?EikP-O;?-^ddRHuWYa8=0.JQ4]0!X72NP%;,GPN^KaFjs-LeK$4UlYZ@2X+TU%Cm7,9BsJ!#n_lfE#1MQ+R@iN?%F=*jl@6h:EkiVh,2.h&##4I+ehH5J;p!n'+p<63qFL?H2p5NRj=!:Q*Qm)!(m+sI5FeXJ/b8&f%R(77q?l-FJ:6jWbDcuVCS:)'T%JI4>m^q"K%N^UW3BQnE5a'-+BQTC)+UA`Ai4`a]+hon2"ZdtD1W-C1W)B`_+-f(2Qb"(PCN_jr9p7/WVjtTpFGf6_Im[GuLE%9+P%&6I[*3UOOEr<-cp\\J^.?[6)dXphj\]cUsog3IS/d]$>sQt\"k"')4BS/mYH4Y``C="R397I'Wl+'U5+.i`;HYdfPgZ%4CR44_I=%>+<`,dd/)saJX")6$gQo!iDBdJSHtrG)+aY7Re1q3g@g.Ot%oe@2?0mWk+.JjmI6NZ+0)oUsI-/%H<]2G^%29V;6OE1,<r=H_'D]%SZ6k4D%H%i,?);]*b\=/ra]P)f>sgPmi^=*FIJ?.ObMmOZjM.#.q`AsV1#TFE"&jX7]+2Qq7OCQA89n]0l6O'F"Fh2IQ5@raj,p8%[uV8`k>6N&h:?pePT(,_43PF/X5Ba-BIqBSSs)2jE,NaYdP8k'4&"piY'HO\%8*qV0f4ZTp?[j$C%bj!j]n@?XhZfZcdhFYhQ[$p%[P.*M@TV:^"FLGN;%QiOViu53""FTAG,[Hoie32*FUP.HpV$#[pTr`q1/rQo]`ugY*=k8SVis`L;Q1i4j$(Ju:EH\U#r>ggL[<`W%7SomU3T977h6IWm\(&H^qK/0c0"DiNAAl_R+0K>@D]Mb8<^,;pqo<<5%u4qMg;Q!3+0KI6l?)i@0s4;a`(`+h53m-]Cr*CJi<FQs%At'=O\So`O\68"42/KK1CO!bgiR1p3`83B#I(7[@h$g]]/0D%HlT6e-m,k[a&n(9mf-:L]Mm\V&ghRK83S,D4^mN3V<\]^]fDbC1%;lA6B&6`cc#s#;^J_+)4p[E2bj'6.N\2Q^1T0/;FgM)!Nl.kK6Lrjdl%:Z*]$"+@B2me5*e[l4j)g`Ir[J"FELh^Ug&N)hE%l[7m%?\ZnI$;IBd3%W*bMIdX(9oEsOD&i<>eUG]GdE8EBJ>o+0QXS5)Q.q^Q),_u;cI2+K\tO:NAV^"0p:V)n)B8$d*>q><>,<n"Q,(Wo%!1;it*HAVX/+:rX2a:r<Od_m]*7HWc7V[CT<>'#XN7@cqT).XPe3</eF>I5mlAHNkUqW3f7d>mLAYd&-;+Bi/p=DQj121UM/bWKQ%SHLL&N`^$I_o=R\mONhU%H"s)0#Jj3E"ia=?FJ,^WGk81rkt=8.ND=P98bm6VFlPXBt'Tf'lMs?Ei,gTKD,8sVS^I0ZeOST:Qc&D%f/>7*X)X-g&5gf$,CH+(H)iaWNUZ0T7CM-M;7*(&TeV+T%Po:Y&@9uC?=Z$U%^X]Re3)DGP6[XZ[qQ9Z?,6BU+^:PrLq0sbC<7(d%2[=8PO6[U_`q<nU2[<SBr:@eZl/RDMe`ZD0(Y3I=mhXLRWOE]%!4.ADm;pZopugeVb$jJ*\]'9QgJ>9I+"XEp?O.<kZ-d.W;j)?J%p+'L7L%E_$-%/NoWF^`tOofgpiilt&cC3g\jJ+6WeE=mN5"Z]9pAFa"+31Pi-+gi/QL+>&YRJ-n+$NE34D>/T`Vc?\_a,CC1b9GY%o;VLuaMeMZpq@_:U"E$>g\?'Q,`K*um'].JUHm]%__USaSN;*Wi1p#DKdS85h4S;f&K,c,FMG)lA@L+`cNen5X206&PY9XHRUN\S%]eo5RB>=-u(']50iTAn&B??Ybe]uH95KAU_hKnkZV"&!QkMH.t3?@o8<al"'DYrOjO\_E!NpkcSM+L3UDD`,*Dl$StBl'\,QCU6m%X!G(Y\P4s64s$HM\!qTA9U\J(-a9-BAgciLBN=\?<1U/m?#%Aah/4^Y';p`TN4Pj2W_.=1X@mW@W$L!C$?pi=%!>3(?+o%^^bn*S%Dh90RK<0$Y#G*G9(QiJt^9pi4^pbBBaBA]544QBt[*b_)<FL"J\Fs2@[\3Vb-2WG/[`kTf@Hj=[2I-\PbRCfAqW6/%1%;NjVX$1J%\]%]ae+InFp.@DrjZ(q8'5'L(mDc#m>@s<uf8hIBQJ#m!NOg9D2VE1hG3%nol!g"=\Tt.(HD55eIWcKeK:QR3?,'XUI^)&bA^g<N%%$TJ"R:Oe>bGFNOYJO8lFT"UCPVBGdVX)h[g0\H\9fGI=RUJ*[5NS-r0JgtNlSj<g.nkql:"QSJnNFO[ZK_3C2'fqW_JHda'Us)#%h979*;DB.dYutVdolHo#\HdT+Cq>)+FF@o":74i.0:/jASR']Te"piLF6Q0T=&+iOf<9bAn]?u,dj5\g=DuiUB9c3C:Ser=p*\._%98MOHVep=FRC(sY,Y"CF%]@OJlQ=r6SMCj0_t3r-hZ!B(8Ip@GiW1a7b"392:)@*<iS;MYrMAnDMd:'6IB>LTP@n(&DNl/R2YHA3%j^J\gMF+3n9hd"\a@*G1V&UGj!af-\HYqH8etShH9?laBXdAXX/gVFOkZc>ed&H\I*e%0<G,hV#N%Hg6o?d0f^"%TdWG5E1;&d]K%/9<ai1t5W=mMmSb;T\qV59=g;KGdeRDX'!$U424&7(Oi8"S\%r6OV^E?08:k>)p`ZS>=A7_kPeucs7/j`[u6jP`o=*5IDq]2sJ"p%pRA_`PMC3_Rct)VA(q*.EFZ2be0\8(L!kC!GQ;]p>TOa9nhaBHp@@"20_V`582i6%.%Del(9!]Rp/g[IQp]IP"*S4(@8G8/L`37F%'PK&S2b#u.DhY/is$[fNW@+>%_ncUjBP_dCj"6m`[I+7]:sC[4$6#C>1t:s8KY(MGo5R0+F1]Z:j^rOOO&_lb4.""Q:&jRXN%,jm%@T9D1,.g=Re##$+X2lo0Cdc.rd)`U:Be8':jlP?in)^knh?jOJbs]HjrCV`G]1N_=8bqVF)I+Y&:qbJSW=6J,0k2QeQ/V/Ek"0r.%%/'5\;eM>6Q'i5ZDP+30lW[`T0j+[t?f,&;ko-i#j3>VCU^l`[AR_YX6[NY`)2<L=WL^#,$$]$BL$>X<;f;l,f"-]#2F].u``$CM%cefC\GVA`HXM@NBXl0D!COo8rgeEp`--"_),,4`cCg#`"<Scr>/)8+fa8Rsa`lrfMT[Ss/.;tAsU4/BuVI,)&$?srub%kACDRaPR%)Oj$H]3+O0IuV(>'5M+OdutR!@uO+J)Q)YUFmg`EPFG+fl$)SE2E#tmm@0_&`bDHsa0c\>[A30#U3<EBAl1'4qpW_qm*3mBVn(CG%$up'A9O^V28lRE]b5?GILrQeM>_J*?!'6<T#bu_EHa"J/OiGm<at$,%!knNfl(^&OV?pSqU"HHL2M\0hZ$d7sAP+[=X)fT2jmtBc%e:C1bA07T3M653n>'?me&^m[56&t9nbPei'@b;?_dI5Y`Fuc]IJ$gm&fOdY1T=WgQeAksahhE52g6[/&`bZ'h.(79<h0f%1Ke9m$%%^SBB\]56dMlE;skI=ta\j9P,1[B=.N[o3cS8sZYWkNIF;.[f;g?u..hfGe>VC=*%^4/#<'Ko.UHb-G-nEJWCj_)%Rrj5>/I<1;S%C\J?5[f5i%l*d2LhnR;$H0\@s41-n)+0O='cQkXacH]:?C8f$niVO.reKo@jQ9JW"nnh3k]:fu&hQ<XJYsoYgVL:;ZU\=V>e)KZ/%THq0oNK:A=%X$D>bi"Q=\T>2$52&]I49*e/Gr$j+mHr]gOPIUk2e=#G1c9.3lLE`(,Wt\[o$%u;J&IDb=H]p!cM[hHJ'J7I1u!;&%G>PjoAu.).>CZWl;"!4r+WnC]>oEFbZX9@)3?LK.Fl-^JhOF+[D\.J$LQ1r_`Q"G-dTiQnF#Nl`:W!&$C#G3G\OYhDg,sTIdIi4C%c9L7/ZTe]P(<&1gA+!2TrPF84=-jh0-QSf`ep_r;UsG#1_ho#l?9DqHK;.aTqC6)AL51$GZ&fC>s1-gob#c>1Kq#o%092!3DjP=k%mfYCKAX;/1,Jm(mk$4GT6&@XhDsat>5oVh,Qd3i,.rAt<p39_S.q?sU2Uu#q$Q<6?dJ-%m<m0^C+lhmqk`Vm\4fhS7$c'7:P4L"/%[hFfoVqri(kcoH@f>#a%6X9#^Si4R<BH)$9ROS-7K+k"agL.L'QAtNS]AN.fcOGX]%`%sWkJeED?SBb!$uVfq?i:T(=qfZ20L)\a%\Tu-,f%[O8/7T/4*"[j*@r+Z&f(ic":G(4$P#O9p,sT5?(p[cD[^]9IfpTG.JX8&4cFk3B.F2+/jILb>i-r-9\+"]R_VO.;\K4+g%^C,@<<Foh$Ab^+:G%"C^BjBm3+S^%kjK/floFW(d[q]lQhJj4N?N9GkO3!b=m8F$U?+hp]Nn%6c7>>pKpPjY,`f6&1`mZOdo"LLt%3&cR]q5q@b@4GoNV?EGS*F=P7N;;f0mn_KdLq:Uh`Vj;A)]MdGB4+Z_I,m@P]?4***1b8/7UmZ*QfCqZ<'?eW.!F*A9(Ygo*ipA/%3Il!sR4o#QD%9tRHUn>t0l]XqT_2$D"kY^<E)M&RGSToJlB\QY!8HW9Ni6DF+q(XB%/%j[D4Lhi?mFmW!?@P>1GT>W1trPNeU4GL%^pZ7R/^MK?]Pk]/!*sM0>i1a"rY-b8US<-g.^I=--sp1/giQ!\jqc]bF41od9.I7G[A&&d4c-Kpb"$[2%BP(=X.k!d\;S+#PcnH%%XP"EOlVkQ=MP>KX/i@Na8[W4!c\U*/7U86NJMiY'Ta'*@)`*[n7X%4r<W/f,)_0G3RjQjtI9jU]=a)H5fo3*"2tc!'Xm5bB]GkT4%Fo@%ropZUN4\]4si?=+&ibloMI_uoo,_B]e\piUbIB33%CHYHsf5Gmr'BR!QTW[2AWd[n#/ONgYiM.;k!MjR<^Yo9hYKWZBhsdXp%Xn+&5eFab%ERr?*SEAht_,^G%`m@\-rFAAhDcOOYZdO0bq@0ne%).:-]XiPZor'I2r>F,X)t$?:V]Oaf3UbGJob4J"g%$Jja#@mA%c$hYtPLT7EdNpliNg?!ulM:snl8L![Z$hqjIn(_5*7'V,,rVj-hsdXprT7[S\phNuY-A=TDr/AWFoD0=p_\<4D,sh%a0>(%:K?"b%\>)\fri,2Z7;DSGh^>DDf/E)+LuiBg\pf'3R6_joUSP'Mn5b9TEual&oc#RQTb2-'K=ZNR1@2"*kOc"s/]0l`/!$6d2Gnikhi+68%lM:tX=3jTeP:T(&f5E]e]PUrhO]g!dWTuLUWo'3:pa/*r-Q6f>?,,o%nMQeNgo*#W?,'teDHbSoDs$'_Fo<YRA)l)3)m8>mmAA@a%oaC``>LdZ)>FPiKoc#RQFjdjM_lNW.;ie-\d<^%#^?Lj?\Z4QB5[VHS3D[PnqR*mr]gZ5AiDojQ=l:[,lSlJV?f,.*K"?EKX87gc%kGisUe'P+Dia0-olM@oq>>A>QDr==_hE3eacBGHt2j<IAO`gVW.u#ImAl7/u\7-k6HrJSglQKh;eZ["L11=J'i?"IXG4!4jrJ&>p%2mR3HY3X\p@c\/Y9j$"cphi8S3$i`XS@X0e]+hS2VlT.8g`4`mM#CE3rq\b(XE]pFm\icPQa>PaL6o*cYWFgSBR&H`R^T`T0PPAq%)qOo*j$oS`<8'YI0ahS`KOmH:%C>ppd^*p+`S@r7e_7mZ5MIhL?Ru3NoLI-13ncVV]<4%Np>53j/M*KZHK!;;ChM_tpSX&ge<QpB%<j!KNfj*4?IWfdDn,AYHg%N<*7CH-5hop9#^:g#l=oIq;l^"$DZgR-\LY7='^H1&sX-ZNRo\]r=Q@&X[r00@ZFS[;1hT^O^c[Yk6%+a\4hj6c4#UMon5\%b!XZ\*U?VqLsj:DU;2fA8*OSNU5iFS>%O>C6)0qo*npJ$/]urTjBBc$qfD\,,,?4$S5Ph6<4]*pd_rWcDus%l,0?mh=Js"4kmJcHFCP/;<`^gQejs?;Or1.cf*U#Z^ooF)iq0Cfp.X+Gj4YDS*dVhHgs=fP*I%]HWs]6qtbJan^5qn:Is=1C[%,[%V9<5,l\1U6rAZ5,M=i.eo)?e>CMR#J&rVPH_nDGNJ$ART1"*VO``Q<F*bop]]<RLc4F=>sh)YL`pZtuSiY,mdL?-]o/(`D)W#"JT%c:QgJrbqc%f:251&NelkZSAYHW*O7FrulJs<[XEN[9H:r9WBK2CqSU"K=*F@Er!r0#;9C9/?O=[2n+T7[f>8M=0\^dm_[]S`HOk]%%BR#6#"r[]fY&\50=!KWo_W5hF*6g0HhZ-oq_)9g>IhGYph+7(m_*sdr]GJ4F0PT=5-3sr_`H!FPV@(7IXcg+&"ag'bqK!;h$IM2%pJUd##qPckUFcb0lJ0(s=hh1JYMuadmanR9#Cl,oo=hcI^9[_8j^%6!S)VHZ+.HJA5HO&$qM&;`*IXE*>$AMss)@(?r'S3sm`IEe%LRY@7&$W`i2s:dn@iIKMnY`jGhVIhmFL1`Iq>!*RQ>r_Do#l5pY!h!c0AkGcRp1i$,)mMfmQ0eFlZXC]GT5F1EM5Sl%DV<[D#6!/%Q/Aub@WuSk+'F;Ib#A*.hO9cWIlMQWY\o5*Hd!t)YlWcSL,(iGIm2hp0=fcq`j=,(cen;Ic8$CIZh=9D1m@EoXo,3rkl.=eIAPSt%MX'KS]B+OO^=XIQ@5a1Io9E_*OH.GBV5MqbW=t_KZJMe<7\c2"3**A4=_u[W?,*[fC[^95pKM"Iq`es]]63t%es4s:IJFn)o((b_%YB,U\YBC`-JC0r'J^N>tRJtiuD"@ZCC$,W'-QOJ`.OOd=o1pIR4^XtVJG;nno1tjZMS$C^pHaF[qrc\HjrTn-HLMEgZ53LB`YSWZ%p6Ql8>(RK=#mA&9/!Ot%G@>Xi`j7i1TNOM2n`'6?-/o@Ng8u[\(VbWqrp]oRoaa8A'QG3)!P<Y,>Q;BiX7kKGcF/$q\RggVbt%dS%@D^(@AY."n0E%\RiLg);6pN_NhHY:uZ[lnAQ-Q!i.b'\hrpK9<qWmF3'b[+2qJH8]cStt>p@(7e8b`PjYQnMa@BFC2b<dWH)VV^8%,$*f0R)++lgGcQS)OFk&p25+(E,Rlq+7J78INMOSo(h+DpYTk:C<-Kf^'?W?-#cG@1DTBF/QJV<It#no;UUcJ7B(8=487Ckr)uHB%.b#88-J&3<RM%%jg!Mgd*k)p%(A5T"O0_W?VmkXTZPBHi;%qQ!4;A=\HaDEt)u-_DGAqhslnD4aA,59#jI--&l$Qec$l<9MItV"E%463e>gS'2=]aanu#$am]Ko:..hMp5/dY+so8b@W6pJBiAIDCcAG?=:3:;GE_"r"HAoHuEYg%OC6T66GOF^>CAiaNbtQck<=(>atd%_cXo>g_'&\(e!845NJA'H)4uX3$>nn(H6kf_PNlCs*C-9mi3n&/c$C+TG$nRQf*QFbR5geT@R*?QS8%Y+N)_BiA-&;Bh`#C[#PC`%qQ0JU#BV7fqG!7)qXhBsZC5eIOD4^,^I^@*KSpk$=PoSO8jX1W8U;?K,>bE^4il1r*M)MqqRlBl'72mOR.U8f&LV%5l,N%u""*$i%TA^I2Qj+C#F!Au=jI:B=S%*e8,W,%3a@rlmM&W+=0/u^%Ri'-RHl(Y,I;#-XkU*KIL-^!D*`BjW"qe2NM(\sC"8\,KrgP!hk5rU@%N4=3gJ74p!*ehm<%<_DM[WDK&DK85'f_rN<Yf0Xqgc[_85'8&5Fn``O@:JWWfRFPoC]BC\Pe=t'Ol\_$p$$2]ld>1^fAhSW/%a,k%a*79m-bk*m97Hi&1q*;KO8O/#+Ls4>s5VFia7bRW`qI1F8q-`)[(UsX[XGTGr;,S]3\R\^T9k'-pbD$Ua.o85Hbr.hmi*dekM!2$%1O(9XEhN4Y`u4O?,R9dQEh!.N-9]`RQ/`:mo-Xd3^N,k7[q^Quc!NKVbUj;hH-GD11\E2reStfZM^8Us^N,j<\3>22&]YdES"h9h%F>R$H0Aic^3CSpQJ+pQbOI+j*r.98#1\pECBDq/,h2<s?`%dpXrF/cDh/rE55-bL4YBlV>9o"bc`*]^LjD]G!i$B2j'tj'!j&Ljm%8.6a3:]s+6k?[89[jq"\TtHkW<AV/U0)@ff?Qrc(?d2@'HQ(f)AY6/D/Ue+q?i0&#^pS[,,KqR:T<GHUro`#0N7MGt<93&$4.AGd%T,0E0_oq#;KEH^F9:R0>s1aQ(ZE3YXRBJIGhtiO$a%'d'cG"c,H9/f%GBIg%f"F3'48nf"kNqErg!TiuIJ`p#T9H&!ht'q3f5Eh.%\p(>5[uV$6Ila$*9hLWD\Vs8Pi[]BHlIsthSaYZu,5WYANc^B8pi(QBq"]C]2r?iEI-]AKC&[hkNVn'Equ!?VE.#1/FnZ?;_"r9`%BVA[b(&`LNp:p9kDg0Ml\c1R]^Y/TUoD![sa0VC_r4S$OfgWPZme+Gsg3L96FS?T1"bD*YBA(Fng9gB(45=qi@2HEPgjZYPoTK'a%p%H[pQhKChVfOfKIp`*9k5)8W=6C?ClLWnV[pRoAhHbQ[4b`k0q9(_+mb3AUd*D6Tl(V;&=2'rE)qb-OcRKH#_b*%IM\X1K0eZ$=%OPimf.+\;fgFX[Q*r`'bM/M-i!nENGK"0kO[H@<8+1F19^'7GO[Q=DqSTR!#o:j;OVdB4?&9rM(rh9>i+oGb;rh6rE)#g`ds7!0R%U-I"+m]XeurRgrdhJ''CbIdfX[^Qs:fu$hcLX5fqpd5;$!dc^oL79&RU:Y2&G_UI1o5_NkisG_]=LS1uo*SCh0sBI3n3VE>$167J%hq=!.\9:$U8(L7n_ZE'8E=Z'.a0++5a*Z;e?:K/+4RG=WSXM@"0!AurR62.9;9Ln9?4@nSAFm>&q=:ZD_gf;-n)%>o.PD\I(TM>K%'!%.`[&KA[mT^^f@__V_?.,Ida5-'$<LVgW(QRprI8t^0p%6RaYM66Em@pD)Q:Lq>qSrNH_V9a8Bc'J_qX#55@$VUE6pPnlnJ30q%?`\VIlNOZonLYLsH'.tuj97Q0^>hums-/sPRN]'TP@Yh:jVZ2?b1fGDQaU7;558c3q=nbB"G"/nS,7B[H.KUoK3Xgb0;P-M`q"?J%6J;a8JVZ,>$Y_!L[JuTe_Vj%`&G3oIfC/t;"NpA<LkfH'\Zl%XoWqS\iJ7qLCXV-`=P[m4]G;930Du5Pm.M:/o]8.TIJ;<L\''37%*).?I%$P7?m6S,'WMOpU81\iUr5.IUL"j=u_i$[T^!1]I5ecj\:*0>/RhW5j9&TC@-/+R6^M`CT'8N=<Fb=qmA']XND#\>Ml_@BT%nZQ5F:Wb%f?k_C`#)L!*OC9IA13.]IP;#%[@0jQ%D#_=h#/efm$q94I3ePXf_P-9$A'\L1T.E4nHhHUYpURM+cpapdb[o\3++=%B%0UC,Bd_\,sHeg4l-eG4P:1!r`V/_Y3*QO]VR5+9ugG8=:2fU-N8T':]i1&r3%;t1_90Y)=kel38O='O>/(=1Mb0has!#1p0M65',%>>bN`oke1,b'Mqlj<_FRqk0_WVc_)rGY$Lk>\V_4>mWUH8.>o3enEBh-)&d!Nlfm*grnNOmbHWWT0bU;'[OVXYjB!o?QMqjp,ooI%hE*(m.)p"C5JOZODlfL3-2/SHIodqOPD/b,rC)u6\j$.k8l#!KYk+2]Ep#"Qb::'8d,serj@sLhn#5;(0@0:J;os$/0u5]k=1k_D%,i>VOn\M3bq+!rAGtN\WSG38gD<(<<-DLd&)_\WaYd=,g_ZAFjQeY^P[i)Ka7RQOR]"Rf`Kbdio9l%[/[+[3em%kZOSbpS_0GtX5%rtH;k0B8cAO'OAr:M:p#/ahemL=MSZg+_0bBDL!K-U2s:[(eeRgH7ZD\q;aUA>iRg+6Cnsb07`0]lX.X=8*f>OMVPdiW$AAGBId8%D*J9[Vk9d@B5V]$OJbU`s89Y;be`GhkHCf>&-$uu2ODb]Il$jQr`dtF\Z4eW1%:)e[/4i\M4U9aQfkuYF,L:h\'BH[rd+A:lhAj=%BE(&C"eh7n\pO0hcX3+'B+NqRX7K!2S*U-HL-I8bZ0;77GVGK/hh(mAr1CMaF-lpbDa30P8+=9p;aVWfV1O1r1&l)CF$5/Rrtg.[%#CcFYT`:G3o+0tj^Wkn*@7*iQ<,FZsCGT>YWfu2;Sj/(!Wp5VIQ(%.CVE.k:j6M>OGIr:Wld#GjGBn+EDm#[=>+U6>!dgNbhk&"2%jhAtS-L9m>QLdOW4,#EsqG?CeA#^_>?%AqMO]=;KKe>H0D0%s9VloN/M(#4fr8Cn4_%bGL<kpP>44j)R3j_M8b%_"C.^&qn8=e2*%[c3^d;sU/%TWm(F3#:>T3D@LpTCEp(9erA-@8s/I.dTXPWO+*ojFBOcR^#Q&CSp<+\uH%@V5dJ4^`1odM<V)id\h2$m/6m\:DMB%%qAp+N&63C,TCe#&6Q/<p)Y$dn0WPR3hoq`TGp-As7+jWpJ_Mr*amYKuk;4>IajOAEqb.Z?JVadY3O':BLoj:#nDr:9a=Npg*D=<T%d[8_q!2mT)QQi/E+@]Et(>^N5iZr@m&upW$.IIbRU]V+gbW;hp@V#Qn,T$r`E-021d2:LedfhVT7.ePDZ+Mu[O\\9<Pu<97"g<JD%'?L8?H>O6k<9:@nBYYU[],jq>joL2X<&@YgWB46pC.I03fdukl"g"LPA)i8CKMX%p$T1ch&=ln*Xg0^JYe%n-c)AoDp`Tl_j>d*h%$6EV*f*XSVShbSHec@V'Eh&p*31Am-o8rD$Yb5YJR`c.o;dZfB"PaA!=7@:CW>YYIH%,_Vn$B3qTBDP!2fB_R(@h%?d>'M$T8Q$[%,_*[G0&TB6V$2>MU3'_Q<J-61.,\mM,R[7U#KS=&g^777H:XNo)qP7r3f+\h[<p5.+JBeH8ZX?3SDH)6mA-@C)2DLr*OW8rQ#!F"%KmQG(5,;!I5''7^<i0n(Z*lW&kY,,@"QU:@V'S$C#ejq[Ft5)8!dRoah"(kA@K^).ahhg'ZbV5o8P`n4"'Urq^rk7Hmi6IU\PAGk%/)lp'(5jE%2'h^C/STD/6n-$DSsrC]"F8CFFCmj"/-dBWAcf*tL"dK5(>&e+,(Ql5VNkQAn[_QJD4VY-:qD'$a1W8"M=6"+WXLhX%)-k=7QkJ$h4&B"s;?EgK90J-nVP64R@TcS"(L\A#)IT[EjA6p40>AFD]5%emR!ZuC]['NicgYJudM2VmbVETV>IbfBb`PNFHO`'3%Kp>e=/&G5h(ZnI@PSVl77)IGu$ms>c-kZQ[F3R$BOT^ZV=EVd?F(.G);$AOSlR5cK-s4ucL1so//@dnGGFF<np'_e>OM%a\.1hfA%'FCbk3#j?3JA^>1FWXKQjSSBVph1k25kJ*3AU\KSRcG&u5Yb2n7E0_9m%-5=6lK'#.0;aj57,9j]K&Ol[%b5''Ms((5CEm-;Y61S%?5)(DlkCVQLLn7;FWRe?@A("S)[NZgAo$!Z2M"Dj(Tn:7[o('P[r6$8l2X[A\"qt1</gl6\QeFOi_4&gQl40XD*4c%!!3k:,D*&8%`7AKPT)u^#Y\sK[eL(p\4$cuqHNAb5"a3%p&4fKSI=]Ch4VB=P`-LIQMkC5&?I@c3*6-oCX0Rlg`DR;eZ`5$O*/8"JR)T./@["+@%1tI=ZQ=u5,,/qkOLGUqM1.K'j`.0`3IcAVnP0a>KH4b.Ff]pAa1Z#&"r'<!u1^H#d-PEJ1N^uB"5jgT@9]aJ4]N[IJa\R5YGR/T:%Z>sN!BdEYXYerq(UCpWgqL_2uSWT0sRTrk24^G:B6Op*]YfSEk<#CRKAV9;1,0Y%2IAd_'-6W1Nj5\F9dRn-c+A:tF4/>IKU+4.F%SV$K+M<'pFreq]d'">.+'Q`H&$?\S2oG"HN&B*u^;Ur..(sr'Dg?DD7r0:"E2^"6h`YpQsKfi#".bnL1iuDr>&V1t<WDjH3$Iu^5%75A7)iM`V^j&rCVqCY<-[WF;CT*g4Mh/40e%#^cX\L/I4"u$bFJp8DbD,I0dWH:c*M@WeE'SFL^o/rqYhu4>a^`)S?&?]6]$qf%[%j!,60h=+/H9e"jhEI>0;Ej%k;)CNBFfI[3[KsC1tj+J*h79s\c326"k%Wdi_Po+Du.!r5lU+XC\M1'?!RgJLsGcLBd()U1'2\UR4%7=>kr[FJne%$jS&(?@#gWG&\BP=W!p<f6U`P*aIN`.0ajAjN66h$K1=UfDYs&dSomJf%@QO\_[hc$<J#KgUkk)-1L(APD0\>Q$7'%2olF91Vl+..Qj$:JEf30>:U.=!J%L:Ge8f#B]hII'3N)*L2Ml_M^o#OYMBMcW%90Z-Prlr2(^uTDs](j3VB&\Z\]4t8496D6t?9P%b0$,.SB(]\J/!@o-L'OlJTFB$Fs;cseIo(n"Z9(HJL?L,%DkL?R/qppoZ-_@*[M0U#Z1P:M7E$5HNM[+-QT+Pd\sGOif?]ZG!c&*%Wf2bo$.A?,ekNCX[Xo3G7S4@M^kG5=[k:pM0LFFh;uh/T<:(0Nr/C@G0es")(euIuGr0;P>J4i2GTd.EW[uIrqfS9Y*Xl6cSMi_6%6l)("aJ/gY))6=p6\P2?DuE'Lc]#)`6J$8qEJY%,a,UJL26pS:ZN.k:A>e!mf*I2u"1K"!m-8QtAL2*HZ#MmK.;mp`_'.Hq!BmkH%&aKeJS*uA9N/`3F*d9AX#fNhIOA]54@/Fp:1TH>b0k"X)P^Lr3]ZS4Q9b?Rl\&Fa$CEU%&G`(:0KTV1Lbc3dtn!S#TI_dHQ[R\N0%JB;llJUe@21E&Nsr%%kHC,*7)_"#i"/>.MWRDb*l1M%o$#7t_m440'9&D%)'M_X,>@u8#'f:(I:k`ADo)Tj.%\0HS-?nEj)A4u_(%=q>Z*$lur)i]`);n<g"E^]Ie^397)m0Q9KYAP*c#\655_,m1I:;SJIu+"/GW&eI>EO%HV[%)dAO3lUeC0B!"5i\mHk]re[#7IK[4%1th!;Dhhjma]X&9CI;iY`'AS<P\4ZtZp\ShR&i1]FBh;i=07;E;+]"07VYRSCT,tAg@CDNGFR,D+ts!Zc",PLVb3<bj.>i=\1ZRl%l]UD\6f-sG9MfGE-?NiMrZ8OClcI_P#9Gn$SuYc2L[#A;Jr(1!Dg>)%_0fHN+er`V[=6j,.cZLd3PWme6UWEmVWf6amL:`"'o]nJ%g(!I\-PD%9X:oRSX!<PbmW6%#_an1Qe*[H)"(QhGB1&toOEtfHZglS2UlIePRB"CT:P$`gr3jF*%u^-"-Sa8`L"e="-#jsTV:1Ap%,JXf=3_tm$Q<6C-ZAm7,-8A5DL<qi9iN0D\"":1mZ>_tbDMGK"(eRm\OWibB6F'u4nL5_hiD+O,aI)9#[[a,[04TaPYre@Reg1\;%2cChrlXISPM@\A@8Ie\fG!m*5cXWC7d=Ap!3I)[hN"6I#lOmh!'G<)dn@4u2>$6<8Nr5j1<6Wjbf>'QQA*>ZP",e!>E7.:>g]Ca`%_JNjt]1SXrBqQ_LZM'm&#6u2)SL.,]o]6[Zn_e"f*g'KV=>jpuX?nR9c<@uu/6UXWg-.er764PKD[(l[;:+2o6;tZN*eqY'YQ;Vh%-cFNB9bHXm\&DI/2O[g][K=GM%U3#"Au'Ha<>t&)7]2Hqh&&FJXV`9m(X`N6dtjA"QXZbi6h%dXGIR>]E"[s1$V1SZg-PiF1hoag%8ZXCV3Yt0mc%q'`X[;VifG\<GHqr_)L5=.HgpL_@8ku0:VKQfZ;_Ud91.[[H#,M'pd**^8a.rb\_+R%ZY]b)U*.!/CI8stW%AQ%J%=@n[5\o4u'!+oJ/RQACWBiQHT=_P-@.H:+:]bG;XMASDN$K_S6FrJBA4obk)=%m5W,%;W6_Xm$um@T8gJTDY8<&nEV_lZ+%#`%@O%h:&S?,Qair9g<P%)"daUP2r94BGYU'CI'.n/P(iV]R]'Cma_s:ZmDdV4R,i!)&ei731ch"%1'BFS;!hDnW\Xqd<oIWmNNjZ]4C9p%M\u;1fZbm#Nj:&f`W0R[D4Q[shh*/;N<o7ZKO,Cu/n$&>qWXIaH5/m7!hhes>7P_&m7IdFET@h0"@tr"@oTC_Po(-1$O#5$_i2n&%;\mW?Q4T7TNYH*"FukPO*D%3$eJ1-VEU""Y7N>i.8nC=-cUX-T-/.ZYqI6",[3U_s!bjdZ)<j-"*4qIU-QlNsaied&W_,*hV-@Ve%?G9Sh*"J@`<jF\-\r`NuJ7ig3J`*:'T<<]$q/VB#`eoKn*$RK,!%D$u3s6KhlYiB<V_g1j,'e_dV$]Ca32lpWU>1)5$@'KkeNlSB%mJqOU,`k%:/7;rYPSe>1pd(As1i[+b\Tn5\Wb7l#':2L$aYst2=pdhrJHU:FbkJLq0g+Msr2-UOJo\fHP?)R!P561I4pBYg?!Gtp%.8Gc7=(Q3q$CIWK^`731AS"b&!!IO#<@gaa4_A7T92T?JXQ3V/$/3l4G7,Z%;if&^.PS?+aGuUC1=Yi:.a#!!Q5#Ll?3):_8UN<l%a1!Z5^Kr3u$c@%?VB*Q*?5KOPj(q\tFjMJ',79Xr&`NPhCoQJoj:3Gc>hoZ&oU]RA-%"O#F&btN%NZgp1+jqS'XA`U_(`)Eq&4.q%H1FqV^/>l-bn@rHn\_nn#mhn4a581XG#J#"O[UOhC7mpsZXQdC)<iQR.o[B8ILbZVV@"h-7-K_j#RhtE5\cWr/4qT\fD*T7c^Pd<%J`8[X-ua_#8hQ!W_#.8MI[(a=&9Lj0%03YUj%S75%h;2-lEIG,`-RXbYK%P%"+o+n4/kGb2$0XKQE'a<qLpGb^7"e^*SM!Z?]>("%4fqtb)Id6Q@'%Rn*YE[3&@&e)oqEmu;Bj,$>_^1QdTq_*q1u/.2&lB'=*s;7Qu.BdV^*+Lp^Gkp:_P8d+#g8jK-4"InhJH6bQ/Cq%-([Ga1[XLnZVBCpo?+5gN6(JP\i,K^BM:b,WSR;jKkd2I8A%!D@gpk=.RWAoJlTDA5*2a:XI&'Aj7R&U1@A.8>^r1_I8Sh=UJ5#T%Q)_cD:dc!9BUO>PL13gI=pUL((NsU85@%^]>Ng]0YUp\s@<20C`Bt:j"iPg"h[>h;f<N7\msXMAKM=L\;cJaF>\;ts:*^$i8qe=s%)FGuI\)3@p2ic$(fK6tO^>^S$\JW3h,X,X+7#WU'DH'nujY"%F>;&UH$<'ls$Oe^p(#&B@1LV[Ki^%)aM#5h*+!UJIPg3)k0fgd&%-\Q1BPm`u)E]bq>;4g4O:mRB-daFp]/./ul,CtN(b"Eo5&0VFW&9g1Q%Gb2:mLUm@.ppNQU([1%"EDjB@Sukj0[^H0EVs=.1U.<b%)GsR=<t!F^0fg832dqNMCchR_oF?E`;7MmkcJ3l&;bPT4I?/=VM9-)T9r"!"Ue_`lQQZLLj99#FH-#FX9U@WZT`h,R5dVS7Tuf!u%dPMjr0bR:'+e?Gg0odPfLf!Fo+h2l4k?n]GC@%="4"YH2.d.`WfH^Gkc3Zf<VYh?B\5C\?Q9^//r&JZ,7Y>/M&ji2OJ8eFtW(ikX%DC0lX_h`Q^O"Pkk\%dMZV_HgLd`Ea/?HEspnPn1m;_,V<>,D:?2BDC)!Md=0&N\eL!/eC_YM%.(."H/@]3Z8sB:uDn'VpP[Z)2&A%-S-/\-k&X8bSU>A>8:<+"QmocfQa"L<\gF]+dB2^$ofn4q,E3u_2bejgnW8*OP;6;#CN_L6Xe=a&CB,j^;``?OKpLo>61HHdr(&:%URR]aUSGX-U#lh-&HfmE.92eU;qt*(A0t+0_r1HEgJ[7H'dNb^<f&)d6[5afEC)d@n%8/n79'X^b_s98^PIEGJcL3Ij"gsQ]U6ia%:hcb^.;I)N?lD$,T]T,"aG_umU8gnh;^ATDa3\XWR0>FXI^M3sd$,:k6ZUHACVnf!o)a'QjEuuTWA<u`+bd9!_9`NUFC>edX@E4,%X_PhUU)P8\@0qb!'_HWY:4W+Ejpj@[^Hr_Uk!UL9"dQI?PF\jg_j&fX";3UDO.e%-oBm_DX^KRdj'MbE?18,DbFQTl`nfVT`A]qk%6K8[98<ScC,\)';[!&;Ug?.2?j>Ck:'ECBhEe$N116(A'MGoQXP1s`367GRa"BC'hF3BSfJ]*O"_+6!8cFcPc$9:+)m0"6>#3UMq%cJbu1asqK66Sa?;J?ZTt8l#;WG6F^tk<=HZ.tCg/.cKFM$D;NmIf!$7r([N-SO9V#@'#j9p1d>=&Bl[:cY`cah99seL;B4d$Njk"%k"uf50sWnT#e!`UEb4<!kTS+d6,P2SPaikt<Y:P]:gg@a@U)N2BfSB#*oLQP!k4EB:=1AHln@?m_lduF)1_q5GYDe2&nC;]GMFS`%eb;A83:sV[)D#bdCf\1dW"W>NLt<[ok,_U>=he=lk*WL$5&RY+JA;`;+n:NGp\[qs(-8'MrMC5?`uk)Ja.a:t_3h+H3lP&d](b\L%F#Z"XEp(ui+M&6'10/<5L)c4'MhquH-*-S"G0Na=B[65`=N(l7h%\>:\qINJTjMoW+c!@u%dO`sYrBdo_1TjH$\1:R9f^F?oJjhF%E'iSnaA#i`$C]\7WJl?.O>)tU!_->7kD0[\/N5eKpluCEYnA>%]Garar#GPU<^Q#N=:$r^-1/00MkZH6.#I_a&2;4]!coUWXiF9t%ks\Q&13A"&,cu8\9.JM[rg:&o]31!J'M+mka+U7JR$Y/e'/,W8[&RS&Um/6dm!.O%LWZQcP,)*DofFU:""#:q`)tFh6:m5II-;Eq%WMEOK'0R#OO?661=q'o;6`?Z:5QYLZ-M^;BNWYqsVG,n\hZq81egi)!^FX#/MDkW[6L+[Zr$=$MBbfdeR9GDMKlIEqPdN2TVCGMI%$f%!^R?Y+0fWpgK2Bl#L##+Nr`0dPn`^tE;nibdP4C5<"1K_+^#c">+@1Phd&k.X1d@*XFH=*1B<WWHf5TJ&q(aU;H-&.`Y'&U'F%\`]Km#0]N9=TGZT9XZ)[%hBDFU-XfP[+6Hg#!BIM_.oj6MkQlC0V&I]MH$77E9\(S)H40?!_-<\8P955Q4]f)G!o;tnb3G>&)_08%ap[2f(a)7I"=H)?_&?rcaH<;C!qSe)9.$:K.TS@:'#Q#VC2\Y8]"0)=/8%MS3[\4]+Zpfd6].cUB3l`ZJc7'[b%:#KW".!@@O1OW%#pp"b<WQ$DUBsBZEDr.F*+g3I.!IEk-V):lEjiKJo@"AkAe\mG@Q>Mr,XrY8e@Hi^MkZCC![V&u0X&[pV@)1W'W!ul4.1oOP(:`W%Oc[c\M%H,0/WYQ/9r!pZC`UJ.Xp4TG8+@:],J8gZ"6[n'P@&q:6]8nHi-Uu'PXe26VAu=DZC4+qS'-Y.CF@Vg.8NjcjG)9inqS+T%^M'6@9W.k^CWCp8)>5W0-&CU5cs'Es,o0rL:.Z_X/7?]!h%V?OFE".UP$'MB(%0c\l8mU-i_s91R(lY_.71(SWt/X!8X]]!H/^(L%mZ<7>k'm=QO$Vi_i)ZM2/&.GB6S=Fa)T%]<5_Q3R=HKol.njh`7+PnF;p8dW$P$RE\:00fr5^;b0E+Qcg1lX1p_,>if/h4HL1&6j%%#7h<!,2k/A]$'EF<V:O;%X/lW!GC";J\@0WT!_`j42^r7cC<ZP;]LY.3QHD,I$*b&m4A/D`s,`8V=7Y1n$l*]^S?YaLS%PL8A-f%P%EX?,1#J)ZWb=H+FJ8_JfP"=`Y>Z8M@u:t78`B`d5pM5]AQsle5'7ci>FimkD>']E('@1+RfhPIBm9DW[4P#G^ZQWR"G"%W0REM%nPEOB$,=N7+s=Wq!p!>o]W.mZ<bNF!V`Sak8qM93<8Ic#%tPiRaUdN6&rh[!dNg:K?>maHJ6,>3\g(c:ToqsbX!A<fPsi(!.LCR-%Y,ar:JZ]qM%Ru`%W$m[/,r(eDSS=d\"@T16&W8,1`4S]O$?chIA])$I0Vh<m2pdpi.P>s''P:`@Pp@P>-&GGt8L2;*#p?&nC;H#"%@M,T&!(LZS;C/$KO.:QP<>%PjmaXEt8L3:qOp#hUM8WLB_:EI/8!QKohG4hc&q$WS<E)QRFs:R`A"?"3?7D#(f1I7LeIqeQdILB\%=?EN/\0-_BB.H!enO;i_ik8M>&[.Kkbc<$&A$lGDa(oOd>1+VuK&FT%KsWY4HaQ7NXHj^I1G,A&@PH'C,YABGf3C;^]>P=u3V,:'%=EQnWObbAe`.C`.+kB5l]9jgX)ff)+S\uqS!5tePfXss'&[.Dj:ka!(>j*.^*S$=/H-HJ+`N#<_5QXl?>mAoHGP:S[;gV<';bR6(%`N=['\.oQj-+[\1AQ1Y+kG)&jq\U@e@q3JG,$m4mTg77BD!")[J`NIb&8a].cE2t+QS?\`(5F&2"K`!$_$L1@6tWWQ\b(r#MG[]l%BYD4IUZOu](c[aCAZ/6uc>I=iRa&L[^*#m@!;\f:j=o31itQ"?`jYhrHUpTf"%jC'%QRcP-\Ua$H1<>u#SB\nME2@3[+@K\P]\0e%TgP*kDrIT.Ws-o$*tXC"j%Ee`(A.`e0dJAZeqL;Ab*cjAS"eLGW3#Uf:lc:.7B\#)Md@'aMpdQDHdN[W&;=lcBb[QZ/,:I=^rR@O%83nDLR%H[ZlI*Y(\YK]\BuY>G&qb4=qZ/7o>a-(6KQqi`7!PnT#e/npAFWW](Q;1XDLs"3n7rLHj29%X<RJbK1."8Y3.i%o1(=l7%S)5Kg1&\eT@_?Qref?u25(rE!d9".A!H[%]?p9Oe(49$o"__#tD[\7"F[WaCQAoPfF+'lMs7iI'Sg";SR0c2$>rV2okCSt%9l!d;%lp*s,8U"V3lD-:AB&UBm8j"_/)rp8jl_^%j4%C]//%E#6-[5e@b>s!.L,^('g-p8^B:o>el:_=gZje51k1gC;RKeaRjX`cP&Q4ra%MNhpu8`$Lgf6V\Ap79.f!#*/'h#n.=Lan]-''#N))b5r`E90uqnFFJ)0'<h%F9%<G@miZ=S!.]\:f7@@_eXYBKTe.$/0gh#.m>(,%oXb/ZI%^qnS(h6IM&3n_F"YJ^Wncb?d8OW%b;8o),/>;<[fW?b*VDD2GkV1`;n7_nf#*2-[jt>E1+I\36pd>\_*iU<gkCfp-5&f_%obHO_Q'bc"#<Q;,5f/U.7*9[3m8Z@Z?O^a=l)b$(EJ/U2AXPT>0S:q5rei9BO=]&8.!3Es0D`0Z9\eX8'>miP-G2;N@ugVeS]N!p%"?:Bf3,qR0.9/qmPm[hTD^q*(&/uFAGN&`V`iVdf6VBc++o3I+6,]mYY)9_(5G%XZ+AHNS+E"ST-q(3\c+T%i8$8*50]<+8E2n/L%oNN)+W"I>O6^i4c2]VQQ^hA',0=k?sA)'[E@baS-;;;L&/s;11<as8BW)[RS?PC=Xn2\qb7+_iU<_5Agpg+518J'3s!omPk&X<Jt%oPd%^3gBQ*X9_LJnrhJn>,<Y?1H&;0i8_Uf'(N%=0]>T_R.mCcAsMq4)rr9HEj$QR:ML%74ju0"V98SMc6rm4Np)h4e:>Y0-noh@%Q?=FW$5$$HQ)bIVs2Hs-72=:Mgm]&9\LLXR5f,#CQuJloN3t6R>pVe[Tb!=$]tHo+GKi_:ils`Zd(2KT/giCB9!.U4iF9XUQ&:c&%e^@J+;c_C3K$<UePs>&`V[C.N1V-I/&m_I;'<Y;k3JR-Ka2jJo0/J*EcD<'Ch%^>Wc_W5'dQYUigP[9hD;>e^`pSY.)g,gWNk,pB%D,6Xi%m]Y6YC+?U+qcKF&W>6.LkX^_f&I%*F9igI!#24Yc.s!'p23P+P2!J`<8?+\1"E-s@;9Q!d1'p[N^t-h`1je(@c#n"X_XPr%9ML3n"Jln*Qb4qS3(g]CG^FX&U;=Hs#!lnkFp'6;.2f+Iomd8+g.Ioe''qBa)b\,mJUh1U;9%or@_?1p6E]CRX+ifom5X`<Cr`LR%ft:#9XGjb-6BaQ!,46MJLl!u;0p\<c=<U/iU_g/M\o^s[YmQU`.%30c-mgNcE4+lhLr<:1Z+(,c(=nLa4g$Hq#I+VE^h)b_;"uJ`%Dm*h'+CZ&i9WZ*]L#2^Xis;,r#ck1QfAatR(brc4l,&KTlIU#TE>bK1Y>t.Xn^?)D_ha+G"Y;:DM"tUQH;6%#pot38).GhPd2\_a%6h/>R,&nLo&A^"eK<aXABa2VA_3,TS+WX5[`a@F5*)H2RDaNf9&jW[T-C?TD$HtN&n:O2EiE%d6NZt[iL%bm.GPh_B.Je((4sAi.%<eBoLZ)fLHM[H"N#1L+Tl[3"%HqFt5HqH)54s_eCo*LPr]+1D'a^A;.c^&Rr-QHOQ,=0C8Jjdu*D2dP'MF_hQ#qS'."Ql4MfXg0H%!9[BL;O,ZL`P^ZmN;-5heNe`T8Kcma,bX(B8hfg!@H0eRb.s;KPaNJ^o0"8ZXLuCDKG[u7'RW]2;Toj0Ur`:p+O9_G@dJG60_.A(%lZj5_@1Y+,#p"FiLuhXq14fl-^!+G,d*Xd<SF7oCSF9$WcM'_:cD6.jE-BSaBglPfeP8k\I+*74-%&K$E9AAN3R<nBaRMYM42FAj%`*O>>KdZDmpG+eE;hC.ha\_,d95-f7'9838E5M4"9>u/%,C?"q[H>p1'\Al4*"sTZ.q%6,PX'qh%?rI+I7eNS36)\TS5X.=6RI+d%amkT<cLKCW()3[&W`mCESk.'cSd\n4RY_:e_%C+RU#%:a-2a"uag]Rg,S2,;"W$1$^rZC@KWf,&'-m>bgeXZBi@-KJE^(k+F$K?G%+`91Q+!3qE4(9gj1^(B7k0cpDB!Ti4A@U"U"OVZ^!u<*:'+EQ#2!tFr72J:h]BEu8F[rMclK$3Y0=Qk!$c%J-$S6tB-^YiKBKV6a%8ZbA>ZH=KB7D7ANd[a+6=>\6"hO[3$YZg88$0(U>LrJt,K$al`[N;9/mt6j?^9:G;@2alc0@nNCi>NMg4$H.cWm(k4#36\`@r>2&%Xpq&r_q^#b/%SggKqJ`R]204t]$%Shko0!,cb(Y/%25OZ[@75Pl5H7_\gcbob/>^F9&uP^5'Z-bo[RI-3PL!ih^uleL?SAh6^JF=%qS6s%==rh(EJfn-Lg&D6%_>4a,%?R!hGadnEt$5!/f>u[h?TRokNL4L9P,[uLaQZIaFHRR4b5U4(Z*8)(YJuX(#;>^)1c1"TEnL\%i00eU3j@u+bsW:RPF>E2R^c*@@(ok$'OuGd9phZ>"N0$@>YBZg;&!S>rh<?sS\CM)>-_34!d?XQ/l2l)<%eAYcD:.F^Fq2UTirg4%U3FstX:0aoPjtkK`*Xf90ldD;>BG4A]_$kp1mR>%I#5&NL?>Ho\^uW3.Eo2C-^'@uhuUk<pm-O8Esp&DRYJ@&D9@ed)`)PFYqM_=%LNgD%&>oAr5R?=CdG\8(^'uDZ:!DE]7L9W]FJlP>fB-5T%iN.?Y_nAB>WR@bkh;O%D?:NLjArcn9#8R6:%@83467-mm8V4bT;!qb%Lj%@@n=C_*r*B[jC>mY6l$cT-,ELc0Q1n42V^d2F+sun3$",.mhoI#s9'/X^V6RUJIRN+AbD0cBS<LQfjfHML>mjqiZI3%=!^dXn%G.IP@pQ.-O+X@4t2j7Hi#A`Bc]Uh)un7h"4K&T_:]0+>Nng!/liZXL-Z*H"CZDa=`eN5u.KJWE;aCXoi(tGb,VQ3C$jAQ;b1MsX\%I)<5u(Ptr`*12O1dsOl$512\noqF^&YV60M66\X'=lliRiMS6a2FIi$7u<%h(4do'oYm'BR`uCH`h1^kRa-tbZIT13]6&Kf"]"5N%TFS6.I%@c4!b6Nb:GRB.@)"Bn$oDN!hsueoH8:6+ee:BK)?F8G@S5UmAFdus&g"*L/\F),hIar,.?5,N'#Xkda2,D+TQnMB&ck;d%MCXAn>)OLH\gH7rdCEQj`)q5%\\S+X<tVe*r"cF3]gO`pL1Eg7*Yb7Y+s\>G79[5'=r\]=^W(dIGO;G/?>U,`6A1W#L^,-"WXFXt%`*4ENLnNJX(E4F<3GQ"`3iNG&!C?i#K0u,<'1kQG&1LWAF8p3q8AoGW'%=k_Y-!6E-1@iO$l""!mr"'^'\j<Ta&EB-[focV$Q/_4%Ek_Fc.PcQo:JFm>&Ta^"6War6M7)X(VF/0c#st4q2eqe4Ubh=VM@kbElZI.q.].i'OM2E];h2`9'JX"E,kDqZ]W/p/$kYB<p]FcQ%\-&_G_LXP[nB<:!Y;jHdFMT,UZE'6$KIBgaFg^]coWRn2=]",[E!K9lK`c%@\ab?m`L'S="WCuqHC2PM1mM?XSOsf5"G8q']N8&V%?JQ'Xd!$eueq\)l]V,j6f(cu%eHb-aabtECWGC1s5f2OPQr#^fjp'lbQX`di75UeqT0<b#D&3@^o^=GNk$!L"1;"AA6%N$%I7SqD%/deth=nrcoE+_A;LA)(:a:0A%63cAEJF9#LY[pf%`pU?Ji2u0[1O!&X5f/g1Ycq[A/8Q2toe7D[%q6SI?c>,39^EZ!F5$mA[27Th%81Z_if#b@Oai.EfO`hVK15qHZZ7$Us#Oo]\US'A<Abm*SCo,cC,i\NW#fZ<Kb$R)m@.:506P;1?ZXBd^o+^`=.l"e[8;qbQfXfs#%@NXUd&c3LB-=Uu`Lm[']$7lUdQ.Q*E=!pr7*Vdn%T7u(WJLR\?b.Rn(Y?ckumi<&2HUklihB=W14"*BQPK36couX6MDtYhY,5JGi%CM?_hLC'n_kH_c6,E/FkOGK6N'!"#bQ0S-jQ'"h/M""t^;(>tE3a8CXJLY&![2&#Z;D9.t_G5Lb8A'U=@SutobjcP+duj-.i>q6(%eJ>;5FMblJh`r1<e1k7\[4[QV_#]I\YX^6c<SB,[2p^;7Q3u)LrEZ8cL`@%%NUhO!I`do[N0gc(\\LkjlTCRV8K*0M*UGc]8R)k4%#Y-ubdWefUUqpe`14'q%1:%:$";48c0sNN+bV:*f:8oO<2VFLc*35;>rgF5(2.:rEmB.78JIb:P8KO[B[b;uhM#")TSp%>/C$nYE%]J0RXCePG!!_-i%(:Ue.@7aRdam46\T7.J4-AhMW8Rd-YMO<:g@dAJ$@NXSl`kKH<N*+l&,fUde7Mfg5r5JlS\pFM<`hX>NX-"?b%VA`RrN'iCpAKW*ePi/G0g0LcnSoUuT^Fr0sm7S$(_^i7BG69?O\VY*ag;]X5&^S!#o@oGHGZtN7qctZE+RVk,Vh/V^][+I`8eL[,%&lug0b7X^0!_D^<@=D;++V?[$9%Yk&ag2P%Ss)&0Xs=Uo.g8W58eU/i8\:5CY[2ZW-EU@5q^C-B-+Q;hI&/%<--QNKpa_XfQ2pNs%A\+$e,4S9GM>?DUgpQcD,O.`MYI$ZMKgr:m73p_\/hqi#\]"84o%:P:J^=S:!hlND"["+_q@[:r533J_W;p=hA1<S'gccGmP?Y`?%U:oLe+F4^)D[n]+;sOMT>CF:t?a6bm5KZ&*Vb=29).ad1g:1g62F:'Tb;b?()&G"l+gL^EDF5M!N!k%K$XR6?9(If6/'0LTZ?3f3%^22S8Id;tpOor^.7slfLE/Jnc70^i'=4^eNNbhV_CO@A;a^&@^\<1#?r^QI7`>coF`]'&jiuD+bQV5Xkj5l'4:u2B?*!_5l6F$!q%X0kh(!XP>>MM%\6@h-DL/`W1L_[QE+6fYuc*I8h:e],1H#4\\@D`=A`J@NoGc3_^;lW@Vio2\g`huPa8&FLc%=<:MtpluMLC!JQ1%9$?(kbpB=+T]1+TGS`^/_qXu9]^dH1RpYF.%tTO&"\aWukRk^G4P]lD`^T&SUe/`^0Q9#7$:;pK_FQ@!Y:pT/+5?'JK37%kG6MZs%D<+gp[]6uN+P3I7r12*H\r<=B/<1/g3=IKK6IJGaAW`r\`Z3)NK4RVhRn,S=ER>[RklBbeW8a9]QRIeRVF8(m$^f;0--"X>[[nk0%..fer,#eC!U=a]qnqMCqNqng?Fb+en6XiHQ0%%D[^1[W)2ik;-7,u<:MlY+b53GBtj?cs#haoG^O91VRmS<<U,69&n%h-kD)HW6/%]/d?Fl^g,h55j"0n@qJ+CMS!LMn:&p+$D^_nFcS?D!pnu&-(g+rkmtLeg`l[!IpO;I!5/Jp\2"hq-RLCrsp=CMLU"nEVn//h#@VsLA^c~>%AI9_PrivateDataEnd