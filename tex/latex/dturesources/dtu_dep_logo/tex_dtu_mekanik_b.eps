%!PS-Adobe-3.1 EPSF-3.0%ADO_DSC_Encoding: MacOS Roman%%Title: DTU Mekanik B.eps%%Creator: Adobe Illustrator(R) 12%%AI8_CreatorVersion: 12.0.1%AI9_PrintingDataBegin%%For: PeopleGroup%%CreationDate: 27/02/08%%BoundingBox: 0 0 174 26%%HiResBoundingBox: 0 0 173.3580 25.3174%%CropBox: 0 0 173.3580 25.3174%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0%%+ procset Adobe_CoolType_Utility_T42 1.0 0%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%+ procset Adobe_CoolType_Core 2.23 0%%+ procset Adobe_AGM_Core 2.0 0%%+ procset Adobe_AGM_Utils 1.0 0%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Magenta Yellow Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x205 R agm 4.3861 ct 5.530%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 20 8%%BeginData: 4272 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45936F9AFD07FF7DF82727FF7DFD0427A828FFFFA852FD04FF277DFF%FF5252FD05FFA82752FD0EFFA852A8F853FD41FF68696FFD07FF277DA852%27FFA82752FFA827A8FF5952FD04FFF821FFA8F852FFFF7DA8FFFF5252FF%A8A8FF7DA8FFFF7DA8A87DA8FF7DA8FF7D28FF7DFD3FFF93689AFD07FF52%7DFFA827FFFF277DFFA800FFFF7D27FFFFFFA827277D522752FF52522752%FF7D52A8F8FFA8522752FF7DF8522752A8522EFF527D7D27A8FD3EFF6869%6FFD07FF277DFFA8F8FFFF2753FFA827A8FF7D27FD04FF277DF8525352A8%217DA8F8FF522727A8FFFFA87DF8FFA827A8A8F8FF7D28FF7DF827A8FD3F%FF93699AFD07FF527DFFA827FFFF277DFFAFF8FFFF7D27FD04FF27FD04A8%52FFF8525252FF7DF827FFFF52527D27FFFF27FFA827FFA827FF7D2727FD%40FF69696FFD07FF277DA85227FFFF2753FFFF2752FF2752FD04FFF8A8FF%FF5252FF277DAFA8FF52522827FF2753A8F8FFA827A8A8F8FF7D27FF5227%5227FD3FFF93699AFD07FF7D274C2EFFFFFF52A8FFFFA8282752FD05FF52%A8FFFFA852FF7E272752FF7D52FF27A87D4C525252FF52FFA852FFA852FF%7D7DFF527DFD3EFF68696FFD09FFA8FD21FFA8FFA8FD4FFF93699AFD7DFF%68696FFD7DFF93689AFD07FFA8A8FD0DFF7DFD10FF7E7DFD0AFFA8A8FFFF%A8A8FD05FFA8A8FD0CFFA8A8FD05FFA8FD04FFA87D7DA87DFD05FF7DFD0D%FF7DFD0BFF7D68696FFD07FF7DA8FFFFA8FFFFFFA8FFFFFF53FFFFA8A8A8%7DFFA8FFFFFFA8FF7DA8FFFFFFA852FFFFFFA8FFFFFFA8FFFFFF537DFFFF%527DFFFFA8FFFFA87DFFFFFFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FF52FD%05FFA87D7DFFFFFFA8FFA87DFFFFA8FFA8FD05FFA8FFA87DA8FFA8FD05FF%A8FFA8A893699AFD07FFA8A8A853A87DFFA87D7DA8A87D7DFF7DFF7D7DA8%A8A8FFA8A8A87D7DFFFFFF7D7DA8AF7D7D7DFF7D7DA8FFFFA87DA8847D7D%FF7D847DFFA8A8A87DFFA87D7DA8FF7D7E7DFFA8A8A87D7DA8FFA8FF7DA8%FFFFFF7DA8FFA87D7DA8FF7DFF7DFFA87D7D7EFFFF7D7D7DFF7DFFA87D7D%A8FFA87D7E7DFF7D69696FFD07FF7DFF7DA8FFA8A87D7DFFFFFF7DFFFF7D%FFA87DFF7DA8FFA87DFF7DAFFD04FF7DFF7DA8FF7DA87DA8FFFFFF7DA852%7DA8A8A87DFFA87DA87D7DA8FFFFFF7DA8A8A8FFA87DFF7DA852FFFFFF7D%7DA8FD04FFA87DFF53FFA87DA87D7DA8FF7DA8FF7DA87DFFFF7DA87DA87D%A8FF7DA852FFFF7DA87D93699AFD07FFFD04A8FF7DA8FF847DFFFF7DFFFF%7DFFA884FFA87DFFA8A8FFA8A8FFFFFFA8A8FF7DFFFF7DA87DFD04FF7DA8%FFA8FF7DFF7DA87DA8A8527DFFFF7E7D7DA8A87DFFFD04A8FFA853A8FF7D%52FD05FF7DA8FF7DA8A87DFF537DFFFF7DA8FFA8A87DFFFF7DA87DFF7DFF%FFA8A8847DA87DFF7D68696FFD07FF7DA87DA8FFA87DFFFF7D7DFF7DFFA8%7DFFA853FF7D7DFFA87DFF7DA8FD04FF7DFF7DA8FF7DA87DA8FFFFFF7DA8%FFFFA87DA87DFFFFFFA87D7DA8A953FF7DA8A8A8FFA87DA87DFFFFA852FF%7D7D7DFD04FFA87DFF52FFFFFFA87D7D7DFF7EA8FF7DA87DA8A87DA87DA8%7DA8FF52FF7D7D7DFFFF7D93699AFD07FFFD04A8FFFD04A87DA8FFA87DFF%7DFFFF7DA8FF7DA87DA8FFA87DFFFFFFA8A8FFFF7D7D7DFF7DFD04FFA8A8%FFFFFF7DFF7D7D7DFFA8A8FF7DA8A87D7DA8A8A8FFFD05A8847DA8FFA8FF%7DA8FFFFFFA8A8FFA87DA87DFF7DFF7DFFA8FFFFA8A8FF7D7D84FF7DFFA8%7D7DA8FFA87DA87DFF7DCAFFCFFD0FFFA8FD09FFA8FFFFFFA8FD0DFFA8FD%0FFFA8FD13FFA8FD0FFFA8FD05FFA8FD07FFA8FD09FF52FFA87DA8FD7BFF%A87D84A8FD81FFFF%%EndData%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 70 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/set_gvm{	currentglobal exch setglobal}bdf/reset_gvm{	setglobal}bdf/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/thold_halftone{ 	level3		{sethalftone currenthalftone}		{			dup /HalftoneType get 3 eq			{				sethalftone currenthalftone			}			{				begin				Width Height mul {					Thresholds read {pop} if				} repeat				end				currenthalftone			} ifelse		}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			/srcDataStrs [ imageDict begin				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse				{					Width Decode length 2 div mul cvi string				} repeat				end ] def					imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put			imageDict /Decode [0 1] put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		DataSource 0 get type		dup /filetype eq			{			1 dict begin			/flushbuffer Width cvi string def			1 1 Height cvi				{				pop				0 1 DataSource length 1 sub					{					DataSource exch get					flushbuffer readstring pop pop					}for				}for			end			}if		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and			{			Width Height mul cvi				{				0 1 DataSource length 1 sub					{dup DataSource exch get exec length exch 0 ne {pop}if}for				dup 0 eq					{pop exit}if				sub dup 0 le					{exit}if				}loop			pop			}if				}		{		/DataSource load type 		dup /filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 idiv mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and			{				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul					{					DataSource length dup 0 eq						{pop exit}if					sub dup 0 le						{exit}if					}loop				pop			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 	dup type /dicttype eq		{			Adobe_AGM_Core/AGMCORE_tmp get			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			Adobe_AGM_Core/AGMCORE_tmp get exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{ 	/indexed_colorspace_dict AGMCORE_gget dup null ne {		dup /CSDBase known {			/CSDBase get /CSD get_res /Names known 		}{			pop false		}ifelse	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse{	/pdfmark_5 {cleartomark} bind def}{	/pdfmark_5 {pdfmark} bind def}ifelse/ReadBypdfmark_5{	2 dict begin	/makerString exch def string /tmpString exch def	{		currentfile tmpString readline pop		makerString anchorsearch		{		pop pop cleartomark exit		}{			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5		} ifelse	}loop	end} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for%% definitions of some fundamental procedures.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 201 dict dup begin put/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSD_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_in_pattern false def/AGMCORE_currentpagedevice nd/knockout_unitsq ndcurrentglobal true setglobal[/CSA /Gradient /Procedure]{	/Generic /Category findresource dup length dict copy /Category defineresource pop} forallsetglobal/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	//Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_&setoverprint /setoverprint ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse			/AGMCORE_gstackptr exch store		}def		/grestoreall {			AGMCORE_&grestoreall			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/setoverprint{			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint		}def			0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/sRGB ne					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			//Adobe_AGM_Core begin			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						current_spot_alias false set_spot_alias						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor						set_spot_alias						currentgray 1 ne					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						//Adobe_AGM_Core/AGMCORE_name xddf						false						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not AGMCORE_currentpagedevice/OverrideSeparations known and						{							AGMCORE_currentpagedevice/OverrideSeparations get							{								/HqnSpots /ProcSet resourcestatus								{									pop pop pop true								}if							}if						}if											{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not						}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace							false							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall								not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse			end		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	/AGMCORE_IsSeparationAProcessColor		{		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or		}def	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		level3 {			/AGMCORE_IsCurrentColor				{				dup AGMCORE_IsSeparationAProcessColor					{					AGMCORE_plate_ndx 0 eq						{dup (Cyan) eq exch /Cyan eq or}if					AGMCORE_plate_ndx 1 eq						{dup (Magenta) eq exch /Magenta eq or}if					AGMCORE_plate_ndx 2 eq						{dup (Yellow) eq exch /Yellow eq or}if					AGMCORE_plate_ndx 3 eq						{dup (Black) eq exch /Black eq or}if					AGMCORE_plate_ndx 4 eq						{pop false}if					}{					gsave					false setoverprint					current_spot_alias false set_spot_alias					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor					set_spot_alias					currentgray 1 ne					grestore					}ifelse				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf				dup type /dicttype eq					{					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end}{					channel get 0 paint? AGMCORE_separateShadingFunction					}ifelse				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					Shading /AGMCORE_ignoreshade known					currentdict end exch					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				//Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					/AGMCORE_SpotAliasAry2 where {						begin						dup 0 get dup /Separation eq						{							pop							dup length array copy							dup dup 1 get							current_spot_alias							{								dup map_alias								{									false set_spot_alias									dup 1 exch setsepcolorspace									true set_spot_alias									begin									/sep_colorspace_dict currentdict AGMCORE_gput									pop pop	pop									[ 										/Separation Name 										CSA map_csa										MappedCSA 										/sep_colorspace_proc load									]									dup Name									end								}if							}if							map_reserved_ink_name 1 xpt						}{							/DeviceN eq 							{								dup length array copy								dup dup 1 get [ 									exch {										current_spot_alias{											dup map_alias{												/Name get exch pop											}if										}if										map_reserved_ink_name									} forall 								] 1 xpt							}if						}ifelse						end					} if				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	/AGMCORE_def_ht currenthalftone def	/clonedict Adobe_AGM_Utils begin /clonedict load end def	/clonearray Adobe_AGM_Utils begin /clonearray load end def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/getrampcolor	{ 		/indx exch def		0 1 NumComp 1 sub		{			dup			Samples exch get			dup type /stringtype eq {indx get} if			exch			Scaling exch get aload pop			3 1 roll			mul add		} for		ColorSpaceFamily /Separation eq 		{sep}		{			ColorSpaceFamily /DeviceN eq			{devn} {setcolor}ifelse		}ifelse	} bdf	/sssetbackground {aload pop setcolor} bdf	/RadialShade	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/r2 xdf		/c2y xdf		/c2x xdf		/r1 xdf		/c1y xdf		/c1x xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		c1x c2x eq		{			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope c2y c1y sub c2x c1x sub div def			/theta slope 1 atan def			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if		} ifelse		gsave		clippath		c1x c1y translate		theta rotate		-90 rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax xdf		/xMax xdf		/yMin xdf		/xMin xdf		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			/max { 2 copy gt { pop } {exch pop} ifelse } bdf			/min { 2 copy lt { pop } {exch pop} ifelse } bdf			rampdict begin			40 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			c1x c1y translate			theta rotate			-90 rotate			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def			/c1y 0 def			/c1x 0 def			/c2x 0 def			ext0			{				0 getrampcolor				c2y r2 add r1 sub 0.0001 lt				{					c1x c1y r1 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2y r1 add r2 le					{						c1x c1y r1 0 360 arc						fill					}					{						c2x c2y r2 0 360 arc fill						r1 r2 eq						{							/p1x r1 neg def							/p1y c1y def							/p2x r1 def							/p2y c1y def							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto							fill						}						{							/AA r2 r1 sub c2y div def							AA -1 eq							{ /theta 89.99 def}							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}							ifelse							/SS1 90 theta add dup sin exch cos div def							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def							/p1y p1x SS1 div neg def							/SS2 90 theta sub dup sin exch cos div def							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def							/p2y p2x SS2 div neg def							r1 r2 gt							{								/L1maxX p1x yMin p1y sub SS1 div add def								/L2maxX p2x yMin p2y sub SS2 div add def							}							{								/L1maxX 0 def								/L2maxX 0 def							} ifelse							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto							L1maxX L1maxX p1x sub SS1 mul p1y add lineto							fill						} ifelse					} ifelse				} ifelse			} if		c1x c2x sub dup mul		c1y c2y sub dup mul		add 0.5 exp		0 dtransform		dup mul exch dup mul add 0.5 exp 72 div		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		1 index 1 index lt { exch } if pop		/hires xdf		hires mul		/numpix xdf		/numsteps NumSamples def		/rampIndxInc 1 def		/subsampling false def		numpix 0 ne		{			NumSamples numpix div 0.5 gt			{				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def				/rampIndxInc NumSamples 1 sub numsteps div def				/subsampling true def			} if		} if		/xInc c2x c1x sub numsteps div def		/yInc c2y c1y sub numsteps div def		/rInc r2 r1 sub numsteps div def		/cx c1x def		/cy c1y def		/radius r1 def		newpath		xInc 0 eq yInc 0 eq rInc 0 eq and and		{			0 getrampcolor			cx cy radius 0 360 arc			stroke			NumSamples 1 sub getrampcolor			cx cy radius 72 hires div add 0 360 arc			0 setlinewidth			stroke		}		{			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				cx cy radius 0 360 arc				/cx cx xInc add def				/cy cy yInc add def				/radius radius rInc add def				cx cy radius 360 0 arcn				eofill				rampIndxInc add			} repeat			pop		} ifelse		ext1		{			c2y r2 add r1 lt			{				c2x c2y r2 0 360 arc				fill			}			{				c2y r1 add r2 sub 0.0001 le				{					c2x c2y r2 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2x c2y r2 0 360 arc fill					r1 r2 eq					{						/p1x r2 neg def						/p1y c2y def						/p2x r2 def						/p2y c2y def						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto						fill					}					{						/AA r2 r1 sub c2y div def						AA -1 eq						{ /theta 89.99 def}						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}						ifelse						/SS1 90 theta add dup sin exch cos div def						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def						/p1y c2y p1x SS1 div sub def						/SS2 90 theta sub dup sin exch cos div def						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def						/p2y c2y p2x SS2 div sub def						r1 r2 lt						{							/L1maxX p1x yMax p1y sub SS1 div add def							/L2maxX p2x yMax p2y sub SS2 div add def						}						{							/L1maxX 0 def							/L2maxX 0 def						}ifelse						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto						L1maxX L1maxX p1x sub SS1 mul p1y add lineto						fill					} ifelse				} ifelse			} ifelse		} if		grestore		grestore		end		end		end		} ifelse	} bdf	/GenStrips	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/y2 xdf		/x2 xdf		/y1 xdf		/x1 xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		x1 x2 eq		{			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope y2 y1 sub x2 x1 sub div def			/theta slope 1 atan def			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if		}		ifelse		gsave		clippath		x1 y1 translate		theta rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax exch def		/xMax exch def		/yMin exch def		/xMin exch def		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			rampdict begin			20 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			x1 y1 translate			theta rotate			/xStart 0 def			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def			/ySpan yMax yMin sub def			/numsteps NumSamples def			/rampIndxInc 1 def			/subsampling false def			xStart 0 transform			xEnd 0 transform			3 -1 roll			sub dup mul			3 1 roll			sub dup mul			add 0.5 exp 72 div			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			1 index 1 index lt { exch } if pop			mul			/numpix xdf			numpix 0 ne			{				NumSamples numpix div 0.5 gt				{					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def					/rampIndxInc NumSamples 1 sub numsteps div def					/subsampling true def				} if			} if			ext0			{				0 getrampcolor				xMin xStart lt				{					xMin yMin xMin neg ySpan rectfill				} if			} if			/xInc xEnd xStart sub numsteps div def			/x xStart def			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				x yMin xInc ySpan rectfill				/x x xInc add def				rampIndxInc add			} repeat			pop			ext1 {				xMax xEnd gt				{					xEnd yMin xMax xEnd sub ySpan rectfill				} if			} if			grestore			grestore			end			end			end		} ifelse	} bdf}def/page_trailer{	end}def/doc_trailer{}def/capture_currentpagedevice {	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf} defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup //Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA get_csa_by_name setcolorspace_opt		set_crd	end}def/map_csa{	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse	{pop}{get_csa_by_name /MappedCSA xdf}ifelse} def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	CSA map_csa	/AGMCORE_sep_special Name dup () eq exch (All) eq or store	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc {setcolor} bdf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		7 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {					/AliasedColorants false def					exit				}				{					new_LookupTables names_index get 0 get null eq {						dup /Names get names_index get /name xdf						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq						or or or not {							/AliasedColorants false def							exit						} if					} if				} ifelse			} for			lut_entry_len 1 eq {				/AliasedColorants false def			} if			AliasedColorants {				dup begin				/Names new_names def				/LookupTables new_LookupTables def				/AliasedColorants true def				/NComponents lut_entry_len def				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	dup not {		CSA map_csa	} if	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			AvoidAliasedColorants {				/currentspotalias current_spot_alias def				false set_spot_alias			} if			Names {				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				/names_index names_index 1 add def			} forall			AvoidAliasedColorants {				currentspotalias set_spot_alias			} if			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx 					0 0 0 0 /setcmykcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				{setcolor} bdf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSDBase known {			CSDBase /CSD get_res begin			currentdict /Names known {				currentdict devncs			}{				1 currentdict sepcs			} ifelse			AGMCORE_host_sep{				4 dict begin				/compCnt /Names where {pop Names length}{1}ifelse def				/NewLookup HiVal 1 add string def				0 1 HiVal {					/tableIndex xdf					Lookup dup type /stringtype eq {						compCnt tableIndex map_index					}{						exec					} ifelse					/Names where {						pop setdevicencolor					}{						setsepcolor					} ifelse					currentgray					tableIndex exch					HiVal mul cvi 					NewLookup 3 1 roll put				} for				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt				end			}{				level3				{					currentdict /Names known {						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt					} ifelse				}{				[/Indexed MappedCSA HiVal					[					currentdict /Names known {						Lookup dup type /stringtype eq							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx					}{						Lookup dup type /stringtype eq							{/exch cvx /get cvx 255 /div cvx}							{/exec cvx}ifelse							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx					} ifelse					]cvx				]setcolorspace_opt				}ifelse			} ifelse			end			set_crd		}		{			CSA map_csa			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 			begin			CSDBase /CSD get_res begin			currentdict /Names known{				map_indexed_devn				devn			}			{				Lookup 1 3 -1 roll map_index				sep			}ifelse			end			end		}{			/Lookup get 4 3 -1 roll map_index setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_res{	dup /CSD eq {		pop 		//Adobe_AGM_Core begin		/AGMCORE_CSD_cache load 3 1 roll put		end	}{		defineresource pop	} ifelse}def/del_res{	{		aload pop exch		dup /CSD eq {			pop 			{				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef			}forall		}{			exch			{				1 index undefineresource			}forall			pop		} ifelse	} forall}def/get_res{	dup /CSD eq {		pop		dup type dup /nametype eq exch /stringtype eq or {			AGMCORE_CSD_cache exch get		} if	}{		findresource	} ifelse}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		/CSA get_res	} if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/wrap_paintproc{   statusdict /currentfilenameextend known{	clonedict	begin	/OldPaintProc /PaintProc load def	/PaintProc	{		mark exch		dup /OldPaintProc get stopped		{closefile restore end} if		cleartomark	}  def	end  } {pop} ifelse} def/make_pattern{	exch clonedict exch	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	1 index dup /ID get exch /Pattern add_res	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/RenderingIntent known{		currentcolorrendering/RenderingIntent get	}{null}ifelse	Intent ne {		Intent /ColorRendering {findresource} stopped		{			pop pop systemdict /findcolorrendering known			{				Intent findcolorrendering pop				/ColorRendering findresource 				true			}			{false} ifelse		}		{true} ifelse		{			dup begin			currentdict /TransformPQR known {				currentdict /TransformPQR get aload pop				3 {{} eq 3 1 roll} repeat or or			}			{true} ifelse			currentdict /MatrixPQR known {				currentdict /MatrixPQR get aload pop				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq				and and and and and and and and			}			{true} ifelse			end			or			{				clonedict begin				/TransformPQR [					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind				] def				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def				currentdict end			} if			setcolorrendering_opt		} if			}if} def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict /ColorRendering known{			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		clonedict		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/set_spot_alias_ary{	dup inherit_aliases	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf}def/set_spot_normalization_ary{	dup inherit_aliases	dup length	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if	array	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf	/AGMCORE_SpotAliasAry where{		pop		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval		AGMCORE_SpotAliasAry length	}{0} ifelse	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval	true set_spot_alias}def/inherit_aliases{	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall}def/set_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry2 where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry2{				dup/Name get AGMCORE_name eq{					/CSD get /CSD get_res					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	//Adobe_AGM_Core begin	/setcustomcolor	{		currentdict/TintProc known currentdict/CSA known and 3 1 roll		//Adobe_AGM_Core begin		dup /customcolor_tint exch AGMCORE_gput		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not		current_spot_alias and{1 index 4 get map_alias}{false}ifelse		{			false set_spot_alias			4 -1 roll{				exch pop /sep_tint AGMCORE_gget exch			}if			mark 3 1 roll			setsepcolorspace			counttomark 0 ne{				setsepcolor			}if			pop			pop			true set_spot_alias		}{			AGMCORE_&setcustomcolor			pop		}ifelse		end	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	//Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defend/set_def_ht{	AGMCORE_def_ht sethalftone} defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.25 0%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.25 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.25 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict /Adobe_CoolType_Data 2 copy known not	 { 2 copy 10 dict put }ifget	 begin	 /@opStackCountByLevel 32 dict def	 /@opStackLevel 0 def	 /@dictStackCountByLevel 32 dict def	 /@dictStackLevel 0 def	 endsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup /args			7 index			5 add array put			put get			}			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{ pop count }			if			dup /argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					 { (*) { pop stop } 128 string /Category resourceforall }				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup					 {						  /@shouldNotDisappearDictValue known								{										  {												end												currentdict 1 index eq													 { pop exit }												if										  }									 loop								}						  if					 }				if				end		}		{ false }	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end		currentglobal false setglobal	  userdict /Adobe_CoolType_Data 2 copy known not		  { 2 copy 10 dict put }		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.%%Version: 1.21 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 27 add dict copy }	{ 27 dict }ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {				mark				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put					 {					 ((Hex) 57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec					 }				stopped					 {					 cleartomark					 Adobe_CoolType_Utility /@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						  {						  2 copy get 3 index eq								{ 1 index length exch sub 1 sub { end } repeat exit }								{ pop }						  ifelse						  }					 for					 pop pop					 Adobe_CoolType_Utility /@eexecStartData get eexec					 }					 { cleartomark }				ifelse			} }			{ {				Adobe_CoolType_Utility /@eexecStartData get eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind def/T0AddT42Mtx2{	/CIDFont findresource /Metrics2 get begin def end}bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/AGMIMG_flushfilters nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/AGMIMG_flushfilters{	dup type /arraytype ne		{1 array astore}if	aload length		{		dup type /filetype eq			{			dup status 1 index currentfile ne and				{dup flushfile closefile}				{pop}			ifelse			}{pop}ifelse		} repeat}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	CSA map_csa	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{ 									Name AGMCORE_IsSeparationAProcessColor  									{ 										Operator /imagemask eq{ 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor 										}{											invert_image_samples 										}ifelse	 								}{	 									[ /Separation Name [/DeviceGray]	 									{ 	 										sep_colorspace_proc AGMCORE_get_ink_data											1 exch sub	 									} bind										] AGMCORE_&setcolorspace										/sep_tint AGMCORE_gget AGMCORE_&setcolor 									}ifelse 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name AGMCORE_IsSeparationAProcessColor not and					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	mark currentcolor counttomark dup 2 add 1 roll cleartomark} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/DataSource origMultipleDataSources		{			[			BitsPerComponent 8 idiv origDecode length 2 idiv mul string			0 1 origDecode length 2 idiv 1 sub				{				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch				origDataSource exch get 0 () /SubFileDecode filter				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx				}for 			]bind cvx		}{origDataSource}ifelse 0 () /SubFileDecode filter def			[		origcolorSpaceElemCnt string		0 2 origDecode length 2 sub			{			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx			}for		/convProc load /exec cvx		origcolorSpaceElemCnt 1 sub -1 0			{			/dup cvx 2 /add cvx /index cvx			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx			}for	]bind cvx 0 () /SubFileDecode filter	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	CSA map_csa	2 dict begin	dup	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi			{				dup 65535 gt {1 add 2 div cvi}{exit}ifelse			} loop			string		} repeat		end ] def	/dstDataStr srcDataStrs 0 get length string def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [ [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def									/MultipleDataSources true def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA get_csa_by_name 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							devn_alt_datasource						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								devn_alt_datasource							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get get_csa_by_name				}{					/Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		<<			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		>>		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		current_spot_alias{dup 4 get map_alias}{false}ifelse		{			false set_spot_alias			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask			true set_spot_alias		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Page 1) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Web</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2008-01-14T12:03:44+01:00</xap:CreateDate>
         <xap:ModifyDate>2008-02-27T18:53:43+01:00</xap:ModifyDate>
         <xap:MetadataDate>2008-02-27T18:53:43+01:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>40</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAKAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8AU/5x9urmT8x7dZJndfq1&#xA;x8LMSPse+a/CPWHt+3YgaY7dQ+pc2DxDx/8AP/TrXVdW/L/Rr8NLpmpa2tvfW6yPGJYnQBlYxsrd&#xA;D2OFUjbyNpvkz81dG8maRcXf+D/O+n6hb6jo8lzKyRNbQNKHgevNDSi15V674ql2mfk/5Kn/ADs1&#xA;nytLHdnRbPR4L2CD67chhNJIqs3MPyOx6VxVmn5Vgxfm3+aNorube1fRo7eNnZwii1lAALEntgVV&#xA;/JqeeXzZ+ZaySM6x+YJFjDEkKOJ2FemFWL/85Nf4nk8y+QYfLU8kWrK2qXdrGjMPUls47edF4jZi&#xA;eBVQfGnfEKwj8wvzL1b8wdQ8ua1ozy2fl3RLnTI7xVLpy1S/bnJGCKcxCkXGvbf+bFXsHmb81vNY&#xA;85at5Z8n6Laai/l+3im1W5vrr6uplnT1I4IAAeTlPE9ag0puFYN+ZXmHyv5t8ofl3+ZEdlFY39x5&#xA;hsLa5upCvqwwwvcGaF5aLWNZIuQJHTfauFXpvk78wPMfm+313VtH0iJdBt1ki8tXNzI8b6jcRgjm&#xA;Rx/dwFxx5bn7iMCpXoP5p+bB560ryn5k03TFk1uK5axutKvTdLHNZxmWSO4VlUr8I+/x3oqlVv8A&#xA;mp+b135g8yaBYeWNKu7vyx6bahdLeyJDxmiaWNUWRFkZnCbbACm/UHCqXedvzBbzP+Xfk7zPcaJa&#xA;3Og6rqNqs9rJczx3EF8k8kQaMxKqvGrRt9o+G2KofzVqvlD8uvz/ALnXXt47G1m8ryXl1DbqFe6v&#xA;Zr51+FRs0spRR+J7nFXsfkfVPM2q+XLXUfMenR6TqN0DKNPjdnaKJt41lLBaSU+0KbdOuBU+xV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV8rf848/+TKt/wDmGuP+IZgYfrD3Pb3+LH3h9U5nvDPN&#xA;fzk8sebtWuvKeq+WbCLUrry/qYvpbSWdLcMqrsOb7dRTFUH5f8p/mF5h/MrTvO3nOztdFt9Btp4N&#xA;I0m1n+su0typjlllkACU4Mentt3KqcaZ5R1y3/OrWfNUkSjRrzR4LKCYOpYzRyKzKUryGy9cVSPV&#xA;PLH5j+VvzH13zX5P02013T/M0VsL7T7i6+qSQ3Fqnpq6s4KMhFT41Y9AN1U8/KLyTr/l2z1vUfMk&#xA;kDa/5k1GXU72G1JaGH1PsRKxArx33+jelSq7zx5Q1zVvzI8ga5ZRK+naBLqLanIzqpQXMEaRcVJq&#xA;1WQ9MVUfza8hX2veXdM0/wAu2cEcsOtWeoXSLwgX04i3qSHpyYAj3OKsN88/lHrP/KxdW8zWXlTT&#xA;fOOna5HAz2l9c/VZbSeCMRsUZtmWQCp9/Cm5VMPN/wCV2qa/+XPlLQLby7Z6UtnrlvfavolvcB4I&#xA;rQGcTcZiIy5ZZQSBvuQK0xVbp/5d/mRpnlLzX+XlvMtz5emtZh5T1mSYLNEJdzZTqPj4/EQHAp17&#xA;EKqrH9B/Lr8wNG8x+TNdsvIel6evluO5t7+GxvYFurxri1FuZ5pWRQaEl0Usx3IJFa4q9E8q+Ste&#xA;07z3+Y2r3UaLY+Y/qH6KkDqS/oW8scnJRutGcdcCsOh/Kbzmv5IeUvKht4v01pGrR317D6ycVhF5&#xA;PMSHrxYhJlNAcKpj+Zv5L33nj8yV1Sc/VtKj0D6pZ6nHJSa21OK7eaGQRgqxAV9/au4NDgVn35dy&#xA;edz5aht/OlvHFrtoxgluYZEkjukSnC4HD7JfupA33oK0xVk2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2Kvlb/AJx5/wDJlW//ADDXH/EMwMP1h7nt7/Fj7w+qcz3hkv1TWYtPudPgeNnOoXAtkKkf&#xA;CSjNU17fDiqPLKCASAW2UE9flirmdFoGYDkaLU0qfAYqhrnU7O2vbOymcrc35kFslCeRiTm9SNhR&#xA;fHFVOPUpvrmoRXFq9vaWSxtHeMapMGQu5UAV/d0ocVVdN1G01GxhvrRi9tcLziYgqSPkaHFUTiqF&#xA;03U7PUrb6zZuXh5vHyIK/FGxRtjTuMVS/WvMU1hqVhptrYvfXd/6jBVdY1SOKnJmZv8AWxVOeS8u&#xA;NRyIqFrvTFWyQOuKpH5n82WXl0WTXkbNFeTeiZFIpGOpdq9hiq3zN5w07QJbCGdGmmv5RHHHGRUL&#xA;UAua9qsPniqes6KQGYAtsoJ6n2xVL5dZjj1+DRzES89vJciaooBG6rxp78sVTB3RF5OwVR3JoPxx&#xA;VsEEVG4PQ4qpyzcYJJIl9ZkViEU7syj7PzxVSsbx57C3uriE2kkyKz28p+JGYV4HpuMVQ95rMdrr&#xA;Om6Y0RZ9RWdklBFE+rqrGo715Yqjp3eOGR0jMropZYlIBYgVCgnbfFWJ/wCOtV/SX6M/w5dfXvR+&#xA;s+h6sNfR58OdeVPtbdcVZXBMZI4y6+lM6B2hYgstRuDTwO22KoKw1lLvV9U04RFG0xoVaQmof14x&#xA;IKDtTpiqYMyopZiFUdSTQYq2SACSaAbknFUt8wa3Fo+iXOqtGZ47dQ3pqQOXJgoo2/jiqPWaMxJI&#xA;SFWQAryIH2hUDFV+KoTVr24stOmure1e9miAKWsezuSQKDY+NcVfMP8Azjz/AOTKt/8AmGuP+IZg&#xA;YfrD3Pb3+LH3h9U5nvDMa83/APHT8tf9tJf+TL4qxb/DejXmieb9UuLflqFte6k1vc8nDIYSZE4i&#xA;tB8XgMKq+taFdXJ03zPd2a65ZDToVvLF3Kyp8Id5ohUKx3NVP+0qqalo3lbUda8ozQ2Uf1HUI5gU&#xA;ZePKKO15Qqwr+ztiqsLCyu9e89W9zCs0CQ2LLGwqAyWrFSPkRiqW2FhYWfk3ytcwRLFJc6pYSXco&#xA;25FZGHJj7YqyS9tba8/MH6rdRrNby6JIssTbqwN0nUYFUvyz0rTbbR5bq3gSO5kuLiKSRepSOZgi&#xA;n5DFVHW/L+i3Hn/SjPZxubmC5luCR9t4uARm91xVIf0Zptz5I1LzNcsR5gSaeX69zcSwzRTFYo13&#xA;22CgD3wqnmiaZZan501W91CD1Lq0i02aEMWCpK0LMW4A8SQy7VG2KozzpZwXur+XrS4XnBcT3Ecq&#xA;+KtbODgVjOveVL/S9LjvNUu1vrpLixsrKRQR6drFJUA1/aY7thVETaVJreveYjNpi6nPDMLe3mku&#xA;fRa3QRgp6aUNNzyr3OKoLzLceYdKuNGWaUpeppbQalexgyvDCZkWSZdwWZVpv9OKE91Gy8uxw6N5&#xA;f0/SYdXM0UlxaPNL6cQSgLzNIA5ZnNOg+7FKRQ2rS6Aml3iBbeLzTHafVUkZkjibiWiR/hbiC5oe&#xA;uKp3+irHRvNF/Y6ZF9WsrjQ5Z5bdSeBljl4K9CTvxamKpc/lm81DQfLOrR2qarBZWKJPpMrlOaso&#xA;POMg05jwOKofzLrCR2vlfUfLMDW8Ag1D0k4cngQemszBCd2j+I9abeGKs/8AKthpNloluulyevbT&#xA;D1muieTTO/2pXPdm7+HTAqVf+VU/7cX/AGOYqw/SND1XWPLqanZ6cra7NM066213xlWVZjUenTYA&#xA;DjxwoRGtzs/njVtNu5XtNC1C5s49Ruo9qkWimOBm/YWU1qf4VxSncnlrQ7/zzcWd3aJLa2mm2/1e&#xA;CrKi0kdR8KkDYdK4qkelhb6x8u6JeuzaU2o30MsRZgHW3DNBGzVqRyNKYq15htYNNtvOGlaevp6Z&#xA;HbWc4tw1UimkcBgoNePMCpxVO7fR9L17zVqdvrEf1qKxs7NbKB2YKizRs0rqoI35AfFgVj73kb6H&#xA;5ZGpGTUdLW6vYntuYX10iYrAxdmRG4cdlLDlhQvv9DWz8tea9Sg006ZYXsdstlbyFTJxRx6jEKzh&#xA;VZjsK4pZb5d/K3yJ5d1JdT0bTPqt8isizevcSUVxRhxkkdfwyoYog2HOz9pZ80eGcrj7h+plWWOC&#xA;hrvTbK8ltpbiP1Hs5PWtzVhxk4leWxFdmPXFVJND0tLS9s1gpb6i80l5Hyf42uBSU1rUcvb6MVQV&#xA;55L8uXhT6xbOwSJIFVZ50X04xRVKo6hqDxxVW1DytoOoWtra3VoDBY0+qLGzxGOgoOJjZD0HjiqJ&#xA;ttH022ubq6hhpPerGl05Zm9QQqUSvIkbKae/fFUBD5K8sw6bPpiWX+gXJDSwNJKy1U1BXk5Kb/y0&#xA;xVU0nyl5f0m8a8sLX0rp0MTzGSWRmRmDEEyM1d1GKqul+XdH0u4uLiwgMEl2xecCSQoWJqSEZii/&#xA;7EYqiZdNspb+C/kjrd2yPHDLVhxWSnMUB4mvEdRiqWT+SPK09819LYK1w8gmcc5BG0g/baIN6bH5&#xA;riqZwabZQXtzfRR8bq8EYuZKseQhBCbE0FAx6DFXXOm2V1cWtzPHzmsnaS2erDizKUJoCAfhPfFW&#xA;tS0uw1KBYL2L1okkSVVqy0eM1U1Ug7HFUDqPlDy9qN417dWp+tOoWSaKWWFmA6cvSdOVPfFUTFoO&#xA;kxywSrbjnbW5tISzMwEDUqhDEhq8R13xVBP5J8sPa29q1n+5tWdrYLLMrR+ru4Vg4YKf5a09sVVb&#xA;byl5etbZLa3sxHBHdLfJGrvQXCABX+124jbp7YqjJtJ0+a9a9kh5XTW7WjScmFYHbkyUBpuR1pXF&#xA;UBceTfLtxDbQyWziO0iEFuqTzx8Yx0UlHUt/sq4qibfy9o1sbEwWqx/o1ZEsgpYCNZgBJtWjcqbl&#xA;q4qq6XpGnaVA9vYQ+hA8jSmIMxUM/wBriGJ4j/JWgxVd+i7D9K/pX0v9P9D6r63Jv7nn6nHjXj9r&#xA;etK4qlkvkfyvJdSXJsyssr+rII5po0Z615GNHVOvXbFUZceXtGufr4ntlkGqBBfBi37z014J3+Hi&#xA;BtxpiqpaaNptpci5giK3AgS19RndyYoiSinmzVpXr1xVDSeU/L0mnHTns1azMrXHDk9RKxLF1flz&#xA;U1PY4qti8oeXItNudNSzAtLw1ulLyF5CDUFpCxkND/lYq3qvlLy/qskct9aepLHH6SyK8kTen/IT&#xA;GyFl9jiqW+YvLEsn6H/RtlbXNjpRlD6ROeEUiyJwU1KyLVN/tDviqhoPk5uGrRalZxWmlal6QTR4&#xA;JpJEQx1LPzAj4ljT7OKv/9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:C20AADEF2AC4DC11B0F7C948713094C1</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:93685656E6F711DCA9DBE848ED1657C8</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:C10AADEF2AC4DC11B0F7C948713094C1</stRef:instanceID>
            <stRef:documentID>uuid:C00AADEF2AC4DC11B0F7C948713094C1</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Web</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>5080.000000</stDim:w>
            <stDim:h>5080.000000</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>White</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Black</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>74.609375</xapG:cyan>
                           <xapG:magenta>67.578125</xapG:magenta>
                           <xapG:yellow>66.796875</xapG:yellow>
                           <xapG:black>89.843750</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Red</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>98.828125</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Yellow</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>6.250000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>96.093750</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Green</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>62.500000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Cyan</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>51.562500</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>12.500000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Blue</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>87.890625</xapG:cyan>
                           <xapG:magenta>76.562500</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Magenta</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>26.953125</xapG:cyan>
                           <xapG:magenta>81.250000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=193 G=39 B=45</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>16.796875</xapG:cyan>
                           <xapG:magenta>97.656250</xapG:magenta>
                           <xapG:yellow>92.187500</xapG:yellow>
                           <xapG:black>6.640625</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=237 G=28 B=36</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.390625</xapG:cyan>
                           <xapG:magenta>98.828125</xapG:magenta>
                           <xapG:yellow>96.875000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=241 G=90 B=36</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>79.296875</xapG:magenta>
                           <xapG:yellow>96.484375</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=247 G=147 B=30</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>98.046875</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=251 G=176 B=59</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>34.765625</xapG:magenta>
                           <xapG:yellow>86.718750</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=252 G=238 B=33</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>4.687500</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>92.968750</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=217 G=224 B=33</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>18.750000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>97.656250</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=140 G=198 B=63</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>98.828125</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=57 G=181 B=74</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>74.218750</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>99.218750</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=146 B=69</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>85.937500</xapG:cyan>
                           <xapG:magenta>17.578125</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>3.906250</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=104 B=55</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>89.843750</xapG:cyan>
                           <xapG:magenta>33.203125</xapG:magenta>
                           <xapG:yellow>98.437500</xapG:yellow>
                           <xapG:black>25.781250</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=34 G=181 B=115</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.781250</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>74.609375</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=169 B=157</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>78.125000</xapG:cyan>
                           <xapG:magenta>8.984375</xapG:magenta>
                           <xapG:yellow>45.703125</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=41 G=171 B=226</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>69.531250</xapG:cyan>
                           <xapG:magenta>14.843750</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=113 B=188</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>87.109375</xapG:cyan>
                           <xapG:magenta>52.343750</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=46 G=49 B=146</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>98.828125</xapG:cyan>
                           <xapG:magenta>96.093750</xapG:magenta>
                           <xapG:yellow>3.515625</xapG:yellow>
                           <xapG:black>0.390625</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=27 G=20 B=100</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>26.171875</xapG:yellow>
                           <xapG:black>24.609375</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=102 G=45 B=145</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>74.218750</xapG:cyan>
                           <xapG:magenta>98.046875</xapG:magenta>
                           <xapG:yellow>0.781250</xapG:yellow>
                           <xapG:black>0.390625</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=147 G=39 B=143</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>49.218750</xapG:cyan>
                           <xapG:magenta>98.828125</xapG:magenta>
                           <xapG:yellow>1.171875</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=158 G=0 B=93</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>34.765625</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>37.109375</xapG:yellow>
                           <xapG:black>10.937500</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=212 G=20 B=90</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>11.718750</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>49.218750</xapG:yellow>
                           <xapG:black>0.781250</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=237 G=30 B=121</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>96.484375</xapG:magenta>
                           <xapG:yellow>20.312500</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=199 G=178 B=153</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>22.656250</xapG:cyan>
                           <xapG:magenta>27.343750</xapG:magenta>
                           <xapG:yellow>39.843750</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=153 G=134 B=117</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.843750</xapG:cyan>
                           <xapG:magenta>42.578125</xapG:magenta>
                           <xapG:yellow>52.343750</xapG:yellow>
                           <xapG:black>6.640625</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=115 G=99 B=87</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.390625</xapG:cyan>
                           <xapG:magenta>52.734375</xapG:magenta>
                           <xapG:yellow>60.546875</xapG:yellow>
                           <xapG:black>23.437500</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=83 G=71 B=65</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>57.421875</xapG:cyan>
                           <xapG:magenta>60.156250</xapG:magenta>
                           <xapG:yellow>63.671875</xapG:yellow>
                           <xapG:black>41.796875</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=198 G=156 B=109</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>22.656250</xapG:cyan>
                           <xapG:magenta>38.281250</xapG:magenta>
                           <xapG:yellow>63.281250</xapG:yellow>
                           <xapG:black>1.171875</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=166 G=124 B=82</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>31.640625</xapG:cyan>
                           <xapG:magenta>48.828125</xapG:magenta>
                           <xapG:yellow>73.828125</xapG:yellow>
                           <xapG:black>9.765625</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=140 G=98 B=57</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>35.937500</xapG:cyan>
                           <xapG:magenta>57.031250</xapG:magenta>
                           <xapG:yellow>83.593750</xapG:yellow>
                           <xapG:black>22.656250</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=117 G=76 B=36</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.062500</xapG:cyan>
                           <xapG:magenta>63.671875</xapG:magenta>
                           <xapG:yellow>92.968750</xapG:yellow>
                           <xapG:black>35.546875</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=96 G=56 B=19</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>41.406250</xapG:cyan>
                           <xapG:magenta>69.531250</xapG:magenta>
                           <xapG:yellow>96.484375</xapG:yellow>
                           <xapG:black>48.828125</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=66 G=33 B=11</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>47.656250</xapG:cyan>
                           <xapG:magenta>73.046875</xapG:magenta>
                           <xapG:yellow>83.203125</xapG:yellow>
                           <xapG:black>67.968750</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Web Color Group</xapG:groupName>
                  <xapG:groupType>1</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=236 G=28 B=36</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.781250</xapG:cyan>
                           <xapG:magenta>98.828125</xapG:magenta>
                           <xapG:yellow>96.875000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=169 B=157</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>78.125000</xapG:cyan>
                           <xapG:magenta>8.984375</xapG:magenta>
                           <xapG:yellow>45.703125</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=102 G=45 B=145</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>74.218750</xapG:cyan>
                           <xapG:magenta>98.046875</xapG:magenta>
                           <xapG:yellow>0.781250</xapG:yellow>
                           <xapG:black>0.390625</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=139 G=146 B=152 1</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>48.437500</xapG:cyan>
                           <xapG:magenta>36.328125</xapG:magenta>
                           <xapG:yellow>33.593750</xapG:yellow>
                           <xapG:black>1.562500</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Grayscale</xapG:groupName>
                  <xapG:groupType>1</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=90</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>229</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=80</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>204</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=70</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>178</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=60</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>153</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=50</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>127</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=40</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>101</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=30</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>76</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=20</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>50</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=10</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>25</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=5</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>12</xapG:gray>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_AGM_Core/capture_currentpagedevice get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -25.3174 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 25.3174 li173.358 25.3174 li173.358 0 licpclp[1 0 0 1 0 0 ] concat3.57178 0.234375 mo3.57178 22.9121 li0 22.9121 li0 0.234375 li3.57178 0.234375 licpfalse sop/0 [/DeviceCMYK] /CSA add_res0 0.91 0.72 0.23 cmykf20.2456 5.26465 mo20.2456 4.13818 li20.2456 2.77686 20.0464 1.77051 19.2876 1.03711 cv18.6494 0.420898 17.6938 0.144531 16.5366 0.144531 cv15.6528 0.144531 14.6128 0.216797 14.2578 0.276855 cv14.0776 0.306641 13.9751 0.40918 13.9751 0.613281 cv13.9751 8.79004 li13.9751 9 14.0776 9.09619 14.2578 9.12646 cv14.6128 9.18652 15.6528 9.25879 16.5366 9.25879 cv17.7046 9.25879 18.667 8.97314 19.3057 8.34375 cv20.0537 7.60596 20.2456 6.61133 20.2456 5.26465 cvcp18.8691 5.20801 mo18.8691 6.33301 18.7358 7.021 18.2515 7.51074 cv17.8306 7.93604 17.2261 8.08594 16.5366 8.08594 cv16.0317 8.08594 15.6826 8.07422 15.3643 8.05664 cv15.3643 1.35303 li15.6885 1.33496 16.0317 1.31689 16.5366 1.31689 cv17.1992 1.31689 17.7832 1.4541 18.2012 1.84131 cv18.7163 2.31836 18.8691 3.03516 18.8691 4.19482 cv18.8691 5.20801 licp34.7842 5.89209 mo34.7842 0.463379 li34.7842 0.331055 34.6763 0.234375 34.5498 0.234375 cv33.6299 0.234375 li33.4976 0.234375 33.3955 0.336914 33.3955 0.463379 cv33.3955 5.89209 li33.3955 7.35889 32.9868 8.09814 31.5923 8.09814 cv30.1973 8.09814 29.7886 7.35254 29.7886 5.89209 cv29.7886 0.463379 li29.7886 0.331055 29.6802 0.234375 29.5542 0.234375 cv28.6343 0.234375 li28.502 0.234375 28.3994 0.336914 28.3994 0.463379 cv28.3994 5.89209 li28.3994 8.32129 29.6504 9.25879 31.5923 9.25879 cv33.5337 9.25879 34.7842 8.32129 34.7842 5.89209 cvcp27.2676 1.19678 mo27.2676 0.457031 li27.2676 0.325195 27.1655 0.234375 27.0327 0.234375 cv21.2012 0.234375 li21.0693 0.234375 20.9609 0.331055 20.9609 0.457031 cv20.9609 1.19678 li20.9609 1.3291 21.0693 1.40088 21.2012 1.40088 cv23.4258 1.40088 li23.4258 8.92822 li23.4258 9.06055 23.5278 9.16846 23.6538 9.16846 cv24.5801 9.16846 li24.7124 9.16846 24.8086 9.0542 24.8086 8.92822 cv24.8086 1.40088 li27.0327 1.40088 li27.1655 1.40088 27.2676 1.32275 27.2676 1.19678 cvcp71.7539 3.43994 mo70.5044 3.07373 li70.3584 3.03076 70.2695 2.9209 70.2695 2.78906 cv70.2695 2.65771 70.2695 2.71191 70.2695 2.71191 cv70.2695 2.57959 70.3721 2.47119 70.5044 2.47119 cv72.7373 2.47119 li72.8696 2.47119 72.9756 2.57959 72.98 2.71191 cv72.9897 2.99219 li73.7212 2.54102 74.2251 2.38672 74.9766 2.38672 cv76.6016 2.38672 77.0625 3.50732 77.0625 4.84229 cv77.0625 8.92236 li77.0625 9.05469 76.9546 9.16846 76.8223 9.16846 cv75.9805 9.16846 li75.8481 9.16846 75.7402 9.05469 75.7402 8.92236 cv75.7402 4.98438 li75.7402 3.854 75.4873 3.51758 74.5679 3.51758 cv74.1108 3.51758 73.606 3.69775 73.0767 3.96826 cv73.0767 8.92236 li73.0767 9.04834 72.9688 9.16846 72.8364 9.16846 cv71.9888 9.16846 li71.8623 9.16846 71.7539 9.05469 71.7539 8.92236 cv71.7539 3.43994 licp79.5474 3.43994 mo78.292 3.07373 li78.146 3.03076 78.0571 2.9209 78.0571 2.78906 cv78.0571 2.65771 78.0571 2.71191 78.0571 2.71191 cv78.0571 2.57959 78.1597 2.47119 78.292 2.47119 cv80.6299 2.47119 li80.7622 2.47119 80.8701 2.57959 80.8701 2.71191 cv80.8701 8.92236 li80.8701 9.0542 80.7622 9.16846 80.6299 9.16846 cv79.7881 9.16846 li79.6558 9.16846 79.5474 9.0542 79.5474 8.92236 cv79.5474 3.43994 licp80.6543 1.49121 mo79.7642 1.49121 li79.6318 1.49121 79.5176 1.38281 79.5176 1.25098 cv79.5176 0.241211 li79.5176 0.108398 79.6318 0 79.7642 0 cv80.6543 0 li80.7866 0 80.8945 0.108398 80.8945 0.241211 cv80.8945 1.25098 li80.8945 1.38281 80.7866 1.49121 80.6543 1.49121 cvcp83.4185 1.04102 mo82.1626 0.674805 li82.0171 0.631836 81.9282 0.521973 81.9282 0.390625 cv81.9282 0.258789 81.9282 0.312988 81.9282 0.312988 cv81.9282 0.180664 82.0303 0.0722656 82.1626 0.0722656 cv84.5005 0.0722656 li84.6328 0.0722656 84.7407 0.180664 84.7407 0.312988 cv84.7407 5.46289 li87.0044 2.59766 li87.0796 2.50098 87.1636 2.47119 87.2593 2.47119 cv88.3394 2.47119 li88.4595 2.47119 88.521 2.52539 88.5229 2.60352 cv88.5249 2.64551 88.5073 2.6875 88.4731 2.72998 cv86.0322 5.62793 li88.7437 8.91602 li88.769 8.94629 88.7827 8.98193 88.7847 9.01807 cv88.7886 9.09619 88.7319 9.16846 88.6421 9.16846 cv87.4019 9.16846 li87.269 9.16846 87.1704 9.08398 87.0835 8.96973 cv84.7407 5.97852 li84.7407 8.92236 li84.7407 9.0542 84.6328 9.16846 84.5005 9.16846 cv83.6587 9.16846 li83.5269 9.16846 83.4185 9.0542 83.4185 8.92236 cv83.4185 1.04102 licp83.4185 1.04102 mo82.1626 0.674805 li82.0171 0.631836 81.9282 0.521973 81.9282 0.390625 cv81.9282 0.258789 81.9282 0.312988 81.9282 0.312988 cv81.9282 0.180664 82.0303 0.0722656 82.1626 0.0722656 cv84.5005 0.0722656 li84.6328 0.0722656 84.7407 0.180664 84.7407 0.312988 cv84.7407 5.46289 li87.0044 2.59766 li87.0796 2.50098 87.1636 2.47119 87.2593 2.47119 cv88.3394 2.47119 li88.4595 2.47119 88.521 2.52539 88.5229 2.60352 cv88.5249 2.64551 88.5073 2.6875 88.4731 2.72998 cv86.0322 5.62793 li88.7437 8.91602 li88.769 8.94629 88.7827 8.98193 88.7847 9.01807 cv88.7886 9.09619 88.7319 9.16846 88.6421 9.16846 cv87.4019 9.16846 li87.269 9.16846 87.1704 9.08398 87.0835 8.96973 cv84.7407 5.97852 li84.7407 8.92236 li84.7407 9.0542 84.6328 9.16846 84.5005 9.16846 cv83.6587 9.16846 li83.5269 9.16846 83.4185 9.0542 83.4185 8.92236 cv83.4185 1.04102 licp55.1655 7.9873 mo55.2729 7.97852 55.3813 8.03857 55.3813 8.15869 cv55.3813 8.75977 li55.3813 8.93408 55.3389 9.0166 55.1348 9.05469 cv54.4004 9.18848 53.8359 9.25879 52.8921 9.25879 cv51.2212 9.25879 50.0728 8.3252 50.0728 6.02246 cv50.0728 5.60498 li50.0728 3.80762 50.7676 2.38672 52.8501 2.38672 cv54.9565 2.38672 55.6035 3.85547 55.6035 5.60498 cv55.6035 5.98242 li55.6035 6.15625 55.5254 6.26514 55.3691 6.26514 cv51.395 6.26514 li51.395 6.36719 li51.395 7.43066 51.8223 8.11035 52.9521 8.11035 cv53.7397 8.11035 54.5767 8.03467 55.1172 7.99121 cv55.1655 7.9873 licp54.269 5.21777 mo54.269 4.05811 53.752 3.51758 52.8501 3.51758 cv51.96 3.51758 51.4014 4.08252 51.4014 5.21777 cv51.4014 5.29688 li54.269 5.29688 li54.269 5.21777 licp57.6572 1.04102 mo56.4014 0.674805 li56.2554 0.631836 56.1665 0.522461 56.1665 0.390625 cv56.1665 0.259277 56.1665 0.313477 56.1665 0.313477 cv56.1665 0.180664 56.269 0.0727539 56.4014 0.0727539 cv58.7393 0.0727539 li58.8711 0.0727539 58.98 0.180664 58.98 0.312988 cv58.98 5.46289 li61.2432 2.59766 li61.3188 2.50098 61.4019 2.47119 61.498 2.47119 cv62.5781 2.47119 li62.6982 2.47119 62.7598 2.52539 62.7622 2.60352 cv62.7632 2.64551 62.7466 2.6875 62.7119 2.72998 cv60.271 5.62793 li62.9829 8.91602 li63.0083 8.94629 63.022 8.98193 63.0239 9.01807 cv63.0273 9.09619 62.9702 9.16846 62.8799 9.16846 cv61.6401 9.16846 li61.5078 9.16846 61.4092 9.08398 61.3218 8.97021 cv58.98 5.97852 li58.98 8.92236 li58.98 9.05469 58.8711 9.16846 58.7393 9.16846 cv57.8975 9.16846 li57.7651 9.16846 57.6572 9.05469 57.6572 8.92236 cv57.6572 1.04102 licp57.6572 1.04102 mo56.4014 0.674805 li56.2554 0.631836 56.1665 0.522461 56.1665 0.390625 cv56.1665 0.259277 56.1665 0.313477 56.1665 0.313477 cv56.1665 0.180664 56.269 0.0727539 56.4014 0.0727539 cv58.7393 0.0727539 li58.8711 0.0727539 58.98 0.180664 58.98 0.312988 cv58.98 5.46289 li61.2432 2.59766 li61.3188 2.50098 61.4019 2.47119 61.498 2.47119 cv62.5781 2.47119 li62.6982 2.47119 62.7598 2.52539 62.7622 2.60352 cv62.7632 2.64551 62.7466 2.6875 62.7119 2.72998 cv60.271 5.62793 li62.9829 8.91602 li63.0083 8.94629 63.022 8.98193 63.0239 9.01807 cv63.0273 9.09619 62.9702 9.16846 62.8799 9.16846 cv61.6401 9.16846 li61.5078 9.16846 61.4092 9.08398 61.3218 8.97021 cv58.98 5.97852 li58.98 8.92236 li58.98 9.05469 58.8711 9.16846 58.7393 9.16846 cv57.8975 9.16846 li57.7651 9.16846 57.6572 9.05469 57.6572 8.92236 cv57.6572 1.04102 licp48.0269 9.16846 mo47.125 9.16846 li47.0049 9.16846 46.9087 9.05469 46.9087 8.92822 cv46.9087 2.56738 li46.9087 2.51367 46.9028 2.48926 46.8848 2.48926 cv46.8726 2.48926 46.8604 2.50684 46.8423 2.53711 cv45.4058 5.46533 li45.3096 5.65137 45.1709 5.7417 44.9429 5.7417 cv44.0591 5.7417 li43.8306 5.7417 43.6924 5.65137 43.5962 5.46533 cv42.1533 2.53711 li42.1353 2.50684 42.123 2.48926 42.1113 2.48926 cv42.0933 2.48926 42.0869 2.51367 42.0869 2.56738 cv42.0869 8.92822 li42.0869 9.05469 41.9907 9.16846 41.8706 9.16846 cv40.9688 9.16846 li40.8486 9.16846 40.7466 9.08398 40.7466 8.95801 cv40.7466 0.649414 li40.7466 0.421387 40.9326 0.234375 41.1611 0.234375 cv42.0449 0.234375 li42.2495 0.234375 42.3813 0.318848 42.46 0.481445 cv44.3594 4.38281 li44.4136 4.49121 44.4438 4.5332 44.498 4.5332 cv44.5518 4.5332 44.582 4.49121 44.6362 4.38281 cv46.5356 0.481445 li46.6143 0.318848 46.7461 0.234375 46.9507 0.234375 cv47.8345 0.234375 li48.063 0.234375 48.2495 0.421387 48.2495 0.649414 cv48.2495 8.95801 li48.2495 9.08398 48.147 9.16846 48.0269 9.16846 cvcp70.1411 8.55713 mo70.2759 8.60059 70.3818 8.73096 70.3818 8.86865 cv70.3818 9 70.3818 8.92822 70.3818 8.92822 cv70.3818 9.06055 70.2734 9.16846 70.1411 9.16846 cv68.1084 9.16846 li67.9766 9.16846 67.8643 9.06055 67.8599 8.92822 cv67.8506 8.66016 li67.3091 9.00293 66.6455 9.25879 66.02 9.25879 cv65.0103 9.25879 64 8.84375 64 7.28076 cv64 7.18457 li64 5.8501 64.7998 5.1709 66.9155 5.1709 cv67.7397 5.1709 li67.7397 4.66553 li67.7397 3.76953 67.3906 3.49902 66.5669 3.49902 cv65.7915 3.49902 65.1152 3.57178 64.6743 3.5918 cv64.6143 3.59473 li64.5 3.59961 64.3911 3.55957 64.3911 3.39746 cv64.3911 2.80176 li64.3911 2.66943 64.4688 2.5918 64.6313 2.56152 cv65.1182 2.47119 65.7437 2.38672 66.5669 2.38672 cv68.2563 2.38672 69.062 3.18652 69.062 4.66553 cv69.062 8.20898 li70.1411 8.55713 licp67.7397 6.07813 mo66.9155 6.07813 li65.6411 6.07813 65.3286 6.41504 65.3286 7.17871 cv65.3286 7.2749 li65.3286 8.00244 65.665 8.19434 66.3145 8.19434 cv66.8076 8.19434 67.2764 8.03857 67.7397 7.78613 cv67.7397 6.07813 licp0 0 0 1 cmykf69.3662 17.1279 mo68.813 17.1279 68.3081 17.2725 67.707 17.6338 cv67.707 22.6709 li67.707 22.792 67.5991 22.9121 67.4663 22.9121 cv66.877 22.9121 li66.7568 22.9121 66.6489 22.8037 66.6489 22.6709 cv66.6489 16.54 li66.6489 16.4072 66.7451 16.2988 66.877 16.2988 cv67.4424 16.2988 li67.5747 16.2988 67.6709 16.4072 67.6709 16.54 cv67.6709 16.792 li68.272 16.3711 68.8252 16.2139 69.3662 16.2139 cv69.5342 16.2139 69.6187 16.2861 69.6187 16.4307 cv69.6187 16.9238 li69.6187 17.0566 69.5342 17.1279 69.3662 17.1279 cvcp64.1719 19.1484 mo64.1719 17.9219 63.6792 17.1406 62.5483 17.1406 cv61.4302 17.1406 60.9375 17.9102 60.9375 19.1484 cv60.9375 20.0625 li60.9375 21.2881 61.4185 22.0703 62.5483 22.0703 cv63.667 22.0703 64.1719 21.3008 64.1719 20.0625 cv64.1719 19.1484 licp62.5483 22.9961 mo60.7813 22.9961 59.8794 21.8301 59.8794 20.0625 cv59.8794 19.1484 li59.8794 17.3809 60.7813 16.2139 62.5483 16.2139 cv64.3159 16.2139 65.23 17.3809 65.23 19.1484 cv65.23 20.0625 li65.23 21.8301 64.3159 22.9961 62.5483 22.9961 cvcp59.1421 14.6035 mo58.5649 14.6035 li58 14.6035 57.8315 14.7715 57.8315 15.4326 cv57.8315 16.2988 li59.0938 16.2988 li59.2261 16.2988 59.3228 16.3945 59.3228 16.5146 cv59.3228 16.9834 li59.3228 17.1045 59.2261 17.1885 59.0938 17.1885 cv57.8315 17.1885 li57.8315 22.6709 li57.8315 22.792 57.7231 22.9121 57.603 22.9121 cv57.0142 22.9121 li56.8818 22.9121 56.7734 22.792 56.7734 22.6709 cv56.7734 17.1885 li55.6069 17.0566 li55.4751 17.0439 55.3789 16.96 55.3789 16.8398 cv55.3789 16.5146 li55.3789 16.3945 55.4751 16.2988 55.6069 16.2988 cv56.7734 16.2988 li56.7734 15.4326 li56.7734 14.1465 57.3989 13.7617 58.4565 13.7617 cv58.7817 13.7617 58.9736 13.7979 59.1304 13.834 cv59.2622 13.8701 59.3584 13.918 59.3584 14.0264 cv59.3584 14.4229 li59.3584 14.5557 59.2744 14.6035 59.1421 14.6035 cvcp51.563 22.9365 mo51.3223 22.9717 51.0098 22.9961 50.7813 22.9961 cv49.6753 22.9961 49.146 22.707 49.146 21.3848 cv49.146 17.1885 li47.9795 17.0566 li47.8472 17.0439 47.751 16.9717 47.751 16.8398 cv47.751 16.5146 li47.751 16.3828 47.8472 16.2988 47.9795 16.2988 cv49.146 16.2988 li49.146 15.1201 li49.146 15 49.23 14.9033 49.3623 14.8799 cv49.9878 14.7842 li49.9995 14.7842 50.0117 14.7842 50.0239 14.7842 cv50.1196 14.7842 50.2041 14.8682 50.2041 14.9883 cv50.2041 16.2988 li51.5024 16.2988 li51.6353 16.2988 51.7432 16.4072 51.7432 16.54 cv51.7432 16.9482 li51.7432 17.0801 51.6353 17.1885 51.5024 17.1885 cv50.2041 17.1885 li50.2041 21.3848 li50.2041 22.0459 50.3726 22.1426 50.8535 22.1426 cv51.5269 22.1426 li51.6953 22.1426 51.7793 22.1904 51.7793 22.3105 cv51.7793 22.7314 li51.7793 22.8398 51.7192 22.9121 51.563 22.9365 cvcp46.4048 22.9121 mo45.8037 22.9121 li45.6714 22.9121 45.5747 22.8037 45.5747 22.6709 cv45.5747 22.4424 li44.9136 22.8154 44.3726 22.9961 43.6636 22.9961 cv42.2202 22.9961 41.5713 22.0947 41.5713 20.4951 cv41.5713 16.54 li41.5713 16.4072 41.6792 16.2988 41.8115 16.2988 cv42.3892 16.2988 li42.521 16.2988 42.6289 16.4072 42.6289 16.54 cv42.6289 20.4951 li42.6289 21.71 43.0381 22.082 43.9517 22.082 cv44.457 22.082 45.022 21.8896 45.5747 21.6133 cv45.5747 16.54 li45.5747 16.4189 45.6831 16.2988 45.8154 16.2988 cv46.4048 16.2988 li46.5249 16.2988 46.6333 16.4072 46.6333 16.54 cv46.6333 22.6709 li46.6333 22.8037 46.5366 22.9121 46.4048 22.9121 cvcp40.1514 22.9365 mo39.9111 22.9717 39.5981 22.9961 39.3696 22.9961 cv38.2637 22.9961 37.7344 22.707 37.7344 21.3848 cv37.7344 17.1885 li36.5684 17.0566 li36.436 17.0439 36.3394 16.9717 36.3394 16.8398 cv36.3394 16.5146 li36.3394 16.3828 36.436 16.2988 36.5684 16.2988 cv37.7344 16.2988 li37.7344 15.1201 li37.7344 15 37.8184 14.9033 37.9507 14.8799 cv38.5762 14.7842 li38.5879 14.7842 38.6001 14.7842 38.6123 14.7842 cv38.7085 14.7842 38.7925 14.8682 38.7925 14.9883 cv38.7925 16.2988 li40.0913 16.2988 li40.2231 16.2988 40.3315 16.4072 40.3315 16.54 cv40.3315 16.9482 li40.3315 17.0801 40.2231 17.1885 40.0913 17.1885 cv38.7925 17.1885 li38.7925 21.3848 li38.7925 22.0459 38.9609 22.1426 39.4419 22.1426 cv40.1152 22.1426 li40.2837 22.1426 40.3677 22.1904 40.3677 22.3105 cv40.3677 22.7314 li40.3677 22.8398 40.3076 22.9121 40.1514 22.9365 cvcp34.8364 22.9121 mo34.2593 22.9121 li34.1274 22.9121 34.019 22.8037 34.019 22.6709 cv34.019 16.54 li34.019 16.4072 34.1274 16.2988 34.2593 16.2988 cv34.8364 16.2988 li34.9692 16.2988 35.0771 16.4072 35.0771 16.54 cv35.0771 22.6709 li35.0771 22.8037 34.9692 22.9121 34.8364 22.9121 cvcp34.8608 15.2412 mo34.2476 15.2412 li34.1157 15.2412 34.0073 15.1318 34.0073 15 cv34.0073 14.0381 li34.0073 13.9053 34.1157 13.7979 34.2476 13.7979 cv34.8608 13.7979 li34.9932 13.7979 35.1016 13.9053 35.1016 14.0381 cv35.1016 15 li35.1016 15.1318 34.9932 15.2412 34.8608 15.2412 cvcp32.4668 22.9365 mo32.2266 22.9717 31.9141 22.9961 31.6855 22.9961 cv30.5791 22.9961 30.0503 22.707 30.0503 21.3848 cv30.0503 17.1885 li28.8843 17.0566 li28.7515 17.0439 28.6553 16.9717 28.6553 16.8398 cv28.6553 16.5146 li28.6553 16.3828 28.7515 16.2988 28.8843 16.2988 cv30.0503 16.2988 li30.0503 15.1201 li30.0503 15 30.1343 14.9033 30.2671 14.8799 cv30.8916 14.7842 li30.9038 14.7842 30.916 14.7842 30.9277 14.7842 cv31.0244 14.7842 31.1084 14.8682 31.1084 14.9883 cv31.1084 16.2988 li32.4072 16.2988 li32.5396 16.2988 32.6475 16.4072 32.6475 16.54 cv32.6475 16.9482 li32.6475 17.0801 32.5396 17.1885 32.4072 17.1885 cv31.1084 17.1885 li31.1084 21.3848 li31.1084 22.0459 31.2764 22.1426 31.7573 22.1426 cv32.4312 22.1426 li32.5991 22.1426 32.6831 22.1904 32.6831 22.3105 cv32.6831 22.7314 li32.6831 22.8398 32.6235 22.9121 32.4668 22.9365 cvcp25.6641 22.9961 mo25.2188 22.9961 24.353 22.96 23.7642 22.8154 cv23.6079 22.7803 23.5117 22.707 23.5117 22.5752 cv23.5117 22.1543 li23.5117 22.0459 23.6079 21.9736 23.728 21.9736 cv23.752 21.9736 23.7642 21.9736 23.7764 21.9736 cv24.353 22.0459 25.231 22.1064 25.6641 22.1064 cv26.4458 22.1064 26.854 21.9014 26.854 21.2529 cv26.854 20.8916 26.6377 20.6631 25.9526 20.2549 cv24.7383 19.5332 li24.0044 19.0889 23.5117 18.5713 23.5117 17.8135 cv23.5117 16.5635 24.4497 16.2139 25.688 16.2139 cv26.3613 16.2139 26.9985 16.2744 27.564 16.3711 cv27.7202 16.3945 27.792 16.4795 27.792 16.6113 cv27.792 17.0088 li27.792 17.1523 27.708 17.2119 27.5879 17.2119 cv27.5757 17.2119 27.564 17.2119 27.5518 17.2119 cv27.1309 17.1768 26.3613 17.1162 25.688 17.1162 cv25.0146 17.1162 24.5693 17.2002 24.5693 17.8135 cv24.5693 18.1748 24.8462 18.4033 25.3994 18.7275 cv26.5894 19.4365 li27.5879 20.0264 27.9126 20.543 27.9126 21.2529 cv27.9126 22.4795 27.0107 22.9961 25.6641 22.9961 cvcp21.8525 22.9121 mo21.2754 22.9121 li21.1431 22.9121 21.0347 22.8037 21.0347 22.6709 cv21.0347 18.7158 li21.0347 17.501 20.626 17.1279 19.7124 17.1279 cv19.207 17.1279 18.6421 17.3213 18.0889 17.5967 cv18.0889 22.6709 li18.0889 22.792 17.981 22.9121 17.8486 22.9121 cv17.2593 22.9121 li17.1392 22.9121 17.0308 22.8037 17.0308 22.6709 cv17.0308 16.54 li17.0308 16.4072 17.127 16.2988 17.2593 16.2988 cv17.8608 16.2988 li17.9927 16.2988 18.0889 16.4072 18.0889 16.54 cv18.0889 16.7676 li18.7505 16.3945 19.2915 16.2139 20.001 16.2139 cv21.4434 16.2139 22.0928 17.1162 22.0928 18.7158 cv22.0928 22.6709 li22.0928 22.8037 21.9849 22.9121 21.8525 22.9121 cvcp14.939 22.9121 mo14.2773 22.9121 li14.1572 22.9121 14.061 22.8037 14.061 22.6709 cv14.061 14.2061 li14.061 14.0869 14.145 13.9775 14.2773 13.9775 cv14.939 13.9775 li15.0591 13.9775 15.1553 14.0742 15.1553 14.2061 cv15.1553 22.6709 li15.1553 22.792 15.0708 22.9121 14.939 22.9121 cvcp173.093 22.9121 mo172.516 22.9121 li172.384 22.9121 172.276 22.8037 172.276 22.6709 cv172.276 16.5381 li172.276 16.4063 172.384 16.2979 172.516 16.2979 cv173.093 16.2979 li173.226 16.2979 173.333 16.4063 173.333 16.5381 cv173.333 22.6709 li173.333 22.8037 173.226 22.9121 173.093 22.9121 cvcp173.118 15.2393 mo172.504 15.2393 li172.373 15.2393 172.263 15.1318 172.263 14.999 cv172.263 14.0371 li172.263 13.9053 172.373 13.7959 172.504 13.7959 cv173.118 13.7959 li173.25 13.7959 173.358 13.9053 173.358 14.0371 cv173.358 14.999 li173.358 15.1318 173.25 15.2393 173.118 15.2393 cvcp169.606 18.4268 mo169.606 17.7051 169.282 17.1396 167.983 17.1396 cv166.636 17.1396 166.359 17.7529 166.359 18.4268 cv166.359 18.5225 li166.359 19.0518 166.599 19.749 167.983 19.749 cv169.282 19.749 169.606 19.2441 169.606 18.5225 cv169.606 18.4268 licp169.703 23.3564 mo169.703 22.8877 169.318 22.6953 168.236 22.4189 cv166.876 22.0703 li166.528 22.3711 166.287 22.6709 166.287 23.2969 cv166.287 23.4053 li166.287 24.0781 166.684 24.499 168.019 24.499 cv169.39 24.499 169.703 24.1143 169.703 23.4531 cv169.703 23.3564 licp170.676 17.1045 mo170.244 17.1875 li170.46 17.416 170.652 17.7773 170.652 18.4268 cv170.652 18.5225 li170.652 19.8457 169.835 20.5791 167.983 20.5791 cv167.345 20.5791 166.937 20.4834 166.587 20.3389 cv166.383 20.4346 166.287 20.5674 166.287 20.7471 cv166.287 20.9521 166.383 21.0596 166.66 21.1318 cv168.452 21.5889 li169.63 21.8896 170.761 22.2266 170.761 23.3564 cv170.761 23.4531 li170.761 24.6074 169.992 25.3174 168.019 25.3174 cv166.119 25.3174 165.253 24.584 165.253 23.4053 cv165.253 23.2969 li165.253 22.623 165.614 22.0703 166.011 21.7695 cv165.926 21.7334 li165.542 21.5654 165.374 21.168 165.374 20.7959 cv165.374 20.7832 li165.374 20.459 165.53 20.1104 165.867 19.918 cv165.494 19.5693 165.314 19.1357 165.314 18.5225 cv165.314 18.4268 li165.314 17.3564 165.915 16.2979 167.983 16.2979 cv170.617 16.2979 li170.761 16.2979 170.893 16.418 170.893 16.5625 cv170.893 16.875 li170.893 17.0322 170.808 17.0791 170.676 17.1045 cvcp162.945 19.1475 mo162.945 17.9209 162.451 17.1396 161.321 17.1396 cv160.203 17.1396 159.709 17.9092 159.709 19.1475 cv159.709 20.0615 li159.709 21.2881 160.191 22.0703 161.321 22.0703 cv162.439 22.0703 162.945 21.2998 162.945 20.0615 cv162.945 19.1475 licp161.321 22.9961 mo159.553 22.9961 158.652 21.8291 158.652 20.0615 cv158.652 19.1475 li158.652 17.3799 159.553 16.2139 161.321 16.2139 cv163.088 16.2139 164.002 17.3799 164.002 19.1475 cv164.002 20.0615 li164.002 21.8291 163.088 22.9961 161.321 22.9961 cvcp156.923 22.9121 mo156.298 22.9121 li156.178 22.9121 156.082 22.8037 156.082 22.6709 cv156.082 14.0977 li156.082 13.9775 156.167 13.8682 156.298 13.8682 cv156.923 13.8682 li157.044 13.8682 157.14 13.9648 157.14 14.0977 cv157.14 22.6709 li157.14 22.792 157.056 22.9121 156.923 22.9121 cvcp153.513 19.1475 mo153.513 17.9209 153.02 17.1396 151.89 17.1396 cv150.771 17.1396 150.279 17.9092 150.279 19.1475 cv150.279 20.0615 li150.279 21.2881 150.759 22.0703 151.89 22.0703 cv153.008 22.0703 153.513 21.2998 153.513 20.0615 cv153.513 19.1475 licp151.89 22.9961 mo150.122 22.9961 149.22 21.8291 149.22 20.0615 cv149.22 19.1475 li149.22 17.3799 150.122 16.2139 151.89 16.2139 cv153.658 16.2139 154.572 17.3799 154.572 19.1475 cv154.572 20.0615 li154.572 21.8291 153.658 22.9961 151.89 22.9961 cvcp147.56 22.9121 mo146.984 22.9121 li146.851 22.9121 146.743 22.8037 146.743 22.6709 cv146.743 18.7148 li146.743 17.501 146.333 17.1279 145.42 17.1279 cv144.916 17.1279 144.35 17.3203 143.796 17.5967 cv143.796 22.6709 li143.796 22.792 143.689 22.9121 143.556 22.9121 cv142.967 22.9121 li142.847 22.9121 142.738 22.8037 142.738 22.6709 cv142.738 16.5381 li142.738 16.4063 142.834 16.2979 142.967 16.2979 cv143.568 16.2979 li143.701 16.2979 143.796 16.4063 143.796 16.5381 cv143.796 16.7666 li144.458 16.3936 145 16.2139 145.708 16.2139 cv147.152 16.2139 147.801 17.1162 147.801 18.7148 cv147.801 22.6709 li147.801 22.8037 147.693 22.9121 147.56 22.9121 cvcp141.453 22.9121 mo140.587 22.9121 li140.455 22.9121 140.407 22.876 140.31 22.7549 cv137.917 19.7979 li137.917 22.6709 li137.917 22.8037 137.81 22.9121 137.677 22.9121 cv137.1 22.9121 li136.967 22.9121 136.859 22.8037 136.859 22.6709 cv136.859 14.1094 li136.859 13.9775 136.967 13.8682 137.1 13.8682 cv137.677 13.8682 li137.81 13.8682 137.917 13.9775 137.917 14.1094 cv137.917 19.1123 li140.323 16.4063 li140.394 16.3223 140.443 16.2979 140.563 16.2979 cv141.405 16.2979 li141.525 16.2979 141.585 16.3584 141.585 16.4307 cv141.585 16.4775 141.561 16.5264 141.525 16.5625 cv138.879 19.4248 li141.549 22.6475 li141.574 22.6709 141.585 22.7197 141.585 22.7549 cv141.585 22.8398 141.537 22.9121 141.453 22.9121 cvcp134.346 19.0273 mo134.346 17.6689 133.83 17.1396 132.771 17.1396 cv131.737 17.1396 131.16 17.7295 131.16 19.0273 cv131.16 19.1357 li134.346 19.1357 li134.346 19.0273 licp135.188 19.9414 mo131.16 19.9414 li131.16 20.1104 li131.16 21.541 131.724 22.0703 132.832 22.0703 cv133.529 22.0703 134.418 22.0225 134.972 21.9385 cv134.996 21.9385 135.007 21.9385 135.032 21.9385 cv135.127 21.9385 135.224 21.9854 135.224 22.1064 cv135.224 22.5146 li135.224 22.6709 135.175 22.7549 134.984 22.792 cv134.298 22.9238 133.636 22.9961 132.832 22.9961 cv131.448 22.9961 130.101 22.3467 130.101 20.1104 cv130.101 19.0273 li130.101 17.3076 131.051 16.2139 132.771 16.2139 cv134.527 16.2139 135.417 17.3203 135.417 19.0273 cv135.417 19.6768 li135.417 19.833 135.332 19.9414 135.188 19.9414 cvcp130.185 14.915 mo127.84 14.915 li127.84 22.6709 li127.84 22.792 127.756 22.9121 127.625 22.9121 cv126.962 22.9121 li126.842 22.9121 126.746 22.8037 126.746 22.6709 cv126.746 14.915 li124.402 14.915 li124.269 14.915 124.161 14.8545 124.161 14.7227 cv124.161 14.1934 li124.161 14.0732 124.269 13.9775 124.402 13.9775 cv130.185 13.9775 li130.318 13.9775 130.414 14.0615 130.414 14.1934 cv130.414 14.7227 li130.414 14.8428 130.318 14.915 130.185 14.915 cvcp121.069 22.9121 mo120.203 22.9121 li120.071 22.9121 120.023 22.876 119.926 22.7549 cv117.533 19.7979 li117.533 22.6709 li117.533 22.8037 117.425 22.9121 117.292 22.9121 cv116.715 22.9121 li116.583 22.9121 116.475 22.8037 116.475 22.6709 cv116.475 14.1094 li116.475 13.9775 116.583 13.8682 116.715 13.8682 cv117.292 13.8682 li117.425 13.8682 117.533 13.9775 117.533 14.1094 cv117.533 19.1123 li119.938 16.4063 li120.011 16.3223 120.058 16.2979 120.179 16.2979 cv121.021 16.2979 li121.141 16.2979 121.201 16.3584 121.201 16.4307 cv121.201 16.4775 121.177 16.5264 121.141 16.5625 cv118.496 19.4248 li121.165 22.6475 li121.189 22.6709 121.201 22.7197 121.201 22.7549 cv121.201 22.8398 121.153 22.9121 121.069 22.9121 cvcp112.808 22.9961 mo112.363 22.9961 111.497 22.96 110.908 22.8154 cv110.751 22.7803 110.655 22.708 110.655 22.5752 cv110.655 22.1543 li110.655 22.0459 110.751 21.9736 110.872 21.9736 cv110.896 21.9736 110.908 21.9736 110.919 21.9736 cv111.497 22.0459 112.375 22.1064 112.808 22.1064 cv113.589 22.1064 113.998 21.9014 113.998 21.2529 cv113.998 20.8916 113.781 20.6631 113.096 20.2549 cv111.881 19.5322 li111.148 19.0879 110.655 18.5703 110.655 17.8135 cv110.655 16.5625 111.593 16.2139 112.832 16.2139 cv113.505 16.2139 114.142 16.2744 114.708 16.3701 cv114.864 16.3936 114.936 16.4775 114.936 16.6104 cv114.936 17.0068 li114.936 17.1514 114.851 17.2119 114.732 17.2119 cv114.719 17.2119 114.708 17.2119 114.695 17.2119 cv114.275 17.1758 113.505 17.1162 112.832 17.1162 cv112.158 17.1162 111.712 17.2002 111.712 17.8135 cv111.712 18.1738 111.99 18.4023 112.542 18.7275 cv113.734 19.4365 li114.732 20.0264 115.056 20.543 115.056 21.2529 cv115.056 22.4795 114.154 22.9961 112.808 22.9961 cvcp108.851 22.9121 mo108.274 22.9121 li108.142 22.9121 108.033 22.8037 108.033 22.6709 cv108.033 16.5381 li108.033 16.4063 108.142 16.2979 108.274 16.2979 cv108.851 16.2979 li108.984 16.2979 109.091 16.4063 109.091 16.5381 cv109.091 22.6709 li109.091 22.8037 108.984 22.9121 108.851 22.9121 cvcp108.875 15.2393 mo108.261 15.2393 li108.129 15.2393 108.021 15.1318 108.021 14.999 cv108.021 14.0371 li108.021 13.9053 108.129 13.7959 108.261 13.7959 cv108.875 13.7959 li109.007 13.7959 109.116 13.9053 109.116 14.0371 cv109.116 14.999 li109.116 15.1318 109.007 15.2393 108.875 15.2393 cvcp105.968 22.9121 mo105.391 22.9121 li105.259 22.9121 105.151 22.8037 105.151 22.6709 cv105.151 18.7148 li105.151 17.501 104.742 17.1279 103.828 17.1279 cv103.323 17.1279 102.757 17.3203 102.205 17.5967 cv102.205 22.6709 li102.205 22.792 102.096 22.9121 101.964 22.9121 cv101.375 22.9121 li101.254 22.9121 101.146 22.8037 101.146 22.6709 cv101.146 16.5381 li101.146 16.4063 101.242 16.2979 101.375 16.2979 cv101.976 16.2979 li102.109 16.2979 102.205 16.4063 102.205 16.5381 cv102.205 16.7666 li102.866 16.3936 103.407 16.2139 104.117 16.2139 cv105.56 16.2139 106.208 17.1162 106.208 18.7148 cv106.208 22.6709 li106.208 22.8037 106.101 22.9121 105.968 22.9121 cvcp98.396 19.7129 mo97.5054 19.7129 li96.0503 19.7129 95.6655 20.0381 95.6655 20.8916 cv95.6655 21.0361 li95.6655 21.9014 96.0747 22.1299 96.7729 22.1299 cv97.3257 22.1299 97.8179 21.9619 98.396 21.6494 cv98.396 19.7129 licp99.2134 22.9121 mo98.6597 22.9121 li98.5278 22.9121 98.4194 22.8037 98.4194 22.6709 cv98.4194 22.4072 li97.8423 22.7432 97.2417 22.9961 96.5679 22.9961 cv95.5454 22.9961 94.6079 22.5518 94.6079 21.0479 cv94.6079 20.9033 li94.6079 19.6045 95.3647 18.9561 97.5054 18.9561 cv98.396 18.9561 li98.396 18.4746 li98.396 17.4639 98.0464 17.1162 97.1089 17.1162 cv96.3276 17.1162 95.7495 17.1631 95.269 17.2119 cv95.2456 17.2119 95.2329 17.2119 95.2085 17.2119 cv95.1011 17.2119 94.9917 17.1758 94.9917 17.0195 cv94.9917 16.5986 li94.9917 16.4658 95.0767 16.3936 95.2456 16.3701 cv95.7378 16.2861 96.2915 16.2139 97.1089 16.2139 cv98.7808 16.2139 99.4546 17.0557 99.4546 18.4746 cv99.4546 22.6709 li99.4546 22.8037 99.3452 22.9121 99.2134 22.9121 cvcp93.6479 22.9121 mo92.7827 22.9121 li92.6499 22.9121 92.6011 22.876 92.5054 22.7549 cv90.1128 19.7979 li90.1128 22.6709 li90.1128 22.8037 90.0044 22.9121 89.8726 22.9121 cv89.2944 22.9121 li89.1626 22.9121 89.0542 22.8037 89.0542 22.6709 cv89.0542 14.1094 li89.0542 13.9775 89.1626 13.8682 89.2944 13.8682 cv89.8726 13.8682 li90.0044 13.8682 90.1128 13.9775 90.1128 14.1094 cv90.1128 19.1123 li92.5171 16.4063 li92.5894 16.3223 92.6382 16.2979 92.7583 16.2979 cv93.6001 16.2979 li93.7202 16.2979 93.7808 16.3584 93.7808 16.4307 cv93.7808 16.4775 93.7563 16.5264 93.7202 16.5625 cv91.0747 19.4248 li93.7437 22.6475 li93.7681 22.6709 93.7808 22.7197 93.7808 22.7549 cv93.7808 22.8398 93.7319 22.9121 93.6479 22.9121 cvcp86.5405 19.0273 mo86.5405 17.6689 86.0239 17.1396 84.9658 17.1396 cv83.9316 17.1396 83.3545 17.7295 83.3545 19.0273 cv83.3545 19.1357 li86.5405 19.1357 li86.5405 19.0273 licp87.3823 19.9414 mo83.3545 19.9414 li83.3545 20.1104 li83.3545 21.541 83.9194 22.0703 85.0259 22.0703 cv85.7236 22.0703 86.6128 22.0225 87.1665 21.9385 cv87.1909 21.9385 87.2026 21.9385 87.2261 21.9385 cv87.3228 21.9385 87.4194 21.9854 87.4194 22.1064 cv87.4194 22.5146 li87.4194 22.6709 87.3706 22.7549 87.1792 22.792 cv86.4937 22.9238 85.8315 22.9961 85.0259 22.9961 cv83.6431 22.9961 82.2964 22.3467 82.2964 20.1104 cv82.2964 19.0273 li82.2964 17.3076 83.2461 16.2139 84.9658 16.2139 cv86.7222 16.2139 87.6108 17.3203 87.6108 19.0273 cv87.6108 19.6768 li87.6108 19.833 87.5269 19.9414 87.3823 19.9414 cvcp80.5288 22.9121 mo79.9395 22.9121 li79.8071 22.9121 79.6987 22.8037 79.6987 22.6709 cv79.6987 15.54 li79.6987 15.5166 79.6987 15.5039 79.6865 15.5039 cv79.6748 15.5039 79.6748 15.5039 79.6626 15.5283 cv77.9429 19.0879 li77.8228 19.3281 77.7026 19.4365 77.4019 19.4365 cv76.8486 19.4365 li76.5479 19.4365 76.4277 19.3281 76.3076 19.0879 cv74.5879 15.5283 li74.5762 15.5039 74.5762 15.5039 74.564 15.5039 cv74.5518 15.5039 74.5518 15.5166 74.5518 15.54 cv74.5518 22.6709 li74.5518 22.8037 74.4438 22.9121 74.3115 22.9121 cv73.7222 22.9121 li73.5898 22.9121 73.4814 22.8037 73.4814 22.6709 cv73.4814 14.3252 li73.4814 14.1338 73.6382 13.9775 73.8306 13.9775 cv74.6118 13.9775 li74.8286 13.9775 74.9248 14.0244 74.9966 14.1816 cv76.981 18.3057 li77.0288 18.415 77.0654 18.4385 77.1255 18.4385 cv77.1855 18.4385 77.2212 18.415 77.2695 18.3057 cv79.2539 14.1816 li79.3262 14.0244 79.4224 13.9775 79.6387 13.9775 cv80.4204 13.9775 li80.6128 13.9775 80.769 14.1338 80.769 14.3252 cv80.769 22.6709 li80.769 22.8037 80.6606 22.9121 80.5288 22.9121 cvcp0 0 0 0.56 cmykf%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5[[/CSA [/0 ]]] del_resAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 12.0%%AI8_CreatorVersion: 12.0.1%%For: (PeopleGroup) (PeopleGroup)%%Title: (DTU Mekanik B.eps)%%CreationDate: 27/02/08 18:53%AI9_DataStream%Gb",KCMt.P[brg;s.D"SbQ&SVYt,YPl,<^eCsC8.qgh>b]sG4N"E$`oppM8Ia.Am:^OCH7,canM8kIa&gi=QuHpk9]_o'C`io*sG%c#4\AhHo(:1r'"@T-mg18`SQ^nNMEQeQ6,Vcca)*55*/nCY*eZ3"7?j=P?K/Y$Lt*R5Wbb]p%3/L[3L8rV(NF(TWT=(UmJTG9?iI%q<%UQ#X"aWT@MKBm4X\!ebR21eQ9)lg,I3uX4?e7meZj1ihnZL<:a`$E-_-MgP>):=*K.c1pmLkIY3XYrF9[/cP-4Mi4n,R>Wo`*%I373K^&@8>r;%XciSNMUf;nfG3/#oh't^sMk5YAJ`P]angM:UJ!r;Z0J,F0Ve)eXI]CYpCgRJ6?7r%mUeb+]uoD97H^sr$Fa++"O%Q\aJ<DcN1Y8Y[WHDW1oeq>6,3eNY]g^AoT5/oU/r5JF&SI"-E-GaR=C^V9WL3&5('"o+S$q:ig;lL++"QhN=kfj=h]rT<h@l7/MU%eR)XR_`2FZ<;oSqIQ5+>BltM1p%IYO`q\`L<W4IWqX".3eQmX?G99jE5MZ5Wp@qYWEC=ZGibp^IHD9-%SV6c6H$kI<36cA?pdR]s%66jj1[-ciUHlo9I]=Z7Y/oUaU[8U":RV)+_2qH%&f0Rg.rT3J<D)$$J>1YB#I/+(T3,J`1ES=Uk5^e],\A)D,n5pkl/\]>Deb/R(%fCY4JhF@XZ3PUM4<']%-`5`A5,8o:,SDTsZ$#a')q4F^;:$04I"&7>97r.nU[dZ?]pq9c8<,;89C\UqGpf;2,G.E:[<3'l0<((.&%^S+W]6E.D!/u?f(TM,Vf-H%")*<MH4!D:0Up^O&8$RiDb5g@7L^0*"[b]4$I/sgD_[?jP]I^u78e77bsonVBpha1'5?H5JD^S)@#%$%>5j(mBoC^4R$6D^Y]4K&88"_$&;B0u7f'$Ut96Td@Ph[1":3h_8sC+.t;7GUHp`h@HGj>jr]T/=-@#q15+NNX:Vs-2:1lC#mcj%l9"Zuh@;]83Kb$I"/TCQn/GQ*)5L-YG;Nh!5EpciaUAh`W%O#>I`#MH3gtQn9g&^er.\*'557jY85qp#V>%kHKa+4569d5<e3Cf2%PTmaH?>/ELHg!K_Mr%)YbC!.nq11:T3h]4a*Rpr`e$h"pp^O'U^0uDB'<2GTTaZm_qFW/?edc,KhE]RB1b?!Xe-8&`8g.B"FWkfu%Gc0C1f'0l$2s@frLl@>i%]/7Re2l-Xn*,UR:+MO,RHC#Y6S0kZLZg\#G,eJh-*&o,/AY8^IA1VQqb2K944B:moK:<KjZF(#,JbYT%cIe5m8q5s9e1T9NWl?.UT=CWTT;J<#o)J=aRi2.bs66HXb$'DXs67QaqE+^Q5MjlHhTNMos3,*I:&^c6k&^A\s%bl0=!o?uaoBi9%kpcS%s/2JMr=D2K\V&crYOo=%7K:Eu2.g95d-WU4Q7'(E0&=Xta,Pd:S^_YCRJFiil']!i5aKU5`UB*H1U]T:Kl7ocT22HIbV-Z[%b7gZ1r:i1g.DkeP/pq#S"n1AQpj]BMZpEO\H_CGRKXWS-2`'e(^+m?Kk2C60_Z)DfJ'%0!dhmU'iX!5V&DdlpLNc'j)U6J><an3^%fU3m(gkfmHO76cV"QK\7oSpj_hZN$)1Vun\L-'t[@`]:38pH0)ZbQ^'OEqMDQ10=;aLI8t=UjafX=5,2i2VA-c$4-!PglW"'*^Sn%!,!il,%O@Ui*j1g#nPenp`J@P1BDo<A@tkTrYE/gXNGI36OVFG#'`L;VZ`u32?2S'Dl*UR@A5WZ[7"2Lq7q2>?($\tp`3cLH4G@2%8dLj9)eTp?;`"itAL"QuM-=MZrg3$e`^AdarW)B26Eif+S::XC!F?AiM$ae!!GDFcko;pWU5-+qUbr!L;DF4&Ucoq?=#KUY=6tm\%>GbE;lOuK7dO.\+"<>;b?nS[tjct<^F<3ZkiW!p-bGq>pq1"i!BHO1,WB6B,>(W1$(8)F_-Mg]gG:Hbplbd,e,58E!Wj5$1Z,".Q%pkHRt^0qErXjF"sc=gI90mO$&",LnC.\D('jmi@U>/iJlh>i4J%\IeMq/'7"[/;QLHqEdmGKI@j(B#J64-feeiA,:r8"B0Ic?X<:%4"g@=n#"t(\)ZWtd9-C&-r&i!Fp#Tn*cLIpk3nja'+MdiZ"0S?U;Uq"jh%?XqFBSk/J>F\HfBP'#0i0e>j0t@GN\c<g64Nfmq7U+%N9(qO*^N$#oP(2.g^BiC)Rj[b4?=@0I\4hdnc#BOhs_)68"ff\?HskEN)5Il)_b"U@eR:V3)Q^"JDc8S)lV#%`q.p/4B:ml,AtY)%nD1#(];68-3HL(b$K0C[N77eQ(22Lh,:geX1.f>!pTn+uq>2_bA?Nf<[PBp4-.;D_QAh:q1F:9H0.CNbpJkr[iW<E$]9^YA6\hl)%%Kl`$T#qV@q&:b+4,M-4d/HPBi9%sVTeGoE=0ukZ3k]eHQ43Vs\@i)6e46c`I"-?eFo)i#QTjFgY?1H/+39+fJ%tgQ2O;(i!>A)u%/Ula;I"1f#^\Z.0mDF^ohRpJ&r\/\Gqr;G^rV?Ehao#mroCh2d-Ocb7-WD<WcS#7.,1uPco"uOkD=<6AYa>;Fq<l<'>[?.*apc@`%?9_]OYI6C^q?!`bGE_jY_oMM8+)Z##;ZF=8V/A%*Thp2&hXNa0\G>QI0YRH40$o*sm-]>kh@`J"IRF$RT3GZm?X6t:FEd`CrT2#F%$O4=@Dkc]DGhMZQr,.ecj.GoB#dXC$qT%?kbE(8C)@OX\kBHZe(K[Zh^OEh&?#OZKAG,Bam^bY&6;MP!\[oBN:inHYc>VQ7rr)c_%_dcEY1qgN6GoKfjY31b`gZoC.Kp]N%J,Wl1h7\<Q`0.;oOR^lsc2$/uiMfCV5EUC>5O5U#Ju(s(S&cF>f(\I[,<W5.PPIrCrEo!<%hd/cqqrc'Cil>Ed95dk`'*A3=)?uroIK$\OO6XJ]orOb:Mtf]*^KrBDZ8>0(UTA4jj-3V2c.#uMe;64dbGK/VdknWj;,:pmM2H%K%BP,N%=YqMNC"4bWXd*e2ej`m"C8\`THD]kOTqgbGQ_l[`1e&EoXD*YMh?5VjF0dPJk0tr!D&$g.``h+telcpDS_:PZfFrUHQYdbT%f!N"GX_lhDTsumokO##?+#"sAqtPh(ZuU+B4;f7NdIIi_O>9KLBGtVanRuXLT#W?+Nap'PbFiG!12n*l%j$I4iV3QYJcii@i.3UK%6YbYS[L\:.Y+3+E@#I.O$Hh?bDB@M`L;rgF1cUoT34p`$:+!Fk(nODV:,<@D$i`??T_anNg8XTAW79n/2tOX@ZA@o[&b"]nfJjb.%!Ya]O:/o`tj2B2]p]+hYI=YbE-f?Pf<%&NU\gO$m5RqW^<9O!F>jFA7b!n*C;U7q1UNo7PLo>7P1mg6G9q7Y5'&dPpX@8Yg=e%c"%kH^)RC?"S<ELuJUkGN=f(KD`5=X48,TXBnM9I,oNP"cs2kVU`9,#T-bL>.mBEdQSNC,<;UNCpP*YVaUa=/l-Y,?)qq#h;K1ZnTof%qX6=Hhqb.qnZ^s-o&^+j=XLHA]t$E*#"i\+6.SlmZD]?=/O$J3@7AA.``6='>iW[r90;aH]XWeU'6>5U>I_-%lE30q3cSos>MY"h%j]S!WG8PM2R:?aZD)HhY_2D\jE)U3niMYt6LfiQ/`)6h9KIO`;M62H7.e,kk=[lR"D8lM*B8^PaZ!mji%VJ0TIP++D9c0;k0I$;U%dS7a&Apb^j4pN1-SNROnrbBnWThg!XB83`#*3G4<26^J>1WibdE:ao#6=6QBkmR<er3BuXa!qHV/`D;b/kW8t4GF3C%dPJ8)_uX*%\(fs719.WEs&%<FdjX\OUn2>OR_$HDK9dX&X[@c?M0G/VVUfI[p:C+cc*#UZ+6/h%XJ%o>ip+JnEF(as;-5^+<p>GIdg0^ZMfu+S%mtk_e<28QXaTnbA:UH]Ce#N>'YnaKch0@Jc0VK;C5"$;g;HUJDUhlB%+'SbL:Ot(!RDRZCCtdCiqU]42gJ4"A*h-p2=N!fXIXr$$%MF?E)@p9B+Pg+'+.j*N;T-VBC1kK/$U8KnC<7E;H@Bn3LP_nLBH+H+@/sc+jC`/Ofl'C_b/kqRVS&eOne)fiYl,i2LFFH84%B'3T%S[PFSMRkih&/?#,o&TH(jCE6c5FJ'q'47<?PP2qdQmc2tOZCsMjl1B%Z</[?MqK:*r5(&>KjC&o?8n!teaqo#FFGuPbieTN4O!cZ%c.fdg1:<]4EL3c-flD6s4..[4o@[pqAq&lSmEA&1<(DD7if[T%dr5p8@30#("<Ul^K+00qM+qNH[9rc/J)V8n%ZU_]/+7lOD3Wn>%_W#khF76ujh96&cSTCp>;#o10FfNLlQL/C5dOq9&15f=oO4m5G[29Q;AJ;UG?.idgEDE7.1QO"]LoQNBD:F1rbBE;nl)r_chMmZc%3eAoh\8$i?of./d\6U?j=E/Ih/h)NC@T;u$qDS;c$_`%LE;/=+2>LGZS6qQ8mtNLTMU4rpXa(`6]]Y/_QM%>\AZ;IGS"Amn,$5Ob%q\#8b8[C(!SL!_UlcMQrfL`ItK:+T^ED[!N=a<L0)74#g6"H@KLIm,gDc$F=IqW-L^FBF6''3c*rmeUJ^PhA!(Y.as`H%IEei`Y*%*T:h`A%"KX5?7ML:WhGa\F.gEr&d1ET,Bh66lM`c"AottLZegC!X\sbJ4;f"`L&GH-D3.o&Yk"X^hUf'I$XP6&>g@BZ6DYoP7q)'%$fNl2$'F&g,1DGiRCn`G&MBi[$7hpO5QZo*C>f?$2#ILKO3Ah!>ssEn$GQKf#D,@t7/DsT&VgFYM>J(.J^#B3N\!CMkI>S4@2W,o%LosJ5ggF3fZ-1Jt+1_5!Eqak?nL'INT?`a"5ZX$G2fTKbJ<dVj\@=E7p0t:PgaqH.;oO/p)+?Y!K:BB?(dM@H^Pgp#f?WB9Z\U\=%gq+=p,W!@G@]$pM@&H<WPk]6ST.Yjn!CJ9[/!-[BY$a7+(^c(m3FW9`F5"Nm7Jm./Hk/;3e-o<q\?Uu3_TXQ>Ask>?G\Igt&loWC%&1&'#6u\;D!o>5"*Lb'O9I.%^r)Ib6T#DH\&F";BN!r\)/O$Ij\CoVm2&?K3W]305Ls_D7'eDXb!M(]4$PlPGoDi0UdR:1O>\8C,%5CVu+]k>oAk/FYL?$fF^POb4ZcS@^*SrnMkimAJkT<q+UUia`-VT5ORV^J9Q-;T?nGKsH<Ojpb%Uo^,Eb!o1d>Idu6-h?DWNILG#%IbOERINhdPZdauDP8+N!Z"G#^mBPF2EIL"E4N_R=FLI1o2U`a4eGq=A,0Y>@-2pE.T@eJTJp*?(>rTl4OhSb+Nrf4+([;2=F]0<T%qPNX:fKqIKTand='eE1IU)o)i<Xgng.>VsJ9h47`=aV$RY:%emEj?150/tF/8*+96Eq5UgYt]3U:T1>'"+Id(BPbEu@X[#e?XRLl%DQ6FN.DZI6qW6)Ml%nM5po/Ri7K;Vdos$Ee($D-#<]kA]<:Gefhg$2)pf>D-:mgYI+L\j(Z>gG<=s<K4rgRGee@;7cjX#aHfi5R)%e@oL#F=GV7=J(22iq)'.&\8oP$gUPlHst^%N?Zj*mSm<HbNG\u<';sN9pch1WRaM=6H#lbE`TX>G98X1fRYD*Z`9,+en$Tq.%g<$%=cK&R/%G8Dq1`OeiJALG<=!muK0nJlZ[D,=[`Mg''G!CH:Xs:Yd>pHO_.0Bf@2S3s#3LQX%GS,u'Gc;#0G9U^Jnui#;aF=8Z9"IT%2,McaU8CpnO(BWgG*LWR.[hDX@AB8lOU`mf)QIMJU.2.d?ra=.@nT8!:t[>Lg1GTj,\_.M6;&f18IA^'CIsKf71N<X<9EHQ[5lUs%5bfQpY/N@jO.%*QG,3qGkU[,*Gc9`S8;9jeog%8iqHek*+"2OY7LnI8@M\0V$e52OnEA%.[6Wd\W!f>\%5gJ)=s<*`W,>*@NX?sK%%IbP':YUG:'!cZ@/LC@Ws(2@?I+4\ZLdA*,=gSCN=b]JU0PYaS=r#f"KNqMc>A+74[83^RPe`$>MC^@#kL]),fue>ulj2:_P0F8d%M5BLi=B(&4?*Yf=4^kTbQ'r.6@T8.?=`m:+PcY>H^-EG<gS%*2`Hb%5R1_"q`C,MtF=:*jclc8\csVn9.j@6U^J34eOnKjFW-?ad%q^0H]eYNNCl62.5McKB=V])=RO0a8?"nYY,I@HZhn5S/Mp`5s9FK.k'rD._$eUSdN_p]4l52QFjH)dG&iEMls)u4BtRRu\#Oks1A%glW;OEQ,p2+XpLGhU/fWoPGXtX%1e0_3U,h9HRsDkh&(FerR!4UU5PnD'/k4(GUOf6O;C38kV]h$Rr2$fcF$n7&n*P;OU%[@3icS%OXqa12Nk0effm7gP,^4!Lm]M-9#O[Q`Y("mTYUbS%(;OZbp6C%+g#35+k)8b:WRoM"r&hdO:d2j-tGlrBX^tYoWgl;$MhA!f:LMO%B2o'-X;rlr?%Z13ZGSYkeg"3IS2rKB<?(:.Rk.c2[]REX"hMT#HHZ0YXhKLiCZ?nH>c""W'V)XAlH7\JCsPs_iZcS07']E9Ha-MA%a^s)7mb"8+]J"ZpF-mDSe[r<fT>0<j*t=A?edj9U>S5^)=ccUfWX(4Z5?Z?7`ju`d?$2)@ZE!DRPPnlQ?p>38Dg(cuZQ$QPPXV0$%c?^TCE6#!3XK.epEY`Xo%62-r(O530,mCDmK9qVfdM7dG>+KI7V*gb120K"E<4/O'Fc6Q*Z6+1j#NP1V4iOOL`.lXji(?'tWQ,a^%K[Q=IPN=cnPY4qrhf_0"qRV,hjq16R[3Z=[1%JW\fc$l>"ALP(`pQCQZRSiHBqk$-d,Zl"8(pt8[Zajq))-un[[>%n5c[<+lfNuO%7+g/md5+(iS&MCZZA#_]1.2Ng`jUtP`O+GY8n>7r-LP]?==<Qh^oK=2(Fmaq?I4%>K66+9le6UfiMf\q_J%UO`ts@E[@%(NFM57q%/"jqmBj(f<V+bV@_5o((2s=rhKt6"*erg_gXBVSJ1L##Mf9<Y2l:CJ7Yjo/b*75^l%RsGcTJa6pj,0uA\\N?T_K)/[1\Fpo6@*jS%7IPL)Br7G)V:pa4C$SGK%b(AKoG2GR/#B43</DWN5\gU-"Cmc!/bpE^X6ejFr;4a`q=X%?jJUF'56*f,5EF+9U\"*@r&d#)O3Z(H%oCM2D4?>]fcHi9WoB?*73^8\Nc_L+'kkmP(5EF+9U\"'g)glt`ir1l]FFG:%T1A)-dJ8'0ING&P8*B((aSDh-T_gNsbG33.)D=rM%5#!6l!l\[_PX/7YabAnU2FG[@'Ld+]8:7Qc]cfT#h)jRXLZ7EbV0n'ZmE94m,U8aD02k4J.7FOo3KKUg!`)^gZoR<LPjE;K(Nd'\%F!L^XaO2V.@=+O#XeWLFdbZnHDZcoBX%,"V9fh'u(<7mE.WO!h(:W71p'*\*G0ac%KcWbKke<QN9A$1,rG_W&g%=RY&#Tr19s;^W%l&q2_P@7%A6BLc&I_,GUfSt_cX+F_T$aS$q.o0kEba->ub1&.OAW'W(6n>B[_`D>-(goi[nSHHcU"H2$"(5fD,=Z?PPaujG2q9q7%5.WkIGFof*;HCL[?_u7lrA3r(Q2422BSLf-l0u\MG<s5TWHA]=l%_s%L#m;6$=LsD5EmWE\b3!4hY\P[rK*e'bp-Tgh!bDK@Kq8G%)q2`)]hC."F2dXTSh-a4(D?uKWlu?u:Ire_4nJ:sdW8;KVt*g"s&"s0H9Hi40'UP;A1k("AF_M&5cP:=cB65l3aPS23ND0$/7"cK%gF1mI-V;WtP4RKEWM*/!W05?[FHStePYf&H:u-4iSRbQm%p+C_TZ/7/.agSI=eMd4)Q6@D^MW6XSc#K*aBQD;rS%W$O[-;tGPu\/%fK]Yk7W8#^+`&A,,_g&i)LCoiS&o)h+K?JO'K#>oftj[@?*&C1GK\dN_)f,b,Bnf>XP2t%g?9Y"N\h^KEioY;%0W42j=Z?d[41le%@fY5%&6df'`eC,r#GV_4UfH5FDc?5-iOi6Tnk.s_Q:RmHjtp"jR,c[Q`3HEP7q4#sVIX1l,obT5762djE'%@$Vs6\s_NIMO#Z!MW%#P3u(AL.4[V7Wp!?;bp5$0C4i_6eC>]t3ZGH=!94*>n+/HZX2BaGKI`=TD>o^'Fg"LMiRPO9Cn=&lFrDft#bs,u.Gu%[Y&/6H+f>%kNNbD'6K:,jBlb=?5j@2R\;ab.n'Qg:=Jbc)@j(A;sIFVcM'p-q='E)r4=EqGfdho^7La;B&h+Ve,GrVN]?m[o0tr;7_Kf5erM[$%X5/)h&XoCDYsd(9a4a,*2uj`T!-m9og'o-oVsqOO!CLS>=1-"JR]WF.?HO&4RYCG^\HME$fQq</_GOAe0#XNFJ5f.]+sLSA$#bR?%pVLH^]nf9"des\eqr_a5d`jK1DO>f5N(N[/;Ej-&mYRVk_?Ip^SFDmjGuSVGn#=;U\U)h&Xi<3eCKg9%U1?`($fJAqPG#o+BM<"/%VMj8aUkj#tV6t?1>%AW8D"Yo_kl^P_1]:h;7'Q[aPP"<Al16ed4fjt827<@?CM0DbZb-nbbC2Inor$Z8'WMU$X/t3JjN9liIEAj3%Np)@d?.lJ5*@>L)/+7W)%AgkkF(gLJS[.Wh;KI#!@d*SL7[3j6=pr6GK0o<[&-qNA7(MB3:;4&P;Wr9XUqBBMXK,fWgmnCh?,7E0%H6]Jo[OAkBWpaF(O=SV,>`78+aiR48=H';@a`p`Ndl"2rRb]r+NiQJ[>;dR]!El.j,T[;paD=?n9/>1`_3u@dZ%&aBj[;&252AO]%/E0^&DP7q+cr?WTTc#c8<1e'%)(*h4PGgQ;<BL+g4&6K.n^*0U!(%#:KSSpX-l,i#&95R,C'tGTR7Up47]\Ud;h>B+DJ`<sTdO8p%."(Dmpk#k+Z35[7q1JtcnFhO)*Y`fIfOM"R7U\e_]Um,c=?(5S^>umpN1DpK"[;=redEnnJb6s2;X?"Q97jdn7:@_;TI9k9,:3bM%_U+WVlAh(99sGSi.@Z>k<`n%iaRb?"SrA#r61F-[B=\"@V&Nn5)7G$sTD.B<8j6q;HYi5ZS];J+:J[X]i_V(Lk36%<F-<-DCj@G1%%s>2'T`q1U)'QS'#a\MuY.F=o_T!?kZM-5d!UFhpNTG#miHAJ_@8brid^d,gg3A0?53jTt>mn3XU^6;OhU(6"d8HP`lWmmr=PCBr%F7aB(@>fK_$X`7m.soe25.&F5H'bE2gkWGI7kWhq'jU.?GTU5%WZ&-Y]0BNNCULTUf,!]19'rh2Zq@CE10#:<K^1.1_s4>Onk=tJ%=IZTO9kS%'lZ-iB<^fhr\L,q2'O"k)"03#>T%u*[7;!o)C\J*WUPSe+jMW?HV%pL/`pS]96NT0'f2\!;ZZIe)F]JQ8XCe/p7;<I6%6(B91RRCj!;*H*mK+s;GKI;St5;mb&n.6Po_kS1r)gq3<c]8MV)a(b;<At'OM`ngdK=qgja)M:I6`lUJJ%V4RmHm<pWJg\ULdfsm%(0VoPf]%Oe9cGEJS:%mXHLNPi>q:AqQ(f<V;q0X=LFkeCrV2XJU/a6/.`:d)6]m[=Y2cQP`EB>i,2+#C=foYDp>[Y"!L<Ukas)r<%nQ;dLW2RbR@oI&>5DZ9\Q1B`D.SWeoLK->Ph.\:"?UhMJnQfP6N++B$>N3'/WTurpKFT%0LM4c)B?"S`"(#m1d'22t_8)^h;i\aG%N;&Y0e`EM"d/")$')A3.As;qCPOX@o=r/Qho9F(^Wjl'2]N;4^ZWc7$4e+eK:Kpm>moS7g_qO68HJQB,"1:sQTa!a3cnT4Y*,E=E%C'pq0fL=lS&D,MkP#NB;-,VXd^>3>Eelh[iSR!a<f94RiVNdCmCf=J9K*K]>#[3T]q_jaVB.7XK'cUB.ij*l";),_Fks\:@?/qm%%ZZHVOMRNZC1WGZ6d_;]FbVF"%WKP4WgJ"r)-C[`AL==RM6cPR:!Hb_mcZ,.(a0?BPOH#EqZ!OmW,p-EP6VFZ;YkC!O'=O;UX3M'!%e<;T33*AE06YNnr0tMN!A2W:.Gg&:L+#Qj6Pp$)(9t-])hKf*fJ[-aVPi[>Vo<kp_lTt?\mjJ/LAVCaf56tY4(r58^!(qjq%g".H%!9P5[Pd?C4;KMb!48gCo*WG-f#A68GqU:/RHY=[N0b+-EM/9U`^&3"[/19,Rq8fuk)=-E0qZ<b8W^fj"HpW(,ebO:]m)G.H]CGA[%2/&<.E,&n+JIQ/GeK^tKo&5P&&bFZ5Z,)tMgj::.`Zj4]HV')l:SX#H3=1K6&0TMF6L;/qUf1K-N1R/>f#E@`9r1aGK!sC%%WnPR%?/'1kUMG7CEHElNLk\`==.BT?60nIlq@R0.rF<"\k9"d5#16J`*-8"U@s^UmpB4QCI]FQLcaM=CMskr(Zf8o(5-(F0Nq^]C(\s.b%<Lcn-q:PQ^fbkG[UsD&70^BdsJUpgR`sfOHj+@r7b7_C=PBi]8LN$?qlOQc<)5m;PGPU-f)4'N:HY1M[UF'Om_9=(uJd]#2VAh-c%+jMBSP"_TZ'QnQQ22LtSBU24H93Z:JaaNe&PcD5!A_;`!=#:b393TO+EJn$VELQmo+P#'/5oN0",E8JuDR9#lD&O*!$f51^XOAqe%D=>a2!RY=J)`jQhl7(P!3?mgf;miOf>[@*RBjTTV$+iL;Pu!p9HodmF.Si3MRIrVQmP+!B1WLP?g1gU<c'f,Wf<CJ.;ftnn03"J0%5p_e`@)c3'Xb<l-n\Z#[VkoSY3E'PaS8QFaf,18&)<p!fJ4TTCN3o'.1@&?oX*5jR1.F1^"#9@,p_Yuo=`)kAoLWus8-6!S\tiML%NijRuQUtP\0.$RZUcZ_+(@;o``_9^U"^bQ">Zl;Frt;'MTgRtfrH:+ZYPOXe_**ffV,h]JD;&sC\L[f.2[N@0FG0sL[q_FUO3aNN%NRO8HTPic%G`n?B<*Q1HVLS/XVck?Y6ZtOs*7sMIgXCJK9Nu*u(g-lDf5_Q?HK"&iSOqpAJSlATgZ@#,<hQNnHseZ9oWU4bRs+`m%A,:K[B%s7F";9r<3u5)!M-o0C-&p"2!CJnZF5,`tJ!N,MGYZk4,;&I(fmI+RrPZ4E)XD%UI:l%p++.]gl_\po9AumI4bi[:PA4r-%1M[VJH+?W"7<6i.[@BOp*CtW)B@%Gg(f`_>43kq-Ln!JtD:7p0OMu'+l]Hq^9uc36mCbYCg@Nd;InE]:-GRk2cVMLicUGE_kd9C7%PT-q)hObd\hE*8dX[T4U.=o+o7Cn=UqH":!al]UI)j0A2]9jtdd!F!7*5c*QCT`ha.%_7!Y+kL"kim]s4G]9:(O5m09tj&tMkSTp%[[G/$C;Y=c9hCQ?78:LO*Bs/P:BXRm!?"($dm#tL4$Hj`M31"GT2eMCSIX%J@h3p!kM!A&<$'@9[H<CG#5o&O4:N=&1$hZ^eYD)G%"/u]a_s;=a_eL=0DIXU&a$]47Hr=fP@+Yqmg5Rn9N&NhW$nC0&,M_S@g[RJ#mdp3b5+gb"Ws4B"UYBT`_QTpHg'ss_OKV4QA/Q"X%>@Ud988h>S9m)9?E;s>7%X%7]Sl2R&GqW&>m31fc\Dj,.lO@G?MpUKI]#T/>O8%iZn'O;TUO0XDpNVbenK-NH4hA[\FN<'cNq_c*%W;R,ea*VnmSSF2Zk^EP14Pli[]LV^@O7)NZh;^Z00<W-nHM;TlhA:S5UVYtR]#T/>O8%l3/IfaIFH?1[*q.K>hP9sgn'SOqpB4U2%-6T-LhVe4^r+tnZ<2CP0-\r3.2BKIs0f%'i+OeY5QCfp$6-:Uk@UW"ATS`450-\P/r+@Iu2r?sO]p2$Unl?MrU#_f/=bm_;$UJnr%PqV*?+prIHTgBa!H3WXiTWPRtpN,\>]L]&+9?;HX?5pN21[M^59/sueml%fDf$Zue,6M,\PVa)n_W4X4b&+M:G&h&KS3ir;37S;W%ag_*<-teNY39DqoN_8PJ7>Teo4+1HUM]:3X4&-:Jm/$=@\$Cg2g?^+,4>>TdWC/_r,?MBul(gZhRn9@nQ0tYF&1Kb6LQO8><,50<%Qk2/1OL@,ML."iQm]:R)d3Sg5Cop@""T_RkVJi(*htZ9d%L:9#F1#i4F<@su4Q8RC[W@Ke7Lp>kX*$qN,I&5L`Gfq%U"g\pfS_E<%**uaLYHdLeAK+2P74AQ9dSWUm3UV@pEhh#>89.Dp9a^+17jR/9M=N"]ETKD\.N1DM&>;0X73c8.1=]DEUn;e_B5#m8&::Dd;U=SS%WM`:41rul#7qJ:bS*9Fg2='fa<fL,Pkg$S<Q[1\ZO'CXKVq%Hqe%K%#r<ge>/f:V>]^i!@O-be`a[$"Q:pj.%)L!Y+Rc%+]Q$iEi%gq).e+eEFCmMS_\_k^3?a?BK+$k'VD90GWdF1!@jF>ppsK#H0e'7IG;<"0c[a%JoA,bZA9BK1"Uj2k<ujO,39W[I`r#Gdu@Y0T:?%A?nId1)h!_+!HG_E[Za;g*d"5Z&oWe;oPc#?RLFNrq<I2CVa[QI#fmuiUo>8p`qTX&b2aP,jC7!E(1-jNsd\34kiP;WJ6F#4E;'D%>u'XdN2j3(qUFE#q[le7WI?&MbuDG<a)/X,X,VsR$Rr%iWPjTa."1%?.dM-'%Wt638mnVS4%MuCr9$XD@8Ki/6W]`=9210of?K'I%TtDr0I"+bNZe`fILVgKdK?*t4d.VC!e`r5<@>@d@S(Yq3"JQ@k8Rq[qlb;RY]bIm5Mh)hnVHGWi%c*"'U@;emCHInO]u;8^B%.!s%S*=CQ170u"2%&^lj=MCOR7d>$e4_B[3&c2S6=76O`1GU?$*\5FXe"nH?3D%p/ct?G"kH=W>8:cfA`';)N"R8&c[283R86#s=>P_N%fScTF:M]$q.QXuYYshIf$0dk#T)&4]V%5XBJrQj>k`BlCXgfej8S/?g[HV;c:i2Tf;AS+Ifr'NHXK'Q3hG$q^Fe\Ii<u\%4,Y`?O%jSfi45/Z*Bh5W9ArFqOR>SPLUk;hoo<Vk(QjLRnkc_eCt,lssc=0j&U%?j5GUm@^e,I8YZGJoZ95gg7]X5oe"bl%7'2kq),3E&MK%U.H!XDXue\Ur=9j4fm*"YW:H^rit]:m\ro0^JWsj;WdG<qn&I&4?rF-*mP@(V%8XDm''dZhABJhLbWoD;l%sP.+]'IX+SMq+$\Vp%6XnX66-nk0d2m_9!T9iFY+qS1#>,kASalr'pd7)aU%gMWSH9tqN0*)%AGq8T'?DD;b$c`A3gClOL*T0]9jnYI"!g`/'F2PW',33!%EB$e4$dYWATJCbD_C$TgLr+dpYW(?mrQ/cXX&$D<HdbRclB?/(L>d,kB,TRZ%Id=Gp@b;K-]Oi_b=lUZgfIW'YKW]3FF\Q`<Ei(_%[WVe=NqD<Se;@%qEc.\ndbPWC;<=0`6,!5^YeId$=6RGnnTD"=c:?I=cT7O6LdN0r9ps6D`=g+!E$lKo9TT+qp^)?44[!h8%,[[B%QSKic*bW""W+L?Dr?i"FUt@,OXj_o"7.RJur<.RGU8VZT\a\=LHml;Td(Upe"LP(jMj-ssF#\XZq(@<6bHUG2%I(q&n+Bo/LB>8<%+lLm93<*qOIgQ6)]'Lb&&p^E+'Q;E\7qVbrXP?%jUF5mBF8sV&nkQAM_OiFR?f)FrB>r`9QB/4!lriX'q7=FN.*P[1`PJR9#IA,Z%>o;@-NCnN,el*.YL/dgC($b&AZ9r8q"n\3XdPZnD64M_Y;eK'6q"f07\''J@+gUBi[h,oH`*RjaA\.ZNnGtGM;-6iR.';p+g:128%7^l$mca$:?G/uQRTr$(TVeD<2L,V8h57.6f8)DRtIZj70n\0>habG_:WsuP*YMDQ4]Q6H;MT:lZ4SDa,i;'98eR2F9JVSt)@@aju%R*MIR:\Q'&NcV_qk%EnSq<7gJFIkqaREJOfJ$[E6H4NWhiniD*ppp@1G4dl[Z%r+#oghuinq=I=g?MUCai$MtWla+2XK/b_&.,sY%4gNa>^hbP?KQ"8Q',ZleSh-@*j<CV:`cAP7O)^`sGk:=ic1cFK2trXt5J;AC0Vn8tlIuj=NM^X.5JOs?h;(Io[<THtpc7mjL.!ZE%LHs3:bkAtQaG3Z5F/^*;E=d:u]/ZMigjBfS5QCKns866oj*sPV0,$/;B(@&D\":6$pcn`ns6I(<?%BH<a]X;ihphmNjg4XR!-Ej3%q[P)LIYto5jHoYRYuFQ!r+<(^.PH^SG.j^$QD/B^iaeT/K-_1*4o#umn[FYXg],:m6;LmS[VZ<>HJm0Frd"Fn\g^^cPgKHA!3/T2%D,Ak>B;VmN5bcW()^3:lW=>OQ6',e<WWuYTkme!UJ/8!fU"9A8a5O"NDAkB4[Dk[LHJrd2Y6N#^<4<GO2KV5;Y.H[YEZb?ti9#X^%eReX+'qu,oY2N&'5@r(1OPlV\T;b]%gTCP"%]J)OjL>h>fV39V)Q`Or&k<M,YJV'nV?0>3L^aG1g=@JgO^]'A@Uf]pmDKj;QONEr%n#dl#aQR`0`_B<X3Kk8t$"&<"09o;@br"_C%ZV2Z2YbeDrfgZ+R(;n!&+gITa8mUpQk1`H%E`K2hB<dZ+r;(hBYiN)E@c*V8n7*_%qt9HI5`g&X%RJ@L&Ri^sUC18i_h_?tY1;k1A(J`&\*OGu->IdH,TbibBc8BrH?n=r]../&=$qi9"@S[c^?DIab&E3l_J:>g>6hUm%.8+o@_KHj_7X+>3fRpZP[?_DC?)M+aBg6<I36%XIjs.Knq%$3/pDk)n*ikb&nX+KJi(CW,j@]/-9*2\<V`k74>nVEGDHsUMMjj]g%WGr*\EmHm%*F';`cNl&3GJka:V_2@oGCF'gQ1HuN/eSu+"ufK2p(ho>P&jP56YJF]h39(K_\$L4YdVZX3/Q!g@lpHO=%JZsP63f5%mi?_*I6X%,9Lf2,+='pLM]eueg^o&@L0Y.`6Yc2GmM[Y;OR=<WBi:s5K\[\k.+X.dfVhOedOnF@@dQ<!"Kq9L5"?>"U!J">LhDOb%L6h,ORMfRt6d0Y.j5XhB8g-Qk8>KYWGMGl-jJ:GuRT;00qM*a^U/hu>B]7LSM+:%9]]m3M1MpCTZ0DaM/HqV%2V!eU&+r5tnr?J[%Uq^Cb\t=ais1/>NU;/s/STK2MoWHn64PV2r!N[LX%8)*<MES'4WZh0E#N4?&fV%`Ap8Zsr?1-J%k\?V)/>t(#8@`KdfW-(qD3K(u%<CopudHS6r,e0PX49QUb\k:>]Ee>tU2RmH3$OifKh+Rm(CsaEm&jmtWkedT.P<RiVNsH9-/mq&9jL1&Shd2'FMS8#\)Vuu*>?VOq%[*S@\C0t?sKnt^MC_*s$D"Ijl9F?IRG?sn9PIa_7qYSi7OmnpGc8l_YM!\Lb0G((rQr10<+dgbB)e`%(oCqO7N#ANPDqRhS8_+GK%hotO15/*A,P*K)D5?@Gf(B=?nQg,_X*=KolI06SjYB4:YOkq;Z12ZsMiGsnC#keUG*JY8TecSDnB[n68Ch*W-20+?*q[O%n+E.Cc%DWTTeQB#M-^]f9Xr4N#$,!Q,f.__kY8cZorAh[cY)<s0.gcPE8bTr<7n;B1-a/qjN*D7R._7%J$7U?ro9^RRB'nbMC]&:%8+6<oW%Rql9oKM,V%[;jtgeG_9*d5!N1X,GJ5jfRVt^ucisL$0fef5W;gTP5FUlu\I>#\ZMh+J=dRFMSD'@sAtFaK5:pdn&)@\d*SdTWU.l%Z5XZ<^@#1??sR6Ga$q8WFl!HZNg,*/Nafa>>WluBK(I!j>V[PP8W19kF18NJimE4N_+6;>0lT2lis6&W$CW0p9F\b^:O+^;6lAfG%(MsaC)Eff[YbCeGfXI<c+N'c?-oB#!gdFM8DPKVO=FO<sI0AQ$_nb!GNLJ50[pKcX2-.k')-S&$"$oS\^nr`g!?K-C/S1KI*pBSA%BnAMJNMrU=[1!DX[1fc&NKeS>8WT+CVfX.:Bl\WDnI\[#%9PMt\e_jfQ5aMQ;C6=6D1`a'YYPNAXATJ.]l]oJ<e*<VfW&Y15rOj.%e?V8cT]Hbu!br=KX_EWE;'6-QK'#YJ,D']6#uQ_#\?,D+PRR[MWof!SQ\ji#-GBN1>i\N.;$Sp_PGDd7[BdGKX';9Ae#)eP6R)uo%[)+-%ZAeiaRi2RL!8CZmGf4FaKdF,9Y.+ar7:fSeJN?\/i]TOldQlr:(5RKc)U,>C-B,F5M,lRS+:*c1,dlCre4-Ao5qp30%?3i.%<8L'^$MBC[E!sYd5qQD[`MdY<>pe!Si#Ae6!45\jN,UE%BW(qNB=*tJ_$IkuRoj%@NOBE>Xc\4@3[32[_16YtkTICdpEn\77I3uk%Pj4$[!AB7O7%D4_.(H.2[B'@tQD_0rOgp@O%\m_]`#V<RA.sShI+Tm;poDl'0\s04bZ#thCA]C_$fFit#B>F8a[8A^OX;W#9VZFX%k_r4UdsE<e^]\)a;;Hrl^Nd%&j;AjAVj:m6T`>2rZSjQ?+C\l+;0_iDf%gN=C]Uh$U)&``"j_HEHXC=?4>Ho7KbQHM.@SlkNe)^E%X\E.mk!8V"JoS)ZI7r=LNGR8DhMSWDLda?)`W0`R^hIOGb0p?N4V*Ae)A5bJ34+eB(:P5oes6Q\HlLgW/M'->$>O%jXcG+C9i3eM%?)0g;b&.Kd"rdP]mA0j9UTe6*F(qCY`hbi#HKW_r"f+CGb(X<P8#F/9^c/LZ$HBnB!l-dVL/qSjfXrMWQc'WkVA69;+.t\Y=Xn0(%$MYX-29t.B&K7;KBttXYo3g%E`[h1AOn*diNkP+AgW3Z`fEN9X0;hW:mEMGD2W/$S29KJ-15d.YBK<9,=";drqS9eXk+W(S[)cIK%E.Ei'%kJEFBRQ1A3G'TD2G/eC)TRH>N==LOK#.fWiZ?:1osbij!Z,"&.>2<+Cg`)XJsBEmD@?F[6+@DrRqS:W,nL0&G8&>W,VKJm%!jFV8)QhAh"lQ?=3t\60DDtHgP2m#\,*p_F[gFO._$r5ipb/CdA#k_hk#Oe6Pm/A,PO[CP2^*UHWF^60nXi),&I&H([U@ph2Ml0^%_Zc]5ZFB\a8ujFY<bSe("u<AkOW66Y7#Oq;:;EZR76[DC"3q9#BR3[q?Kt<3$R()"/u>#fb5uV'R8%),*0!U4fifZ`#.PA6P]Dm^%B8idD?Y8:e`TW@n_660M#6CUp^j'afbEE8FZiW^_:-d,5$2"l2M@eRO\sQGC4/E,(.T8e6l1H1ehr#]U"r^L'CFcKm-(c%gG:Sih%2mhj9KWr<',DccSYS78>pN_$M<a"ZSULf9$Of$O':!CC2:),(S!M'oi:DsWAS&gOVS8W2n1,(\UY:0-%\6WQH,msp/bpLAg6<eN?%>2nbeU=+WZYr-O(+:P@]:30Q>$h$O4AtY8tkZ!aK?W.VrOdE,[Q6DYs1Y]:1QF_(VijrNOXfZPE<-:PKB^0;4S21T'/s1Zs.2'Hh%pa1a'&?n_ZCRL#e8XU;m?)[jl@qh9pD.*9&D5pG_U/kKe$RV1nEs!1+:0pC(&9j>J`#7)KC6/i\NRX#bc`=+,P(iGS00gc`Po'@n%8HjWAl>MoPP#B%D82+M/f0&D@M*[o\$,F,K]prQM5ZFHkEc'6b#Vh3'=M?-P2?XX#W<!c9,1&g8=:h61pPN@`Kqt'OSm42t21V@@%nqC%oI]7?mgf@NXPd+%R%WM]3m+p6T2@dOV#l\#NdWpZ$B%\`;@Lsu91*5)&AWf;qnN`(,1.b]n`eRde)2#>sb=)Cr&Aj*ZNUrHe%D3>SiD!oe*dV08)m%o9a#Sh)TFM0?WG6CM?9b;D&2[@/K&m,cH&l=g%:Dsj'!.nlnh.Er)KN]cK]@NseEl)tH%hHIs7r=`ON?lRN%bQ]'Q6jNs8iaXBT&702sa''(*&=i)BnK3Xt!0!Y9bX(M]VO08TP@W-onZWJ?H'63]&.L'\c:43m$mTH`,GEdc61EurBe_Sud*.e0%DBaY\_DTF2!ToVS#9.9JeFm?.F1RI$H051,4YKtO/HJm"e!;`4M@l@Z,&[3-os[u#!%b0UdR_JB]1u(Cg'fg#U!'<2@,7qn@,%PR%C!2)jJCCB5/1k'+.M5\mK+.C/?ss]q*="R<F8uOM5R0d71g73;6u>J?=\"mi>FitdTZl?>'m86+]`DH\/C;ti=94#=R#D%3"^Oi%%kZN7"a]!::'$ECB(YoGeDI?NjohVXm?o=.YM&N1)Z\=Mm"&[[W::@@'<hc[->GMTYla9kG`!3/M^o*A;hND&V!7AY``OKBm[NQn8%q)f2?36:QM/?194fX(gc<0gMO#`Q('/L3^c2G*&2KBV8@Y0s\:ZV-e[qbTAZ;$98_4lB$'T\62T5R\;)Vij=rJtl@"?mg\a#Y'FY%JVgd)=Bmk\*.'D%'\1#D8$,7"TidIT%tHRkA77DB?qA]s7L`/rFY)hkq]Nc)!JEnh(24\o0=Gk:PjBhA=/Mfqb;<m>85lJVP!,XR%b6?650f@c&RVC4"!1[W`-<VQ;(i9hPne*obOpglm"f5=E;d."NkqV;s?4C')`QPJt@_PTF4(-o_AF&I[;Zj-=>6&K'ip9";B5?0C%P21E!aSh.,$_'OtPeaF*S2NX^)&O3d^N`N8EOD\VECD-71b6^$PJljr*e<#/mo>bQiK'1Pr-RT?q@l_DhKD#=gDl1YKlH?Le+#DX%p,BR=fdTV`,cXEcZ??U^lW:4miQjp3Qbd<?0FA4(\&Ye:%H-$_bq@jBCdJ03M(M433btsH!4E%%&G,u7LndfOJ:XGP]D[U54iugh%ehd_I1eMuqKSs"?fE,D!Hp&*DX90E<j3kalmT1+K;1-Ai30;nqW/4;J=fnsjW&DS*Xf/$mkdMe@Kbt$rgI=b;D(LaMDA\,eE!TB"%D6u!_.-oGhT;XgQ,K58j&:p8^()82&NY:+acOE,U%<iR??_OG%h$XLuK:N:TNRur='\j;aQ'0E^7`aru=:;uBG=!EeT`g%$%1J2"%4848J8nu/Q1r0s4!++jH[5?eF(rn$f+HD%MX(s-kOu<Cu'$pf@5hqL$"+Y<(!94cmJ[i]+1S?+JVjT4KgDL#Z;_s,]`ZiF=]q\f'%EqHt@]+GH=VjRYoQ[i`[-QiPZ0eaHp+.*9$2C!t;cj2I=5G0G9ga`a@R"9'a7Ari]0SXR\.I;cb$A?au'619f78WKT1!(oF+!lde%ogpGsTE2tE&GS1A!!Z&0J4ruL$m@;9[8-cl"l?VHE?/\E)h=<h1^,?WSf.%TBRX6#;A7-CH*iNI:pU;ZB^)C;Gt4V.qHDTa$'a-Q%ZlW(NQN!%!&qR0MWNiUC;S0&np"ZuuPM5[@.m_A]iog])Fp)O]"k3g:kgs!=Gp<t?U#!2K0c1?M)/06GbQ7mOAd3iAM`O,YNkfWL%Ed+YVdXXngMj?.#[O0=riUJfUEX/"g<mf?4,2!nSKG\F1j;+(*fTmnZ0dP1ED]=I&J-\hQ$c[b.1XO;VR^QnFBULUiF:a3(%)FWX%!.f*_'Yc*<g';S-Z4-Fp2/p\CA<^s6;1E;59kc;5;$3,q85$u:qhm^1%j5sZbeC@#F#(2#!BB;_4lB$;J49fO6f:roaZY/i%T3BG%RRIZN9G@Im]66p\Rt/N"'!V`HluVX"M$T'm'Qha*!&1/O/P;riJs"Q^e_m:*n4@5K!/,kh+aKiB?i[!4j.n4<G6D*5G+46]<!5\,%[:R![,R4BTeHkaKA$`OWj].&D9)q9)/.KB@=Q\FR;ee"65ut9<(=Rf.OOag2^'KZaIjk.]%=%Hlo$SYc"b;T6(Hg@?J$:ItViatd%F1]3f9HmU*J;-GB1+M?Apb#j9kg%FNI8/,/h;(Sf4)!(mQQ!XV&KX;,08h#Pdj.566lthA4(0dK1C;!oNKt&^A0V,MZI_I;7RMta%=J7S0+UU1bH7I\!Bl1b-(Fg<fcMg6AJ4igQTf.H*<HoOOAOm48?9/:)?:;Y.WEki9(+"k@g/VHi"5`KhPD&$K*bk+c"t/D-6>]*Q%4fH,/YDtjW@5<[(0PWHKS.KG`nr@,MmIB8GL<I0Z["92/r1JU1bN(u@"#UWMVb+K=XR@qLK@cL,/W\+$=W*Ska__W''&R];$)q3$%c,-8al^#`J<lgk[W!J?f[[2EMBi5&3Ol_T(d)OodC-moS&A`H?$pF%C68TGnZ!bSZ;Eo*eXeAH$)V&O(c#[BG$d-%X7`n%E#AKhH%TM)mmb=2a=-PAq9ees*m;_Eu<!/o(-;7]":!EC@CNfgp&CeJbKh5Q6BSVRL?'nR=5P#6l]j\l6u76jCSf`DQi&8Zs6aH33%(cBB"%&S*)q"V1Sl5Wg';NG>:o[1'lt@8eSp9*<#gC4LJ1bgd7QNk8Ht2DPDkI'MH/c&l66[YTPANp+nr(8J47>FO5u,MO*L8uHe6Aj=J&%i6arR5i+##=V7XlTF@m>E.:]d;?Q.OB1c\E*%4dWHHX_Z!0uN+>)E0[=\tgNJsD%@;(1F)+_$(SEUKV-g:>^`d3<^i4:3Db&uqWV%=?[&TJh_j[&Pb0A>Y/jVl2d^=is&W$K3!U;TFh30K7)Kq"#uYR"NqZ;CHu>OmU_W=4AaH0Aj-2Ai?FrjQA[fa\7h@_B[7o2j&1$V%0VNe8V[e=+CWtU4e,nEde8SRAKajXHA6@<VAfFSbJ[kLJ(qrbDp;H`b,,7?P:AU[cHZ.iO,;i;]BQ9do>9\:l2F>>Vige@Gij.D.%6eV]]J;%tsWERJuU"S%Oi7>BmJBhYaZ@Q[XT#;Ra+H]k@Nf9!V?)C&h&.GtOk?S8m,u'lM/_JR'-5dbWi&,F&!7nG<Ce\B2JW7p>%=<O82CF7/t!!R8(<tYKBh=3b+_-0;Z)1iDs@p5-9#YDrD@bu\`E2+eb@lcM)WSM8B_Pa(4m)1-Q8LpcOgqX\oLmsA4!-BQI<]2H.%K=6eJA@Vhb-Bi'o%HKC%PXGs_d>F$uM&@.dW>&5E?-D_'>@*12Uk(27aq?XL;DDR4(1r(Y2ZZcia]q^^La&nl5]^jJ0bkG(%^&3`%Q&&;iWIBq'"]#mGctVHDGYk#_4p],@0.\-ZD(UsEG`=_&".%`3J7rHQXXYnbNo_Fi7t2N[_;NU4P%b\*`)>%Y`hWgu\s!>3B/a.U%N\IftcmBl)ZfHOdlEa!A8)$X=4C$2@RIL?@4]]!PUJh%KW+;)98`+d8Ku!0:?@e\#lpN.hO9&W0&JoDS1Bum)/\G(T$VkK2=A?e7%"8bJ:aKiXXB$o_c>65BaGe+f%*@Qs]YkGr]n6@n1?u(XH.6Co^q_c5;*Lj&O1/uAic!)KE6Q0hbk%>W0PD.ps?*rNr9tXEH7V.-N%$Q3*ODK;e[j3]>H3u.HS,ZG2:bWSdZkfFM>Xb*U;nA8p"!#)7h?uM8N5`-R*H7ut^-8@pN4"pfh#ZGY1joX_A(S_#.D'0t@6k]+0%8BV:g@`s;<C(\Mf>jJc`BR'U)B^#Pe,-3+sRE7_Ke,VPul".X\c57OajGA$h!]k7QpT^hAJ3g'Fk1CGa^^5/5]X_35'?r9^a`80@%7+-^h"'MkB-],DH5DD&7FsSXl!o(X@CK;r:Segr%.7q.bZI1@(1U<Vq?&RI8N/d5[eq2^b)?B/"g<Hq$C^e[G<f&fq[<.@%N_">&%HH#jjE\Ie-pE8j)L6XR]6!B?sf8'8k?.mb33q;&=I]X?[P/nisJ;*;!A0QD_GI?/#Xc;N!;CF-uXm@qOQ9E$fjpa<rXK4S.c613H%cks5]N,`cPICW+`eR/Oa/-l6;U]Y%uW<$"S*eco_54&=nFfQ*dSLnokV:.cDF9GlP,]D?e'+6^@P5TK!WP1uo#_a]>0^Z`e2tEHF%8=rW9Bus`f6n9<#J0lu]q+LkQ4dS7bdc'OF$<o5)#T:e.Y_uck)L$#PPfb!Iff"ZW>T0`&.nCM/B^QJ"blJ"sP(7e9Sr$Z^;?41o%]L1V.,th]=M/Y?t,e_,O/2X*-b/"kubP$f=6d9psZN6Gh#4"o"NAVsH`CpjlX5JT1[uKlg_lOV_E5WNKb`RFY8_QWH#:!=fQWTns%&;+90b,l,,$I\Lm!X'Gi]HlGnLljmN*6%,H$c8X^<gJC=SE(@,4TJk7l^NK1&X[-UoIs/F$GrqLgO[S$)#,>qJA>dO[Lk_@PcR<J%NaUNB`B";O>;,<(&I:XgliS47N8RagBaZ0-(Jf(-[4\],X+cX@l"O=+!3Jsk$gn_:J]-L_[*>D]3"\Va8ED1g"LBNW:`&,5!R(ml%QC/k;9$9OhI?;W110R3>)I_k,U3TI>0IWC`9#D!GCFFcZY:Tf6+W4c&Mf&tqpZYsr$nWk0G'a6oRq2\B>Tuu]%*RZCL.N"[SsIn9%?nXs&ECQV)'/rpu<s(/@C:MG`"(3"2-1?(SD/I*]`-DarG7nB42(T43XP=^p/L*(hfhp0a!7!03hAIXM>?EJ7B%oZGDV883JXJR<%,2]h<obI:])K6CI:1KB2o\tQ4MTjHJ%-;/2V,.9PfG(I+2jgCp^_ljloL7!9AN(L7l^10F3Yk<S3cWG2"0H5?T$:&JTEAJF2/iZ/%'a[a=!A0cY=gT<&f%"m!L/?'b-+M_91p9"CC]M8e,p\S'f@Ajo5XGee"&Z(.`ZmN#J6C=G=H#M7<#A-:$3jDV!*&[M]:-soN:.n>%EL-J(a9L6SWAUh2<j(Imc4R.r6!5a:(i6Jm.@0TH#4/Z21u%F=0-LB!MU(:*D0!uX:P3i0$cN$TMC')4,aeQIS#aF=HSO@^,u]m?%Gr.`;GZa1WTb3BnJO<00N0VHiN09MY0;Wag]Vk<eEcAHn85mS=?IU7R&q$i[hkUFUKJJe1j+M7$EtFQa4jBH?G/,EcQInEdXi8BA%=fZS>"Z%D9#%N-o;t5!F5hZoZ&KVc'!^PYs,Lm_E:ZPOB@s<oWTR^A?$oF2S"2Q1'44q;9OHp.o9Gf*,UZ(5N#\LOn;LE4%gW@Ba%#7V@q<4N#lK>mH,X"3J.Y"jpDlJi1ml9M3ISV/+S\Y0k-=#Z%aG]g(nh(Dj3*Lml]+fJt!P1/D)JsT&ON#]rm.Fm/e?WTl'8;,.b%/P?(#?.nG\HNs$$Koo2dA0f;!ThGKkbOSli.0q%@N2;dfSd;a75ltTW>0CM;#]ELZ2U7dk2Jcr)'U_k53h*`dQ3:/qPpr_3#!RXH%%Ke&N.,.^o:Mb/RL%bS_`^j5=%<*Z9kpgsD*/%sd>,7<2&&@h?m$IgXP46GF/R&3c/%&!na,4@J\[hnK^_)4Q0XKAF^PlREqEp02%eqp5oRcg7n@hFN0]Qq9a2RR=(0s8&0P#DKnYQ86r2[i?q"s(ejg.c1I2Atg$**eil'5B9H3H.lnn[@4-:>Eu:'+lOB)[bb\Ob%+5%5c+%;B,N$3!`f"GTNP:rJD6lN[=rKB<dB(Zm`BaWV:._Uc^&a\TI+X`&a6o%3h*[bT]V)1AUW1Q\/I9J4#iDeX[kDscp=GKa;[O&%E@qi/SK)auBF+/]6Xi%scPErc&9r"6Oc3BjSLXhV#qO!=Iu-(P2YWlkg08Rb4,AScl7H*p"O(:tW&Bh."t`43)!uX[^DNfd[`#Ph%^^4-g?>MM-3B6;om#E'K(kEh6AecTZ^d]bX^ZFi"N[0PD+te)[B-,JX;LP1=6H+n/&TRs7g-]6r/8GF2Pf@ai4p2)kG/=e)7.jJM%EJHhD,#R-hX:ZM5<_7`X3LaH.aL2>9FG_$YL(\;FE@MG_JXh]pVDkVs%X[_;[?(U"(:+RpQeZ>ao5ZN-FNYrY6h9M/fd%o#T`E4b%&N.OZ%^/KJI6$#5?oFp77P($NO:Z++)X3Mc6HUWR!Q7e^q+WZO#&e^T$nA'"4-#<]%Et[F6)FFo#du^]0k:NWa,g:`*0S(R"UP2r%I6l&g]TGpI6Ve9E$AV1/4D:%/7Z,F\B+1rt7])K4/L-Y#A!*ORe2-eB/+Q"'3r.AeWa=Q$_7@'1jYgBr>DVKDcmDsU7836E)$s>K%MVRhH+F!R!G^U54abAX>`Lqj,bLEBLrKTWrkYX*aH$0leUEM'J53+H/A5EiWNA#@p:d[EkYK2DhCEQ':7rUBO8<g.;4fbmn!16e[%%T&!iQS_1bQb?!<HJ\)k#i6=_W_+$`!3<d,OE\i+F>U_eHQl-2A]H)gff,/D[DV+>.NBjfX]dF0ZnO2;WJnUs;1o[RIlq6B[)n,m%JVb+RV[-\Mf#c%lD*jQl<O&J30^sa:TN.3A)kTI53Q_VRjWtgFe<L=#IG4;W$#+oY_'/m'X"oWb9n34#'#p%/OB7)q!pa%PMke6X%N`gpCV+HEY^]^&.bbn,2UaN#C^nb4l$K4:/9"JF<P_rkmNlmPN18!0/OmE^dVR(!D8]cDsTm<D&/I6m([+d[r9tVqKSSSIh%:jB&%AQ;!g;e_He]KUHnMh0.rAhdtL6HB/NDCI!',.0gO"^jm`S@Y"-R,lXp["WI;IHWD,(g""r,MPsVY[YA1q'mtV&f(I4,pBDSmZe:7%]Q:@:_j_ip1iX@O"/]!Z.5Cs&hpaR3+`2WklOG?TdG#j7#F,^t%u*4R..urgn1CcmN`[$IQsbmm86"NQ:O5?Wj14(fDFhR_8.;5X%XV=Q_VjM!Q3C*OD(85F#:m)S%oJ4PN5"UhQ=(jS3$BC;t_i\$EhXFKVMFlsL%At\>2d1$A:c+'HP8qts`aIB'E"LH4%UTtf2#phu%(Kq`Qfc6Z"KgYIBHKl9(A5L]F=?7cCO9UZ-E@H'.GWZ-_7P:5M#V!J&6cc))3Uao"V1Af,5!smh_@84n4@i^7Dob1Q8VGC%0S#3h%h?F`A3b_Y''m`&POhf,;_3)eZC.bn$K=_F,nL[*aM.D1JbGd(c!p_Q*=3f"=*/=RDRUW^*.jKsU:cb?pLWlFE']gef\VS]kkA5j+%C//4W0nNOH?p9S/h7OFp1s1(P>T#lRG[a)[a:U28nA?At+cQ1CFJ7r^,)&0o`R98>?$\6V?l6*+;dX3EAmhZ;5rn-6p%_"4-hddC%LIFQa!$PO*JF%Od@,@1OAP]%efcY&U-onJeednHN6#8`I#@K&P(t6ZU3]H3MOVCn+Hp"FX"#pN3?8.5;n1L7do5nMpGmYWB9W+/g%U\&uKN4J\%G$J(-iW+JSM2F9#^!80'c3X^'Bc5RG]#@38Al@\m_icMD^bcZRSb?F;IFD$nP8U3^Z\'m$HpdmKRUU#GFgQ70P*urR%=99.Y[q%WJ@$[1]Cr)KTKK5StnbE@8cj!(W/F\1.9TDQ9WdQ3U?oe?<l6gJMNLY0&,qT2QFIiN(F0YrcGVDi)>Y4],#"q4oaFQt7%3fA$$:qC<VJ9<p)Jm!G`Y3glR:%CT$VJ5-CX_Tda-(q7fX&7Sn9J*t@GO&-@2]d;T=kCnK:V:Jg(YIhT#V6@j#NMfqFoZ-1>0`(a%,7_p?jK3uaZ$[:;,&qjjg6.<5b9G>RFXPo[*`2QLZ8tf!$(/Gs0E_m%!0\H-#7:s[V!$1L,W#X?K!dD?`k<2rNRb=*e'S=UNQO@U%Uhp7oSO<VA21k&s>8^KLI0,Tc>CClW?0QGH%5r>e9k]E]i)[g6$!mWJ4</('!0$37Z)o-'H-G?:Tqfucj<!C"%plDiG_M_bN]@,8%`(C(*8?GQq/^XcaKN@]<pLKnQ:s5"0B,j*F0IrkO$BDCpQ`rDPOMGa;8>MrTfjm/HYHfH:9&^?a$IQ@/l%,bDVBt6cn@Nq\3Hb_K%?tghi+J5o]if"#TI+pEj10_dQJqh**OEq<9#>.&8Eu7;Y85A<**i&fs>N<eGH,a533ffW@p]0q[251gN]6mB+(LAJFRUDhLXbHu&%lUH_8]L`@Y>]t+oMA1$0c[',+M]!<7?OgUs(cfXDiKHV/;p0EWZ/k-RV3j=%k_(/]'d%U@.1ZqYcEsu9+AP8H+r$5B$5$aT^uqf6%"Khpg/ZX7ZoV^;+D%^stT>N'%TmCe^4OU7\15d"D7LckL0\n$mDqhY(AEpt?3:AZF;10\7>OR`&?lK`0(l&`'Mj\5a-B$QSK-K0o%]m]rnO!F<i@TmQP(B\AB'K!n]/N8dN(a1T$'NnrN[-gX`Dr=HU+rJT0]fubHLU9''9&T2rU:?a-Aca"^!nKgg)A54Ai#mrQATsL2%'%lCCe2d]&F0]Q0$(;Qb%`HU%GiQ_o>L4^Mh=G'qS.hC/m]EQ.o_]<J=[@TuK`UCj;:d5s%be<73Al]?DmXPF$$m_L7G>98A]%;@%&9,Zhm1Y^/oNPc)9ZF%6Eo[o9m=k!oMI@l:HTJ:'l+dCpMaM==A52Jlg8g/^Q@2<EA`PO#,QnKq$AgobSeKLBI5qrOBn9r-"^og#%#[#Bsa.RBUDfZ#<Co]NL%ahK/0gSPh7)1niq0X]).r'dWan__nV&Sq"^eRVG$CR;CRi:4p0(6cm$)bCuU*0!_3i#.iPQD/llTeV<%ZFFkn@!3IH*_nHUg(tZhaSOU^."/YkiO#JGeU`;8YNXb[&DBP2m1g[tAe1PY`E=`OHql&_!6h#782`_1KHS@B#Hpu.D;d2[C&lIV%Z;&EFap&BtaAQi5,Y!jt^+Nt^6a3U)MeaStK?Ie=;J$,7b6YE7XFcguTjP/f+lPd"dLqfFJ:,#]'h9o23Ke4PigZcLX2<*6(69o"%2%LgbMF2:?>'PlD0`W>cI'X@f%J[k8e(t7R6C`iS3[l?T2Drf4qEG,LC70jAVo(t>,Q2I=lqppU*D#`EH<im(D@tYN0a?&g2b*LP%%a2"8+Z[4c*OMc9Gf<'N"^mf.;_AqsCJ-i``iX&,[8&%MQXVmg"i<2SWJ7-(\nRFk7mI.Vp.9EC%=LD2d(`FM+u#;u`e1/I<(S'o%kK=i,@.'_0\!RSZ=q5[`Ia=]CBPgbDk&W@C\nOQ#P81df"4!4n+VZ3@7Q5Fi$\<.U1Vtm3B`1ZaakS`RV>tV*S?1(&%`K3YFL'bX%*6JH#<l,/[$ISA-bW<=1>A:kU-ZS04bj)kRaO$A"FPSj"1FRmH3+Gi6FGc,e0,FZB$A%>[iM>f,T(*1g6A6W,j>DRZ7RARC.mB,N%G&N=T$0!0a\nM=]Z_NH?3Xg3%;H@9%<Jkm&n%^.?N0Q/T99Gh-is@>\U.ta&hKc@.KG:SU:ZIRA8t6=L_Gl]]"[b_sIFNU.G79'3%I#tV\-&`758tr_.#uY_3V5OqQ5`T>"J#Oj_il<TZ1-?TN+Q"_SLt>uerQ=(KMRruq+X\o#3pHO/(n+_`Xb<<WY?[A9^c%9@<GJrg%A(_Pg+:<T^k7?NKam!1+M+J1Q%Z6="Dau.J[n_Lhki.dnJoqF`7I.bBE$O/LDC)P(HiXZ@R_dZ'/>kHN%mc(;b:++WA/WOBYg@2:%odu)c\id8JNkG#pnGMKR:=Z$Ih_Er#5%@>qc@AJo0Bk"Ve(J[bB:&hk1DBcPcUdgY2Kn%[es4p*R+ZSsg/B]Q=jb(t/6A`r`Vrnt%]=D1c0#K:,Y8g!J+[:Y$93?bs?*NK:-!.1ongS7:#^"N#4&3/2<P=E2R=4#cK6T&JRU@g6pWd2\38D(d&]iNu4q.u+#m_ccmX\Y9%=6>KQ^2e?WP68N^MkZ120A(0fkBDfhU$ag0J+J"?.Y1]o_\c9-;:CiP]_kA&?<!K`Q"AE0b#[*uI8Ts!Es]@o*$#W0n3BN&#$Ln0%.@N;RFeBT8<ft%8c/rj1;iBlPPDbLJkQ/%j/q`C&%p4"N;h=q6Z[hUj7S\\oj%97Dh&7^J]BGO"R+F,3!hJ\/o-oZL2;"6mqMmrm%2oq9B<frDb2N.lCnlpp1l<1D%^_n_[0C.TCL*GIfI7u$t[r`H25s69DB^:lp&Y24BB0bPUoa0jBV4=Z=+`0\6"rm7ZT+-jBnBtul%r"2dTLITU^LM*AX;!$2l;k.NXieh/Q"nD$u;YnOiC53U?<'/4'<L,LaoFc^qJ.[APkQiOQToF:I1*4*):$OHJ)PTA?)rd"lLPSfg%FKQn[66R9m7pY&'C!&l%Ej0%S+M#a)84pK8,I#'Z,Fu1mbHb+e%(NYR%[#c10tJBuK$?,NJ8<<mFuDJFZVG7@@eHM%b`:SWG_]Jk%&r?c@YEj]GTfk`i;%K.k%5Y6+__N&q\QPCNZ?7l.%FWc1)o+FlZ7'KJ$"0[]%.*U/K8\UK<f:t"j5?Z#kA?r1;3$M8$!:\k`R-SP%*?1DV>trA10]fNr;qdm0%J^$4h*iHr65@YgQmRZr"u_Psh\$LVRq/:F9Oj)1+PCfeAb&0\A.r\PAiKqIa:8CR*%MP3[$joZ-$@tl%idfL;(u2rfB,UU#85]N14%*Klg/8mjjRqRq\Br77d?9S`#?!rfI4pEt9Tp05mH&;4`)Xr'a*AC3LrR1;[bY(ATL(+KVfT]u>_J3Z%7WQP"cIjtW0LB!di?#g!-/LCPd^r\H%LZhj3.&F`G>WLuE#;0Pf3$/)$3Ae6**P$7[]QUi+<>'1,%ld*@=b;Q96q-t))!`T5edHF%P9:HuY9@!^.)7A[$%pmX;"nS<o=:HNW\\,r-#9WY[c=?@5[UdH-7XP-j<g!T+rH+ZB.&$Q/at3q&tGrJH*TLD)((5`5-`p;gSeR>%h.6S[odr[j'h\a9bqt?tio2ZO@MN?s,Td)m;1N1=+e/V,Tj!86,\s_B&i+!MQNgV`:1A#>UXdc?@Y4du>-QnG<!$2saJL`.#8Y'S%H?B%Pg(OC?W`&02fbo=2F^aL=d2eKc!5pbde]Z]+T:^m"K=SXH*14!&rT7Ag,;8,bFV(Sa"J:U,=+FL\,^h5ZCcEoVhgn?q<3HHb%2InN6!KONPmMRH*i=&0<\nD,,Ven-c$DPOcpL%,/H\Uelj7Ttk[2c8qeci[O,-uUR&f2=8db#R($n`JJ^u['SE&mB&]r"YeRs#`N%16+U5>a!MFAr,%30OGB$3DW)a2M'%@L2kVX[GA"Rd8gY,X`8s"JL-Fe+>5YdPpEaB7OM67/ob6:,3*Uj11F\n/HV:RMKt>8.a*VV%:(EFYmH\Zi]7\@9cL&;bZl;PKrI$f8ojMZCc3[PFU',\k1SbF)s53<$00?HYVmQMPoBkqipNMr_pQmg']m<+TAAI:Ce[HXY)cb?g%YQ*uCbKHs=9_G=UEUr;X:]L4Pm+^:(/,4@0H#\=ZHZOZ1lXO:L4o*"1Y-2a&=0H)BmOj!:\6j[^j5dsTJ"#3LSbG`]]YD+*HagS;%n!hFkrd&XX^Oonf^OB;$GCQ"Yp!)jg_u'$alAq,nrVbmL,(B>K[XRgH\&(AUY9'X^jkEmXW!M`N:a1&bb5A`H*_QC]fHL1YnUe_F%rq-][\Gbq^<u:W&gP;9-Z"rsc/\TEHHABERMr&q'4hsg`-Qf@ga%tDBQZ)?MNuf+(hI@c-FnAdbh=I%[^Uj@-rVbs=8Fc^<U?h]n%-LW&EIXJY/h-@&$,)*%W7#AS>WJPb$gTff7nbhE^H+3X"%hT-.8[hdea[^Ssqtg<_raH8maJ8ZhV16"f>)d0gSN9P1_Ii/]DB>sq%]=:**k7/^eX$$3n@*+BKgYM/T_pruA,fRfCTFG1.O*#eP4=^'heINrfH+^JEi;JK[jRqoXh8SY4GNU()?XA\W(2l[gb2pl(:t`;V%jcS>I=P]P*hqj>6:TgqRCZk8#$Oc2m;=faIAoW1riV)<nrKp%F>BBj6jfS"Ne&gn2jQet\p<6Cg)]6XngY3[<ii)83lcf8:[(U[-%k>CTZqY'XRisX?17U,\KlJ?uiH_WOfUUkYKpQ"Oq;;F=6HbX?=Dnc)2lK\'>o=)3D]Drc*X6-7WIEK2Z?"fS8flM"DLUm4$BLAO`%cB%^<:KIM.4GOF6+AS8gSp[\4b!DfT99F4C]R&3S[2c=prKm,2Nup%$Drrmr6]n380;5l83TJlW@#a1O14K+Kq],M%/rO8t(]<[4%G99o\o,#(+^V^X)d"3>[<q5_=mbR]XlLi-leTg[o\'iaK8#$=`@<M*ZFagg0^%lo&IP[SRegiq:8UT,eT)S&nmEOo07[Ybjq'`F3%*//(WMqb;e]0H>dT%*.iinglNcn(GG1A]<6$P:O+%pK>+8\"]4nCaa^`h0LAq6/2UpoijWT^<4Vfl-2r/%*R-lt?iQ-5knAgWQ)`%1Y28l_]H@7c25Ht1[P:-LN_``qp(")VAnKXC`tle'D@pd%S\b5`C[?gb[C(_nFIE:6ST0LFFP%!T?"-uT:]VUN1Z4a6S8V<p3K4#%pjqXAj2E[qqgO!<H2mkiF[(=CLU;Kt/E?*oep2C`s8DcT2M9$<I.'0;?$UWMn]q'nR3qKoe_O"O^uPM&6+\bPQT,er>mHB56_?o8%ZbO4WgtlA^moHLh)Jof;hfp=Ae]TYFrLQc@W#$6f[6m((0f&$E,UtYlIJWg.r9`U`pa%?-&&SU]hcf3tbH(7)?Hkjc3(Hcl-Ym>k%3ZsYH7ag)HkEL^>mlnD!]t41,f)noF?6EH61:+Z,B#"</YC.G<OdZ0F_Y6][^"qY'f7*=q+%LZl%VD^/G-pN7f)!3OgqM8oq`Bnj%ShKte]NBI'5-Sa[c^T>jFBJF6AKU\e]Z,"@>LM^I*Qj[iOBE:s2VS28G^k0`ZatIr\lrD+U9^n&Hu`EF&kc/B]\SUY4Oa+lfk=mo%Vp<tA`M6].'V'(06Z.>m]p'"=*u[;:6eR5i/jFfp3knd&YAWdC3WF%`S'gnSChg?Cp^jg-H6U[GmA&ro*'7p51gXp^iqpBkp76\o%[a6$'ceC%bl2gCe"WS'O7bGbTn@S2qPn,QiaUU_ImgNU2=lEa*^uuC/"q4mH<o:N[@L1js?<uq2Tm$);dsAJi_/J\%cJQ@L]YFC-%GTeP<G^@Qi(6PM6PAQ4"0E#DlcZ0S,1cI)M8m_NLp3u@]F_a-g=MrZBkJ*%K\]>9LcgQ$dT2^8hO)_kF]=f9326cR+*2C&ISW>sU%EH-GMn]gIUnMHU`4G1Q3Aiql^\9PN4fH.\'Y-+MArjk/YDoXBM\'L`lO6-s;_L7-u]kpaFR8f@@S'1-hB1i\\W-RT5q-u,&Sgcl?%0.n)Rr.kj%qJcpufb8Gq%]$MqbPlbZijoTed%XsgV[,DlE0uP"(Ci6M7#/&s*Q):ik@>+?@7CXXa)IEf^4aD:*6DXp::KuV0GcAp%*+o,)%V6_CL;OGDaM*>FW8C6-bRWrRhtd#)$\oTaU-mmba)ICh?2RjC@<Nd!I:iO5/f\L$L^o+>Hn#*AiC*;(0Sd9CY@j<A6d-IY%6X\Se(4NSmq!GAD*5EitFrbh)QbS?PN@1)0k07epKbkMD3o3t\+BaV/A.nAZb[C'JgiSlF3Cf,'3(Ib6cQ$foi/\lFaO-"fD9k5r%l!4E37C4:,gNSC\!^]'@ZQh[R_p=>Eg6&!Jq:Un&*Bl\<SN:\4o3&g^[PiI$?c5lj(d>UmZ5Kubh!]OAN#qn:g&0-^NNFROF:94M%pMW-Hi>"5A5$\#hDna!afBVYuX7K]Uluj(^'K^R!iB6;J>DL,lmT.rKgCg%s<j!5r;-u9T7+q@IT#?+ca3X;UYN$F_QPMa]JeQn;%nbE^h5I8VUS`#mdAkO!%1SqMTp]5EON#gM)'?ko9K)*Y)W''Tp/oTULhHeuCNd"XGm9t-dJ$K0'/8FO"Js^tKTq5;3Hks?bMn3!\%`uT%q5En_;?,lM`Mq-_JWS$g=ZE8U`aSTup^9YF:FFAN7iV$aq&&*DC_QgfTIsWN6Y`LR\&47:O0Dp*Rqkf_d./NQcq<3Bg?Re9)%a%@46,?on-%Rf^WN,/gY.L2[YKQlh\k';E"H2mkiF[(>93P8(.8&aDJ[a<nq^Z-L+Tnh[fpnTo5*WXul"%RS+d@K&7>0!2H>8"]G%48J)8hA:AkY#''c2tbcaXk'6TH#e!M+'lrL.nq\HKm^O,A9)c8+'lrX(\6Ls**pWK2.4a)HUenCd=qL&.NP;;_8G*@.(m=O/K]89%dZ`/5YH+_)gL%s\nETSBp\44T<u6t0F7^=Heb7TN6gK00)=5l+hk@`sI/!'fj(`R\';b,dnLSX]hL>(54l<:WRkJWjg2U4JpqGUO%B69n#ip36)<i_^nj'#]9*>OpaT5MFCkN2*]lMg+]e_@9Gn'5j#)EmA\2/`!Of!q&g<Uh\NajDAX1s$b4E^u>Kd3Np,-9:0X]DBhQ%lgjo2I`mG%jnb,1:JP`nkV93BiZC6b)2fEZB(%aj7#g^FG3A%GLcHWtjGYC<6R)=BD0HnJlfZ;!X,FL$h<f$g=KhK.;YI8g4T3le%-n]na.!*@?:m8>do7q6LHq>Y5TpYd<R'JC3p>stEfLeMS)`H]Kq;uA"kt-h(]?S`@F0s[Am5@JHc2,MAG+58_k%M6g%-kt$2UAWK%^U0Z/I5""$ArZ*VX\bX_/FL.Lqi]EA]W`'bqdlf&9mFQ1LW8ENEbLCRaI_SA(nZ+`cZ<cYT92:_U%'>1!.!6h1j0=;h#$L1lLOrO%o?2!rUuU=BT+#V`pWd:JWI<M_?VLHu?2<&kgO.:`o92iNLU)%Do1j]Tme:;Ih0D2F3N%&b^b`\%n8h@LrqbdMqt%;+^Dnp&q>9V*%/(<_K>K?(3HQg$b8ToYtg,ol;7/lD.2;eBo4p($$B:uBs"51OabCTS,cPO^;0DO:GmlmoB@7f7VhX8>)%W2#kLElbG-ifl'X"R<`%fU#`d)DB259ZU'ggLJe#n.Xru;YI/rK,?7V4GTa&S4_pBg[e-&HI@8QI(Mc4,a[A'1)qsY5DS=&o_>tB^Y0`2=U[fX+-KKr4W61A%:INlGII5CgRKGE^pm5I>(dF+W;<%Z+ha:WI8#+)m<JTFt=ZIBXN^f"V2JV$>mgt>_[jI*0[s?Il-$SMgpZGW8hHl3QCo5?"0dCU_%ic/9%G(DbO*I^$iSL!F>o8fs6h<P#'XDTZ1.fm=e:HlR`gXl1dpD7&8;l,<N9)ijU[6psV:7\:A#)s*9^3R6f0!<6EmP)#Rb0r#M%dAHA"a](EP7)pS'#F+T="fM9D8K!#$fYNRSJ%"jmB1hs*K=pdCme1rhj1rOX&EnVf?Z^hoMl*7&l+4VMYKP]b_bcAmMk7^toY\T&%Nt5<3dlA[8iXV^JT'No,PUiATnElY1]Xs[E4.9?.aCFqq2js'GflH0I!"?$j"(%!"AG[!*<kl!IZLQu.oD#R2B'+:K5B^DVB.q7r%;,?MQD?'=6D>U*'R1@KK%nl>e`W.$T]!ok9*#62__Y8c9bYd?rZ3oLQSc>YX*>Q;`_KSuSITHm698uTFVk\;o*&YJ/eG)L/i)/Mr%C4&O2n#5dL-gIZ#rJi_KJ%r[FqpXBsGk0`rFmkSV.X[#LnCa/*nEiPsH`lr,0K6`KQ#F$7ICM9]?J'BB:Qd#5O2l>jGMF3P`f"=F%cc661b]rZG6K$=*]Qf_S^,0Hqq>!+Dg6@"#<C".4r6IT6SR;<mon5T>+3lMlmsk<-%Q<:,pV1$o[rHKRVa!PZbB<3-ZC5qTe=eFj%,nT&:Xeji#@F'.jQY@*2S=DtDId>>'QPhtr7bbmTjE66&)rTp&ToT_.n'3ReY:n1FOUjL<St+A\H,%7j`[ebBrRH]UTGV.Qg=%#:%G2j.G9jjmErXOo@:0lZ3I(V]$G&:Tcj7_dZ(#I7RbDt3+*m0MNl`IfQ2f"?"UUQ0Qs15jlfYQ7)b!5^o[\ImkXfgY*48B#:)G`OL%gmFZhf?eF[A"?jKV`nU'eT4+f`',;239-S0..-DWZo;/lOS`L2()POP5!p%QY+n,Xf8&+MeL-;2=$-iX8($d`?buXZ#'fPD]04;0%LF+Yp`MG6FLY'`h%T$L.UmpK?Ro@'qT>8p/8aen:*SRKL6St3lhZ&&]icQn$!fB2?;6eLN)8B'uIZB+;>4_W:9?D2sC9M8\9/`to%+SsddnI(7E4hnVAIt,/ciU2Rjg-U!@F79)$H$+E4rV>P5_oHccgeS-`kBlCe/SEE(cLE]rkBlCe);4VpF'$(ugbtdGg\`<1_/\dg%!F+aGfV+A82"%+ioUGIJ".5#(Xoens#VS%Md0mUqr0U9h2p0%]Y4Qc'b55W1*7fll[iK"BV<da*eE@;`LVVQmUul=R;hBrK14C.V%`h`A1XKR'0cMeHWIbZ")GIS%`cP_-U$h-tP`pY$Iabu;hTCfeQ1TdGT:%@ag[(O-A3Bgc_Qm<bL@Yf?i0n&fg#Bues&KG&%N1GZm%IAaK>)8c.4.qnt].H#,pOo=d$'-JB+3.`&uQ1Q5Wg7L]Tqp,,^0o\BQG\CmW5_\SA\'kD`rSu`!DL$N:%jmHfRHOJ=+32^t+W*&*%a_7RPNr@jYZWMD94C9S@LRX4:*=t/TEE"i=PBufsTX2BQl0K;P9`8;Mg&/BI9MjDn_sotHS_ngB2rYU0rLrs]&Sh#F:j\TWO\\).%EsU>.)VUe(eOOrlcO<:gc*"5C?r$D!-(dZ.a&pSl3q,frhs(!8Y@`8aopaF"\*4eZ!*Oibq=aOEqq)$`PBfUTq<Fm$S+;L&gCN'D%IeEQhlQ:&KW^"_Rn,?G>P?IhXO'eoBptp9q%]9'BYOR\R'gMV/"T:)1PA_fJnUKlH>:BHZlBQEb1\H`F-Jl6d<Ef4?FV!i9X_YcV%J9i.!<WfRsRSYpK[+!$nV>r5X"5^VgZecMV1B`JI*K9;@iS/[Y>jFI).tQJ1Cc?o^Xf&o+ghm/$;r'Dj.:6]QG&$@$-Y:=2E)G":%>4'J<B*^Co>q=fH+sY.ZAf>dYH9aVN:-!39%DQQ+r5V?OJ,&mMON?1u:Ntu?0;BXLna.DGYNfi(@aQMtfrG\IEEY;\%QpBUHi?qI%`S`*R;qKJV`4*EX7SU;@G/E.EfW.(+Wgs?0eDq_'S_C?PX_tW!eoA-7SE9Q8=Z^)j[1V_/hq^tYpNeUpP]n)0VckSSmsZ);G!>)G%WD,d>2nkkuTBJ1a,J%Zg1m=l<>=2-8[AQTT,?!A65bd!mc/+]C1F?`V@UI;*]_)l5c?<Mp!2X2TY(-NjX_ME1A8kdYNH^TWAOp1%%_*sMJQ@MA115l?"X3)S%9k<<!0.VV/Z,JDG2q"h58@R;0:9-dlg';7Kd;A61G&dJ9\C?e(3)FV)S_7qW=3<r1&h=Z<$aml/&kB:9%[Z+d3i`dVo`/a)]C2:5jQI8\PiiGOoL#G^@)[E^_<ZV(u1tRV7ksfTn<3+*Mi_4H\L/N#sJVcNr4#5/s*2@V_RG,[4>>YaWg9eRG%h`2aS^pkCY87%<rdts_e`DodUKjL6,?sVsUP(4'(DB"e3J_j+3K#,8=&p.[0]PN"dVI43H53mdSWAal2)VG*cNP*.^m*qC&XMflb%VOCk\b6rQ)1S$unJ9)t(HEGr$%=2le!q)%i6XMa&;^:b2^K4k7LHeQ5naH"s=)XhcGMeO#^NrgSr\VC']pejB8eLps-mc%aDGG,c%(A!lJbI8`KIe?/UU8$#lU;6<hrXQW'5Ho,!eXL0a+CtD^]?`p?eFP$[.LSKe\dSs&PAb=\5-?4[\%g_"b;E5YNHVO'kZ0WK_$>r*%J:5nTNK%IlP^`=0qK_f=\*l#\IHqo^Da1UWqr-qs%r^?So_,CGCu=23[r;48=?LRdn^\^`\8aEE?(5ENfKJ!/h4;"^ZZ1&E]hj^S%adc)DG&>d\g/1&8,?b%rp>,m6ZE$))p9)TAmFAeLNU,;n1=E,Fbj@iIWqrai3gppXZPq)IVQB1G$\*^,91T>AV)X/?LG-aS!J3na%7hR22hnU<IGY#W'r2,\IO;PVej4N:As&3g-Hgb4)[<@OA/U;I+Hd;M[pUo[+Vd+&M$-1,K/_hMZQN?M+[=]OB[0R+#?PR;V5KCgM%,,`p73L8VSf)f1]6`9boi1WuX(3$s3UT<dDj\T&];<0RB*G?4KJSL6rE[[?#%]Ee?2Sm4BLR.nu>P?7jSsP>RXPSu(J.`4M,]c^X%+F]!4#$Q%=curs8H0F-a:pGpDLd<GCm>+psTL]3B3W'5+5LfFlO!b6EeR:=edh]s^3"YQiMUB6I^al>!*72*n.?l8H%4K1l0+/>n%[T+)*#,[4,;4nW?##o?FYY)YeXd\_ZcX-Nf'Cg_KYm`.KYt6AKfE>&^,W5rSJ]o;I]E27jYXp=/fgHE/WIkA>6!TJ@+15*CTq4u!%1$fGtOtLUH0VW#ZN\bWG.[7JsM:KHmh,51Li;dC$WKjhX5$@@]3"E5N"ZK,'#a/^;Q",1G^O[(!kp5<+7ToRTVA*fU#nsOGRY[+L%72G#!5Qq49pp/5L;%]T\E!#5'-g/%iJO@C%O'O(J`2IA-3%tITO+VB(Ws**6Ui@R_9K.NaAtd9Js.5s\@V?5oj2"etPe90q>#VC3%p.V:_O$"tJK`^c2)2np2M.e24ge?u&_a7K:@9P*o3&uQ.MG3CgBU,B-QRN/+J=EEZ_`nhcD!ETC?fkTK?VDfNRTGA6ku9:%JiE,_%MSlCpZn`9d9F(>m6I13lL]>gs.eb^@Ak,eaA?5V51(e$$!_S"s"(MC%Ym5ZG<sBBp%]N%R[HIZ!'8b&ZL,BAj_Jo:ZTTMPFr$*>%%2aSLE'k=?uRMMr9qQ@G>=.`Y>fK1cH37&TYC=Q3`qa1:)^Nof!ms*TV?=0(<X-SWY#1@F;kehoMai>J"eAjcNd'%B]\PVf:U""#[%muRFjf=pk4msaG8s73EZI:G$O#;!&#^$g1FlEaj4nBCLM5BGfLTD?Y8M^*+A?8lomGQ.0*^@o6QIeL*\T)._^&&4lYV@JpL*o-P`%p\aDk^AR@GTD\DL5P*9H^L=P9%ZIkEq((o]s5-$:O8o"=?iSg6+'8uq"Ppuf,_,WLDghN;hstRG<hf4LRZ;[IUA]^sI:8guGDs'6%EZ'*)ON10QHK?:TA]fOq0pbL1ok$Tn[.I#+oRI=lWQ+II01/6#EBfb%R_^WWT._[c%W5]/Q._CuZOJe%ChO0f+3mlFN>I0h&lkHb%H\!?)^hGqK646UVaUA0D[]Z/F`X*hb&"VXB:o/\LM_7J@YlpX<((d\U6fHpS$`7K,5s%$41IDi^HM:@Ur:BFh^Ag8iIeFH<IXI[6%I4=l(5A39[^0D*#?`CcP'!u#i^)R:Sqq7$_UjkW*ER;)][3#WJo3V<6d'W5K*sYO#?Me`h[-^@J%[sQ6p>MZYg5g\&1d-3Q_a2bW%+8n043Y)%+H.2e.l,2K+iQpK/iQpK/iQpK/iQoLB\_MV1=,ZNqfS>+Z\_L][='K"kEpSQ!rNDMN>V>uZU]5AuLD0M;jaQQLr_'L<%]:o7&lGm5p^D-OL+7pXc5PC<?=1U%$MtU5H0<Z)W(S`Vg7D%+5&u#,Wno4k^oZA\f6D#d34Bf!&JA1lKj4@Rd!dq/cmb2/P?Zjl$%$3WSBihfrK\EiS3Vsh@cNn<'6o"&=4"$G/mf:KY:DRYrE>2.b7"if0P]&VqQitbXT*522neZJR&n^4Uqe`?T'g?RZcIj`ccqA)oH%UrJNIYIXY^kpCCX1&K\^4TE\3++38+hXpYcldNO6e*0f_?ZW'K`fVd4S\2Y-mp@^H`ZKTdY<W$M-U.(aa8b;\5CUWl[MSi:qV+de%1XnC)jma;Yp'0^N^[]ZXIe*);rl2GHj$3PA)diF#B0Q=a]AL+])t`!8j)J?6#_/<09>9h"J+9LfrRR1is7+Q&q8q)Mro$f5q>0-D%r/5d40%iadf$scmgj#8+gjIRts.@?Hot;IIpJ7E2!IUL=flPL;n@RS*r#aemVThEloSk>#7ugnsnnrJelaK+NfN4^CdBc&anYMkQ%cV#q*n?ZbWo]0'qqp98"%?bq-]LM&6dAsIch:oF7gE6F]2_R8q_-`KlYg1Rd\a[kiIe^B2qn0CFJ(5.A"/kF:aZ"Y3ZetVqZS/98%\B[`#4SsbLIJ-$H8d=TW8_l@PFk(2TmWIuHm$g4ac3TJG4SOJH55*i?SRLtNEV0p&i0L8>m<ANH="c]5Je8u&H/[Ea?hsKcAYKVm%++q6dEqP:$q8H_@n/))iR290bJUdLWQX4q!^]*?@?U%9@E?4Dbd:5,GUY0j>igW1/=W'@X<BpH@f08ngohO+15SKgS<q"[V5OeIr%s4`b\9[klUq90qQlh:CJ5_\Ol?l"4_UJH:;Vre,u$84U;]e;SIqFU^&Y.aDIOfPY"98K5?fJe9W]G1LpMkBt;.t@/f7HTWr@"f8<%\$!F9d;M0b8J+5Xr/\V_n[HJk]>3'M$E)Y1+8j',r5>bT$W$g"U[MH']DI7\@H2Pq=eW].ro4Y&Y.(%[8VKt>cGgnT<:5C!Uq>@]%Qi>g,9=dm9EHp6YD9"r_<]JNcDu,s,r8;4R,7OkF#O9*1H0oBp'<h;[(Vf_2MjC[@ij7P>ieLi!iIdj*V"Nl)rmH-WrU$4Zde*.o%J+Du&^SfQl-NoqM-h$FnSq#hEhg`oQ"d$FdJ,,5uac:_AGXHJaSJ_BlpO;8Z:HrbY+b'F=o1sl51[k:-ET6]Xi1rO<Al)c@rVU#P%l+?t43os[oiP3/)V8#4/*iQ[W:!kHkA+(O0mX+0FY?`PT)H^i]ptDJRh)@[U+mBl;a)6",0#$:mTDn!I:"@J^^\R-g]j\1rFec%[%Na-_o/Y;IcRm-J4DdZ!\f9$d#2a6i,2m%cs[p1F412'9Tgu7SVI*8-l<V_6B.hu([kAT&?pYBgU2(M5.&l9JG_rKYPmLPq8mUsib%Pqet0X]U#/E10&Wrf`CmrB!gR&EnJ3\gL81E6Mu<D?'lPG5I9fIe_rqq;PJinaHL\2^gU)0/GoHA1_]6i>mFGnD=58AT+jgUF>b0%YFg1?S)3ka8k)Z5]=4;JTK;rt(0?]8aU2W]ncPn0^;JLZK9j3F@@*u6]C+b)Y5uATh3D7N<9;3KX0+X0/b2XV3%)4nir:uXJ!<RV%%[ME/"!5h9+3upA3M(M@3,Y>ua"c#]:@K)LiM0P#F<ASj8.k>*2(,\@BBFR]_4nj(JrbFPbqreg8#SKX+nF'h&%!`u:=*,`)8=0^%^NOnR$XGIfIP&-5g;TMQoho4+&Ve3</"ZF."HM=,'.pE7BB(T4HK[NMo?b,+I+D_c\%Vf7(S6'SKbn*DiV@+>r9FUF\mDYafg#8k%Kbq/jlG]Zmpu'nDnZBRl?[l<u7UQ)0(]M2g?2h)NR(EGRs59(eM`QR<4`=3\jd0?L]QpWrkH/#/@-Tt'^KI+W[]9LHne]Ggg#KoY%mb8m+<9s,Z4l?78EZMrTJ(/Lfr?#Bc;!6r,0>'qVkmso9a8#J>XAW]k$P)L8r62d<8oOU@dn29C+XpLh^l+JOV9enm,#e4^a)t^;%ma%_%Dn4f=d`_Z_`:\=;]7W^O]bsoJ,AZ6js#g2U\C,_oN@b&krt)@*^RR(jLsgWn;<c&*<Vg(+=JbcYJpT6t*nn^qaXl>37*(#X%k+0TM"\Hqarp(%D4YEdl%liaj:]F+[KQ$g\j%<+=QRaAPe+YLE77fW6[)4p@ISWsP>>?RDkI*4)n+WDo<9HiTZFhCOBd[ZkVk6Xs%.p[.eNBram07HB/!2-<j<9L+(S\)c6H/P=^EP;!)1BUgfe`\Z7c=kWO>b?GiZH`iM[5.4*O8[.ocM.@rU.(V'Y1S-R(VWt2mCD]b%o=JjfS`F!>oY_9I3obq_IK%R<VsLFV:[/rBpu7K55Prp%rq+kc5P^!D]Z$QhG"(u2IfBrYk`>`,%tFVg.c\#A5F9\nId$Q*%aO;P%qK)M?96\XBiK/Lk(ec!*_0ZTCnP+'Y$78#:2![IE`DR+SF2'HOq^<4fOT2N@Bnl%Li=L&2jV5AX:^qn-hg8-i>/&I=U#:EtYqW;n%pB8Cms!l%*,gZ"a==ifXQ1)d+AUUc!;Vb>S?ZZ/?nS><kIf.hU0Qgt:GPp1\X%qMj_[RthT"+dRitejhY.XW+FXM(:l/kpR^?4!N%:YgEYaV38I]@nO$GkA"OY!$dBc*uPQa.7G2Fk<1.gj\"[2r/H4g2!iP=pB6<\uM6;^&?6g:Z$N&bB<8:Vsh>5^fF`bbQ)tM.[2s+%oBps1277Sb;d8:nkAHeV]Lnf']`nJnG1Sm[g:I+b&,8!2f@@B+hg$.@eYPHj?@?Z*"K\c,pGB@(^##'@-;T%qof[NT#1Jr027S^>%\EPkphG`HPBQ!A9iI(4n>+-?0kaeofl%B9@dAsI_iRU(c=1^W?5!MWdi'WWUD_hAVIE/HK>cT[gS%SR*]3TOgbs$`RU%Vk3RNd+Z%e91M&TM_-*,?J6!_lWo_I?U"j(_3JbJ`g0j,.pYC2>>mGlD0U35'kKH2o-h(/Uds2[%A`R4NEQ_(=;8NYIX27CQ;"<3d0NFgJ<GK%I3d).@Ok]ND&%>^#*$3pn%N'n&'-kYlAg4+)k(3!DumG]]rb!C5bl&*KYHaH<=7fhGMZQY!0G)F!?_@GNA?a5\Y0cOW^+E2Bd#Q"%&L:!M6>Q&#;Zl9s9gIm4%dC(+q$tT^T>(89V=/q-VYgR-H4W<EQ\Q4aqeH2*(1VIPa_S)G7h_O[Fh<+X=`rM<5&jh1]t!Xcof"(g%"0t<CZK,fp\</=VA/XOtJKWhX6+sRO!hj\e!)^H:1oZ9dS/aHfr:edl2)HJEpU2o*)X;)*"YpUee4bpu<uo$sJ:d#_lYc2KJWH_F%>mi""mAFj3?8q!(g;/Ub!U/cpX)%%Vi)<]]I4pt,!:[LI)C*TJ:;,d"!:-Wh+4n3(iApr?1p2.0IJir*2aJ/[<t"H1ld"7'4*;4,%m:E:([!E.ZS""q/]']4GDnGC;!!a4%R1;Tam^a&ZDn,>7Rr?%*`Z(pQ==QBt_,XPY;`7)b5Bc^"-CR[24`V5:?ZQYA=aR8%n'AML%!gjD_FPFjm5F7E941s%sVY'9l[7>EK\P2i-XE_aIDlhgd/d_ZoOB^cKGXJs^-%3E3r*"Zg%\(IZ<f2/DhtRSM;:\8.kh9"oD44_\%8S]s#'*Y!n$]GQr+;c3FF0)NE9qb5]G.lF8LfSQFPu\%hh[$0U5VC!XZU1bu<mt?^eT)_L0CN]QG]`+&E(+IPKG!@uoI2Ju#fGWY%(#;l-5OTf.q-H!Vr#W?5k-@K9]"FU4j3t?@e"cl4/_)doT:L(D4]@3mrNH1M?[_>?\\qGXHZ,0QYpD*3ESpdYs19E'J+rEGp&DaE%A$W^LY("5$R`iG5r#`ZQ0E1g17m?bcJ+i=%^RCQ"Gu!:qGI:1_^&B%%neWDFe3ABLF8tm3^]3eq]`!!;8b"G*n@GKgf_o`;keeMB%oG@MoM'p%0q8Y\mn3as5J#oOSn`"/$E;d1_s53k>PQ1Q!?iA!r^\XeQIH%I0o^/hf+!a_0DC,RO^[eftrMr_AmRpp_qU`IPYFg78%,Cf9m?V*jcYOb/J9#(0,++3-JT6pK/?[DWkTDI:Q]^%LK9+_]snt#^"qYtf`++E.Cs7!#.*rFGOr1E``_/K;Cq?V;Ce>'V+dImCo%pu$MUs5B#djMUHdUNc_6\\q$Sm0U>@pTjaU>JL)ODgCjHIdb+^rn7IDo=`@2.^Q:fWD;fPNb;#Z5>]MBVgA/"*MWYseLd?j,81_8%]ko@OjeHq:'rUK%X08_=k>[.tG5AbN/;/(M]9CtV7@i-KX]$F*@&,b5EZg)A]?,Z?-MEf35u$\p'8$(cVd,%)3Fec1j]A\fFW0Ib%"\Qb8$d2]<QSe.bPN<pL>tlq=Bc(/.,kL2^M<0<L"3VNP]%l%Y`*iMt/$cNQJR/W1mG@VdUY5QG/,5:KDRg*GNU0N,7CtWtLF1:#%_4>TqPr13jP>U(baK=0HOBb59aq,iGW#p],9VE<H`08A@;_7Zs_>MOE&#3Z]pY*nV2,i(I."7<UPOT9%<R1o0INef;-C]RqlIrq%%Ap;kI>JCb>aj>W"b%h_nKe)0i\<-o"pJ4XoC2`?p"j2U,1'?&,E.gYdP]W$9?!IhGcGVK,690Ngo/*M#L"F,(Ue'cSeJ-.?aB-CA%@f2MuRWiIMAP(%bZcZk0Qia)qH_E4&>$.V.RT<.-i$<qJ&U5B2]X8^WT5u_Ld#JffSV5)5>hM"^)?R__R/mqP;Z?-M+5jj=4MbH(%(f$:44WLN9N"l^!#RYka"PdY0EU\Y_*.4M(Hsr.GUj*I:^t81>JrenO?MV?;IN\<:TG_S2(eQJefY5rfN=k&MR.ob$IjS58.hF,p%c)L_C]$a\gp-7eiM&`@kppo1?0jSZea=bNnH`mRsqb?r<8b7DYILn@)Q1fj+H+1.&1qgMprLiE1%IFBphem*lBY&@[qa&]<)nHQK%T&%hDd'W.omXqCs(PQapp4K7$ORC#Y_k4i=_k4i=9E"$oe_c.(+4BP@m`UU`b<=^mSEPF0`:K;tm8c&Nc?*EnZra!t;P`+tc'K(1%4/MaNTRF:++!g6#V>6CRID=uo-0`0H1g_g1?O;&QMuJW"b)mo=iQ'>;Nh]Ys5C)O[>AcHDnp$uU,$,gIH0Y*XNe-/OiIR#DgJ=5B%ntj2E5NV;MSBdXShnoshr4_cjl+ml(.H;^`dc]i!;t],!q=f<u'2SPh;boRLT20jo,O[^d$J1n2AiuId5$+>S$)J^@]-mUD_N1=9%nYMRYHL\Nf?hgfPrpIU%W92$`jhRIuo8e:p_K3lED"+=0k:V/XOn3W8,P[NO)ODLkr$g\)F[(BG\YgKuBW4i>%Y<O/DblkXFnbJD%TDl=okeT"C:Ftpjr.uKmkR!;-YQXAS+`ZYcZ'r4YXFUuY6ZY-*0]0&r'fuBie$^(Y4T5'Ncm_B+OlQ,68"R$$T&[ef*_En>j&_h0%4S\%$XR@fqT:\@B`;.[ti+7J[go3dr<4_nc`@!l0IN'EkaN9J6:K2!G;#[4[[i18K\`2hPJbT+U`CiWB.30c:oIV9u5?7LdL_p*_%I06C-??,'IdslMV_;.=OI;%]-UIU>'A3TPD8n:<QLEX%":<Lr/3iPC%1Amj73On6]2f8#Bm[`kNo(sYlq$ffBcjA[Z=?7[3Q4lOY%etYI07*:E(V!2j[D;u`9Y6n@;r;=)Y58Z[bmH>!"DuP@5*1!(s5E9Wh4B=WF-XZnQ*T_%b:n;heIqLj&i?ZE;_g-W&fN(FS'LYC_%"#ZdPHkb+CVDLTV5D<9A;/A,t))hDVYQ'$=#$7)'"s0fAV]Pl%9Y#;-$je[!dc\U4Ie;\7O.;j:hGS6:Y`T!A#F[(5q9LE0rU]X%%m$Lm4FCR$^C(Et0pRU1[mrY%f1`>-Z9e6'*qg.!+f&fsf`j\J\CqD9-&Nk4C/GoSHb9TgMd?(Mp1tc$DFU@E94o!jPQ1suEf1Aja%$VtpIoXmt18/FB*_pU.jAi'3(a`4'=@i8#E?R_H80e?%nlSSZG6A56>Bu26:N1bVsSq,Z0J52QNa'CZVjE0!HWoo+1\,(Ha[#\`g%<hqV9.Y>K%4C6_[b8+S!<d2=c+L=7PMGNo4#`Sc!Y!`JdpXtbWi1j(p&f^Z1diJY4o%9)rZ-XL5EV[pkMdskR2P0ut#9R"[/cSp.%Q6(na%/6NlDP9=&O!M(GnAkobA9,NicobW^+Iub<nOj#PqhZc>GnjXHdTf+CfS>`k[qX>n4IB\26a?Ep<Iq(<;$9TBK;T).'R_g[%TL(=nS93<jDP&;aL%t-m(hnOW_QrYZKW\%G#U@B4jY@n8P7B"Abm?Rg(K^cSW=Wi;PtVondil-LZG+4DbEpZmZX=FBjO8LZ72J&d%@<tu-!/HFD/H/rNH6'$&H0(+($dX;$j,_(G5K&#j&)h`SbBabLQYsik$GiKQ<kn[D\Fq-`Idi/aWP3c*ZgRD0Y#e`bp>L]&,pR]5%R6XPdO?F&f;mX#ArZBnd2#Q4AnV6XRqk%NUi-0M3[;UNcs0]_Zn+V"/Ci:tN\T$r5p@b@jBZ\^0K?_eW'/O&Jhh@ah:$gS5i7`N3%(:XTr0c.%OR:q5,(\[GgC2\8GWB5d54bi5(IMi<;E^C<@kfj14LkfWgbM7p]-WEMV]X7l(G9e0$/a8E1J`kGV3rtr;@pO_u@d'[&%!q=9M0c2-u,]/Ftq*76]`G!UIW=bSn.9%hu3?q[aekgsV8KZ3u5-S0EE-jUl&#jF"-di]A;p>&.(qC&I:'nt)U.qo$&V1'Yk=FoJ%/V,7-*<^hM'VWZu+!cj9nVi"dKAh4e714>?!8Ddb&N.O[qI76/M?&dkTY;"r@^V=UH":TO1EmPNr.b<P>-)LFD8`/NMmQq)\'s$X%Q[rI,N[OI_V!2@4'>R44J<q<4+B0X)OcbA)'XP/'*q8#A8ZRDeMSt2M+mDa0CMA@<-X'Xo1aW%</;<MmJ7?A&PRFfoTIHj:^(CD\%!f`!C):0''aPp)o!(p,#/8be2;P5aHaS@f]UCDpi:S8C/e7'Qp"N=!Scn1SlNfmf8d\:8<"Rld819cNn1&sII;"RDr@$?b\4[k0)%)/*-\!#/HT+JPY7q*l[M8(*?H[04MV(fmprLa[fjPsPQ.Hisd*RUq]fjC1EgD1_lc!R!%P)b3_&+`M`ebQ3adGpThk#uY4@$(N6^%Y_aPi@2=_EMu>!<9iB=RiWaZ&@L_#k.fb2lCQ[ihi>AodX\uYGW^N#5XrIWD!a5u$@%*2rJ?gJYRR29.8=$.GY](-[?F&Mm8`E&H%kQI'cUEJ!Tk#NqQ4MruW:.g%n:QsE<LtE'u$[FG,jSEU?i2.o6,Zl-3Efppn8Q(cY5YBon&V(l,=rgBWL6+e=0M+[!AUt?.MZMpE%&V\^jlntuN!6QR@e?eB!AbUdb#R2*-*,d5-JjHYVAZ6B"!'i2i8f,<_@#dcu62>a4lVsi[&OMl6d_dP,"11\,/8HX:b+&YW9?:AS%Up7(Wdi+5e\rK6j_5uBH'E]?V`_Mt38BZQNfGm[Z'I3-H$fs"iGVWr?i=r1l$Fe/SOrUHTJ-(TD'\+KG'0]T-Gs0L3m:35^KS"J%%?<\iLN*q`%e&&-`!d]QrGaBii?rEY3'&Otq+Dff3FW!upo'm0A@8ZSRqrrJ/G7!0\7W>0iHi_'Z"^[@<W2O::"Ms"6+r_8c,&,.%%e"iL,'j3hk1rrCWa.%d,#,0.($\CKG1rmu6Cf'716VDJ$9Mu3*VuSXfa[oCG_h>8\rfA<o];/*^8GVC.g"ui:.#O;t.?P9`EY7q9%ReT"lIB4iR*'f%X3W]s:b^:t3aGDT^=30Yj4$pN0#*,c8T&%P#9::I6YS#&)?!GuM;WGGloLqg=D3`(T,rK"]Oop3W^)p,2RRdF-%@*/IJ<gBpIUpOu`0W7)^+!&gM/0Ar4m;a),g,9Zo;opPR;RL5VK0eTb\ZhPsMXp!FZ=5_.fg:9QnA[7"bj.lHllCn;0t3h2NYk$r%JXS;f#+6tR<+E"](n%?93PaLZ16DffpZ_mF@%pKY$dn[@;WR)K#Gkmt5hLWk0oiYS,Z`]&94\aX]PG0E.OH+26(StI#IUmF7S11s%O&W8h7H"sF$<P>]*!`*D0K@#^&O_qM>ZZ<$NrXPuMNl!`'W4SS:*LkW^(at_EZlpU0eE#<#nFor0GskFMoK5H1GgDcb0a>PJ>:GS%[,QK9^RN0E(Cf1hlj9A$:pEA8:m+0nafuc^!0NoW.<n>m*1e*7%Og]&o$AgAl$OI&:We&.i=/_!ih5qaQBZJ&=SYir,q]4Y+@A\A%M3N,6/<"Sq=r^-tYj,F2(kS&#,XX;<`#40h8K7qlKRc'M@LirGbV4p,"bKB$<@"#Y.:^CI.uf(Oo$(:"%uK<ZQ=cDd657d?KTQjO%QBh(F92!Y]7uFU9C#FR'U$\It<^`'hNS03d5SXVAJGQh&`OU^57CPs4$\tHl0=ll9(#?t]8_9DXLeZMr%'*^/:S9#5L5?NEh0'#I%E1R8FfQB"_.EU`@>,Ytm@Fns7kPk30X)Q\a1p=,V7j)uD8uT+^@rF+P\%N"q<SZEdbGi-TZ\R4kfjuJt#O)HYVSs$.ic9a&W<hYf%cd7VgDO@C&I1`G[c1K02b`.Mp%63n?.loq-rk?Z.dX(kfhWs(n[@6WF/D^_BbbpU#^J4kX'TH]P#lH*:OrYHCN2;a>P?ef,-kV&q%/J[6uYns7r$'(2W76+"p'&]k"=H\)?PiYqK5q->hR0$\k)F-q]-rd#L6A?e"6Afkfd"4plcU`%1P%rZO,Y<aA'[-GQ!aq-&?)B`g%I.)[mh5s>%khFM98M<^.;[ag<ei[nBPbgaX(hc?p3q/DD6n)2tf]P^!J%VkV'[$6$Sec#BX8nJ6dL=i1eO#)ofcQN<.A/R)H-K!"%<FqVR!\K$^e7rCAIVDt;irN\pZKt\-Eai9e;$q#3##7dt+W4rMJJB%snY!P:QPMuj_uuH8Ok4.nJtT=p,UlhV%]32iQl9V6ejNhN%WXo;EPo&AUdAi.1%-s<F:kf`tKCCW[A:Y08_"Af6!QjhOqAS4P/P+(aU-LF=?CJ=NC6qK^/6:?CZH5br'M4.mcB$.a/#4<(M_r8N%5mgq=1;G,M91\B%*:/fX<i;ee$=HR2RZZO%rS\S_1']#9Cfp*a>$Y$a+hZbc#0)Wa(Lo1/,.;75S>>j>ElOej">0j3eKfIq!KU<9%\+IW`giXiNku*Ge66TkU/7e6CDpTOJ&i'n3;Eb0Mc;b8"JcQ*TLGYtZ7T.E]@2;7/f*'E?GXY_m9J'3L6g^nmE]43IHT)6)\!t)Q%;C!1nbMZT^XPX6h=p47(mGd(_$D?pc#;k_P@)Ot0V6)4.WQN#QBu(OCK-?t_LBo_j1M"<R:k])NKsSh6$@H8."_J^R!gi7EQE4%S%=p@Js-r>V1.TM%8_*Aa/)IQZ-%`h"k)NY^W#JhGP%5):Od!lPFeM@:#HfclThs`mrJ,P"*blHgRR`tm*?uN@O2dnHP/:'@54BZg!%)Cm,`Yj2J*(V&!;35lksht7$n7%jP</%o%%iG;P'r_n':'5/.EhpN6,F\gJ\+AGA6R)W_A;b#-.ZsQX5j;05S_,/Joib:"HduDV4%<'2SRIZYil>n\@%!J<^s3b6r2M(m_f>c`$Wd(FRIYLK8sPdMie`u?2=GAIjDYDD&o,;LMr=K>7OKcG"r=8@N(,9`6]9K>p2H6)8S%b(-55ekb&C1`16Gi';%AE/G!:WguG&60'\<aE-69,nb`c'e5n/9qn:]U-uA$ahA7(fG&,Z-.,BBR#70ekpqeBlWo:YL)W!pSmW"r%pJBP/.pMTSaSYlB-#ptD4q\mND.qP)jl,QR?UES!:XUJm@PO:s6o+7"6r,7s8/B@2M)*Epn;%Ik4GlZW*lppp'ri6-Edo^20<--V%p9moaUtNA0?rR@8)%<bXb8H3+(mG%Hd.S__[*$$X0Ms6c3or1(4ub+fXH.uX[T-X-n-i@L8hlPg&/9sJ`AA9!Cc((Q2O#sN(/*V^%H*K]XTK.RUB`/3_%MXJH=s$J3?!hhh$]$tl6VC"7(\j(GQb'Rl1tI$Sef"aCR^NIG;*lK;:Uu"3>bY6PG`CKM&uUCJoEngZdM;(O%[Qq@?@=jK#]V%PNBMJl2)PmufGHhec1bs],4)C>rU()<@)']khgN6/J+[H7QE7T'9VToN>.E.up5eu^jTNWP)OnP*,ES??j3u2g7%=Y<(@m_/pB!N^f3)0n9dHh"3E/K5d)8PpG3.+V8&b7"D4la2$dRi)61]a,=af;j2iOnM)kR2gSui$Tc6')4W&H8ZWo<_6=9QnK14%>XPbiCd"21%HeDHI&$Wr(Od3YV:-mO*Tf7XE=$XeW-5q6Eoi0BfC6<fpg+Hakjj<P[.(.K]FL/qTW!]\3``<fO./$.786ml56_es%(#)2PnDtD#E"6MgIU<=#g5+kN=ga.n$8kZb3g._*;e_TM26i:dfXDcXTdDN40K`kl:]s5_)dPWY&jV1n!jU('A\g>K5cT?b5=!R+%s)B1DGEFHS:GSVeFRBJfXU#"q97q^<pa7:4/g=1=+:;/4+OH23hnJ,^opoZ"XISen0/c^>?m/D\+nPi\8)o^X0*5J:^gnMagEDdT%;tA0[+J;ArJL$ZbI[;$^@i,46@f7qT+7_"/L.+Rs(Du4EE>/j`F8T-oU0/]?m!^eYM5;b[V=hc)/0PAaAaV6k-")ae#Er=hP8BQd%=gqS_8u]0a')X@-LSU!B=;:"!\:H2/0W2o./N]7s&O2D]]dQkU#;Y!01?]8,ChQ^ur\K'g&2X+a^_o/!PTfrJBk]Yt8qR*Oec?1T%AR$&PQf<D(?NOprX#+.A`Ad07"_36c>[&GFh+ZO'U!WQ+E*e,"NS*&;il>G)f3HV1`M+'%5Fbu"[CN;B*_eFEb%u,BXKJu]Q[^9H%0:MMZPg(IGWM2g?Zk[f(D?Df<'Di,[>Z-1Ga[.b'/t!SPTTfQ<[*#sgo2sUj=)i0o%+btj@o/1Wjh!j16`p[Ca\61<N:<V=C6tJD%[]'D1%9QGCrq.K0_qD9]W#&H_,tEV0TXkoML-*mBLUuV5FH,lLN(Zh6>_EE1=UK_T[E9MIb3fMF/BprT\u[7IIBc`]kWJ4T_/"HE%mH;lokU09IF@E%#E2k><Pg\D:F07XEMZr<F'5_H(/IgLV=fDthTEYb^2Qu34(mlI$g^8FG\,<TEO/8&RbL'G)R*D*X2M5b/<>\<i%j']a_LTKq&PkH7F-1Guk^!<Ko)$k?F$<u2)&ABRAASaq.QWg4eXs.f3b`oP&fj$#+k7VN?0U5LmFW:]8fCMT3kg44j(YBb^m7Y<6%?R@+%cFa9=9WbSuje@)Xa;*6K31nI+`]%@`m!WH&)a;0#/2ao>\msQU(!K-*s%>nVac+Qb;L,CU>"rWBg:u[%HlQoe7017ek:CEp%cZ",WKB(?K9R*ZH%i:63+5Dh_N9)*sA0IPaV"t4^P\_rfQb%eW<n!m-f)/.,'=%JtJ]2FA+_]Veg(Y%IjtF0s`;_Ha@p2a_Bs0QS%kW8>aZF0sb3D3p"9u`&0O?Ll'*PC$mVrXff4j0"R)g*Tk9>Q%`m&nEXFnp7@Tq]+d'\2:ZOqRt;12*%G&Hj):MjscWoYXLQc_3>j%iH>uoQbdHiD.7./\<eI8"*'\4^Js4^9>Q-tNblaI3ktDNkT`ZhKSA1.5h%10/6_fLnK0"DEt\1HWYEOF-KbZHjP15f!b%[h44FL=%LQ].]S4T(RfRJDA:kp27-Ddll8TK'F!5/=?Sd_M&P^!enMk\?(+D7N_S9CO4\qG-*eGeO1%P>r!V)])[F7=p=^)1"2bL4N5F+DQ.%Ja`pn1UJJ\Y>W.+TeNE_VMHFaF3/M^QZN89i0o\fF-_sp+$(-(A-umF`0dH3kn9`CjB6CZTDBl$[)^-X-P[#AXrp#!Ln%LI!8bl"%Sn8A.$Ft9F!W8j5#"q?T#3Qe(K*2!Fm7`A'_/%OW[DS8WOtkMGE4>>1)V7L]F7<oa`X;ilW6$\j]YHEt&=<#!=7YA)nlP/JgZ9^7%n-tuYPWFXsQ?)0rNPe0_54"\IG8`"M/*purgu48R$_o$ie=p\3$!_?!G]p36\?(",bGr!=?foLY?hVFE,[-60Fo`'kc2,ep0;OZg%=oP.+0jina.*e"Gq^hiYX2A^gKk(de6/3mS.t.[E=a!eHh/Pmil0ksH@]iQI>&:$6>Hg@q+3q#(S-I$#PrLRe3%on0RG,!fr<p$^%4'5ZlKl%eJX917\^F6Oh6HmZ2YO"/u96,ma:_n$LKKbdrelQ4GHFTWWdnK8)%/_<k^nJV6$C;tiPC,7#=F^?Vji^O+Ho+:=BHoDe%13agCH=PGj/3go/4-dHR[ORCS[OMlUdK)EUFPl6`G-=rYjs0)\RPnXZSS=kn`O$M^\jWXSX$;lsPE.lb6<d0iR3H$9O(@$&ac5i?%<\CL"2g/Y%D=/3[iJU.K%Au>E7t;1#>15Y>)L[<2-hiI>7;EuWO:F';QeFe)V;eOP5*F[*ZU,S#'l>0Rh?jEn!D(#8>L;TZA*b'?%HX$2F]bI%q\gd-V3CZeuFlK@t6CF`s:`:j\Mi/=7\iM:[*4_XV=4!H/M6p+CkgIOC-D=``=n1@j&`AiQIh%T&Z<DtNZQrhJH0r$<%Mf>1u$<>*oWfafgT:Y9Vpc_)FkfD3W,6CPigkpId'lU\VN:d<Z^mIa=iQM)F$!"W(<sG'eVUJrL@OMY\BqP^@<#OpD.p^/T?HpZn%0VJ_\15N`@CVKoCS.$o8"lZ=\$q50aAmtV73#-$R[LVYD9EHI#re`hl[fa?@,W]7ihGZsaW*0FR<CK[g/\6NS$nM(<TJ7H6#BN0G%MWR2>8cVk):154t;A)0R&Z"%k!]))%#/5WuQpm"0[rEg8YYc&2#(V@.8BWY]&3-6q"9k6JXcbdOTNP,=RusY&>no@O1^+2_&]M-$%*sG^)Ns&+Mc;BN9<W\Mq+Yf!#+:06.PbStuUG.u&FuW)]0T15^C'QhF7NQGJ`)i+a=@SF!Kq,&\*Rm7T]?&*"P[kS:?:Nli.#@H-%B(1eBUp_TN]>2R!b2^NUUnkPP@;/3)%.6$<TP\#8.C[VhR3>^>(4IZs:s;H7djP;SGc2_dMW,=IQ`ebL.9Zt9RKi/0V?K6eeqg$,%4eA>*FE/h)M@jj$/q^*30HSG:jkTtPmPl8#1sAcI5qHgh4[h3X,O/Gp,QYl@@1a]O@uRA9Q&$aURlqI*iT5>S1:"F:l3e/:R3CL<%E'SCh<WJC-OeO&.,anrdJL.(UW0HA0Ouk"jdn$'o4t&:Q@4'HZ$PY&U(J<*l0F*8b9p.P?@u+e`"Z6-L=(KE`-qWC?,HFm)/6"PR%boh"iAVZNc%P-Y3HlTu^&V,ihll]H09-=`KV(*HA&_/!Yg$lt?W.Z=>r726P<IebF%!&GST/7NA>Z:JC%@u!S3!N45TW#pFO[^94%+VK(1H!285Ueml0*0a#-BbQ&\lcSf?bph^Xa]B'H1hdX4dP&`gK5<jf;sC*Zks2;*@hPQp\0C;g.p]q"Zt!#j;&,ddqLGT'OC6jH%\Z^s.5^6J$(4rW9TT'Nd>SD7F7Pbj=&rmc:`Z^XL,#L@*ZjIRCi2*mSR:hc!8NUk!**sp'#0d@ZQ!,uCTsf^h#WlhK[#/S<7nS'b%lF@?%WR/:H-&;PSFijD*k`:s1CXfbEs35<t?$,2Nlc=O-on=GXgMfWs@5ipQ:KlJg/YK=#/Ln1F^)UEVNNVq(c[a#AOLRR,ZT\`r%/]`FjphsL<S&'Sqo%u"tS!F$9nDB16O7;&446.(Ehj"&J-kdm+/N8Lb*XO=a\*R\pjM(@Si+QnY%:tHYFcsinFf(sYFPC$C+pN^B%2j`(\?cE8=\H3CK/7p\tne]nS[T!6(3s_]%V3g4gK!@H;D0UlnjlPaODScAGAROL8^XHB`;KC)CR',t=7cTt]0RE&&8=U0&j/"?C%*;DiWoJ/>hDjT]-hI_KHcX[\\dt_cmci%)4%!_+B'/H1`/J[A+UA4n:3$tgs'Dp.j"tI?L8gj1$kq1ocmR6k"r)H^&e`NjW'UI(a%nqB!H)*]_:3VcJpJ;*(g$TOO-`*a3("l3OP.<dQ#9[WrOdTNNtST%&QCcU-sXemi[5UbliDa6;%PJo>V':&HmL#/`dh]jL>>>@0C%IgWn@d>?d_*7Y._kj_QER,,>U;uLab@]ef5G7K3c(ZgQ&LTQ7I9N=EK#H!keEP1N,!mkroOn*7SV1l>S/n&OC^ses<:;nl1>tgH@%O5MHu`PuqO*KBJQ.pnI;I5K-*Q$RLY.T+u?dN](f@!b<KS54eE]*c5t^e'S.3:Pe/5+:Q#8tFX+VUd\rW,i.5J437?^U<@RC)2K+%>D(&*ic%'b!_4VD/$F"#=F[.?`j;Lh4;ig!$P(ti"!_s8,]"cbYloA!qVLEIpIIek6:sI%OY.*I:4`Rr,j?5h-O\&o\YO!bH%43V%8Yh6KePnS0Pk9aD9+A]e3=k'@P]EqC=D#5\>>Mh"ZFQ.j5'c0nUm8V$\QC&L[##+A6H=%e7>5!TBIJb7;j,Z%o$g@o;Ee@(b.At*%Gc(UlUOAab:b$'_A$J?TR?ofM!j9cY,nm9+Q>8$SaJMVY@^X';ZS'*RWtpog'q'kR7@+p)&iqqn/9YlB5e*@:'j^/$XNVAVh%p[e%'4!uI_M1Ar8lTLQP0>eWX"dj/k!5.(FYj5XY$<L_Lb>L39'M]M_QbZ:.O-FS@eo"u2O7.K!;j'I([5*nCZ'C79*(in@a_Xk2b6L6%0r[2I2MsDBk$gU,it$YE;[G_/0.$;_Y8k)0S.l'R'Is56J6&6D'gX^*W<eu['-n;QU_6K9<,#=T9#A!5a:o2LF=NJr'uAD;OGp&"%8bSfnNg=-n9"G482R[uKS$cBa]?TDnUXH+Dc6Io2SkHr&WijlS3gPUAm@9kB4IsWG*l>/NIaGuT+Bo$@WNWd.j2lC]X9b]T?oB'!%_eE(8cctgE!Xi[:k53#!8F>FD(kFuSp*Ag3'ph(Mbi`AS\"Hf?TmSa7a<tJB%q?JG*d)UZKSPQ'a2RWol!pRYK)/b\dJ$+4%2U_@%6WM`/*Du=+h,Caboq\p%4N<Pp;S&OFh_t7/g#HUN\T&"ANZk,IP?%MK8nH?dAdbSI;U:8,.Je)7Z9n&]Sr5hIjTE#V.?,K+K@p>"%92aE+^2]c\3k=M_AV&,u\/%3ee&*C<NNR=:@-1uH'aLtKr\cTsb@fF)l(fm\=Yeu@%rCOa?icY6Va%:+F6d&"4uE4>@sM(qn;*A2%!oZj#Z>46iFE4MI(q>sX3JPeZ*jYr^m"J'Sbn>CSQJX7WWHJ9C;!e6`6a[#0/_+IN]Tt#C&nt@Ebf1+0jRR*>1>Q=@/!O'B79b8Y%7P+#Sq(c+YU'sCQOY?K[pBJV_;#tF6P_i%TfHWi3YtQLF::kP<i[,t:=XZ+1:?#LZ%(p&'9IE-B\!hnp_%n;[>`Yl<ecH-B-nt6"%=s(d)/lP0]-8mPl'"/Q+Q8r%O\AC]dOj#1i_uKibMi_'kX%\qM_^nf]'K^+B$D$9IUmXO1o*16dq3>QRlUFDQ35@J_V-*CTbU/DY%LOBMVaE/nEM_^c[B.ErrC^(LQ,YH'9WD&QHZ@b88V0-ck9)MVe6o+'Mb(;#h=^elC9b'r2!A:Bi^KJ;Z`O%:L;'>H[RtqCb'3:=T%<NY2T:+cRt=ZYT1W*I2Zj-XgY%9*)Kj`UJY_[^*#m#kj'ZDLP'^hJsM!^g*VC"#;B?j2hL!e-$H1f]-,lk7M5p5g2n,S9+e?%LP[%,^;m4E6&]qeH]@<4OA=uqa#b7k_qniU:>biej*E9fees_2\8u*bQ(]3-p]6qr`R./c)q,a.&>EMR^gkkcp0iQ4'&3=P?j(P:uh#t%_Slk_WT$t&7Sc<H$tE84'kS#YBQ)kil+G@!)1`@)_TcZZr"046q"1V#Ilq<jD[N%2pp,1T_'`i5(a.`Td,X\Z'fF0DKL,]m[Oi07%6!2`e[\>7f8?8>X\S['tkZFY9<^jN>p3eL1F6WH%2?<l2M.[0=+qJ(=WO.foZ0i\NVfXIkR1Bq#%IM7:Xlq#SW.KDKV5!&1cin-+%FW*9>"%9j/:I@^<BJ+]c!sJl0jsK_hbFEMcPZ/!snl_GBN'MDK)lGH,2BE))bA0kQBX3FB4UT*gJ.1mEZON2+M3KO;B9tp6jsq!Z%#j,/S;Jp&>Rp.%pTYjZrB0pUoS7FQ',NDN*_SFGF_Q`,I<QGc>]5L57K4+joADP8=JRF2V<">k?N(rXK_=A^TaVU*OYtaQp+ecdi%.jiM/TKg$qG8@d6dnRD.)7N5O+Xil!ohXP:>>UZ-e)lKA['BiRhW0_2a*+Fk>R>:BFp7HH'$BMZ/!1%1L(0QUE_34^3=P&[G8P_*%h8?XDe3Ae;6O3S+PUr,OnPESb^kS%Lc,#0/f5U\9F8L&L6X+B(V4Xn4p'//#4^/l-l^@&;BQ]62+d@l[$?b-7DhP0.m@N\/*+HK_%#8\;5](;aX+,s)aJt$;<>(S/Uc\C%ULq<#_-!sSpHV:Ng>o974<UT:`_<SZAe6`WepPo`,[kl.r:o^9H*qoCJf#pl!->!9B4re^S%noHt5nCbc'1ZrT]Ch3hZJ\L[67WTqY>De0']'8/+FMi3c41n&TYF7@Ma,=a2eEHfs?m=[$Z::jJCL-:Ehi'12[ha?qc/BF^.I-.h%XAueCZ_Atn_klkVi\V`NGGf(Wf7Fs\ciu^)lI`@>+-)P;gYM7&%F_g-5]S$T[(_b.hs.\gI>P]'TN=*W(DuntAhXZMYsbS6/Y;Vl%a!5SIe.^PDQJ:*qDS!PBGc#&K\NA:p)%@lb9q>5][2WuQG\e%B9/T5j"ue5JP46NeI&_(\27:r+#c?E`%GlL(67FTJ?G?s6DsVB-%hk7%*>hdb;G9@Q;fP9gkC@h%$$QU[fpD;EE5X+$p2K-$e8rN4YIpi\gNGhAYdkm2#9niL"0YZUELWA/4%&Wi_/_l!36$IOOYJ#*?%dNYt#0J7eF>\ti1at>Q\:F5.-WR]]ke8/d;%6E"\2:]PeRHLHXd1#)7B5k2>o1G`;Po(df`S.#i5Ls-_X_s`R6S'4)Y_61G+B<;g%[AK!NhjZ^&mF&K;l,Wi/&%+f+E+@BKeH\KdL1p#AN3lF?Y4W:(S`u1.[`$iT95#RcJjFb$5uti(J:d_,!K/E.Uo.]2![S^```<>^%bD=^-A>+q?k.%bf^dRs6F*PqoYT8S>)X;q0lJuW*Dg8fK0X23C#"In;6\,Q$#,<9u(M@MLS]"cDAu2Q(YR!n(:/%!4e]*9L0Ae8j%fPEIY2BGF4IY)0ANQn$%D:<`_@*;R<a>2F2'kCqQUYYbD`['"o1u3jT875AA%LcZB962d;/f@fkn$n\P18"'O_PX?gD9X(I:GeRg%K1%rY$@_XZ.GRZG\!l]%Rjchj-MiXsE`O)J;T!^(i+MW2Y\XC)Z#*ht@,t7#9M@o=osr)h"ueFV=XDdk_T@2>Kh.5GZmgZ9FstQO%lj56;P=XE]]dlr>;[7^/^9`1qc[@pK_YEiU5[\gc3"uh(on+B4?o8N*-+7EJnh_5:Sm\#QQr_u(MLupj_;:%&%Kd/?DEpX238Ck)%:'+Cim81^I`*2JK[[^MG>TA-,.JDh;<^j:(NB(M,86]FE],"!R;B42PhY@b`Z*pi;m8[Ar[=/M-jKV0&?:2sXrH%omde*d:a(Xtl%4kS7_>Y])=``N#SrY/9E_%!J'oQ#M>U$R+"e3mXp)A,GOWna^Dc'5(33!QI#>/m;aji6QpWA_"J6pN#]6Ai(^A[\We^b8\(!^p[X%=5b@(rqX.@85%PsV@Y6>.Q:8Mg?7>b:jYiPC*kVh;;\+Q4s[C:MDSj5k*9r>C5u!4oZ@B7WBRs1TT^;=Y<2u`00PA4K_t@8/*40C%(:e/:!$>O:aE->>`gQ?<G>CFj6l3FKpbW@pf6SkaLsN8U$(fcR+N(NNI(D.16!mdt@l:2-l4LSHLpprT#mZ7N4c5D;DY<0;ebn'/%63KX1h$nge,4HD=>g\*"NJC:sSZo2"<u)5HD5jXi+dIqYOAZ[=)aSV2g'V(aq%\e(?XrS,=9d_QKI%PaTgD#5FqBsYGnV[tC5n7X%9FW<tKNc2oJk@s`'r&_01>Gu&_(oK:U4=!,G/P?D1"]s6938_E54=#5*GQ5g"h7dqii%k@R%J#U<W[#CZiaku[*Aon0FSeV3Y4F]%ZU.8eVnsfE4)hCQ5D)RPUBVVj(1f$+I;pqdW%S&beK`WBM6N?T7V/hAeFcEKPqnar==fkoq&Rti6dt4</#MTEALOQNE`k?_3r#2m%KRoSj6)Ha:85X`iG[+3k7*A(8o.Hic(a7,$$KaFOetGbE/<s(ToPq3t=m]$l&Bd-iQ4]sR1@U_nj)W+EL`qrGJ7eF@$LV?agUPZ@%7/RqhMKE\L9%`PH#Q'7fo0rCU@(bR'd2S#qnDjruDJgu1"h[%W#5.jPZ>P]dO)0TEWc&6b6_Q*iF9aaUiD$SGn:D??GVKcj)M"U6%33$sj-MgB[>*Gk<Rfm&)/B4,K8Qp>;@npOoPir?T*u"dl:p:*?mC@CGLPX[PW<Nm[0]>EGE%r8Ck9pEJ^27aA)IU2UPMohDVD^+^%4.ah_N@f,FdGFE]Ft[29mVf7>FV,]$/tmoopL$9hW+AYAFZl72M@AcrWc9qc5sR31*>n$V>R7Nb+Om1f*<%.C\]Tm\KCKX[aG^;-%Dct<[7[q#e@b\1A/&_/@b<k)ann)<?j1tO/%M^40$26KgdbY_Y:'C3fgK3+(iE\M-&<#P>.h[`N-98GDmm9""l'[94m:J1AJk0jN%'.JOWee@sND%c>kj-g\^a;A'QVQ/EL@tS#?g)aDd.@uID5.knS>f!<4.Q9T&QlHC8N>BP4WKI"L1hg@$BrYe%5$i=F/P_oA0sW&<%PO;-o$)%kARWE<r;:!sH00lm?bYa@B9C9%&Vr^j%h:pS9"_<kSc3=KMBBm;)Bh%(q!I`@SJUL@g+U!&id6K[jbjI3"1_;mL41sh]%&3#dT+fJh('$\ghj\@NM*1YhA+V]Y[lgrNDO`VP2]kWehg.uuWL1\t\6B*=2PiS1X#)N(G6AR9,rL:&uC8J%H"?n,8'3f/PBM5WQ%.5&5X28OLG%F!CRQtE*s)?!SI-)KF'_h%?L`*"3m*I4Z3Z<G0[Unu@$hr-"]8J#4YYMf_DYbN&'D"30HIFr1kJ_Q!`[M=TE1DM+b%`)*(j4=JIc"2hZWDicCO$*n-JTZl(X+4-MK9*);7^oKSbO9<tW'qV%28eV*92/Rlu^?2lSedW[/Y&^#jhJ^WbMIG;'8/d[CeD+YQ%BOdaI[CNVVH!/b-D]lPMe6LV\3O5O-^fEDr9>O?&UKW(Bj]4,Y<&e#DH7#"S#0B]AHG0EYeDP#-W7qSGig\]qBJdZ6Gqg4C>)P4*%"/C90_=roJ3/=0:5eWtaBDR6'$<e2C6XpK)fJ9SRop&0DJ<V5'dO'r6S@uUBJ46nt($;]eNb6n5b[)kE;X=mt-rE1]',jC\>9)m%%:MD2F5F;dpb_NtrkD!$[Rk9Z!Za[JdG-OUW(P:r-h?"$l]t/R&/"Vu\Z(VjC<cdRjZ?N;Pb/"4>dq?R6^1nGTZ_K`l+St5Ig(a])%C$gt`qQL1kjN\;:eO4Is`r\Wm1;-ZU6:5-)1cuiQN?u6nX_0OjWl7lt%d-dVHcK`+:coh6aUXR;U-IJ02C0XM@I3D"c:l"^addPY%fW!CmcutpWD79WcbQ7e_VcU_;"51-0b%?_9mK>HgmYa#bK!G\\nc^<2/YVisW#)sVSf2%M/N4JKob6Z,]3+aPV-;3H\"t:L'D:++%7u"pLZAJFhn`Y"1rE+/e,Z'0)l;_obfA2p(r59M@rTj^T7G)":+)M3C=`nYe3TAaUh0H2+$B-lsf7Ml1ABo_4Pn^7E6lTc/MSOQ_%'?YsDk)P!KM/ZosCf)p>rcpUk`hJ%\BeYCu);V'B%KAn<Bgln`WHeijYGW;_b/@3PG*$MBlA2U&GcQ7_Z"j[d(juD;ft%q9(pF-p%+FW%R^Ps]F8WUKYbF;llNm.5N7,hMFCj;VVH<_G0T8e"1q?P>=3ESkjPY4k%<E$q0e$(\2BF*a(N3XTY;YW2^Vq*2IE/8R=mnda+%N(_J@hrkTT]o.;b+&s5(+Vfr)QD2l>@'je)X`8rh5nlK@rk_21b\bYWj6g&P%V0l4A'sukd\A^SrNUW>k^85)EFU/R#*V#/'H!>'%hU[#0&nQOM]FHh'pk?.QGO+mEMP$d1A7-UC/JC.%h:rLGN?%GO".A#Cm:^i'?I/sNB*Uq"bsHC&_*ic*kbP#TcWi`Fg)<4DEkRsc%f$/_J3U4n1hFu+Gi_FXCJVgA/c0k;NgmPsRJ"Ss1g;$mD9E@N-=Fdh6TVs*Vb21ic.'U2kIX.9\gsPW4&67RTTqsj:S`g6@VJX41%/M)7K/.-&pR1CqN/F=&C$t+5@L-"H^-P&n(2V@"[fY<Sb$D&heV6k)8G;-g!N"mP]:#)2g3=!=3\`MaIpJbG'W6ti=^LLZJ,`_NC%/S[<TPq_TcDfI8-Q$iEN;Rh;Jid<5g<o9A^fR2F1>)m;i/ra\7a:"(aBYaIpb%[l:L4WkJFOeY:^FkV/`)c"`g&[1WQbr'r$aUuN%nAHPkY-C,TFS9VjAA9]V8]AUG6^';kQhG`V9[EG5Np.le.n[`h(Fq[jAe!,C;ZshrbY#C[K;Khc_lJ^S[>Bi<D&+aXFJ7V*(kU=f%C%2Ra$EAiFiYTtoMAR2U`cL,WG.A\'8S/C@RZWF,0931#kMfY2#(^\3MLu'OW8.m/`MRT^/2J!#XKF.!Qsg"\N(4il[Y,KW`2C3N%iuB9N/T]_&=AoVf1(?$O(4rTD%b8H/#_i/Vf*Da8ls+8W\r"^(-5'^uecqn@JK@Z%3SDVU8aL">G(QnChrg/r<(E:*<]m`><o3+9%"h4lK&-[!^Y7LIora7dWCgX1C)J3N%mL8TBJjW_:-O.#0F"glIKbDgCjBQ)?27J=,KW'oA:t&?;$A.Z4j#UD"=Z(^gb*^1bK=5"8%!tu@9C!@bF>DXFqSqU$S;[GpO5ZG>@%RueC[;2e?Ug6Pkm0gc4`,oDkeF(Q^ESh7l3?&XlRt+:.*Dem,S'e)!))8G^%9RrW>\>Yi%ZmFp;?`gG+1#?+regUT+02ZWq2Z]g"#nmN2*oK`g<6WeSX16.-BmKtUE`DSF%?8W5o?PueBM_$.,2u3;].r*jgf^!XAN^7J-ZH><%N?+V<`nB;68G=!OWj]<@NQDc'F?/aOJBPs/]D7lf83lAf']Jnt2sTZ%:5-d2Xb++eV8WjJ<tr@5SQEpg0mKpTOrHJ$lNKYF-/-pB%ah5"QXf18r;qS:QU!*bs(QR5s`GlG;O%5u$leQ7t@hT0*1#28_.S?i"[J%85CJb4opjcGD3k8r3N-"km@(`<T\.It#)(cW6)V,IV%QYMfgK%F';me8PYL2gqr8S=2PAi#S-VC!+W"MQD9$RMN:dXd%a]g._s^!XVtFWR[Gldj#=`XE<4@U]@]2B1CJD1ZX,jHN-SB#&pk%[U:ClYQce]`qclkjR\G^2g9@j2[#dT>C(VXKS]k?GQQ@QFgaJf`C@+jME6o#R%h9u9i[pI6m<+gI^FP0Li;12#"H1FX[@e?<hGdJ%UG`mJLLQb3VNa<j\'pIMA8\M&U87d1"%s><R.%g5p)md/CO@@Jr5;4258l-Xi1f>d;;h:/Gf.p&?jOa^NPWlJG-BtWfS^*CgkKB6%C36fepg[/cLb'1@iUsEnGb\R=I%iOQh2n.'GW-KWb7:[oS_K-nRe.lbENl-b0[d6D"JIbEWC)9*e_X2-8-+`nDE%6D=(d\+_6[c9%H[B@kF";PE@_m>$E25<-&F=RYZkhe8]>A=m?1k3APk/D7W2CL*oYoOpacV5u8PIW.HIebi[33Yjm/[F:OkeI[=ocZMe31m^)VS5B%iMpSigj1<[Q<e;r#oqDf2`80C$i1YR!lL_i6r1pk>7(e_2%&X4.hcel)"+4J7(T50/\9^meS=<+d`t6+$T+W&ef\Wu4"JY\28E41%5tA6/5`Y.:A@Dqq\@Z61]U5,k3a"7BfK+]o9d$7')H-I9bB]-McZCShd,U/[JcItS,D0\2p^@hbFZu$4f4%JklQYlLQ3<//Vl;;J%FK;8[%fC?m_L@X9DHl[t5b-+Q"*Z\$%ue(Y(<?]C;3a,r$LJ/,Fgiqt#5LsM";tNN?NfnJ?p*94QQ$#VAL%<=?`G,g=J+6,f(TU8%eEof@l?[H-j8)^?gk9lpNf$e_KDpj(,$$(o:Zhb\]cK%N"Qi?u;g^Z#e9Nhuia]#V9dK5Z[q^N=m,Vmlb_Wi%qR)m::.>TY@<;tA%i%DQl.u\@#5b%OnOjItNe3].qLZe23'Lor:C#:>opm]61`bhp5(=_0:'m>4umE&%52UdAS0:jc;B1CuWR=1Jt(VI:U^E6B74)Hsm%RYtb<'5J>]nBCX'dj;@;31G,+0(7\Q@mZ89J:Gc&`>BHB]Zp.^fL6'+&mJ0*fkt/_+eu;/EB:WkPtKnGZb]n$%`7&P@hk#Yk^Wog%'/_[I@*k.oL0PU<,+mR-JnI%nK8/<8g7WJZerB`AS#:?>JhfEu+9TOY:Z3%_pl_sIG]G19RQY:JJgN>[;OKr73iEj,Pphs!<"7]'%W_Ptj?J43e?n5ja&/lOK$0;d4e$FqWmgl?J;A8Whr<fG2jCojP:>u<!'c\!E%?*&#XZ6RH&/i3%"299j*H:79!+h<s9?A-oc-L(G%G_`SmCj[J"h+F^-D;:iOOH+:c:e]iC;AGIT,VSr6C`mY?KNacskX8JdO:'q7bN:`@9#5ZP^u:=hP7nn3Xjp)rQ'UPZ?%FcX&aes@%Ub*P+9<4/aCo0/r).4u8Lfopq,SK2FrIGr(V25A$6??R,j[qcH21!G@cYLO<,b%QNNSD^$W)uCOTk@@s<1ZiNm5]F?K>A=la=*JM%q?Tut=%@FS,2Y#K0rj`#+YYsN=:S[pPY*uE-(^.d3fm$T"CLKqVh:;;]:7H<KaL@@/sg[[i&--7?.ralZ/X"[:7)uVkHh4oiaD,(%A-EoDC$:3T$k)0k\H?-2-udGQ%Xgc9G9,?EX5;>ElgB_i62MTO/F*Hi>VRCC<g(\@9H6U8J[Gsj_"qf:9"p+He1luBPc;O!k`_Cb%ZFErOnJtYhXXl`#XW=hj.=a0R@XEpV^0.Qi!RGb1Upb"+KGp*F::sCZ2a\Smcbp$\_Ze8QX14:68VchAJ2F3R$a0@bOr7=EFq43o%Q>pWV*lo!rX8n1/W)(,.bi]%>(,cJJlPk0n>B8hU$g7WoS&AJOTuP?Z_tOb?FGO+*!1?_B",rVJR"\8QPHGV2UaY@t`u]c?W<""J%jq8Gu67KVLam4R0M5g0,g'kue!TF>k&!1'qdAI>S;J$TVRa($JnVZL.3SfNg:lYc>UdTV$Za)hoIDMBOblMeQn/DPh_);$k'cL%g%M<W-hk"[hI$,ZY+:*NP"hMqO$'RT/kWXn<d5RZ?e[l&q9C7o]'9srj>A14)=N+I=`;eK0a.mp(_5YF#h*17;ebkQMeEs$s2?EPdm%S`jNp])BVA!iXqi7J*aAKUTM2MDSNXC)gj>7pDtTY,PDc5r@.!n5r1E[+;Q[*>i+OR#JIDR'ZRe^Nm&FcVoO"Fn;-$^Ugsg]<g4T%+FI2WC@?E!<4,fs'%JQQB.'^m_-)N^GKb@I/>GmiBc2Q\Jn.ef+^il,e=f5%@RHMtkc>(05cWU'ImN:l\nZSY5XA0aY\c;"V6$dQ%Q![&i",*9aa-\a/$9dep\pMre!S,8MVW/\,gdZ`IeC<l\#DEd1Q_*JgVEblN&6aaOac;?nXH5'r(RI)#/Wb.WYhMl4_LN?'N'amE%gtW0%CP&q&2SJCJ1Ip/*4^Y.YRN4+Q3ni!.fc$=JYB$-*[CIm7Zs+Ya2k'$CQm$OHbj5`M-(9Ps8-'KZ[O.I$lM.X(1M017keqSq%!\%4:*Z5IkXH9Rr4gf?p!/jueCO3YL%=P:k):MGg3#gm'Ua$<XL,#OZMWk71$3YB,Jri;Md\tIR(TIBi&8>YMW;>YENhK9*5g!W\%6trV`C5J0L&(_NCgt/9#ON-iap$O7:UsV/gC#EZ'UkQT.D*TRb(aM^IG()>bNjQL>;eY+To4CPbV%qG7kinOC1dg!Ph?MR_/c*W?%eo$i:G]T\)loYk#BHJtrBh`\BF>IRHUFO\A[oSa!WI@L9og?X=*\4$XU1^iVcCDR\VMQe3Hdb2:%aac,6XL314j,U5B>#>g;KdD.%Hjh6Z/8Rdu8EW$j_*4!98=L/gF=(/TC[^CDcNLis1ShtIelpK7WA##h>.$]."=/7P4ZomAeKQ#IQlGPjZ?]BEj$PYAM0,tW).6F>%5fU0Ek8@a'DnOI!BrO'UfJCjC,+Tp8.8-I:mYU!Bs+WsLkPL(7V1q`dUk<-oPc+@OQRU?smo6uX'T@qkm<$.m<bmCG7Ei/]/=@_G%e!E1$*H1M9+U-o3\6:\!g"4L"F@3eHdY0;_Bdpib,9:[)aYa+\Nf_+8IXPR)kS]F-d[Jjc-GMRhp?Lpj5!#tUOZ"/?<k/UT0\+ua%,IGJlg=C,9<[s6".1,79fOR7Y^!(EV&Q3$(4h\Fu2NBW'Ar@7W'REA_F*5@g*_m0(!MnNT@o"=^EeK+Qf[XfBWG\GJ),D/cZ.Rd6%,->lQ"YiV;,*Pl[elT!]h:2s+%mLG`7S?3Nf\uR"A#*DkJCf=YAtjbVX+r/`h).2PW,nkoR;+3NN'jC/=\ksZKsNSop*P<s^Y6cc%Hp5t0gXM@f1@Ls+')U8(T&Z_j][(Bh[(3LfS$mT';P.#IJ,+.0d[k-7T8o96!e]=BoCC?ZUK&HAa!R,&Vra((Qro2Lf,gqeYM20N%l?m2>-&rSTV9Q?t[E#15dH9[_,\[-u@OsUBEieVQ^=Yco7]g=3>WkjQg[`esj"r!XejCbVBfX52lUL0@CJT!Z*h0(@)e$(N1<8P0%q.AsHMjp;Hl_dAsB#`utqGL5Q=P7b'hE*g$T/'@%R.\o<hqFk8a2jpp0\3YXFOF=XVo.8kD)NALXj:RF/SeG>2htN2l#PYUZu2g`%;gu;me9od\&`-DGL7dW;&K"J'A$Z(OW^fiHF,fQITV$roP3Rm`"f6,frEW$3d+^8ehBYHSIm:T(Uc-mj*q!baT+JZcod0+0B*:Vi%%AE"068YCUDkMs@"pNn_nu^K8l<%m+K3/cfqRgT;Vtom@<("]^=5k'SF>SF5XJHk4*/g%3N-&Z3L$Kfn1(>AuS1-`[!l\rWh$baZ%kH1Pr+-Y&D?7(JM/<Fn[0[<h.5WZMbL:#*_qcXZXd:RgG87A<(M%mrilS?n[ZkdA&FX'5Qpg_NmSX.):/>YY$W3<C)OWs7$5t^I)%Z5_0f:E,D4-qRn;U:.7OUc$PecOq\tr[j4`GS#-"/#kh2mjg3+CkK*mNjD1^]mg,^'I?>F"FZ/p("+gPUr&ON.;Pa+UX3]lJ@5qO%Dc+5o-$Q>f_s[kk%M<;lYV/%.@\p%]i1NO"CoQ+iAo8G[<_,/h)l2[t:!@^:4Yn7]To8,eN1htEeV]nLOVZ3FOLH[7"RA<#d<24g%CeUBoJ>k)e0?q=Li=)RbHjdj)5m1USW$[%DEWl;C&+^@/-5cjX]Hm\!C.@K01<=^L/dhp7*mr<Fh<M2hS0p$7H-E3-FlEI15\TmM%#*BKo$Gf%.7Pa=b^Hh^kE2Q:.No^b'*mBD]=C":t_E]^94$+[)kuZ&)erh;GLVZAI$arIROtDl.$iDlcc+3&eJV`DnT#cG5jV#V@%9Llj,1LW/D2X;Gjf/><bWIOCR*#t3RZ5g]8)Kc07`t-JABl-OBhER7j)qf6cJe#e]8=iONRE9*,gPT-WN>4@LG9lNW_jH:-QAd@1%HM/OcZ<Xg5WndKhH0!a_o"E2Z1X<1XI.KGO%+)_U.%eRIB9QZp7#\-9PHM*fHIN?0jS*I`?H5<bAA.8"NqhnE;c_2U#`PVW%+OKR%j`7=$kk:\cKm+RGhCV0p`DUZj>]!]h8t;"o(UR=`c/-(`eN,`:fbYT.Y;Fh*3FkEH92:m`f"FCkJ"U*dI1pU]/;1]`mL[5jS't!@%1(A@EVB5^TZQ(<$NNAPUA4r3B.:__GFO26=9ui?&mPmu+QqMI[$I4M,]55\NlXD_7c"P\MR9oAG\sI]?V.PuB)+INoq;nl7LH/Pb%01cPG71'^5Lt+'.<$"g,CJ:A`09_E0R24:1ekIEJPQ!>K<p<']]-"'kU+?K!^QEC$./1SpL'7C1MB^"<=AL4rbd$G)oT2e`ZVc?X%6L-;MHq)BUD@/gZZXi!gZGos0^4?!Td_9s%4V3NX;jT;@8S`RQ8P7Q9OT[MU6B;eSbZm2sUu=%>c5O`!nLeo.=NRC\4FX$E^,R#s%4(_34m=h6K7ud=f,["k\qQ.*SR"(H^R5@A!-ca=,j;>:s*2E8F1!(t>K%;,[IU1mChFf+4@Z`g#a&I")U!Xf]O'.5Nk4>7u<UJGP%[[NKI]m:X4qcR(gWiICTAUuU?O#?#od;9t;<B8u4rJnBt`Z*9kA8HP>@Ba/)(kTIQ=.%$.:.X&0LhB=NPoGla@Hols`8Fkb#uQ)n%8j'(,;iQoJXJXXF)CUTsf8EPY4,M(K9f<m2S!lIu4IG'u+g%Y1/Jcoq4$d8>e2Z2q(0W4PN1'OHRNRNBD+bgd8s5u%c%t($"TUXg%\"e3*M#pd1HKo\imoqT=m[BR]EiuZYP0318@UZ%K9K#MFKdYc5QLn_FEj%euX>Oh?fP?3kIGeTIP6:&&mP(cA)aA2("I[6q)mcmb%]TTBJA!UP\PPkZ-MBcm"3\a\k`)R]bZ]i&Y<kj*@>@^:c9S/d5dL-t!fBT?A%2tcA(&c4'GE<tfOHSGbfDG$VY#Q?$B@/TVZ^::g%b)UB4)pRs!o0,DL9)=WIe"J8#fk?dt8DL'o_eAq[O%..cdGjR8o0.[VCTX0ggK^@*#GR.?p"Zgof9E<;LddYGco]_Unhm)qJDQQo%J3_e/AMOHqPKgL^jBZXg21p-Yb3<n\#[9e<*(WJ_'13&:f"1VOOrMd&^^=8eJe0kTfrHU3]qd/(&#be4k8dGH)9@iSkj:\;[#S2Q%XW;9?O&]Wtk?te/^9#<rdrS%JbF3LmOY7*/WphY)1$rq4d[e]GZ]7Bfgh_fAG*2A+JRN$S2'98M3-/YLmpKY-%N(#nX_)I+7OQ*n%3f8:6.l64!OeT-V[a2q1;;8@t;m`Bp*IT'@M^9%hMDG3BYA^o;fWA,OX]2h][8Uu=G&I&M'jfo-iJni*Vo@UMYK,R>_Q:W-UsE@]%3)-*_V?jN*V!)qkE>NGma_&r@@ZA^NM1Bq5*O/N.I[Y".Gud8l;6J;3ftM,V3%fp04g3k!b-k:5oS/U@Ep1?W`WhF=M$&`LC0t@Y%,Lq.kBToGcgWS@WUZPCJg!>*!cJCDsgc<#kT)qlr+)A'Y*PFqk/\R+CX#O_*JG*d\*\t>QR;V994QDaV:6h*aB!^:fbg_(n_"Q"7%e1fV!)mAIn_;R6$N+P\jb$@<XK#XmY9:[P8=XSjAFrN8Q-?E^+_)1MpCTgL2o2OD?->,re-t?2&EU@nNBK&1a%sE0a3"Mr>Z_OH>%S#o2G>]O+KaLg*6>W(kT\LiKHe+^u!#C=V/pP:I*'Zl<I!OK4g\p^e\A'XgIfVTBl;ld>&*:.PGD;*4KhmjI(A%CceQ8JI8?k!,o%[^OP^'nbm5oC'q-;'L#0cL.g.EPUr4aZHtdhX]aYb`'@RC0*iJC(6O$2G%KIeu9G0c=+oqcbMqSYJlT:=fG.eld`HU5eCe";*+Dm%5uS`1:,K_LfaSkS[*PG4mBsC]R$/t:(L3u']UX1&cg=b/iDf<7V68A):_gIgl,Ch`P*Sfp4>+'sBsgcTQrXSV1/#tp=rO9"cT2g*%AETCFhHqk%V#ei<=(P6sh8e?[TJ=@P/)/u"O,MQR%;^tC(u1_la_JXh5$<"_b',!Y,O%/AHu$,:DW,'?r<1]C^.olZ,akh_+JKiJ%K\]s7Bi8>'H&stG/9L(:ppKoT5!0XP)XmA9K7f<a;TH(hL<fc$*RnTrEJDd<"<G3TAaa9qb`JhPk`fo0*m`3dT:hBDV!dmaSRPr"%:XH'YP.dE[ZTgaRSeg,9)*7X.F;CbXGC5.Jg%GQ>H<P9+BB\ttC-9N`hl*m51N`=<kVO[Rp2l&7`5)l8Y#k&V%%[>'3ooneDFh3"%$.P*<*;&Oj^g!E6Re?AV_u\.T6LuL6+4f'/'YO,/^k1Z#(M-sG_m9Ea9WoJ/.V*kC7Vfd)Tc:27YYW@iT<`c1DmI]*-sPg&0\CV^%B7/,dV28QrAP&rYpWp(S:Oi@4m\-ud/_D-YeW=<ko!(A_EH@`sP+6'cD#!)\aIMW]-&2O@=m31S,,<sS>i>Z_V)>K7><rr6G1Km2%kHqML[97#)bB0(SKs'fj.nJ>g89idhGomMClDEDj1VN:^gCBNdXNnN)[cD7PIV0#uO=eIn(6/G.X2ZVW\Q*PE`q3K>R`_1W=L:t"%mSG9$c,/<X"heZ0*/j7KOK$J:doC/;0TYlfH"XBF@$]&@[PgjSh5OkM3+U2'pR=M+d[f%LMA>@*N:i@+do0Ys3PJ+'Qh,9G-9I1Z%n\4U9?kpu%5f*,l,[%;@,^T*0*Hbt7B1E?K>+7\ElJOZa)l:kgRd>TLI(7Oj_/qYck3)LhSVc$N0VDV]FEW.0NS,>7_0b+22ca?g%rQ[B7HY-lFFL?GWp5NRj=!:Q*Qm)!(m+aL8FeXID9,65OR(77q?l(mt:+*YRhQl-d3Vt.2!u5\dJ[TT0L.&d+bjOE5[e9!q?g9>J%MY9(Ap<6gI?8M7^bZ\(_U>j]OC4MuISoeU7.NaqV3's/>gN2BNR)aSX^a!`^k.W9#%&_Mn#B;ge,H'ALV`/QqSdXnHrKSabi6%-#%fDC[WX.B9?HXGJB7?b+U$i3)<MLn)l=d;uijamhk>H>9,ieE=Ql6DrGT(gHqpU?bsEf$m#m]Km/cBjs0`dsVZW6E?(N6'(rN.:;U%b)21fR0+c2hO*`%G3O"+)+3q;F^R\gf(k`eA+.\Y7O5CM38A%km,",tS\]#`bEnZd,U/%Jo',jN$hmCj"<'F)pVumI$qk2"O%cpa%Cak_L9c>mWCKbOFUW2oH%#drbVo=Y9Vq<5X?)YK@eaMq95:W,*SOY$=E91>7`6MI^C<-&roZ6[F^r+C,3#dneFA6&03eHSjITqjA%mjn[?ToFkN*:8m!DrY5<OG5[A,L^@lT/WlBVR(f3ai@3')8Mg*jIEe,[nATnZ?''m6bTb:0K>B<hfpj/=9`R/r.Mp0<gX+j4*B>r%59JB[3XrgnQ;/Iag1&g>Td1.@6YdRH2`uL^`*H'#=4\c5\2-1LDX)SdIQkOaprVRh!b6s<eip]hU_=HQ@j[_ZCg5IWobJKA;P-[Y%kb=Q_Hq)nmoASt`rmifHA*(Uf\:8<aq/A=fVk&41oASCmW(rZi(ZP:%7bgtVC7'JaAIFNh%l`]_A@D;QSGQ@5LmrNN>g3L8Z%Y,!%+"k8R5j5A=k/5/El[#MkAGL3CVnN9)`GSFt.fgt=3BL\H^0(9"aP@UdOe!Bu#KB1"[Yfn]3VQnYQo_o%(STrVOcUgP%(t/cr<Y.+%)<WK5_6*5sr8a8N8>ki\Un,o^&<lDa42aUd'>PlPDeKC1X+)#h2YJtDo_*+0Lh^Ug&N.@opGYjVT8##=$;IBh3%W*bMJ3p;9p9NW%CE.Kl9%,Vu;&OKq0[Ubf)YWQ)REj=2OJiTA9=M\%L?Q"e%du@Cqc=UY2YbpIA/KUYQ+fXf!nXIQ@$4T0`8qW6:7pserABdt<-<(t%9ZPd'WTm`h,gpiRWTp"FHKtXf5&<p())!6-jbtrm?d9oAp#V,f;I@]t,P>XFCS42.Zo0uRrRX;)!=PYIQ>4mQFq(hW$D>#K'j/Xn%3$]6!U7oTMesRWqN]>V6bSd:p&]_Vo\C52m<4J6Cb:-BK#4=!SRL1uEn'<m,:>VSu/k:8O<4G]X\D5?_28V_HK)Q_J)`7+tGIeaP%j%bJJ_+CD8"gOaUJWUBt+t=/1f7mUB30"HSfq$VUfftYsh,_"!%1?IWr50[-:ImmOD519,7'goQ*r%F=Z"dO=3861GMW%q)=&5FS%c`b!+^GWcP.sjLqHGA1&LCMHSrj9^7_r75Wo?.BpqjiH:Q.o(nnK0<^=^CM!HEl%3qbr`'G5>DpaMN4BL6=`e?E%IgC6SdCmc(H]%\*g8\Qft3ff?u<JRQa=]G/a:K]0DA5$qb\i4Y5:RhdICGs#bTCSas]J?l.AlrI[BXrB)VICZCiXW6`HRp%Z6BL./A=!k/*o_QiQD%4kX[ji(&@3f8!qi-/2GjBY[,ro,!u>Vsaj:]8an9qlQ@aC6RIS5.ha-;61!!F\j]!GA)`eG43kpO.Q@-?(W56dJ9:#<hDllH<=<7%5Q)Q+@VPH,kMt9[NR,<<F*ob63NU*qli#D8a!75#^KS1SWY:SVhVP7MU<ZE<G[+1FfU(tiK<$9*#e>pHfS1'62n/*sW_AjOK0-=)%!H'91B$mXBf;L`9".E2M\[l'*JgX;.gE(K1o2M"9R_2:a=]CQ"l%Q`43ek3lT<;L<g2IL]l^OQ'g`S9*jam<Od7*-MpMY3(4n,TN%2mV""qaRuR/?Le/k#E7(5H]EuKJ0:7Z=IITCWgP*&Y@hsA^e'V_os6mXso\iNe*fk2I0853X`:>VX&0AmH&NSQ/cE(9q;#=oeAA\%gbR>p\gFjn?Y5d%2sQ-ZfjrR>dE'dLdtK-&IIg:=ogIJT9n!k<K:QR3>uN@];f'd%flTrC@?d68PAIh->e7q%'rK-NCKaoZ$8\`!%\u$g:I[On.h%34nL=pZC`[U^lAsuHG1k)2M9T>N9f0jBO'AcU>FA8QcjB#*D9fIT41X;ke)952bL;Q#0Meou%A!D^pi2=erCW`Jh%W0',P2I066?1XUmdq$qHF.7787c[WGOA4=p?uUMaUtKi%8+tPLro@3ndl!OM"6][%flRf^m(mD*>A,@c3#@t0E5UY!flYKd*S@<<%JnZ'?!7Q/,5BYuqi4Z>qoWrSd7(STX(1Po6)7I;i20,uql_;dr6Yl6dld_!c_p"ua>uNB,J5]<Ye>9/?`#4tV<jZ,P7Ynk3(A2!<%2QHFJd,1XFFh-)PGuTtO$XiTYB1)IDH86#GWtQH&dr3951?8>[os=Y_5F>D-.fQB+B24c'RlD=$X>5!#Op@E9pW&=b*4WkE.WdUl%R6+9\E`=7='R,/@aPihHm\VUXf=tLLatT?]b[&JgfNdXCO"o[\\Jm$?Xhp^aPe!:U?FU75h"XJ/\H9rrKWDBFL,urOCG*$:'l@B$%58YFAgb+ou]!aGT(R7dA*_[Dt=A,G/QrN/@Pq<Bn9c!UVFX?1s[E3q>R:"S_F?$!al6$0IMt`3n:Xi`[.^jhHNP*c-:\8XVKJ:mi%h;EP$B4K2uJN6[cN.qCCZ\sRl3M'(%eMA:;"?*a4HsE[!p\&kI>10rD<bn/1T+\/G1lG\B[#42g9rC^&Z<!)n88L]2h9a6NT5cF;%LS^hrc1gN!$uZ:P@Pb:YCqHF\XBhZZJZScs0caLHB2H:nTrAJ!QSDtshNd'?HhEs)^_l>Q5Gl^Si@6W.HJLbpoCr"!`FH1\L;1L4%Wm`h7mY@9mVaqi\%E?=c226;/-8GuoXX6)-h\,F9]F*+hX/=GV0!070ASd<)#)oHN#4B5R38qR#&6XRPGalSgf[^-He[V(mYtO`"%3?k3j1i-=RY#X<CW@QbXbfAiaG@P5K%^>3<YEUt;5#G7T]]l>&]u&S^Q1EX1\/XiT-Xnm1E#7fQ2V5I.3jCSR5<Wk'4iYR]Y$kqf%=SIhb3Ot!jS>LX'OkB;_[;UPK(oO>g+'2YlerI?)MWdb$bp"VkqU;X_fUALb:7]sXL)auf9O`m-8lRE]b5?F.&<1C$3!jA-!H][;%&:4$3D"'JD,)rR_PueaU"F@Vjdmn&(9bY1la0AcQD%<AY[XAe'A^%Dg<r5K+b85"RW<8?Oa?N/E'3h:f[;8`H,,A:KJfNC%=*pu*%_ltdNUZp@,Fuc^tI^^p'fL@+S9jR0ag1/LSn&)V'mE7ZD@l=O:'O0\/DS/#GiJVSb_sC*'ma9(k@]JV`3NcJFDNN#AB0D=$EJ5a!%;socMeJP1u9QgiJmJUqtSi-I#9kjUtK<'l-oJ!E9g&0"lkNDH'TAM-fV]EqIlR^8`51n2F[9)7F<B\r`I$`*!hPE2UC2n2V>e.2,%8:L!!StcQk?\e$cO.T>#7<R5u5@&O1I8H?DTbZbIYK$RH=rQ6enT_i>Mt7`[ZE*kTP47>[50@ZHYJW8j&,td`4/[H)U\,nFo=p/I%D[3,9^$@3Xao-R,;q;P>;q%&9*pjG0_TT]#^A7?jcgXfq9@VS0\UVEQ0?M"j-JS"W%SA[uXL*]MCG.j\b5M2sjJ-p^.g&"^qYSJ7%oAQHLpJ%OD]ff`h%V"qMYb'^`=;t2/R]H(+c:2/`8XOuk%t%8=p\=YpS*/'[^-3Y9q$0$-qIfj*Jl%Z`k<>Zi9jDpeA[/*nC&9`k%p=&'"%6$<V.mgI]n[N`\'RZh-=#'S44N+#26S^Y$k@X$0?VO8c2hUL&*#[kp0&*C?#;TFnQCWpY_Fn\4>TE].M)puAmBd0c)``#,%cHRmjD.pl]GZeb(A+;"0lEA;5`)^L"59H`P14!n1s10eN,\h9/CXh8Dn?&-i:D8K[M9"[UJ!<tnZ$O(;>\Tq@>j\Y`e<d5`53A.g%;ta5r-UtT=_/@LK)sR<%e+U90L;OcGi4[Z^@s+pDP\4b92pq&qr!\%VM>^qOT@RW34Q9]5X]]n70aA7J#XbXI[UW"sI'JgG(*jYA%'odFZO7t(!XBE1f0"+-UVlk7%<g\s2?4FQ3B<48eG*=_lkr.H8Vr!e[2`PEPcOo+'Jf`iMfcGAUITr/0T9XR:Qhpjj52R6'lU!+K%"T.c'**fCcgdJG,B2/)UXI7L#'l_[Q$Y/7"NE'(k8<_>:g`I@l52$p9RhW"!ogHU@(`)6-lGA4RS:-\92#_$1+eCF.YO?jg.UjXf%)P7i?O,YJEWf#(e;Y>Fu4+1:DW_ST"jV`^'Lm-$P3&[e.c<)&JCg88)dtJ$2LJ\PSeLqSJ!Og5RCqb[8!/ZO_l?TFKU+F*g3Im=i%PK0`&f4\Bsc2qgO"$!$4fn_2p[Nj:h/)!#lE.B.rb5iTOAMZ(LE4"7.\CGu./AS\SJ1^N:"&@a.k5a5eppe&92>bL:@R`f^#$#3'%D,J$U?F]6WnoY`%=EDq,jbkUorO&AI_bUnX<KrR4\/SNNDcT=&l>[ViV^PnN[B/$tj_Lf%3CQfZ>*E\[\&?iR[qA*DE36:8bJ9Rg%h,"4>qMgob25@dWii7IVh$k+aqFqW?gV0iJd&ajF[;8=aopbeqW)e'>7c"S3PIc4\X86tW85E19Dg9?tO1:[bY2=2N4c1ANU9:-g%?=R!MHEH@%lhV'OB;5<j):\<u?I`sd^SS."2nW4e.Y+n.lSlIDoT^<Doc%5fYB><ULq8&Q,L5R7M:5_"4h.Maa;CAGY+Nodl*'A2%@9-Q=?,,@tKu#]ENE=_MW#`9;UHaCBI`'K0`i7!;IEq_sFo;H.#*h,M4hbq%C,Y149N'J\8<[Eh4*n;N=4_A8<PK]FO6s9lr]M5u%iOC[5QIrFQI`&5_23#d)Fo@$u>[nN2rk+"XlM<B_p^ha,D,siPK4/c65?2"(i<NXtje&QU?f6*krB<e9^:&:t6TeE`f(EgS14qVg%LJ_?liDbPCEuao(oc#RQTb_K,K=ZNZ2!h:.BC2rA9uB9+/!$6d2GnikA&cjuFo;NRX7%CK8Z&2`lSk@lhR9TEaK4QmeFabeeSiZX%HkYqE,7CrpY2=K#q!+Yi2sO(Df<:d")cu]Jb^>qRY2A=+fJn$PL7:2N]BSs1rHu3qX87g"CX_4QIcKP':0Q7fGZDLmlLD:>=q@gW%2gmGD=7tkf4Gt%0k@o0@^K,QV\#AUO]W,>&#C_iII`&5_2/9B&lM:snl8R^oX7ePL6`^'?Hf:j%ldsR'3FuL2JKritoAg$7:TgkX%9VMb^f(Bu"(udS7Mn4AT%7>-T2cX.u5#t-QrVB8Y-EQMlr5>Iu>s!%3^Z"^u[HuV(lhWJXbREI_KQ[6JC\,j0Ph>YKlM:s.;TRjf%Y-),;3Q+u1]<AmErFMX+nKq&e;4!Y&-2iB(YMP@NGAtRKnA+o\D/m2Mdb9pLX:G\/[6!bi[.tPJ?C3;XQ3:^Ko:6tST=(4<k.]Y'%=6D79fm:4!EZVGt5=:I]iTBCholO\lpYF]cr5+<<o9ZU*g[gb]4F8iU??u6`q<H@mNTKj!V`0rd++1bdCd%W_-/6u$c"-_-]=Z1U%Ps8'.T%S@Po\R5E802+:h+aJH]p'njp2?U@\bkinccM)<-XW&R4nU=Nnala6jQ2@s\!)#s^HY9GSTS9cqtF,eOq3nO/gMOA]jEf`%IC+=bo_5J3`Tch5([mpo\T7E+p\CF#s)bSRq8[)jIeg7T?<iqK\@]#-Ra/e0a%M1Lk?klN^4,&%FD^naWqRT@qXEiDH1(M,K@T)H%gH1bQT3OH/Q@17@V7VM$[oQ5likI/mbM/EX[Q8p7mG6L5j)5I#P.BK6l';(@9Abc0q;ik",UrhOod'4YhX\'iX&g4-7Eg;M?;*OF%>^TH8BkO-jfB'%<)W"5,X=)cK?Z%68cMuNWrE[/89UV\?3V<.<osIf"7<so7'">=K>s&#`p;^1OcM-.2bd/Qs=6nIf$JUun$0uNs%<Urg1[M*pChJN;/g6f(RI-/ShQ`oNf=$N;B/7=Y.IJi7X(=h3.?X:;=*ndu^eMc;o.Er3h(KT(ECs<rkh(39ADB8c@rP%s_jidDA%[oX@ECbOYYG7XD>a)AH]QejiT)82BC%<DPO(t`eW35<V*ch75'Du=b&0#IG?9E(hXXPe;U^*"u,F8%G&rIVai_-^:1YFF?#rn@&B%rVZ*;o%&_#GHj;LZPtQHDJXe!\>GFsFhQuXqC_TV\9Q!kiQC9O#IX7(au/pKRk*G.T\b"\oEUVcp$JpWe%7j5Dn:.=8bdr9r1,?2%f[D/BjZ>Df"7P<;mqf1N(;c]bU'A!6`gU?'cJo%GK3QVR<6&Y@lY_Te0>kAA<`p%sS'1TJ$N+C/i7E=VDCt\%WCqd7\eNn_Y>?)U%!1kOIAh3Z>1]I6.a_!K'T6,AVQ7d9GBN(;"mG4P"KWf3lX7i<8O1Y%LCno4sX,$/1rn73QCkE2'EE&M_Kh2&^9I:PD?>I/J+T$8_%M/8/"AIFMeFuK_<Mr!]#2K.th]_Z(.X*O4+f(3)n054ah)fI@DB1ZDjGkJ2FE:[g_rY,M&H0,:tK,j,O]c]3T@?Pep!INNhB!#H-%cP$9Mn_B%&q?`Phln\UJnN+:?PC=#nfQVhJh5fkW=R!X`0Zn86\2+$b!-<YSdHa5gnX!VapiD/[mI/?(/DYR-YQ32=k?;$$^:-Y=%!F<=F8Fkc;n?\bTr+59U0+:;)K2'.A?;/qq(3.pnT5AMC%nf"O0rFd9ha:*4\@][(q9PmEoIKjGpOa:g)pXrEmq=Osm]Y":P?<O)%d]9],DlLLR>ZmrC'260Cqb>?J(pHL@=A&KUpkN/MMLi=HDO/58^iO2fqQcKRmpH:e_:lW;8]/%DK=?3FXTJ7JP5Nc2eEd^]<&$&o%DLVA0lZ6o+5iI'G6YAYV9#Y&JZb'>&c2ZmFbt<h:()Ngd7H3+cUN:JcQVh2*YVEEVYI0V9n44&8j_I/i&@S5Rh0tN7?9#J)O.S$t%",ocU]CAQ+\G(0C)\`"X^:Sl?Mu58)c`hfgDKJSRQZPDE%#0\De,."`@L[VMnWkQlUn>FE-=CTrcX4>3nSYSnO=-Q8:J3@nIudL?%^(4aojmFo'eFhI_a'c\`T)Cu!4l&0ori8YS`U7MM?!R$8rd&kKgAD1QGSnV+q`?"YJq3&Hn-@L'N)qK0M]L5=G]<gf-X?NDp?uY9%g@kMnB>N+X#*Y_[^'(oi_RP+^oQb;a\U:Y4!U6eRn<Y$*M/*I1U357b2lG=Vf:a]EC,]-jCM7poA2WHqT[<W4E0G0%n/".dZ[UC3%P^!ht89u*=,;?/>5>9WL+.hf!qRla1)d;'#Lt[85$NmZ@GiR&\!<[?5cgZLa%0Q7!4qMtGj@HqK,d&1Qod!iQ)+d"b@KP'LGq6uk%M.+9:GN"P7L>)W\DXs6n)s$bW@jUbY&2X2THlXmZd"Y*bhu9]?k;cQV`1?i-!aDRIkSm;TeEq>!p4I-Bd2mR]kK!KcMQJqMF*c,]%l<&H!m_c_jaP4&8pXW!ghHSY]H&G6dT(D0tB.)*1LM,#<8+Z7PG$[Rtn*L"/If4@,rVAAq[e'HYr,lpB\hRjde#ulnp'r<VHXD7m%^OD5Wn"%D(:ZnK[s.#"fjn8H@o'`2778<T"prcf9\>_I"Z&C`Q(i)3cG="b<R_Q/!_,Hq=6h=Bf1LS,=)k+OIS\]RMBLDAm[PR>P%%DSV4/)-K;_XO,:Cpl,umugjkB<]*P[%[:GgDPn7P8bFFSO)'O4DA?$Z0?W2<dDe*C+T6D5HKCJqS);Cgj9m[n)q8thp1UoKQ//l%!<_^JRqc_aQg`lXT.p2CQg!.FB]r1gouaRlh:"D\3Bs_*N>DoI3qP^I(jVGl&Cd9Fh:KrQcl>At2^,B%5K^V%rpX<XCa$3LS:#9<%I_aE=X_]V;nsGpDGgLt^s$9_r;-(D9?b:adg5gpLU>Joun]78\?Nom7f(2CurDj4drq;Z16i?`:oo:bllK3/aVZ0kIqWI)3o^V1T%0AfOe<]X;DCU`^\[<qK?a7ecViUateHZo;,_4Tc*PI%eMF)/7VD;Mm+k-kj3IXF>L>DYt92dF?LAFXe^r;,.4L[?2GAX7_0a,[Nh%=T<VdkNKn"T/JkqHueQ(b)(FgonIcihELu8%r<>*Dr,oc40XIg!h(N=@7Hl+h#=4_oDS+QVq4/ir[6B'YA\nDrI"SP\%d-,5J)HT%bIs<N8[k>:0AcX:I6h8%odkIC@\5PrAr"!9f8G@-5IY!<+24ImDn`jToMtEpoCKM^CM28ehd$'Wq.aPN]/ot?BC"[(m/>Jd]bAc5%04)?*Fgmb<"E[uJMC6B;>5iF/2R'mh:/i:+pmJW6-7^V\7m%et5_@g+j0Ifjg3+[VoPd$o7CmWb/uZ<((W7W3WQhWMn900=eJhVj%o?FFbD0q7#m5ug1.B/ZJmX(@.P(0FU55IJpb<PWb&,[MMjWE?K6i$n5jh[D`e'H8lrghao\BGUO@(V>GRQXi:J,#a&q`f2m/"iA?%A[n/t8p#9")tso)'Mm>m2kK$4:F,='?^?h\:O)T5K+$h!?*mZSrnq:>K@T8p+'G@m*%(HsNI,>J4L&E-T'R(m]Su:4H."m$SXO\d%0!/m\R62:E8XF>M]]pgBl,HTpbN2qi#QOF65I`ZP9O9R:03$\b=0,S?dRLfiGPg*5MG<a>O/)ru-b\hS<p"$V(CooHHX2*2p$C"Y%Dd0D0n)-h8>Qsqgp;YtdbkZp`CZnFTqX#6A$d6^n@UONZaX1nT?`lE\lQspWoF?e>]MqX_]VL1V+8AdS5K.N*H:[GBB\N>d3QAG@%o'Z%/`N>IG&+=Ef*M)W6!`7YUjh@"%TD)-.^TL80$V;!u?iI2\,Y_AO7%Ce?,Yc@$s"EV'J$+PMkg@LYm4>Ip:o8/#4;(9K_UeUs%a]h2o,Be=68r)"aq4Qm>R\)fKr9[)BoJsSVjZ?arpXZV@bPepj>T.,]P@ne+@IVL;Mq),LH01"Uo*ZKRDEAI9(].Ha)f(%Ug4"07%q/asn$JIupnG:ucl(k_*lap@HU$-]+-^f/1MdHtK4'haWp]O:gCY(b3nOXeS8G8k^U<sE*bQU:-:?Qd5:+(&jiTVN_J$>?t0m"[.%dC?j7+Es55d'\f]c<i8$QQA"j4aQjT&mbpV.!:W`m!JQ7Z/%9M);Qkrgf+1'c*DD2F\:iXos6*<PFUhrmQejPOl,&_:r\m@'t#%;%%/\G7kcPCBn^"%=QWphjZS7&c3k%4W)m1`p&-:_AUa.k1X)1uG1=f!*pW?Ya$$jWFa?J6iboDY\&2u&-$d5Y#dZq&3S^_&o,rL"W%0+jh28;p`cE)5._h7:-05)"C\-(Y5#YiM8FY6qGsi]J9)I'AAW?l5d\Hg9In]WlWhPMCkbs':g.Fr'Kkm4XphiTTlORcH:XO1Kho%,e&QJJ(Z*6(Y\dMPItdmruI;n`oXc1HR:c<Qe]3Mq24pSMfcDm?@7!,AcD5YAKDJ6G#%U[e[G#Ekr^*jfo;>&+8N/9nDc_.<>Y%/%%+Pc3?@sJG/\SjoAsk!7T1u@34#G\GK^=ukeXZq<2D?!q?ZQQJIP9ZS'i/WuMb@_,f.H:ZDTuri4fp_\q.0<Lor#S$S@$$qIG["F%GI!3D19@1p0Rg*TUQpOeH$e`NAS:Eq=sekF=Mk*MhRV?C5i9oef#_RhpZX4[!:oLGm*AIT+Q)'9r:96Np[LJ'V]@Y8s%VFdpog[Z%<*ISDGn.UMM"X#T(?sL4[5?Jskq)2)h)[^2rU&P0gQ.PZVuN0sK$^QR^"n%EkH<&!Zhs7Ye[\+^9sP:*_k37AfsD8Ah!ZM0\);b>%rho@cF86@Gp(RFN%0&u3'ssZM;YVWak.Z$PgG4$M5OcjEpu,S1rb#!P4e-lj/t)TqKV!?BA\*THq-9fFDN^gGgi:-XZKc%9T$I!/%e(qrMru*TkDQeUtYObQQnnr*L;p?mHc+SF[/Q[#&4,N(SpJ+bhDQ-NY-RlVVY>T1($!f%(/7:`t<*c9).U\(r6tnpWDOEi;,:(CS%@d]m60\rjg<*NNI9/Bl$RjKp;+c-D$d"JJ'Q9*rS>#glF(=/p3]W;B8<GCS`B675<.\5=1khm%,,lo?'-%)8qP]_m>iN?sh#q[MU%/!)*@dZ!6YOi9jl^ip;M&XI%+r_rsDr(m6T1.=4Dh^_SkP+lL*[u(`mSotij,%*RN&m])>:"?@$,DdY,MC';S4/t-tf5b@8OTJ"<%WjIc;Rb2Nm8O2"39UQQW<%)YpiNZ+OLJ2E9&jKK0Kg]>Do7C?@(lCn"80g;ufRX81rZ<(tTRR,(b)3#a%clhWX;>A,F<efJXtC,=%7i.R?`+11;>`i#T5e)_`J\pQA!^n3@!@Whq4)M?%N+bI7WB2LF$pc8NLH5)?Yfmr1&R&!c@d6LP<MefC`F.8-5e\%EH!r1K1Y4*(%KGm/$9!i'GjJD7'WY0d,'SW:<PR<fd8."9-\R6#8^FZLOHjXBm-41nfSs0km>fXD<0po6qE3IkIlYqu$>b2`fSTUtYL&\s:Ra?PM%k16,pSUNZr1:OcuEU*U(`Nub'+&Bj:SJ<h5Wi?=<"/^47T];o.-4jRA1#faF5QRX&$//[Zlq,.?TR[&QMi(PAM4$3,Djm3LBXB(W%S(n+3P0UE/R4Mi3)jh\*fO6YAUuPZ>a8sODQn$,&iX?BW&MMd^R0.L28Mr((79<RC%R:Xq%C-8&.Ud^()).jtJEL&^h_ZH,\WYH.%d1g0RRt.;lDOM=j['[kU;Ms<2TW5X5*Cc^/6>Dp?:f5/ljHU=YPm@hLI>]gA:q[_+i<09an6?BIT#2+M3a-A$96`&m@EDsR8sP]\%C7%#)rDbj59HpI8B`7Ff;SY@m=]ujs(%DsOR,g:VDF@ltXo`)0W,S.9.NbmRFDlE15TQVUHDO6rHCgsf&<l:B*I43PMIpXlCKa^L%.goZjNQ/4+,j2utFtl;$,\96.(+Al=I]CKV>2UhI>'TDs=SdrOe=g#-O(dAAD$Q`0jjs/:VeqmeLbjQ]#q?D#)-@(W#c`8.FhDaB%QO&Sr5pp&X'TZ^^`u:%==kU*=7t'&NJ9<G"co7i*.UXhZ74*TMCW@eU;I7\cg.=rWMM,#KZmDi5(ko&U8-pc)eoQDineM7?<mL*S%LS0>]N[B3M.qU7^rf#K!=TjSZ?*ZI1e0>629Cu]5.U3PZ#W@6.2il@4U"K^q],;%Zc=0a4(9<[jr#(A9+OI>ZC962^TLFrk!V.T1%>)t@IP^K_9SXS9?<2n"a<bH#IBdj'n2/@n.6A/u/+M)%#Pa^3r4>GVY[,WoJ8W0D(*eHtHkB9Q$S`d4T.@)U9W!H@k++jHL[Rag=%<RL(=QqA!?9ke1re'e)F<`OD`aWL)rW)VE4bi??0UtS0WQ`:\H:#hml"\]<!l=64DQBoRaLItWjN)s:<2;sHoZt**4Js4j*"g#pA%-"#`t'M/,Yl1:Bm'<_)e8bh17ptn[<s*kZUgAs4U<p"D2#*pC"jrOV7e=^<F!#m*3]R)E0A.)d\RT9GT4Unh>=Z,0;gs.";7-7!)%m.^!4Nr`+KOH>,R1h$)`ml)Z1[\g/L\hCQ(@"2r)1<m^g#[:`o2^+=%Y]D't))TL_1*eUL?cm::AUOr#_R/8$o.U@Re6ZuIIP9*u%#.3H*([C_WaN$WfRs<j]>1%fC56XcY/L4/m'H2f/!O5RHo-1C_95.i=$lY>XR"2<>':u_HEsuOrp6X,JYgB,BE78"[^70Na!O:PB%pH4bY\j3]m^j).]\;K4]Sq+(a;Thp3PKb:P0$#d*Y[39R-;cK%>t].A"f/6Pl(h,uJaZ0f?7cO-E>'<jr!YUj.dI./;XUe>.t0!;%RsD>9dK]0)@=)6+8u;L@j/5,e52r>XLKk_Lfo];A)R0>RB"<pY@YGf?`R\fm6kX&G,48\>i:N^n=Ipdg\nFl%itN7/.`nbej*,<\%(dP[BouL#Aoa!;ZDGg@J-1Eq<-"2i;:$AjT$$ASk!$sKG@Ob0[TEu3%8L6EOL.I&Y$AqZt7+*o/Jg*Skp0akI&WeImK-k+S2c:AG%AkZ$TKTq<#WfReZe0V.^SKu"s>\ZTQbdr,5-6u8HcX4Yn.W[]G8J<jg[+'b^'e0T[OH;kgr=C/h1Bm`/bd)tVf.Y'-f*(uJ6Jk3M%<$;c?OZ?EDe-FC#_LMei-o"`]!pQQ$CG[\J65RKaJ`TkS[N_#-Hb;%t!d0&RIFpL;a=R;Y2#Qf!r9lK?s$$s8f;'g8.Ucs):;[L!%hP(?ZO"cb?f,TN9?I<jdfW,`1(&H>g3W]E2Y<4Cp_2Lt5P8^Btp&HPK_'0,iXVU47<p#[5DrOW`M5Yd>[Xi-qbdR0m`b^\uFl2LG%^W=e+XY%tSNGhaHTHY3$/f9+$CK-GDm]o1"=ip7e9k^fI7TMWi17B'ndCLUp9ObQK_2f/3rb+S2=HVWs`U@B;%Pp:`Q.ro[T?%?Q%HWTREh3cn4JN5cNL^Sm)@+hRIG)ldp.)r?53oXItI1(_pK*2l[Htn4QP*XLbT(AP`5eQI8a(O&0MjiSVV8Q<j_F+H%C-H-l!e=pV%R7`/5cl&cfhcTq)iWMMU/-$8k"[HNZ7ef-KKrZD4PnSZ\*=PN8/.dG2PG2"8I_Ui?)n43)&qF(mI2o63R2.>`Ps)B&.QU!N@Au1p%+-`%U44+L!UFLiNN0ZQ#8tfVHSOgo\9fM)aDLdBG$B2I]'fsd&oNo>RGU"G$&0rCEC+%=BW:33$"A1dFPdCTZ%63PSaFKji(VPTC%O,#?K&s"i>OOB`7`-kN]bfQD??m+WdI*)GUm!3AALR3N>hHp;QMolNfKn<?gR)4Q?7Tc8\O;&s?XHZ=>8#i*kJc&SPY2l($7X2?I%`(eIiGr+LP:ia3^eF$?B,s!3IKu?ZQd/#CMhYM#!\"N^;"V=+'W'd3k=l'<Z'$"!BKINHAnKoAMQ<CC:Ki1Hpg;('X7Vt;O=Fr_r%FA>Y.:eg48d0>LO/_'R*=ur`40R$K@'Or+E!D&>@*]cP[=pP8qj$?`r<p1dF^ttA#*IsA_Ic(Pb&S_Es@SF-dnCh>67Wq1)cbl^?%Be^M<IH+$_>/M0IJrab)SQ!=^a)D0CI7H$3j.nELToq`mB7=P,$%Y!8KaApL(^uKoiWH878h4?W`q)`SR_Z9IF%nf\(ar0Yns`3G%L7j:O%4A.#0e+CJ0NkgOVFEb43NF%=Pc,H$@R#SVE1#^E^arhX)rkBS\qbU_`-_S!4>AQp@'<tF4IcOBPA_qT73J0R%[1`!(qT#?%DH'6"5j-Pd>R>:4NUffu&H@iY%S*EL/dKZ(R\;N?nSp0AmZ&Rt$R'f71Ydpc//?B&<A4K_(e8_r>XG\s0&?S-GCnTR,cs]4Yc/UZ%s"*-rP=M8J)/cQu/tPZc4@chU(!(n>6Y>];QS8R33="O(.5`]'pg-8@!aK!WGjr'P8JBbYLE'.6;j5@Z'JbUVit@V(o[b`fW0RpL%9r>:k1_m![^c40,E(LF.$*uS8m<^S2]i.&r^+#Q]ke%,CS-Hl@-([a#)Wrh_5salA[]#)8:gMGJLCnA0],soiDh9Q9XW6oW(&A71%OIbSL'Gf>2OTT32R`hU,N/DYE,K5'c+Rj9b;I;+^;tSr$2H1PhS.sXaGWdP@Le]-2<4LTf&Gjh_iK4ilDiHl!Itm!QJ;?figB;CB%0&[N#j?)D"99@7LWK8jSaG;fd?=r4#dK2iZ=\O_i+=5%K*RN03e1OrJ\CmAh/==#YVY6#?!QT@]/?4Wl9Yc%mTMF-5J/M@?JC.lD%&d?0$K1L!7@:6_.1"oqN`Sm^U6R,5J\W+2l=B0l/CU]u=1NZ5$+W6#N+HhBDHGn7[VPlZ.O.[GLOJK2Z5mh7VWPBicO)/(*?h&cJ%[Fm#L&:+r?+rn\HqE@$Y7P4l=Gc\r?2f):NS&!i*M5XpGC8+'7fJkI?V!q+G0r/6TL]0+T(iCf`;qeaMpaM78O!R+;+l@>cer)7(%f@%\4KX!2X%#6.V,6rDLU8ph"d+UsW'Q8ShcZL_:$cGVra"#!HAPZb]H6.-Re#9&d,gFa(=k\ZgO4ZX^1lN415#qt!UONr=b1NWU%$l8S>7E)Xt>aVunYfAITN"p.oXXGWe5r_:]oS5>$AP.b%on5j^&Z1iUAJRL!kA(YUg8"N5nLVaZ)LpKoSl&Wj<hf8;kR.##TniC\%-2Yn-#hVVD&T;VW-u!Gk2`:IP"6Tbqa+n@`k/Qp>`p=V;=[9qe;I=uo\K]((:@/;*=QL7dN_VT6UE8a?R,S,)!$udjNNK9[7MKa5%.N$p?/3JI-LLn(I["m!OC\a(]8LF=t8Knd*44lif(*jJ-,D6jGM;SoPpThq=G>Dr)87Y'jW/T<5J<d'EW4rp6N$h"t-L3Eu"DJL!%EMVr?VPf:>jDP2;O?&%dWmT&\Hub$cZ`:[&:P$npJ8p*1=XAbem&9CsK8%Z&D%A-JJe=3Fq1*RaLf&kcgqs>,AJ#Jk3%m)u_ql-<%bpQ-+8:WnDN3c'4NW\&d7[V2U,=:g-04Fg"G[QL[Oq3ghmMj1ZdI<,nP71<)#eUI.(aD+Q&U'+c)6`.#?A(0W&<mg44c0eSJ9l4)%R]ocefE@07Q`(aSk1<uqcs_N._\"+bo,&[*a_[+HmW&l\9rW`[+ihun[OP=Q];[0^TPl$5ed+uY%n=YoAfUe$ed02Z%An,L1HpJL%hGgrRQ?WD2[dan]D^bkH8r2'65T(,rg@0NG0I:V7_mk3OS+*<<N2J9>C-oj'CeJZ$,0/_,'U04=>)Rrh<J4fY2iSVh7<C=cN6p#p%3M=cT`f$a@/.o8%q%kag2p;#DYSX8^(t-3q4D))b(m\+j#H9;<FMZAZ3^L66@JM<W#7^,@BQVCsFI5fq\\,H`,,.aC,@:?P#*[#L%#EQNNFO]IRkoL"<%D2@JAgk%3;]SFK@-%(hoDnDS0oMMhS@hFpbU?L[P8DJe!-W:%#\;)H@C46nfQr[4;_5p,IDi-Z`D`-I;VEac%rX&p7+f-3.JY>-m8LVQV)&u-"!4)g*k\n=-nN;#Om7fm)[`*PIAdVR;!Rp8.d)6mW<2*?B&](#=V()OuoO5e.,[*<a%dl/bBhF=Z%$-Cg@!JGmeK]+i1@tZ,<M%OKCm6*n=RsZ\71^c9'F!Dr1VR5f;X8knXGUbE$i"1%<s(MOCP[2eaZ7p/u99o!n<Gi%+_sF+joE)4J%C/h1%MZ0TVS"o;@\;-+Q`/`).-Xac6M_H[)?rO('ML0cGGi]bH)q8`)2,,5I4;R81i$oX:$Y_Z30,[VpZq3Z*kT'37@k$bE/[$`1%XMU?$,0h\I3baO"Usup]a8n.+1pE9A.5k\W&joSmF=6&2s369NHHhm*GVTg`*u1\^7E\1iJI$ju+H;bs+uh1d^NqjJ:PMeS2Zopo%gk3I2F=VVDSI\mAp(hrWBc1Q;qPO[,P.W4I5\^]H273;>CCV"m>[h5Q,,-da7s#:E0hioH>35+'M)^^:O-'I9E]sjHX:^8$NPf]B%<gBHA1"(YAh6D_-S8X$VOP!TNhfB,;HfUJ?qkiP:V_/NqKB-*f&Z(>h[&U4O`BjQWThQ7rhNA]ABSom(3esUuh#&A9$Y2N(L`CL<%-Dn;kR&b`cDqYfdlbZ=61.<!(m:W+/($<aa7/K$'oEZTfV1T=MWf2.]FB/ts.HaP8XCT@\0?.tV#hgTEBBm%sI1%%9<a#n\AJG.m%?c8.o1)I;$?p0t\ZOK'T1#!^E4S1VmP@n2OH#1$Hd9(E)?lsCG.E3Rn%uKfhLmnPh'=0r5/>o)NQY#%Y0aiA5`@Sf2@\f<71W/hd%-)h9jblWqt#o&coOeXOU*V53"=C@/5'eGte_C4k1=@6d4T;q7D(8mg#@9kAsbJR;AW=;st3i<[j#6[_8/6gMU*[,'4o4s<Dd5Ro'%7M(qFH7mQ6AV-KTC4Xr=5aYO4'MNb/g)2'j6/^U@r<qL5gfe='#(]^iO,t9hC[b,.>'2%>VaNd9Z>=g1.V#8b9b(.kBT)u/lTQGV%29&S%@l3M#P>InS@MGU*IA2=?))P-L"$3G[%^6>.h+JlaU(E%jp6Zj<@bj_;ZTe:cV3h9PauuVsASI#&<b6tiVc,;7&uump^EX>+%;+W1TN7M<o-)G1XT3c>L!lB9u@?G$*W\f1G[kf.\.I+*Jg)+8,"s/"`iAhV]m^1mfMl1SZV^>$7^]bnd7UVHBMj,X&KcHNsJ;1;S%,#>5e%Lh_MKhG]j!EU]_c\gc3:oK6YI5M$;ior.=O$QimOOKqc91"'cT]LiY"QFJ6SS@E3'8nW;^Z\?D:Oj]-"<+or=U#PIMDh5t%NQ7=0&<@,J8n,FSB'A'78cSjQa&F[H3l>IG;T15Am379mMDr@r`A9,4>TcdiGYGV7,fUl5:Yg@THlI`'`4&bA6X5D`Mk2l!\3QQG%,[fILJt,o!$#7LiFu)SD&0.l)nqQ)$>$6#P%V%u.R[1i.&X>d<;UgNYW0'"a6EE+6@_=`E@^gk5b*'&OL1D`[%&G`_T?EaiD4Mi+%'hZ!>_Y:]!6m>t:"NJ^u7.?RALduk#d)<_e#b4J"j\TPF9FQmV;jdtp:LHMX-,t95XfQ0VIoS!_NKW90=H_dNCJQ>76"42sHuCU4%=X$V04XQVdQ0r$5_D6>05o:dp>Ef>q9IOBr=.4p!@sENo<L/rkaLVu5]nlPDpsU(rC4@.S=N5\bpEh#IHV`/][Z1We2D?_@fsVs@%)!),4lE8`e_p(LJ94_O[6hW>@`fn;O`G&#!nS*r4ltHkPVCJZ1Jm)K--0.g21rYu`69J1e5^#,Hd22tbR>a4-6*)KrfaB!?Opcpe%2JV]CV&qjc\jj!8$,B\@*YYG+'&sjeLc+5g0F$:m9O)c["8r>@WkrJ/VALbUV?36?rss@BVhqd*@0$69Nk?20nV8h#ZA1.9Z%k&)%>,>ET9CR?bJ>?0Kc*dj(r[I2F`VopZ+9]KN`<7HV`CPs6@LutIE+^nR;Wuq2-lo=hk/(7p5hoM$2B9$_:K^)@r)jI%)N9;8532t#%T#CuRpIHFpgdSZN$'T!VH-RSLde_$BL'PYT+CO%Ra/^=*lnn4_#9^BYalPb-=T0S*bR]bk"^>HKV?0Y]nj5'!9HGe;J1*HOO=eFb%6MX[!#M=X65hp,A0k#E"N)r8;gD^_'qnhp.XV>r6mtlG<E^`guLbh-pjp_i3E@#hXN)<uI[leW23:+R$&3-Ce*cJ:SSC;b[l%.8Z%)'e#A9-Gre@<t=t2*E5)V?\<5Q#JWF,].1Aj=-t#X2t(O2q(_p`Wota&-cqFU,P7]ih]FYCj[@WmRA?Aobg#@Vbkst-0>Bfl4Q)_%TOiBB;</qJF;mn+XTOD>H1REmV$>0>;@>U<.-r:;]VKeW'$!]L?YWp<SR^Y.9PmP*YS?6(eSutncBmfN3=Q/3Fq\/_Uu]o<?EBA`%mjceLP7B$mc;694$P>R+#SU&XINfQd!5ePn,fX.3Un3rQ$7`MM$Fm@=<`6^BT)_=K=jD9G!c]8,M)ddM?8IgKmjISMnbO`!b+fS7%%/WDEjoR80;_9jC+Jk4`9HFIG<!N^GQ@Q'0@E`4l=ndb-$b(7?8.QK5`E,sXlN6\UfJ_.pc5qM#bs-$0K/-4%lj64(116apqWkjK%\RP@5/b)eSDj_#u4CUO1ms3-cl:>Bul&L)R?(D4,V8KW]K:)\]Z,AJsruaW/UHr1@?3R0#<srQd;a;I,Hsf9B\HkUqb%%k]4c/-_%Cj84!e?]]k,[0-Nftq&?&t\VV61'D"@R0:h2B-o!%0i#8Eh6MQnX:;56JD6rQc\</]*/0cDURW"&NBYOL3h5/ek1n/V7W]RBN3jl%To"1rKe>7jmjCciRu.="Lq8/Z(*SQ&U&ub)T>YuZ7-`1JfZu1=J95X#<^[VJA6g"Ua:`5AVHF^%M?=K'@)0Vn%%*MENjt]d^'.sQ%inZ>CP)`/Gn^9JL/0U&W@1?>+JcYJ&GLStblWipX&FZ\t7Wdot@VuOA!`m?86naC'Kdg]*0.f;O_4mHs@L<<-oZCZP$3n^K6)<qC%n7[9)-MTTWm8Q\Aj1F=5?pMRKlskX>K;GG=(Xa,0\fVSR9VGd-('Dc(UiTi^4j;o_(S+sLs,#Vhf!#CM#c"KfT#=O@G=e,=k;\T*%'MU-<GJ3.L#mesWHu:#I!Y[&_(bp:?Ag(LB8Xg.rN%R[5!<We7(e\8sLe*h1n:KZc'I-"IHr_T!'HP%&-&'s;,/W:qPtbK"pZsn$%Gm^4Ne7HjHc?S:nB/VN=bkN?%rct.ffrrTCF-%hnC3di2RSD:PD*p*OCEaAV.Z//K#ks%5<PhZ==-+V;8sJW_OHL:Yb*mkI/O9HU%QlXF)(1iU5M8Ym)XnRE"NaYQ@9;[ekFtXa154Q`CDA-huq,E)XQ6X<gLIN+%`q3`aR*mlB8Za>[6,saO'a'ku].+EQfMRSB.SAhh%=kL&#h!@LdiJW41N!-gA1!S`K+"ZMf]Fa@9=-a]#>f@X00,smZ4BBYmiBOb66JVQ1@TeiAiNC*s4Kp$hV=c)aSjp*k^b;3+[<uq$%Ab&r4(opX+jCRKn.Po=j2bRto/NGCc!,7:21=@DgLRj]!Oc!<*2eE)q!\!6.Q.'%Jd>ca70lu-i@W4IOFGjjAgg.tQFNnEeInFf#%,C1Pa-K/P=?Z7ScPYuP8<#eP)o/.N+XkX(gOTLYCiRA8o5H3^2$0I?([2)Pp"<plNJbdhs?keDgN5t``?Bin.L7;Q_k)F5VJ')s>%2VPZXN4M^?gMC7b:c&CF@LfXXaIe%tdm^c8=g7_^K+@sTKA7$1+;#E-&[2ga+Ya=\#ddme6teiA[g;@0nJ7sD,E"Jin22qP\,]dH%7DM7&Ku@eW4E9!7)Q1[#6W!Ue/GmRFp/k`FF1K1X0'H3EX<ce!AWM\=ZG^uHl\L=]agFAdBss^U75HQ=^qXQ71W%QULtaA*9Gknb%Zi+mn6_A/,U1@Xo[oUrQE(kOq=e8$N%E)0'S"pJ(/<ea/&okHG*lHHbN3?NO(an:i@D+cB#qZ_a/A@r)T*<Po1DRT[d;kP_9E'#5%[=B^&Bq3Bk+IW^,3B@Q9k7mG>K<\'\o_L:N+<iQ?k[6(\_a19fM0(@<LuY/KaAJXO9?UeqMhPkr79-W%P(*i1$iR?EojT)1)B3.'%T<d&MYnsG`!4EHOUfoEP^k*@Q_O+b7C=B(I#F3Q3$OfBRMMph@r[cp9'YR&:8:iW!nXOS99b#B3PSf*8&lM_IG#BriD1VkW<0_#`%^po.kO_acekD^iA&=7Pf0b'eP<MoJZTIsN)Xn:9(&1/_[F(2b;".cJZaepi\dKOcf,>0.[5k$pl#mlrcAL\899bE:o/Bf[)FPiBT%$9BLbF[rm1."mAIWCn8+m+9JNbsh7nNlIgj'O1c&?'UhO)oQ;:Ak<a_2B")R4rPr'aG^Y:>mqIU!2E:W<#&i@Y!82^j$8[h9#^80%re9fLaLU&mii-AE<&dCl1`5u0V5)F:GhS_BVaqOmL^eP?R#T*P`2J@`<>:FH#R(?fBIp_Z6FgJTg'Ag3ZW&UqX42aA'T?$_^rQ?Y%/E`NG,XfpU+ci!IT>XX.dC@V&C@TO*=?eFKcOd@<XuY7I#BZ_pb9Pt;JcQ%/NL-AqT*Qn@_G^c;.F2:V-$6*eh('[YZ)@[l&d;8I%VI`doeBEH=c;Y8AV2=f#i0gKNJY/g2;*Gg)YpAm4dmYJ7-N$[oQ9`C(#`Pr(!i0jLO/3j5\d^t/@pu-K>[YWk%W&Ac=ENk-Bk<0R%Yll8HdpZf&L*e@UBLSl')gqNR_0>Lt)M>.O-4KV8eh`?SFhF`K.cn9u(eUb:eF64o,$1%W8or:/?VMMjQQ"t5LOt;%NWS[sjVa=@%iTQ"%L2:ZR?rb3*E>\#%[Z([q*ISrM,\2N3,fFo+8]n,;`93[`&rguOa[:e'X>.X0)dnJW25;U#*.pM^b(b<)7U+;@TfLU+<4B/d%.T7#^,GZk`M-tUd,S(1/U:jYI5=J"uk_n[(NKBBCJI7M&*gk>d*@W0Z+C`bE'e3<0:'F9A/\)4E`)MckF\(eF;fZOPrEa9;QPGQa%OfDik*-BJ+WCUOHV;aO[fbYF_QBLFOA%("%'D68Z>T&/*NE<B0Uo[ZkfNpWj:NF0W7URL97(nbGKDcJ3>nU[BU4V4eHq@/#-<\-1%K\8V9M]lQ)EpQgZ6JN<1!@p/HW#&rcNFsA?EbL)=Jjg/[;bIo,O\r?Eh<!?L1%i^2EA2A5W6/EZj>#E;UDU?9n\dkg@r?Q5iXHK?%DkP9;"'F<[Yo&YP\Rh;5-4skjHV>9l'!i7i;%Jkhlna0?9BGNX(p)pa8oLaUD1VK(k:g=k9$I"L&slmaGsr^s2'1hY86P!k/5.tX%MV$f,]dkk.$5'CW7]00#3@9k&>!@YSDjuX&g;5($>m)^[!BGJ2D:Ygf(ccn^m<5'9"sA$\CsX"3E@O=b:1m+VQ%l*[_]ddm`_j1p%NFTbUhN/R)%R_eCK'(-Q2Vt7l!6ebO&i9i&73XSo+rmm5OYU"#k/^JFDD.S23M>#=%Z+<4&KoIg*>26QQ<&8Wq5%B@R1iqa3:W9$%diB'2h'&c(mZ;:)g-`=!99.&Ep5g,,&!1/0kUu'!5Ub,\C(L6>bq!eV"/D3'Hdd[s&MLjlZqqeb&^!IM:3fBhPm<#8aXEDQ#tiY^%K5->R,Whm_A>La7MO#*kTk+9D,)%pqQRWTVnk"eCMs+%6.D!7Eml%/,Q+L/6:3a\UP%[uH31(mPKTT(hAQ2U=0F,B?6?ACl%u$9M%5ZYJC@$U%*!-Hgp1h"5]-r^q>DS^NoM`:/=+_;p=JU#T8Qu-M4@L5O@+qNmd/*^K%Sf?Tdim-Zl3?W5%Bb`d2YsA-6\hFJ58Q%Z)%Otd$5P7JT*4J&#b*+^#R,VMQ;21UPI3EmBF,_Zl4ObdM,a+R?R(lMR[e0<N@"e!=k\$:BK.ht'M],Ho3JQpH"mY<K^,`d(GO\p6_%nOt8b?V)Ph7&Zo3KnT[<O6('oW?a$NVQ>5YQ%T04BkE#jP)*%.&p#No@]Y_<FZUG7%=T-_>Q$7%/>shNYt?M8;Tr*VAcU2G<?k6b%'q2Ve;C*(3"c57i;GcLH?:4M]QCsBhN%3BJ;lM2qTop[1<Dn?8&$[lf9hbY#&im)!@Yi1'5p[*r])m$l8Rec`"E@Z>7C9iZ,hZ'K%2]`>68Rec_$LJ=[S6dWuQFmb72q:BV#E=BG.n[>a_T(as5ERgd7ta?pR+"S=@uZ/kV:F3_2nAook0a8>#L+;g!A,e:lEMC=>[lAp%<!t.[f"]3l@t>>aaEGoB=;Yq.l*!N^a2F)Ne]Q-)\1r9B,XR^`TG(aJT"3iU+hp7JDgL\""L8J3#\7/1&9pmYpa*p4I]V^3\_SNN%)\=JK.p`&W*C3,A<uf4n@DuaH-Jm<MUlr;SS>,bF'NhI';oR$#XR3ncCjr'Fs0>Xdm#IBf?g%XT(HR-;Le-fSk))(,Khf),O1302%X@*oneIn/rD=#B1VJ<@_jj[h%*,l?H5(!!!@>Uo!T#oD-(F=T!C&l)nnuV1g/mOu?.VF/%3[%Ht9d8X%jOYqpppQ$S(b>*]"<t"N%s2Rm%qGcJ]=Fc5N6dq'p:0XM)n^Yc6$p$*TJjEUGE@P?5ZrO]J?nnI6Q]jJih?WFP+?\0YY<"4oI&_3J`tS$"rS0\/@('3.'(_*,%e3aK,>]<Odpahe?7JP$1`%^c+QD=%E3gHNLS[-<;(R7X@O=WP[@lP2.%+F#O!YM!oR-djK@Q%2>$IlUk/JU4\?akg8bUOj/nNBH'%iE@AtA"*oi#US2%md0:0"7;Ij;4",#g!X"M7bDYgO1+/p8rS+spiNjXA&3dm^r/hm0j]c1AUSNH]`J>fh'gE&j7o2/@L"AYT2p!/%_m#D*M/16X`8?I:0OZt7N9p_CY+h3&[m@)`fN+9XqdJiRQI[nc>%\FiJbWG;"\-/hE?0##`Sh8c7V+utGo3h@gFrm[.;BA.'S0?=%X,nODVS5G8V9^1$(b#JOh$ZVFC@"s2]oC=SXaBmCf#d+3a8[-NY-)p`(3Vlj3IH;Pn_;IMC$3\.O8nB^mc2CqekA1'$%JB?EdINX%m)SALh!_F2rWa$[`BCr>Yk<7QoD\eCk=V$~>%AI9_PrivateDataEnd