%!PS-Adobe-3.1 EPSF-3.0%ADO_DSC_Encoding: MacOS Roman%%Title: DTU Nanotek B UK.eps%%Creator: Adobe Illustrator(R) 12%%AI8_CreatorVersion: 12.0.1%AI9_PrintingDataBegin%%For: PeopleGroup%%CreationDate: 27/02/08%%BoundingBox: 0 0 238 26%%HiResBoundingBox: 0 0 237.2125 25.2452%%CropBox: 0 0 237.2125 25.2452%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0%%+ procset Adobe_CoolType_Utility_T42 1.0 0%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%+ procset Adobe_CoolType_Core 2.23 0%%+ procset Adobe_AGM_Core 2.0 0%%+ procset Adobe_AGM_Utils 1.0 0%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Magenta Yellow Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x205 R agm 4.3861 ct 5.530%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 16 8%%BeginData: 3772 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45936FFD05FF7D27277D7D27277D52FFFF52FFFFA827A8A852FD0CFF%A8A8FD07FF277DFD4FFF6893CAFD04FF7D52A827FF527DFF52A8FF27FFFF%A8F8527D7DA85259FF597D52FFA85252FF2752FF7D52FFA8527D7D277DA8%FD4DFF936FFD05FF527DFF52FF7D52FF52A8FF52FFFFA8522E7D52FF7D27%A87D52527D7D52527D527DA82752527D52FF7D52527DFD4DFF686FA8FD04%FF7D7DFF27FF7D7DFF52A8FF27FFFFA8527DF87D7D7D27A8527DA87D28FF%7D7D52A87D52527D52A8FF7D7DA82EFD4DFF936FFD05FF52525952FF7D52%FF527D5252FFFFA852FF27527D28527D7D7DA8537D52527D7D7DA827A8A8%7D52FF597DA852FD4DFF686FCAFD04FFA82752A8FF7D7DFFFF5252A8FFFF%A859FF597DA852527D7DFD04A85252FF7D52A87D52A8A85253A87DA87DFD%4DFF936FFD7EFF6893CAFD7DFF936FFD05FFA8A8A8FD25FFA8FFFFFFA8FF%FFFFA8FD17FFA8FFFFA8FFFFA8FD13FFA8FD16FF6893CAFD04FFA87DA87D%FFA8FFFFFFA8FFFFA8A8FFA8FFA8A8FFFFA8FFA8FFA8FFFFFFA8FFFFA87D%FFFFFFA8FFA87DA8FFA852A8A852A8A8FFA8FFA8FFFFA8A8FD05FFA8FFFF%FFA8FFFFFF7DA8FFFF52A8A8A8FFA8A8FFA8AFFFFFA8FFA87EA8FFA8FFFF%FFA8A87DFFFFFFA8FFFFFFA8FF7DFFFFA8FFFFA8FFA8FFFFFF936FFD05FF%A8AFFFA8A8A87DFF7DA87DFFA8A8A884A8A87DFF7DA87DA8FFA87DA8A8A8%7DFF7DA8FFFFA8847DFF7DFFFFFF7DA87DFD07A87DA87DA8A8FFFFFFA8A8%7DFF7DA8A8A87D7DA8FFA87D7DA884FF7DA8A8A87DFFA8A87DA859FFA8A8%7DFF7DA8A87D7DA87DA87DFF7DFD05A87DA8A8A87DA87DFF7D686FA8FD04%FFA8A8FF7DA87DA87DA8FF7DA8A87DA87DFFFD06A87DA87DA87DFD06A8FF%A87DFF7DA87EA8FFA8A87DA87DA87DA8A8FF7DFF7DFFA8A87DFFFFFFA87D%7DA8A8A87DFF7DA8FFA87DA87DA8A8A87DA87DA87D7DFFA8A87EA87DA87D%7DA8FFA87DA97D7DA8A87DA8A8A884A87DFF7DA87DA87DA8A87D9369FD05%FFA8A8FFA87DA8A8FF7DFF7DFD05A8FFA9A8FFA8FFA8FF7DA8A8FFA8FFA8%FFA8A8FFFF7DFF7DFF7DFFFFFFA8FFFFA8A8A87DFFFFA8FFA8FFA8A8FFFF%FF7DA87DA8A8FF7DA8FFA8A8FFA8A8FF7D84A8A8A87DFFA8A87DFFA8FF7D%FF7DA9A8A8A8FFA8A8FFA87DFFA8A8A8FF84A8A8A8FFA8A87D7DFFA8A8A8%6993CAFD04FFA87D7DA8FF7DA8A87D7DA8847D7DA87DFFA87D7EFD05A87D%FD07A87DFFFFA87DA8A8A8FFFFA8A8FFFF7DA8A8A87DA87DFFA8A87DFD04%FFA87DA8A8A8FFA8A87D7DA8FFAF7DFF7DA87DA87DA8A8FFA8A87DA8FF7D%A8A87DA8A87DA8A8A8FFFD05A8847DA8A8A87DA87EA87DA8A8FF52AFCACA%FD05FFAFFFA8FFFFFFA8FF7DA8FFFFA8FD05FFA8FD07FFA8FD0DFFA8FFFF%FFA8FD06FFAFA8FFFFFFA8FD07FFA8FFFFFFA8FFA8FD09FFA8FD06FFA8A8%FD05FFA8FFA8FD07FFA8FFFFA8FD04FFA8FFA8A87DA8FF7DFD10FFA8FD6A%FF7DFD04A8FF%%EndData%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 70 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/set_gvm{	currentglobal exch setglobal}bdf/reset_gvm{	setglobal}bdf/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/thold_halftone{ 	level3		{sethalftone currenthalftone}		{			dup /HalftoneType get 3 eq			{				sethalftone currenthalftone			}			{				begin				Width Height mul {					Thresholds read {pop} if				} repeat				end				currenthalftone			} ifelse		}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			/srcDataStrs [ imageDict begin				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse				{					Width Decode length 2 div mul cvi string				} repeat				end ] def					imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put			imageDict /Decode [0 1] put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		DataSource 0 get type		dup /filetype eq			{			1 dict begin			/flushbuffer Width cvi string def			1 1 Height cvi				{				pop				0 1 DataSource length 1 sub					{					DataSource exch get					flushbuffer readstring pop pop					}for				}for			end			}if		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and			{			Width Height mul cvi				{				0 1 DataSource length 1 sub					{dup DataSource exch get exec length exch 0 ne {pop}if}for				dup 0 eq					{pop exit}if				sub dup 0 le					{exit}if				}loop			pop			}if				}		{		/DataSource load type 		dup /filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 idiv mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and			{				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul					{					DataSource length dup 0 eq						{pop exit}if					sub dup 0 le						{exit}if					}loop				pop			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 	dup type /dicttype eq		{			Adobe_AGM_Core/AGMCORE_tmp get			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			Adobe_AGM_Core/AGMCORE_tmp get exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{ 	/indexed_colorspace_dict AGMCORE_gget dup null ne {		dup /CSDBase known {			/CSDBase get /CSD get_res /Names known 		}{			pop false		}ifelse	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse{	/pdfmark_5 {cleartomark} bind def}{	/pdfmark_5 {pdfmark} bind def}ifelse/ReadBypdfmark_5{	2 dict begin	/makerString exch def string /tmpString exch def	{		currentfile tmpString readline pop		makerString anchorsearch		{		pop pop cleartomark exit		}{			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5		} ifelse	}loop	end} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for%% definitions of some fundamental procedures.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 201 dict dup begin put/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSD_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_in_pattern false def/AGMCORE_currentpagedevice nd/knockout_unitsq ndcurrentglobal true setglobal[/CSA /Gradient /Procedure]{	/Generic /Category findresource dup length dict copy /Category defineresource pop} forallsetglobal/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	//Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_&setoverprint /setoverprint ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse			/AGMCORE_gstackptr exch store		}def		/grestoreall {			AGMCORE_&grestoreall			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/setoverprint{			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint		}def			0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/sRGB ne					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			//Adobe_AGM_Core begin			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						current_spot_alias false set_spot_alias						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor						set_spot_alias						currentgray 1 ne					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						//Adobe_AGM_Core/AGMCORE_name xddf						false						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not AGMCORE_currentpagedevice/OverrideSeparations known and						{							AGMCORE_currentpagedevice/OverrideSeparations get							{								/HqnSpots /ProcSet resourcestatus								{									pop pop pop true								}if							}if						}if											{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not						}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace							false							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall								not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse			end		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	/AGMCORE_IsSeparationAProcessColor		{		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or		}def	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		level3 {			/AGMCORE_IsCurrentColor				{				dup AGMCORE_IsSeparationAProcessColor					{					AGMCORE_plate_ndx 0 eq						{dup (Cyan) eq exch /Cyan eq or}if					AGMCORE_plate_ndx 1 eq						{dup (Magenta) eq exch /Magenta eq or}if					AGMCORE_plate_ndx 2 eq						{dup (Yellow) eq exch /Yellow eq or}if					AGMCORE_plate_ndx 3 eq						{dup (Black) eq exch /Black eq or}if					AGMCORE_plate_ndx 4 eq						{pop false}if					}{					gsave					false setoverprint					current_spot_alias false set_spot_alias					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor					set_spot_alias					currentgray 1 ne					grestore					}ifelse				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf				dup type /dicttype eq					{					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end}{					channel get 0 paint? AGMCORE_separateShadingFunction					}ifelse				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					Shading /AGMCORE_ignoreshade known					currentdict end exch					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				//Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					/AGMCORE_SpotAliasAry2 where {						begin						dup 0 get dup /Separation eq						{							pop							dup length array copy							dup dup 1 get							current_spot_alias							{								dup map_alias								{									false set_spot_alias									dup 1 exch setsepcolorspace									true set_spot_alias									begin									/sep_colorspace_dict currentdict AGMCORE_gput									pop pop	pop									[ 										/Separation Name 										CSA map_csa										MappedCSA 										/sep_colorspace_proc load									]									dup Name									end								}if							}if							map_reserved_ink_name 1 xpt						}{							/DeviceN eq 							{								dup length array copy								dup dup 1 get [ 									exch {										current_spot_alias{											dup map_alias{												/Name get exch pop											}if										}if										map_reserved_ink_name									} forall 								] 1 xpt							}if						}ifelse						end					} if				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	/AGMCORE_def_ht currenthalftone def	/clonedict Adobe_AGM_Utils begin /clonedict load end def	/clonearray Adobe_AGM_Utils begin /clonearray load end def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/getrampcolor	{ 		/indx exch def		0 1 NumComp 1 sub		{			dup			Samples exch get			dup type /stringtype eq {indx get} if			exch			Scaling exch get aload pop			3 1 roll			mul add		} for		ColorSpaceFamily /Separation eq 		{sep}		{			ColorSpaceFamily /DeviceN eq			{devn} {setcolor}ifelse		}ifelse	} bdf	/sssetbackground {aload pop setcolor} bdf	/RadialShade	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/r2 xdf		/c2y xdf		/c2x xdf		/r1 xdf		/c1y xdf		/c1x xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		c1x c2x eq		{			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope c2y c1y sub c2x c1x sub div def			/theta slope 1 atan def			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if		} ifelse		gsave		clippath		c1x c1y translate		theta rotate		-90 rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax xdf		/xMax xdf		/yMin xdf		/xMin xdf		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			/max { 2 copy gt { pop } {exch pop} ifelse } bdf			/min { 2 copy lt { pop } {exch pop} ifelse } bdf			rampdict begin			40 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			c1x c1y translate			theta rotate			-90 rotate			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def			/c1y 0 def			/c1x 0 def			/c2x 0 def			ext0			{				0 getrampcolor				c2y r2 add r1 sub 0.0001 lt				{					c1x c1y r1 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2y r1 add r2 le					{						c1x c1y r1 0 360 arc						fill					}					{						c2x c2y r2 0 360 arc fill						r1 r2 eq						{							/p1x r1 neg def							/p1y c1y def							/p2x r1 def							/p2y c1y def							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto							fill						}						{							/AA r2 r1 sub c2y div def							AA -1 eq							{ /theta 89.99 def}							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}							ifelse							/SS1 90 theta add dup sin exch cos div def							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def							/p1y p1x SS1 div neg def							/SS2 90 theta sub dup sin exch cos div def							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def							/p2y p2x SS2 div neg def							r1 r2 gt							{								/L1maxX p1x yMin p1y sub SS1 div add def								/L2maxX p2x yMin p2y sub SS2 div add def							}							{								/L1maxX 0 def								/L2maxX 0 def							} ifelse							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto							L1maxX L1maxX p1x sub SS1 mul p1y add lineto							fill						} ifelse					} ifelse				} ifelse			} if		c1x c2x sub dup mul		c1y c2y sub dup mul		add 0.5 exp		0 dtransform		dup mul exch dup mul add 0.5 exp 72 div		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		1 index 1 index lt { exch } if pop		/hires xdf		hires mul		/numpix xdf		/numsteps NumSamples def		/rampIndxInc 1 def		/subsampling false def		numpix 0 ne		{			NumSamples numpix div 0.5 gt			{				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def				/rampIndxInc NumSamples 1 sub numsteps div def				/subsampling true def			} if		} if		/xInc c2x c1x sub numsteps div def		/yInc c2y c1y sub numsteps div def		/rInc r2 r1 sub numsteps div def		/cx c1x def		/cy c1y def		/radius r1 def		newpath		xInc 0 eq yInc 0 eq rInc 0 eq and and		{			0 getrampcolor			cx cy radius 0 360 arc			stroke			NumSamples 1 sub getrampcolor			cx cy radius 72 hires div add 0 360 arc			0 setlinewidth			stroke		}		{			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				cx cy radius 0 360 arc				/cx cx xInc add def				/cy cy yInc add def				/radius radius rInc add def				cx cy radius 360 0 arcn				eofill				rampIndxInc add			} repeat			pop		} ifelse		ext1		{			c2y r2 add r1 lt			{				c2x c2y r2 0 360 arc				fill			}			{				c2y r1 add r2 sub 0.0001 le				{					c2x c2y r2 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2x c2y r2 0 360 arc fill					r1 r2 eq					{						/p1x r2 neg def						/p1y c2y def						/p2x r2 def						/p2y c2y def						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto						fill					}					{						/AA r2 r1 sub c2y div def						AA -1 eq						{ /theta 89.99 def}						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}						ifelse						/SS1 90 theta add dup sin exch cos div def						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def						/p1y c2y p1x SS1 div sub def						/SS2 90 theta sub dup sin exch cos div def						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def						/p2y c2y p2x SS2 div sub def						r1 r2 lt						{							/L1maxX p1x yMax p1y sub SS1 div add def							/L2maxX p2x yMax p2y sub SS2 div add def						}						{							/L1maxX 0 def							/L2maxX 0 def						}ifelse						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto						L1maxX L1maxX p1x sub SS1 mul p1y add lineto						fill					} ifelse				} ifelse			} ifelse		} if		grestore		grestore		end		end		end		} ifelse	} bdf	/GenStrips	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/y2 xdf		/x2 xdf		/y1 xdf		/x1 xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		x1 x2 eq		{			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope y2 y1 sub x2 x1 sub div def			/theta slope 1 atan def			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if		}		ifelse		gsave		clippath		x1 y1 translate		theta rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax exch def		/xMax exch def		/yMin exch def		/xMin exch def		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			rampdict begin			20 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			x1 y1 translate			theta rotate			/xStart 0 def			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def			/ySpan yMax yMin sub def			/numsteps NumSamples def			/rampIndxInc 1 def			/subsampling false def			xStart 0 transform			xEnd 0 transform			3 -1 roll			sub dup mul			3 1 roll			sub dup mul			add 0.5 exp 72 div			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			1 index 1 index lt { exch } if pop			mul			/numpix xdf			numpix 0 ne			{				NumSamples numpix div 0.5 gt				{					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def					/rampIndxInc NumSamples 1 sub numsteps div def					/subsampling true def				} if			} if			ext0			{				0 getrampcolor				xMin xStart lt				{					xMin yMin xMin neg ySpan rectfill				} if			} if			/xInc xEnd xStart sub numsteps div def			/x xStart def			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				x yMin xInc ySpan rectfill				/x x xInc add def				rampIndxInc add			} repeat			pop			ext1 {				xMax xEnd gt				{					xEnd yMin xMax xEnd sub ySpan rectfill				} if			} if			grestore			grestore			end			end			end		} ifelse	} bdf}def/page_trailer{	end}def/doc_trailer{}def/capture_currentpagedevice {	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf} defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup //Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA get_csa_by_name setcolorspace_opt		set_crd	end}def/map_csa{	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse	{pop}{get_csa_by_name /MappedCSA xdf}ifelse} def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	CSA map_csa	/AGMCORE_sep_special Name dup () eq exch (All) eq or store	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc {setcolor} bdf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		7 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {					/AliasedColorants false def					exit				}				{					new_LookupTables names_index get 0 get null eq {						dup /Names get names_index get /name xdf						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq						or or or not {							/AliasedColorants false def							exit						} if					} if				} ifelse			} for			lut_entry_len 1 eq {				/AliasedColorants false def			} if			AliasedColorants {				dup begin				/Names new_names def				/LookupTables new_LookupTables def				/AliasedColorants true def				/NComponents lut_entry_len def				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	dup not {		CSA map_csa	} if	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			AvoidAliasedColorants {				/currentspotalias current_spot_alias def				false set_spot_alias			} if			Names {				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				/names_index names_index 1 add def			} forall			AvoidAliasedColorants {				currentspotalias set_spot_alias			} if			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx 					0 0 0 0 /setcmykcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				{setcolor} bdf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSDBase known {			CSDBase /CSD get_res begin			currentdict /Names known {				currentdict devncs			}{				1 currentdict sepcs			} ifelse			AGMCORE_host_sep{				4 dict begin				/compCnt /Names where {pop Names length}{1}ifelse def				/NewLookup HiVal 1 add string def				0 1 HiVal {					/tableIndex xdf					Lookup dup type /stringtype eq {						compCnt tableIndex map_index					}{						exec					} ifelse					/Names where {						pop setdevicencolor					}{						setsepcolor					} ifelse					currentgray					tableIndex exch					HiVal mul cvi 					NewLookup 3 1 roll put				} for				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt				end			}{				level3				{					currentdict /Names known {						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt					} ifelse				}{				[/Indexed MappedCSA HiVal					[					currentdict /Names known {						Lookup dup type /stringtype eq							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx					}{						Lookup dup type /stringtype eq							{/exch cvx /get cvx 255 /div cvx}							{/exec cvx}ifelse							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx					} ifelse					]cvx				]setcolorspace_opt				}ifelse			} ifelse			end			set_crd		}		{			CSA map_csa			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 			begin			CSDBase /CSD get_res begin			currentdict /Names known{				map_indexed_devn				devn			}			{				Lookup 1 3 -1 roll map_index				sep			}ifelse			end			end		}{			/Lookup get 4 3 -1 roll map_index setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_res{	dup /CSD eq {		pop 		//Adobe_AGM_Core begin		/AGMCORE_CSD_cache load 3 1 roll put		end	}{		defineresource pop	} ifelse}def/del_res{	{		aload pop exch		dup /CSD eq {			pop 			{				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef			}forall		}{			exch			{				1 index undefineresource			}forall			pop		} ifelse	} forall}def/get_res{	dup /CSD eq {		pop		dup type dup /nametype eq exch /stringtype eq or {			AGMCORE_CSD_cache exch get		} if	}{		findresource	} ifelse}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		/CSA get_res	} if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/wrap_paintproc{   statusdict /currentfilenameextend known{	clonedict	begin	/OldPaintProc /PaintProc load def	/PaintProc	{		mark exch		dup /OldPaintProc get stopped		{closefile restore end} if		cleartomark	}  def	end  } {pop} ifelse} def/make_pattern{	exch clonedict exch	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	1 index dup /ID get exch /Pattern add_res	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/RenderingIntent known{		currentcolorrendering/RenderingIntent get	}{null}ifelse	Intent ne {		Intent /ColorRendering {findresource} stopped		{			pop pop systemdict /findcolorrendering known			{				Intent findcolorrendering pop				/ColorRendering findresource 				true			}			{false} ifelse		}		{true} ifelse		{			dup begin			currentdict /TransformPQR known {				currentdict /TransformPQR get aload pop				3 {{} eq 3 1 roll} repeat or or			}			{true} ifelse			currentdict /MatrixPQR known {				currentdict /MatrixPQR get aload pop				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq				and and and and and and and and			}			{true} ifelse			end			or			{				clonedict begin				/TransformPQR [					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind				] def				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def				currentdict end			} if			setcolorrendering_opt		} if			}if} def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict /ColorRendering known{			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		clonedict		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/set_spot_alias_ary{	dup inherit_aliases	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf}def/set_spot_normalization_ary{	dup inherit_aliases	dup length	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if	array	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf	/AGMCORE_SpotAliasAry where{		pop		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval		AGMCORE_SpotAliasAry length	}{0} ifelse	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval	true set_spot_alias}def/inherit_aliases{	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall}def/set_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry2 where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry2{				dup/Name get AGMCORE_name eq{					/CSD get /CSD get_res					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	//Adobe_AGM_Core begin	/setcustomcolor	{		currentdict/TintProc known currentdict/CSA known and 3 1 roll		//Adobe_AGM_Core begin		dup /customcolor_tint exch AGMCORE_gput		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not		current_spot_alias and{1 index 4 get map_alias}{false}ifelse		{			false set_spot_alias			4 -1 roll{				exch pop /sep_tint AGMCORE_gget exch			}if			mark 3 1 roll			setsepcolorspace			counttomark 0 ne{				setsepcolor			}if			pop			pop			true set_spot_alias		}{			AGMCORE_&setcustomcolor			pop		}ifelse		end	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	//Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defend/set_def_ht{	AGMCORE_def_ht sethalftone} defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.25 0%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.25 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.25 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict /Adobe_CoolType_Data 2 copy known not	 { 2 copy 10 dict put }ifget	 begin	 /@opStackCountByLevel 32 dict def	 /@opStackLevel 0 def	 /@dictStackCountByLevel 32 dict def	 /@dictStackLevel 0 def	 endsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup /args			7 index			5 add array put			put get			}			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{ pop count }			if			dup /argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					 { (*) { pop stop } 128 string /Category resourceforall }				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup					 {						  /@shouldNotDisappearDictValue known								{										  {												end												currentdict 1 index eq													 { pop exit }												if										  }									 loop								}						  if					 }				if				end		}		{ false }	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end		currentglobal false setglobal	  userdict /Adobe_CoolType_Data 2 copy known not		  { 2 copy 10 dict put }		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.%%Version: 1.21 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 27 add dict copy }	{ 27 dict }ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {				mark				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put					 {					 ((Hex) 57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec					 }				stopped					 {					 cleartomark					 Adobe_CoolType_Utility /@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						  {						  2 copy get 3 index eq								{ 1 index length exch sub 1 sub { end } repeat exit }								{ pop }						  ifelse						  }					 for					 pop pop					 Adobe_CoolType_Utility /@eexecStartData get eexec					 }					 { cleartomark }				ifelse			} }			{ {				Adobe_CoolType_Utility /@eexecStartData get eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind def/T0AddT42Mtx2{	/CIDFont findresource /Metrics2 get begin def end}bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/AGMIMG_flushfilters nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/AGMIMG_flushfilters{	dup type /arraytype ne		{1 array astore}if	aload length		{		dup type /filetype eq			{			dup status 1 index currentfile ne and				{dup flushfile closefile}				{pop}			ifelse			}{pop}ifelse		} repeat}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	CSA map_csa	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{ 									Name AGMCORE_IsSeparationAProcessColor  									{ 										Operator /imagemask eq{ 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor 										}{											invert_image_samples 										}ifelse	 								}{	 									[ /Separation Name [/DeviceGray]	 									{ 	 										sep_colorspace_proc AGMCORE_get_ink_data											1 exch sub	 									} bind										] AGMCORE_&setcolorspace										/sep_tint AGMCORE_gget AGMCORE_&setcolor 									}ifelse 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name AGMCORE_IsSeparationAProcessColor not and					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	mark currentcolor counttomark dup 2 add 1 roll cleartomark} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/DataSource origMultipleDataSources		{			[			BitsPerComponent 8 idiv origDecode length 2 idiv mul string			0 1 origDecode length 2 idiv 1 sub				{				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch				origDataSource exch get 0 () /SubFileDecode filter				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx				}for 			]bind cvx		}{origDataSource}ifelse 0 () /SubFileDecode filter def			[		origcolorSpaceElemCnt string		0 2 origDecode length 2 sub			{			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx			}for		/convProc load /exec cvx		origcolorSpaceElemCnt 1 sub -1 0			{			/dup cvx 2 /add cvx /index cvx			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx			}for	]bind cvx 0 () /SubFileDecode filter	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	CSA map_csa	2 dict begin	dup	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi			{				dup 65535 gt {1 add 2 div cvi}{exit}ifelse			} loop			string		} repeat		end ] def	/dstDataStr srcDataStrs 0 get length string def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [ [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def									/MultipleDataSources true def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA get_csa_by_name 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							devn_alt_datasource						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								devn_alt_datasource							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get get_csa_by_name				}{					/Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		<<			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		>>		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		current_spot_alias{dup 4 get map_alias}{false}ifelse		{			false set_spot_alias			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask			true set_spot_alias		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Page 1) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Web</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2008-01-14T11:34:40+01:00</xap:CreateDate>
         <xap:ModifyDate>2008-02-27T19:00:48+01:00</xap:ModifyDate>
         <xap:MetadataDate>2008-02-27T19:00:48+01:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>28</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAHAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8Al/8Aziz/ANNP/wBGP/Yx&#xA;mLpur1PtL/k/87/evU/zRJH5Z+biNiNF1Gh/6NJMynlnkukeSPKmma/+W9lp9msNr5w0m6i8z6cr&#xA;uYbuKLT0uEkkiLcQRN+0AOtMKpO3kjyrYfl3+beoWOlww32narqWn2U6A8orRYrY+iu/2RybFXpW&#xA;tyrL+aX5XGNw/wDuP1iRuJr8D2tsFY07E9DgVjv57Wuvy/mB5SvNAdv0totlqOq2luCaTm0eB5ID&#xA;T/fsXJPfCqXeVfzAgm03zRrOias9jJr/AJmiXSzHYnUppjNYRP6C24eOjgL8TE/DxpiqNtPzJ/Mq&#xA;/wDKflm9S8tLLWL/AMxP5Z1ASWhkhLVmpcemXjdWX0gCnLf26Yqjk8//AJhskXlgX9mPMEvma40A&#xA;a+bU+kLa3s0vPW+q+oF9ZhJxC8uO304qld95p/MPVp/Llv8Ap9LK9tfNV35fvJ7KGkFybWOVlnki&#xA;9TdStA0LMV5CvbFUwk/Mv8ybrzpqK6TZyXmkaVri6RLpsGnySo1snBbid78PSOVefMJwoB1riqvP&#xA;feY/OnlTzpqeq3Vk/luybWLKDQGsllatgjrBO1y8hpIJE9T+769KYq1+UGvebbC68o+W9TvrfUNJ&#xA;1TyrBqNikdt9XltRAsCJEX9ST1f3cnxMQN9xTpir2XArsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirwX/AJxZ/wCmn/6Mf+xjMXTdXqfaX/J/53+9e3azZabfaPfWOqKraZdW8sF8rsY1&#xA;MEiFZQzgqVHAmpBFMynlmJ+RfJX5V6RqEt/5UhgfURCLd7j61NeTJCKURTPLMyJ0+zQYqyKz8p+X&#xA;bO21a1gsk+ra5cTXerQyFpUnmuUWOYsshYUdEAKj4fbFUt8sfll5H8r3zX+iaZ9XvWi+rieSae4Z&#xA;Ia8vSjM8kvppX9lKDFU4ufL+kXOt2euTW/PVNPimgtLnk44R3HH1V4ghDy4DqNu2Ksbb8nfy0k0u&#xA;fShosa2M1/8ApSSKOadGW9pT1Y3SQPH8O3FCF9sVRGmflV5E0yKGGy0544LbUE1e3ha6upI476MO&#xA;qzIjysqmkrVUDie42GKq+pflv5K1O0vLS900Sw399+lbg+rMj/XeCx+vHIjq8TcI1H7tlH3nFVGf&#xA;8rfIMnl2z0BtLEeladcC+tEinuIZY7leR9f6xHIs5k+M1YvXFW5vyw8jz6//AIgNg6aozxzPPDdX&#xA;UKSSQ04PJFFKkUjbCpdTXvXFVl1+XX5f2t9qWvT2YtZb9J/0nILm4it5BcoY53eFZVg5SKd34cq7&#xA;1riqKstA8laaNK1m3SG3TS7BdL0u8edxHHZNwCRAu/Fq+mlGare++Kp5Nf2MEqwzXEcczq0iRO6h&#xA;2RBVmCk1IUdcVVIJ4biCOeFxJDKoeKRTVWVhVSD4EYqvxV2KuxV2Kqc11bwGITSrGZ3EUIYgc3IJ&#xA;CrXqaKcVakvLSO4itpJ40uJ+RghZlDuFFW4KTVqd6Yq3DcW8xkEMqSGFzHKEYNwcAEq1OjUI2OKq&#xA;mKuxVoMpJAIqOo7iuKt4qp/Wrf6z9V9VfrPD1fRqOfCvHlTrSu1cVVMVdiqnBcQTqzQyLIqO0bFT&#xA;WjxsVdT7qwocVVMVdirwX/nFn/pp/wDox/7GMxdN1ep9pf8AJ/53+9ey+bf+UV1n/mBuf+TLZlPL&#xA;MX1TUYIzpN1pjxzapaaZdyv6VHYIlrVBJx/Z9XjQHvhVAnUtfg0S7vYtQdrd7OKRpHuYp5VuGmjH&#xA;NAgHpqUdqjoNsVR11rK2E2o6d+kLi8tTNZxWc31hUZJrlZWdGuaGi0iDd6VpiqzR7/Vb6/0mxl1G&#xA;YQ+tqSyPDKrmRLZ4jEry8RzA5EcgBXFVgE9pHexWmpXCTTa7DaSkSKziOVo1ZqEH4iD1IxVXt59W&#xA;s54blL+6u2XU7rTxbTOGR4o4ZnQEBR8XKNfi64qgdO1TzA2iT6muoNJz0u6nuedxFIROIucbxRKA&#xA;YuDVBH374qjdXgvI7LWrJ9QuriGTRWvT6rqWEoEikDiq0RgN16YqmV/eTaf+X6XNjdMziG3Auywk&#xA;ZEldFdwaEfAjmnhTAqRa9WXSPMNhHqc99Y2YsZIZWkEhDzORJE0gHxqAqtTtXCrJPOWnwTaBbafO&#xA;XlglvLGCVnNXZHuUVqt4kHArHLjSNX07XtOu9Tukub76teW8EkfLiILe1PAkMPtuzMz++FUf5dvZ&#xA;L+4skvtTktvq+n6dNb2ySLCJnmjLSMwp+8qy8aDYYqhrW91GXT9Lku9VuIYdVv7mG7uTIqCJLZrj&#xA;0oo24jh6hQAnriqd+W9T1aW1WONf0nbR3lxbnUHlVW9GKXirmi0lNK7ilaYFSzz5rsttPcxWdxNb&#xA;XtlaC6DC5SGM1ZgtImVjMarQjp0wqtvr7UxDqesLf3CtY6laww2isogMcotuasvGpr67d/liqGM5&#xA;u7/Sry41GSe9OuywvYFwI4Ui9dEAiHQ8VX4j44qj/OWmXF/5l0wWjcL+2tLm5sX7CaKWFlB9m3U+&#xA;xwKlGl+Ybe6tLtlM9tNqmrTGNROLPgY7WFpFklIanE7UA3OFVawv9Y1SOFJtTuI/S0ma5L27qvOW&#xA;K4eNXZgu/wAKjpSuKrJdf1C40+7vrrVpLK7stLsruxhjZESaaaD1HLRkfvOcnwU6DFV2oXF3p135&#xA;qvLe6lS+WOyZUZx8KzALI/Fh/uoMeNemKog3esW9s0UmpPFp1zd2cAuTcR3E8SSc/WrMooocqgUn&#xA;pU4qrXWmrP5kEVrqd0BFpDvHeRTBpGIuWpyeh5BT+rFUA+qa1eabqWonUriGax0mwvoUhKrGZ5oX&#xA;kcuvE1BKdOmKoi61q9aa/vm1OSC/tL+2t7PS1ZRHJDIIagw0LP6nqv8AF7bdMVdBcu19Fp81/Jpt&#xA;hPeaxLJNFIsLPJFdngnqMOwZmp3xVATeadSaLT47m9ueV1p7G0eCSC29S4E0kaySNOYwQyKhop28&#xA;NxiqZXmp69YMNHmvGbUNTt9PFlMGDcJWYQ3ZU03pTn9OKsl8v/4Q/wBI/wAO/o/9j61+j/R/yuHq&#xA;ej/suNffK4cP8NfByM/jbeJxeXFf6U1uPQ9CT6xx+r8W9b1KcOFPi5V2pTrXJuOgdK/w9+8/RP1T&#xA;t631X0unbl6f8cVSPzF/g79Aaj6X1bhxj+t/UfQ9Xj6ydaduVK1xVOE/wt+jZOH1H9Gcx6tPR9Dn&#xA;tTlT4OXTFURafoTlF9T+rcv3noej6de3qcOP+x5U9q4qsb/D312Tl9U+vc4/Vr6Xq+pUeny/a5Vp&#xA;x/DFVYfovktPQ5eu3CnCv1ih5U/4spyr364qg0/wn69x6f1D6xwk+t8fR58P92epTfj/ADV+nFUc&#xA;36P5ty9Hn6Px1419Dfr/AJHX2xVZafoj9Hn6n9X/AEfRq+jw9Gm/P7Pw+NcVUbb/AA79Qk+q/VP0&#xA;fy/e+l6Xo8tvtcfhr0xVGXH1Xin1nhw5pw9SlPU5DhTl+1ypx98VW3H1D1I/rPperR/R9Tjypx+P&#xA;jXf7P2qdsVQk/wDhvlZ/WPqfLiv1D1PSrx24ejXt0pxxVUl/Qf6OPrfVf0byNefp+hy5mvX4K86/&#xA;TiqJtPqn1aP6n6f1Xj+59Hj6fH/J47U+WKoPUf8AD3rL+kvqnr8Dw+s+lz9PflTnvx61xVWf9E+l&#xA;Nz+r+j6q/WK8OPq/Bw59uf2KV36e2KqDf4b/AEoOX1P9K8tq+l9Y5U/4OtMVRr/VPrUfP0/rfFvS&#xA;rx9ThUc+P7VK0rT2xVAz/wCGfQf1/qXoeufU9T0uH1mnxcq7epTr3xVWt/0LQfVvq1PSanp+n/c8&#xA;jy6fscq17VxVSm/w3ys/W+p8uK/o/n6VeO3H0a9ulOOKqs/6E+ut6/1b696R5c/T9X0aHlWvxcOt&#xA;e2Koa2/wn9Uufq31D6n8P1v0/R9Kn7Pqcfh+VcVRFl+g+C/UfqvD024eh6dPS5nlTj+zzrXtXFXL&#xA;+g/q8vH6t9X9FPXp6fD0OJ9Pn29PjXjXamKtS/oH9IQ+r9V/SNB9X5en63HenCvxU+WKrbz/AA79&#xA;W/0z6n9V9V6+t6Xp+tU8/tbc61r3xVjXmj6h+kn+rety/Rq/WfQ+p+h9T9RuFPrO1eXL7PtXthVr&#xA;T/0d+m/L/qfXPqP1Zf8AD/rfV/R/3lTly4fvufCv2/2unbAr/9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:B655F9E626C4DC11B0F7C948713094C1</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:8E6E5468E6F811DCA9DBE848ED1657C8</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:B555F9E626C4DC11B0F7C948713094C1</stRef:instanceID>
            <stRef:documentID>uuid:B455F9E626C4DC11B0F7C948713094C1</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Web</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>5080.000000</stDim:w>
            <stDim:h>5080.000000</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>White</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Black</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>74.609398</xapG:cyan>
                           <xapG:magenta>67.578102</xapG:magenta>
                           <xapG:yellow>66.796898</xapG:yellow>
                           <xapG:black>89.843796</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Red</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>98.828102</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Yellow</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>6.250000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>96.093796</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Green</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>62.500000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Cyan</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>51.562500</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>12.500000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Blue</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>87.890602</xapG:cyan>
                           <xapG:magenta>76.562500</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Magenta</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>26.953102</xapG:cyan>
                           <xapG:magenta>81.250000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=193 G=39 B=45</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>16.796898</xapG:cyan>
                           <xapG:magenta>97.656296</xapG:magenta>
                           <xapG:yellow>92.187500</xapG:yellow>
                           <xapG:black>6.640601</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=237 G=28 B=36</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.390601</xapG:cyan>
                           <xapG:magenta>98.828102</xapG:magenta>
                           <xapG:yellow>96.875000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=241 G=90 B=36</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>79.296898</xapG:magenta>
                           <xapG:yellow>96.484398</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=247 G=147 B=30</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>98.046898</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=251 G=176 B=59</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>34.765602</xapG:magenta>
                           <xapG:yellow>86.718796</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=252 G=238 B=33</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>4.687500</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>92.968796</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=217 G=224 B=33</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>18.750000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>97.656296</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=140 G=198 B=63</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>98.828102</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=57 G=181 B=74</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>74.218796</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>99.218796</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=146 B=69</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>85.937500</xapG:cyan>
                           <xapG:magenta>17.578102</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>3.906298</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=104 B=55</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>89.843796</xapG:cyan>
                           <xapG:magenta>33.203102</xapG:magenta>
                           <xapG:yellow>98.437500</xapG:yellow>
                           <xapG:black>25.781298</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=34 G=181 B=115</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.781296</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>74.609398</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=169 B=157</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>78.125000</xapG:cyan>
                           <xapG:magenta>8.984399</xapG:magenta>
                           <xapG:yellow>45.703102</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=41 G=171 B=226</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>69.531296</xapG:cyan>
                           <xapG:magenta>14.843798</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=113 B=188</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>87.109398</xapG:cyan>
                           <xapG:magenta>52.343796</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=46 G=49 B=146</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>98.828102</xapG:cyan>
                           <xapG:magenta>96.093796</xapG:magenta>
                           <xapG:yellow>3.515601</xapG:yellow>
                           <xapG:black>0.390601</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=27 G=20 B=100</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>26.171898</xapG:yellow>
                           <xapG:black>24.609398</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=102 G=45 B=145</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>74.218796</xapG:cyan>
                           <xapG:magenta>98.046898</xapG:magenta>
                           <xapG:yellow>0.781298</xapG:yellow>
                           <xapG:black>0.390601</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=147 G=39 B=143</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>49.218796</xapG:cyan>
                           <xapG:magenta>98.828102</xapG:magenta>
                           <xapG:yellow>1.171899</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=158 G=0 B=93</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>34.765602</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>37.109398</xapG:yellow>
                           <xapG:black>10.937500</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=212 G=20 B=90</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>11.718798</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>49.218796</xapG:yellow>
                           <xapG:black>0.781298</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=237 G=30 B=121</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>96.484398</xapG:magenta>
                           <xapG:yellow>20.312500</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=199 G=178 B=153</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>22.656298</xapG:cyan>
                           <xapG:magenta>27.343798</xapG:magenta>
                           <xapG:yellow>39.843796</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=153 G=134 B=117</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.843796</xapG:cyan>
                           <xapG:magenta>42.578102</xapG:magenta>
                           <xapG:yellow>52.343796</xapG:yellow>
                           <xapG:black>6.640601</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=115 G=99 B=87</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.390602</xapG:cyan>
                           <xapG:magenta>52.734398</xapG:magenta>
                           <xapG:yellow>60.546898</xapG:yellow>
                           <xapG:black>23.437500</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=83 G=71 B=65</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>57.421898</xapG:cyan>
                           <xapG:magenta>60.156296</xapG:magenta>
                           <xapG:yellow>63.671898</xapG:yellow>
                           <xapG:black>41.796898</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=198 G=156 B=109</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>22.656298</xapG:cyan>
                           <xapG:magenta>38.281296</xapG:magenta>
                           <xapG:yellow>63.281296</xapG:yellow>
                           <xapG:black>1.171899</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=166 G=124 B=82</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>31.640602</xapG:cyan>
                           <xapG:magenta>48.828102</xapG:magenta>
                           <xapG:yellow>73.828102</xapG:yellow>
                           <xapG:black>9.765601</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=140 G=98 B=57</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>35.937500</xapG:cyan>
                           <xapG:magenta>57.031296</xapG:magenta>
                           <xapG:yellow>83.593796</xapG:yellow>
                           <xapG:black>22.656298</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=117 G=76 B=36</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.062500</xapG:cyan>
                           <xapG:magenta>63.671898</xapG:magenta>
                           <xapG:yellow>92.968796</xapG:yellow>
                           <xapG:black>35.546898</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=96 G=56 B=19</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>41.406296</xapG:cyan>
                           <xapG:magenta>69.531296</xapG:magenta>
                           <xapG:yellow>96.484398</xapG:yellow>
                           <xapG:black>48.828102</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=66 G=33 B=11</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>47.656296</xapG:cyan>
                           <xapG:magenta>73.046898</xapG:magenta>
                           <xapG:yellow>83.203102</xapG:yellow>
                           <xapG:black>67.968796</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=236 G=28 B=36</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.781298</xapG:cyan>
                           <xapG:magenta>98.828102</xapG:magenta>
                           <xapG:yellow>96.875000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=169 B=157</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>78.125000</xapG:cyan>
                           <xapG:magenta>8.984399</xapG:magenta>
                           <xapG:yellow>45.703102</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=102 G=45 B=145</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>74.218796</xapG:cyan>
                           <xapG:magenta>98.046898</xapG:magenta>
                           <xapG:yellow>0.781298</xapG:yellow>
                           <xapG:black>0.390601</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=139 G=146 B=152 1</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>48.437500</xapG:cyan>
                           <xapG:magenta>36.328102</xapG:magenta>
                           <xapG:yellow>33.593796</xapG:yellow>
                           <xapG:black>1.562500</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=90</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>229</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=80</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>204</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=70</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>178</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=60</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>153</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=50</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>127</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=40</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>101</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=30</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>76</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=20</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>50</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=10</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>25</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=5</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>12</xapG:gray>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_AGM_Core/capture_currentpagedevice get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -25.2451 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 25.2451 li237.212 25.2451 li237.212 0 licpclp[1 0 0 1 0 0 ] concat3.57178 0.162109 mo3.57178 22.8398 li0 22.8398 li0 0.162109 li3.57178 0.162109 licpfalse sop/0 [/DeviceCMYK] /CSA add_res0 0.91 0.72 0.23 cmykf20.2456 5.19336 mo20.2456 4.06641 li20.2456 2.70508 20.0464 1.69922 19.2876 0.96582 cv18.6494 0.349609 17.6938 0.0722656 16.5366 0.0722656 cv15.6528 0.0722656 14.6128 0.144531 14.2578 0.205078 cv14.0776 0.234375 13.9751 0.337891 13.9751 0.541992 cv13.9751 8.71875 li13.9751 8.92773 14.0776 9.02539 14.2578 9.05469 cv14.6128 9.11523 15.6528 9.1875 16.5366 9.1875 cv17.7046 9.1875 18.667 8.90137 19.3057 8.27148 cv20.0537 7.53418 20.2456 6.53906 20.2456 5.19336 cvcp18.8691 5.13672 mo18.8691 6.26172 18.7358 6.94922 18.2515 7.43945 cv17.8306 7.86426 17.2261 8.01465 16.5366 8.01465 cv16.0317 8.01465 15.6826 8.00293 15.3643 7.98438 cv15.3643 1.28125 li15.6885 1.26367 16.0317 1.24512 16.5366 1.24512 cv17.1992 1.24512 17.7832 1.38281 18.2012 1.76953 cv18.7163 2.24609 18.8691 2.96289 18.8691 4.12305 cv18.8691 5.13672 licp34.7842 5.82031 mo34.7842 0.391602 li34.7842 0.259766 34.6763 0.163086 34.5498 0.163086 cv33.6299 0.163086 li33.4976 0.163086 33.3955 0.265625 33.3955 0.391602 cv33.3955 5.82031 li33.3955 7.28711 32.9868 8.02734 31.5923 8.02734 cv30.1973 8.02734 29.7886 7.28125 29.7886 5.82031 cv29.7886 0.391602 li29.7886 0.259766 29.6802 0.163086 29.5542 0.163086 cv28.6343 0.163086 li28.502 0.163086 28.3994 0.265625 28.3994 0.391602 cv28.3994 5.82031 li28.3994 8.25 29.6504 9.1875 31.5923 9.1875 cv33.5337 9.1875 34.7842 8.25 34.7842 5.82031 cvcp27.2676 1.125 mo27.2676 0.384766 li27.2676 0.253906 27.1655 0.163086 27.0327 0.163086 cv21.2012 0.163086 li21.0693 0.163086 20.9609 0.259766 20.9609 0.384766 cv20.9609 1.125 li20.9609 1.25781 21.0693 1.33008 21.2012 1.33008 cv23.4258 1.33008 li23.4258 8.85645 li23.4258 8.98828 23.5278 9.09668 23.6543 9.09668 cv24.5801 9.09668 li24.7124 9.09668 24.8086 8.98242 24.8086 8.85645 cv24.8086 1.33008 li27.0327 1.33008 li27.1655 1.33008 27.2676 1.25098 27.2676 1.125 cvcp80.4277 7.91602 mo80.5361 7.90625 80.6436 7.9668 80.6436 8.08691 cv80.6436 8.6875 li80.6436 8.8623 80.6016 8.94531 80.397 8.98242 cv79.6631 9.11719 79.0986 9.1875 78.1548 9.1875 cv76.4839 9.1875 75.335 8.25391 75.335 5.95117 cv75.335 5.5332 li75.335 3.73535 76.0303 2.31543 78.1128 2.31543 cv80.2192 2.31543 80.8662 3.7832 80.8662 5.5332 cv80.8662 5.91016 li80.8662 6.08496 80.7881 6.19336 80.6318 6.19336 cv76.6577 6.19336 li76.6577 6.29492 li76.6577 7.35938 77.0845 8.03906 78.2148 8.03906 cv79.0024 8.03906 79.8389 7.96289 80.3799 7.91992 cv80.4277 7.91602 licp79.5313 5.14648 mo79.5313 3.98633 79.0146 3.44531 78.1128 3.44531 cv77.2227 3.44531 76.6636 4.01074 76.6636 5.14648 cv76.6636 5.22461 li79.5313 5.22461 li79.5313 5.14648 licp56.7334 8.85059 mo56.7334 8.98242 56.8413 9.09668 56.9678 9.09668 cv57.8154 9.09668 li57.9478 9.09668 58.0562 8.97656 58.0562 8.85059 cv58.0562 3.89648 li58.585 3.62598 59.0903 3.44531 59.5469 3.44531 cv60.4668 3.44531 60.7192 3.78223 60.7192 4.91211 cv60.7192 8.85059 li60.7192 8.98242 60.8276 9.09668 60.96 9.09668 cv61.8013 9.09668 li61.9336 9.09668 62.042 8.98242 62.042 8.85059 cv62.042 4.77051 li62.042 3.43555 61.5811 2.31543 59.9556 2.31543 cv59.2041 2.31543 58.7002 2.46875 57.9692 2.91992 cv57.9595 2.63965 li57.9546 2.50781 57.8491 2.39941 57.7163 2.39941 cv55.4834 2.39941 li55.3511 2.39941 55.249 2.50781 55.249 2.64063 cv55.249 2.64063 55.249 2.58594 55.249 2.71777 cv55.249 2.84961 55.3379 2.95898 55.4834 3.00195 cv56.7334 3.36816 li56.7334 8.85059 licp71.3379 7.42578 mo71.3379 8.89258 71.8794 9.1875 73.1118 9.1875 cv73.3579 9.1875 73.6465 9.15625 73.9111 9.11523 cv74.0674 9.08984 74.1338 9.01855 74.1338 8.9043 cv74.1338 8.31543 li74.1338 8.19531 74.0435 8.14063 73.8813 8.14063 cv73.2261 8.14063 li72.769 8.14063 72.6665 8.05664 72.6665 7.42578 cv72.6665 3.43945 li73.8569 3.43945 li73.9893 3.43945 74.0977 3.33105 74.0977 3.19922 cv74.0977 2.63965 li74.0977 2.50781 73.9893 2.39941 73.8569 2.39941 cv72.6665 2.39941 li72.6665 1.125 li72.6665 0.990234 72.5542 0.913086 72.438 0.932617 cv71.5664 1.07617 li71.4297 1.09961 71.3379 1.2002 71.3379 1.31738 cv71.3379 2.39941 li70.062 2.39941 li69.9302 2.39941 69.8276 2.49609 69.8276 2.62793 cv69.8276 2.72363 li69.8276 2.85645 69.9302 2.95703 70.062 3.00293 cv71.3379 3.37793 li71.3379 7.42578 licp66.4458 9.1875 mo64.6182 9.1875 63.6743 7.9668 63.6743 6.22266 cv63.6743 5.2793 li63.6743 3.53516 64.6182 2.31543 66.4458 2.31543 cv68.2734 2.31543 69.2236 3.53516 69.2236 5.2793 cv69.2236 6.22266 li69.2236 7.9668 68.2734 9.1875 66.4458 9.1875 cvcp67.9009 5.2793 mo67.9009 4.17285 67.4316 3.46289 66.4458 3.46289 cv65.4658 3.46289 64.9971 4.16699 64.9971 5.2793 cv64.9971 6.22266 li64.9971 7.3291 65.46 8.03906 66.4458 8.03906 cv67.4258 8.03906 67.9009 7.33496 67.9009 6.22266 cv67.9009 5.2793 licp47.269 8.68164 mo47.269 0.391602 li47.269 0.265625 47.1792 0.163086 47.0469 0.163086 cv46.2109 0.163086 li46.085 0.163086 45.9888 0.265625 45.9888 0.391602 cv45.9888 7.07031 li45.9888 7.11328 45.9707 7.14258 45.9526 7.14258 cv45.9346 7.14258 45.9043 7.10742 45.8926 7.07617 cv42.646 0.475586 li42.5259 0.228516 42.4297 0.163086 42.1348 0.163086 cv41.1553 0.163086 li40.9263 0.163086 40.7402 0.34375 40.7402 0.572266 cv40.7402 8.9043 li40.7402 9.03125 40.8423 9.09668 40.9688 9.09668 cv41.792 9.09668 li41.9185 9.09668 42.0146 8.98828 42.0146 8.8623 cv42.0146 2.32715 li42.0146 2.2793 42.0269 2.26172 42.0508 2.26172 cv42.0747 2.26172 42.0986 2.2793 42.123 2.32715 cv45.3154 8.78418 li45.4414 9.06055 45.6338 9.09668 45.8745 9.09668 cv46.8545 9.09668 li47.083 9.09668 47.269 8.91016 47.269 8.68164 cvcp55.1211 8.48535 mo55.2563 8.5293 55.3618 8.65918 55.3618 8.79688 cv55.3618 8.92773 55.3618 8.85645 55.3618 8.85645 cv55.3618 8.98828 55.2534 9.09668 55.1211 9.09668 cv53.0884 9.09668 li52.9565 9.09668 52.8442 8.98828 52.8394 8.85645 cv52.8306 8.58789 li52.2891 8.93164 51.625 9.1875 51 9.1875 cv49.9897 9.1875 48.98 8.77148 48.98 7.20898 cv48.98 7.11328 li48.98 5.77832 49.7798 5.09863 51.8955 5.09863 cv52.7192 5.09863 li52.7192 4.59375 li52.7192 3.69727 52.3706 3.42773 51.5469 3.42773 cv50.7715 3.42773 50.0952 3.5 49.6538 3.51953 cv49.5942 3.52246 li49.48 3.52734 49.3706 3.4873 49.3706 3.3252 cv49.3706 2.73047 li49.3706 2.59766 49.4487 2.51953 49.6108 2.49023 cv50.0981 2.39941 50.7231 2.31543 51.5469 2.31543 cv53.2363 2.31543 54.042 3.11523 54.042 4.59375 cv54.042 8.13672 li55.1211 8.48535 licp52.7192 6.00684 mo51.8955 6.00684 li50.6211 6.00684 50.3086 6.34375 50.3086 7.10742 cv50.3086 7.20313 li50.3086 7.93066 50.645 8.12305 51.2944 8.12305 cv51.7876 8.12305 52.2563 7.9668 52.7192 7.71387 cv52.7192 6.00684 licp88.4175 8.85059 mo88.4175 8.98242 88.5254 9.09668 88.6519 9.09668 cv89.4995 9.09668 li89.6318 9.09668 89.7397 8.97656 89.7397 8.85059 cv89.7397 3.82422 li90.2568 3.57227 90.876 3.45117 91.2671 3.45117 cv92.0605 3.45117 92.4033 3.76953 92.4033 4.89453 cv92.4033 8.85059 li92.4033 8.98242 92.5117 9.09668 92.6436 9.09668 cv93.4854 9.09668 li93.6177 9.09668 93.7261 8.98242 93.7261 8.85059 cv93.7261 4.89453 li93.7261 3.27148 93.0347 2.31543 91.5674 2.31543 cv90.8823 2.31543 90.2568 2.45898 89.7397 2.72461 cv89.7397 0.241211 li89.7397 0.109375 89.6377 0 89.5054 0 cv87.1675 0 li87.0352 0 86.9331 0.109375 86.9331 0.241211 cv86.9331 0.241211 86.9331 0.1875 86.9331 0.318359 cv86.9331 0.450195 87.0215 0.560547 87.1675 0.603516 cv88.4175 0.96875 li88.4175 8.85059 licp86.5366 7.96875 mo86.6509 7.96094 86.7598 8.02734 86.7598 8.14648 cv86.7598 8.75391 li86.7598 8.92871 86.7114 9.00098 86.5127 9.04297 cv86.1763 9.11523 85.6353 9.1875 84.9858 9.1875 cv83.3867 9.1875 82.3345 8.12891 82.3345 6.26563 cv82.3345 5.2373 li82.3345 3.37305 83.3809 2.31543 84.9858 2.31543 cv85.6289 2.31543 86.1763 2.38672 86.5127 2.45898 cv86.7114 2.50195 86.7598 2.56836 86.7598 2.74805 cv86.7598 3.35547 li86.7598 3.47559 86.6563 3.54004 86.542 3.53516 cv86.5 3.5332 li85.9917 3.50879 85.6714 3.45117 84.9858 3.45117 cv84.2227 3.45117 83.6572 3.93262 83.6572 5.2373 cv83.6572 6.26563 li83.6572 7.56348 84.2163 8.05078 84.9858 8.05078 cv85.6714 8.05078 85.9932 8.00879 86.4946 7.97168 cv86.5366 7.96875 licp0 0 0 1 cmykf237.2 16.5146 mo235.216 23.4404 li234.843 24.7393 234.398 25.2197 233.015 25.2197 cv232.678 25.2197 232.257 25.1729 232.005 25.1123 cv231.861 25.0752 231.752 25.04 231.752 24.9189 cv231.752 24.4756 li231.752 24.3428 231.849 24.2822 231.981 24.2822 cv231.993 24.2822 232.005 24.2822 232.017 24.2822 cv232.282 24.3057 232.823 24.3545 233.087 24.3545 cv233.773 24.3545 234.074 24.1748 234.278 23.333 cv234.398 22.8389 li234.23 22.8389 li233.869 22.8389 233.556 22.7549 233.34 22.0088 cv231.741 16.5146 li231.728 16.4893 231.728 16.4541 231.728 16.4287 cv231.728 16.3096 231.8 16.2256 231.945 16.2256 cv232.606 16.2256 li232.703 16.2256 232.787 16.3213 232.811 16.417 cv234.23 21.6357 li234.29 21.8779 234.375 21.9014 234.458 21.9014 cv234.651 21.9014 li236.118 16.4053 li236.142 16.3096 236.238 16.2256 236.346 16.2256 cv237.02 16.2256 li237.14 16.2256 237.212 16.3096 237.212 16.4287 cv237.212 16.4541 237.212 16.4893 237.2 16.5146 cvcp229.54 18.3545 mo229.54 17.6318 229.215 17.0674 227.917 17.0674 cv226.57 17.0674 226.293 17.6807 226.293 18.3545 cv226.293 18.4502 li226.293 18.9795 226.534 19.6768 227.917 19.6768 cv229.215 19.6768 229.54 19.1709 229.54 18.4502 cv229.54 18.3545 licp229.636 23.2842 mo229.636 22.8154 229.251 22.6221 228.169 22.3467 cv226.81 21.9971 li226.461 22.2979 226.221 22.5986 226.221 23.2236 cv226.221 23.333 li226.221 24.0049 226.618 24.4268 227.953 24.4268 cv229.324 24.4268 229.636 24.042 229.636 23.3799 cv229.636 23.2842 licp230.61 17.0303 mo230.177 17.1143 li230.394 17.3428 230.586 17.7041 230.586 18.3545 cv230.586 18.4502 li230.586 19.7725 229.768 20.5068 227.917 20.5068 cv227.279 20.5068 226.871 20.4092 226.522 20.2666 cv226.317 20.3623 226.221 20.4951 226.221 20.6748 cv226.221 20.8799 226.317 20.9873 226.593 21.0596 cv228.385 21.5166 li229.564 21.8174 230.695 22.1533 230.695 23.2842 cv230.695 23.3799 li230.695 24.5342 229.925 25.2451 227.953 25.2451 cv226.052 25.2451 225.187 24.5107 225.187 23.333 cv225.187 23.2236 li225.187 22.5498 225.547 21.9971 225.945 21.6963 cv225.86 21.6611 li225.475 21.4932 225.307 21.0947 225.307 20.7236 cv225.307 20.71 li225.307 20.3857 225.463 20.0381 225.8 19.8447 cv225.427 19.4951 225.247 19.0635 225.247 18.4502 cv225.247 18.3545 li225.247 17.2842 225.848 16.2256 227.917 16.2256 cv230.55 16.2256 li230.695 16.2256 230.827 16.3447 230.827 16.4893 cv230.827 16.8018 li230.827 16.958 230.743 17.0068 230.61 17.0303 cvcp222.877 19.0752 mo222.877 17.8486 222.384 17.0674 221.254 17.0674 cv220.136 17.0674 219.643 17.8369 219.643 19.0752 cv219.643 19.9893 li219.643 21.2158 220.124 21.9971 221.254 21.9971 cv222.373 21.9971 222.877 21.2275 222.877 19.9893 cv222.877 19.0752 licp221.254 22.9229 mo219.487 22.9229 218.584 21.7568 218.584 19.9893 cv218.584 19.0752 li218.584 17.3076 219.487 16.1416 221.254 16.1416 cv223.022 16.1416 223.936 17.3076 223.936 19.0752 cv223.936 19.9893 li223.936 21.7568 223.022 22.9229 221.254 22.9229 cvcp216.829 22.8389 mo216.204 22.8389 li216.083 22.8389 215.987 22.7314 215.987 22.5986 cv215.987 14.0244 li215.987 13.9033 216.072 13.7959 216.204 13.7959 cv216.829 13.7959 li216.95 13.7959 217.045 13.8916 217.045 14.0244 cv217.045 22.5986 li217.045 22.7197 216.961 22.8389 216.829 22.8389 cvcp213.39 19.0752 mo213.39 17.8486 212.897 17.0674 211.766 17.0674 cv210.648 17.0674 210.155 17.8369 210.155 19.0752 cv210.155 19.9893 li210.155 21.2158 210.636 21.9971 211.766 21.9971 cv212.884 21.9971 213.39 21.2275 213.39 19.9893 cv213.39 19.0752 licp211.766 22.9229 mo209.999 22.9229 209.096 21.7568 209.096 19.9893 cv209.096 19.0752 li209.096 17.3076 209.999 16.1416 211.766 16.1416 cv213.534 16.1416 214.448 17.3076 214.448 19.0752 cv214.448 19.9893 li214.448 21.7568 213.534 22.9229 211.766 22.9229 cvcp207.437 22.8389 mo206.86 22.8389 li206.728 22.8389 206.62 22.7314 206.62 22.5986 cv206.62 18.6416 li206.62 17.4268 206.21 17.0557 205.296 17.0557 cv204.792 17.0557 204.226 17.2471 203.673 17.5244 cv203.673 22.5986 li203.673 22.7197 203.565 22.8389 203.433 22.8389 cv202.843 22.8389 li202.723 22.8389 202.615 22.7314 202.615 22.5986 cv202.615 16.4658 li202.615 16.333 202.711 16.2256 202.843 16.2256 cv203.445 16.2256 li203.577 16.2256 203.673 16.333 203.673 16.4658 cv203.673 16.6943 li204.334 16.3213 204.875 16.1416 205.585 16.1416 cv207.029 16.1416 207.677 17.042 207.677 18.6416 cv207.677 22.5986 li207.677 22.7314 207.57 22.8389 207.437 22.8389 cvcp200.739 22.8389 mo200.162 22.8389 li200.03 22.8389 199.921 22.7314 199.921 22.5986 cv199.921 18.6416 li199.921 17.4404 199.417 17.0674 198.634 17.0674 cv198.261 17.0674 197.504 17.1631 196.975 17.4033 cv196.975 22.5986 li196.975 22.7197 196.867 22.8389 196.735 22.8389 cv196.145 22.8389 li196.025 22.8389 195.917 22.7314 195.917 22.5986 cv195.917 14.0361 li195.917 13.9033 196.013 13.7959 196.145 13.7959 cv196.747 13.7959 li196.878 13.7959 196.975 13.9033 196.975 14.0361 cv196.975 16.5146 li197.552 16.2607 198.298 16.1416 198.815 16.1416 cv200.089 16.1416 200.98 16.874 200.98 18.6416 cv200.98 22.5986 li200.98 22.7314 200.872 22.8389 200.739 22.8389 cvcp194.33 22.792 mo193.933 22.8623 193.391 22.9229 192.826 22.9229 cv191.191 22.9229 190.265 21.7686 190.265 20.001 cv190.265 19.0635 li190.265 17.2959 191.179 16.1416 192.826 16.1416 cv193.379 16.1416 193.933 16.2002 194.33 16.2725 cv194.522 16.3096 194.57 16.3701 194.57 16.5381 cv194.57 16.9697 li194.57 17.0908 194.474 17.1514 194.366 17.1514 cv194.341 17.1514 194.33 17.1514 194.318 17.1514 cv193.789 17.0908 193.416 17.0674 192.826 17.0674 cv191.864 17.0674 191.323 17.7041 191.323 19.0635 cv191.323 20.001 li191.323 21.3486 191.852 21.9971 192.826 21.9971 cv193.416 21.9971 193.789 21.9736 194.318 21.9131 cv194.33 21.9131 194.341 21.9131 194.366 21.9131 cv194.474 21.9131 194.57 21.9736 194.57 22.0928 cv194.57 22.5264 li194.57 22.6826 194.522 22.7549 194.33 22.792 cvcp187.94 18.9541 mo187.94 17.5967 187.422 17.0674 186.365 17.0674 cv185.331 17.0674 184.752 17.6553 184.752 18.9541 cv184.752 19.0635 li187.94 19.0635 li187.94 18.9541 licp188.782 19.8682 mo184.752 19.8682 li184.752 20.0381 li184.752 21.4678 185.318 21.9971 186.424 21.9971 cv187.122 21.9971 188.012 21.9502 188.565 21.8643 cv188.589 21.8643 188.601 21.8643 188.625 21.8643 cv188.721 21.8643 188.818 21.9131 188.818 22.0342 cv188.818 22.4424 li188.818 22.5986 188.769 22.6826 188.577 22.7197 cv187.891 22.8506 187.23 22.9229 186.424 22.9229 cv185.042 22.9229 183.695 22.2744 183.695 20.0381 cv183.695 18.9541 li183.695 17.2354 184.645 16.1416 186.365 16.1416 cv188.12 16.1416 189.01 17.2471 189.01 18.9541 cv189.01 19.6045 li189.01 19.7607 188.926 19.8682 188.782 19.8682 cvcp182.633 22.8623 mo182.392 22.8994 182.08 22.9229 181.851 22.9229 cv180.745 22.9229 180.215 22.6357 180.215 21.3115 cv180.215 17.1143 li179.049 16.9834 li178.917 16.9697 178.821 16.8994 178.821 16.7666 cv178.821 16.4424 li178.821 16.3096 178.917 16.2256 179.049 16.2256 cv180.215 16.2256 li180.215 15.0459 li180.215 14.9268 180.3 14.8311 180.432 14.8057 cv181.057 14.71 li181.07 14.71 181.082 14.71 181.094 14.71 cv181.19 14.71 181.274 14.7939 181.274 14.915 cv181.274 16.2256 li182.573 16.2256 li182.706 16.2256 182.813 16.333 182.813 16.4658 cv182.813 16.874 li182.813 17.0068 182.706 17.1143 182.573 17.1143 cv181.274 17.1143 li181.274 21.3115 li181.274 21.9736 181.443 22.0693 181.923 22.0693 cv182.597 22.0693 li182.765 22.0693 182.849 22.1182 182.849 22.2373 cv182.849 22.6592 li182.849 22.7666 182.79 22.8389 182.633 22.8623 cvcp177.031 19.0752 mo177.031 17.8486 176.538 17.0674 175.407 17.0674 cv174.289 17.0674 173.795 17.8369 173.795 19.0752 cv173.795 19.9893 li173.795 21.2158 174.277 21.9971 175.407 21.9971 cv176.526 21.9971 177.031 21.2275 177.031 19.9893 cv177.031 19.0752 licp175.407 22.9229 mo173.639 22.9229 172.738 21.7568 172.738 19.9893 cv172.738 19.0752 li172.738 17.3076 173.639 16.1416 175.407 16.1416 cv177.175 16.1416 178.089 17.3076 178.089 19.0752 cv178.089 19.9893 li178.089 21.7568 177.175 22.9229 175.407 22.9229 cvcp171.079 22.8389 mo170.5 22.8389 li170.369 22.8389 170.26 22.7314 170.26 22.5986 cv170.26 18.6416 li170.26 17.4268 169.851 17.0557 168.938 17.0557 cv168.432 17.0557 167.868 17.2471 167.314 17.5244 cv167.314 22.5986 li167.314 22.7197 167.206 22.8389 167.074 22.8389 cv166.484 22.8389 li166.364 22.8389 166.256 22.7314 166.256 22.5986 cv166.256 16.4658 li166.256 16.333 166.352 16.2256 166.484 16.2256 cv167.085 16.2256 li167.218 16.2256 167.314 16.333 167.314 16.4658 cv167.314 16.6943 li167.975 16.3213 168.516 16.1416 169.226 16.1416 cv170.669 16.1416 171.319 17.042 171.319 18.6416 cv171.319 22.5986 li171.319 22.7314 171.21 22.8389 171.079 22.8389 cvcp163.562 19.6396 mo162.672 19.6396 li161.217 19.6396 160.833 19.9658 160.833 20.8193 cv160.833 20.9639 li160.833 21.8291 161.241 22.0576 161.939 22.0576 cv162.492 22.0576 162.985 21.8896 163.562 21.5771 cv163.562 19.6396 licp164.379 22.8389 mo163.827 22.8389 li163.695 22.8389 163.586 22.7314 163.586 22.5986 cv163.586 22.335 li163.009 22.6709 162.408 22.9229 161.734 22.9229 cv160.712 22.9229 159.774 22.4775 159.774 20.9756 cv159.774 20.8311 li159.774 19.5322 160.532 18.8818 162.672 18.8818 cv163.562 18.8818 li163.562 18.4014 li163.562 17.3916 163.213 17.042 162.276 17.042 cv161.494 17.042 160.917 17.0908 160.436 17.1396 cv160.412 17.1396 160.399 17.1396 160.375 17.1396 cv160.267 17.1396 160.159 17.1025 160.159 16.9463 cv160.159 16.5264 li160.159 16.3936 160.243 16.3213 160.412 16.2979 cv160.905 16.2139 161.458 16.1416 162.276 16.1416 cv163.947 16.1416 164.621 16.9834 164.621 18.4014 cv164.621 22.5986 li164.621 22.7314 164.512 22.8389 164.379 22.8389 cvcp157.911 22.8389 mo157.165 22.8389 li156.972 22.8389 156.84 22.7666 156.78 22.6475 cv153.064 15.5869 li153.052 15.5635 153.04 15.5518 153.028 15.5518 cv153.016 15.5518 153.016 15.5635 153.016 15.5869 cv153.016 22.6104 li153.016 22.7314 152.919 22.8389 152.799 22.8389 cv152.174 22.8389 li152.053 22.8389 151.958 22.8154 151.958 22.6943 cv151.958 14.2412 li151.958 14.0479 152.114 13.9033 152.306 13.9033 cv152.967 13.9033 li153.304 13.9033 153.365 13.9639 153.46 14.1455 cv157.153 21.167 li157.176 21.2041 li157.189 21.2041 157.189 21.1787 157.189 21.167 cv157.189 14.1318 li157.189 14.0127 157.285 13.9033 157.405 13.9033 cv158.042 13.9033 li158.174 13.9033 158.259 14.0127 158.259 14.1318 cv158.259 22.4912 li158.259 22.6826 158.103 22.8389 157.911 22.8389 cvcp145.606 17.1514 mo145.209 17.0791 144.583 17.0674 144.199 17.0674 cv143.021 17.0674 142.636 17.7998 142.636 19.0869 cv142.636 19.9521 li142.636 21.2646 143.008 21.9971 144.199 21.9971 cv144.608 21.9971 145.197 21.9619 145.606 21.9248 cv145.606 17.1514 licp146.412 22.7197 mo145.667 22.8623 144.933 22.9229 144.199 22.9229 cv142.408 22.9229 141.578 21.7568 141.578 19.9521 cv141.578 19.0869 li141.578 17.1982 142.443 16.1416 144.199 16.1416 cv144.572 16.1416 145.137 16.1768 145.606 16.2607 cv145.606 14.0244 li145.606 13.9033 145.703 13.7959 145.834 13.7959 cv146.448 13.7959 li146.568 13.7959 146.665 13.8916 146.665 14.0244 cv146.665 22.4424 li146.665 22.5986 146.628 22.6826 146.412 22.7197 cvcp139.918 22.8389 mo139.341 22.8389 li139.208 22.8389 139.1 22.7314 139.1 22.5986 cv139.1 18.6416 li139.1 17.4268 138.692 17.0557 137.778 17.0557 cv137.273 17.0557 136.708 17.2471 136.154 17.5244 cv136.154 22.5986 li136.154 22.7197 136.046 22.8389 135.914 22.8389 cv135.325 22.8389 li135.205 22.8389 135.096 22.7314 135.096 22.5986 cv135.096 16.4658 li135.096 16.333 135.192 16.2256 135.325 16.2256 cv135.925 16.2256 li136.058 16.2256 136.154 16.333 136.154 16.4658 cv136.154 16.6943 li136.816 16.3213 137.357 16.1416 138.066 16.1416 cv139.509 16.1416 140.159 17.042 140.159 18.6416 cv140.159 22.5986 li140.159 22.7314 140.05 22.8389 139.918 22.8389 cvcp132.402 19.6396 mo131.512 19.6396 li130.057 19.6396 129.672 19.9658 129.672 20.8193 cv129.672 20.9639 li129.672 21.8291 130.082 22.0576 130.779 22.0576 cv131.332 22.0576 131.825 21.8896 132.402 21.5771 cv132.402 19.6396 licp133.22 22.8389 mo132.667 22.8389 li132.535 22.8389 132.426 22.7314 132.426 22.5986 cv132.426 22.335 li131.849 22.6709 131.248 22.9229 130.574 22.9229 cv129.552 22.9229 128.614 22.4775 128.614 20.9756 cv128.614 20.8311 li128.614 19.5322 129.372 18.8818 131.512 18.8818 cv132.402 18.8818 li132.402 18.4014 li132.402 17.3916 132.053 17.042 131.116 17.042 cv130.333 17.042 129.756 17.0908 129.276 17.1396 cv129.251 17.1396 129.24 17.1396 129.215 17.1396 cv129.107 17.1396 128.999 17.1025 128.999 16.9463 cv128.999 16.5264 li128.999 16.3936 129.083 16.3213 129.251 16.2979 cv129.745 16.2139 130.297 16.1416 131.116 16.1416 cv132.787 16.1416 133.46 16.9834 133.46 18.4014 cv133.46 22.5986 li133.46 22.7314 133.352 22.8389 133.22 22.8389 cvcp124.714 19.7607 mo122.321 19.7607 li122.189 19.7607 122.092 19.6885 122.092 19.5557 cv122.092 19.0869 li122.092 18.9678 122.189 18.8701 122.321 18.8701 cv124.714 18.8701 li124.846 18.8701 124.943 18.9541 124.943 19.0869 cv124.943 19.5557 li124.943 19.6768 124.846 19.7607 124.714 19.7607 cvcp119.856 19.0752 mo119.856 17.8486 119.363 17.0674 118.232 17.0674 cv117.114 17.0674 116.621 17.8369 116.621 19.0752 cv116.621 19.9893 li116.621 21.2158 117.102 21.9971 118.232 21.9971 cv119.351 21.9971 119.856 21.2275 119.856 19.9893 cv119.856 19.0752 licp118.232 22.9229 mo116.464 22.9229 115.563 21.7568 115.563 19.9893 cv115.563 19.0752 li115.563 17.3076 116.464 16.1416 118.232 16.1416 cv120 16.1416 120.914 17.3076 120.914 19.0752 cv120.914 19.9893 li120.914 21.7568 120 22.9229 118.232 22.9229 cvcp114.498 17.0557 mo113.945 17.0557 113.439 17.1982 112.838 17.5596 cv112.838 22.5986 li112.838 22.7197 112.73 22.8389 112.598 22.8389 cv112.008 22.8389 li111.888 22.8389 111.78 22.7314 111.78 22.5986 cv111.78 16.4658 li111.78 16.333 111.876 16.2256 112.008 16.2256 cv112.573 16.2256 li112.706 16.2256 112.802 16.333 112.802 16.4658 cv112.802 16.7178 li113.403 16.2979 113.957 16.1416 114.498 16.1416 cv114.666 16.1416 114.75 16.2139 114.75 16.3564 cv114.75 16.8506 li114.75 16.9834 114.666 17.0557 114.498 17.0557 cvcp110.192 22.792 mo109.795 22.8623 109.254 22.9229 108.689 22.9229 cv107.054 22.9229 106.127 21.7686 106.127 20.001 cv106.127 19.0635 li106.127 17.2959 107.042 16.1416 108.689 16.1416 cv109.242 16.1416 109.795 16.2002 110.192 16.2725 cv110.385 16.3096 110.433 16.3701 110.433 16.5381 cv110.433 16.9697 li110.433 17.0908 110.336 17.1514 110.229 17.1514 cv110.205 17.1514 110.192 17.1514 110.18 17.1514 cv109.651 17.0908 109.278 17.0674 108.689 17.0674 cv107.727 17.0674 107.186 17.7041 107.186 19.0635 cv107.186 20.001 li107.186 21.3486 107.715 21.9971 108.689 21.9971 cv109.278 21.9971 109.651 21.9736 110.18 21.9131 cv110.192 21.9131 110.205 21.9131 110.229 21.9131 cv110.336 21.9131 110.433 21.9736 110.433 22.0928 cv110.433 22.5264 li110.433 22.6826 110.385 22.7549 110.192 22.792 cvcp104.295 22.8389 mo103.718 22.8389 li103.586 22.8389 103.478 22.7314 103.478 22.5986 cv103.478 16.4658 li103.478 16.333 103.586 16.2256 103.718 16.2256 cv104.295 16.2256 li104.428 16.2256 104.536 16.333 104.536 16.4658 cv104.536 22.5986 li104.536 22.7314 104.428 22.8389 104.295 22.8389 cvcp104.32 15.167 mo103.707 15.167 li103.574 15.167 103.466 15.0596 103.466 14.9268 cv103.466 13.9639 li103.466 13.8311 103.574 13.7236 103.707 13.7236 cv104.32 13.7236 li104.452 13.7236 104.56 13.8311 104.56 13.9639 cv104.56 14.9268 li104.56 15.0596 104.452 15.167 104.32 15.167 cvcp101.333 22.8389 mo100.744 22.8389 li100.612 22.8389 100.503 22.7314 100.503 22.5986 cv100.503 15.4678 li100.503 15.4443 100.503 15.4307 100.492 15.4307 cv100.479 15.4307 100.479 15.4307 100.467 15.4561 cv98.7476 19.0146 li98.6274 19.2549 98.5073 19.3643 98.2065 19.3643 cv97.6533 19.3643 li97.353 19.3643 97.2324 19.2549 97.1123 19.0146 cv95.3926 15.4561 li95.3804 15.4307 95.3804 15.4307 95.3687 15.4307 cv95.3564 15.4307 95.3564 15.4443 95.3564 15.4678 cv95.3564 22.5986 li95.3564 22.7314 95.2485 22.8389 95.1162 22.8389 cv94.5269 22.8389 li94.3945 22.8389 94.2861 22.7314 94.2861 22.5986 cv94.2861 14.2529 li94.2861 14.0596 94.4424 13.9033 94.6348 13.9033 cv95.4165 13.9033 li95.6333 13.9033 95.7295 13.9521 95.8013 14.1084 cv97.7856 18.2334 li97.834 18.3408 97.8696 18.3662 97.9302 18.3662 cv97.9902 18.3662 98.0264 18.3408 98.0742 18.2334 cv100.059 14.1084 li100.131 13.9521 100.227 13.9033 100.443 13.9033 cv101.225 13.9033 li101.417 13.9033 101.574 14.0596 101.574 14.2529 cv101.574 22.5986 li101.574 22.7314 101.465 22.8389 101.333 22.8389 cvcp89.8608 14.5303 mo89.2837 14.5303 li88.7183 14.5303 88.5503 14.6982 88.5503 15.3584 cv88.5503 16.2256 li89.813 16.2256 li89.9453 16.2256 90.0415 16.3213 90.0415 16.4424 cv90.0415 16.9111 li90.0415 17.0303 89.9453 17.1143 89.813 17.1143 cv88.5503 17.1143 li88.5503 22.5986 li88.5503 22.7197 88.4419 22.8389 88.3218 22.8389 cv87.7324 22.8389 li87.6001 22.8389 87.4917 22.7197 87.4917 22.5986 cv87.4917 17.1143 li86.3257 16.9834 li86.1929 16.9697 86.0972 16.8857 86.0972 16.7666 cv86.0972 16.4424 li86.0972 16.3213 86.1929 16.2256 86.3257 16.2256 cv87.4917 16.2256 li87.4917 15.3584 li87.4917 14.0732 88.1172 13.6885 89.1753 13.6885 cv89.5 13.6885 89.6924 13.7236 89.8491 13.7607 cv89.981 13.7959 90.0776 13.8447 90.0776 13.9521 cv90.0776 14.3486 li90.0776 14.4814 89.9932 14.5303 89.8608 14.5303 cvcp84.1367 19.0752 mo84.1367 17.8486 83.6436 17.0674 82.5132 17.0674 cv81.395 17.0674 80.9019 17.8369 80.9019 19.0752 cv80.9019 19.9893 li80.9019 21.2158 81.3828 21.9971 82.5132 21.9971 cv83.6318 21.9971 84.1367 21.2275 84.1367 19.9893 cv84.1367 19.0752 licp82.5132 22.9229 mo80.7456 22.9229 79.8438 21.7568 79.8438 19.9893 cv79.8438 19.0752 li79.8438 17.3076 80.7456 16.1416 82.5132 16.1416 cv84.2813 16.1416 85.1948 17.3076 85.1948 19.0752 cv85.1948 19.9893 li85.1948 21.7568 84.2813 22.9229 82.5132 22.9229 cvcp75.8115 22.8623 mo75.5713 22.8994 75.2583 22.9229 75.0303 22.9229 cv73.9238 22.9229 73.3945 22.6357 73.3945 21.3115 cv73.3945 17.1143 li72.228 16.9834 li72.0957 16.9697 71.9995 16.8994 71.9995 16.7666 cv71.9995 16.4424 li71.9995 16.3096 72.0957 16.2256 72.228 16.2256 cv73.3945 16.2256 li73.3945 15.0459 li73.3945 14.9268 73.479 14.8311 73.6108 14.8057 cv74.2363 14.71 li74.2485 14.71 74.2603 14.71 74.2725 14.71 cv74.3687 14.71 74.4526 14.7939 74.4526 14.915 cv74.4526 16.2256 li75.7515 16.2256 li75.8838 16.2256 75.9922 16.333 75.9922 16.4658 cv75.9922 16.874 li75.9922 17.0068 75.8838 17.1143 75.7515 17.1143 cv74.4526 17.1143 li74.4526 21.3115 li74.4526 21.9736 74.6211 22.0693 75.1021 22.0693 cv75.7759 22.0693 li75.9438 22.0693 76.0283 22.1182 76.0283 22.2373 cv76.0283 22.6592 li76.0283 22.7666 75.9683 22.8389 75.8115 22.8623 cvcp70.6411 22.8389 mo70.0635 22.8389 li69.9312 22.8389 69.8232 22.7314 69.8232 22.5986 cv69.8232 18.6416 li69.8232 17.4268 69.4141 17.0557 68.5005 17.0557 cv67.9951 17.0557 67.4302 17.2471 66.877 17.5244 cv66.877 22.5986 li66.877 22.7197 66.7686 22.8389 66.6362 22.8389 cv66.0469 22.8389 li65.9268 22.8389 65.8184 22.7314 65.8184 22.5986 cv65.8184 16.4658 li65.8184 16.333 65.9146 16.2256 66.0469 16.2256 cv66.6484 16.2256 li66.7808 16.2256 66.877 16.333 66.877 16.4658 cv66.877 16.6943 li67.5381 16.3213 68.0796 16.1416 68.7891 16.1416 cv70.2319 16.1416 70.8813 17.042 70.8813 18.6416 cv70.8813 22.5986 li70.8813 22.7314 70.7729 22.8389 70.6411 22.8389 cvcp63.3052 18.9541 mo63.3052 17.5967 62.7881 17.0674 61.73 17.0674 cv60.6958 17.0674 60.1187 17.6553 60.1187 18.9541 cv60.1187 19.0635 li63.3052 19.0635 li63.3052 18.9541 licp64.147 19.8682 mo60.1187 19.8682 li60.1187 20.0381 li60.1187 21.4678 60.6836 21.9971 61.79 21.9971 cv62.4878 21.9971 63.3774 21.9502 63.9307 21.8643 cv63.9546 21.8643 63.9668 21.8643 63.9907 21.8643 cv64.0869 21.8643 64.1831 21.9131 64.1831 22.0342 cv64.1831 22.4424 li64.1831 22.5986 64.1353 22.6826 63.9429 22.7197 cv63.2573 22.8506 62.5957 22.9229 61.79 22.9229 cv60.4072 22.9229 59.0601 22.2744 59.0601 20.0381 cv59.0601 18.9541 li59.0601 17.2354 60.0103 16.1416 61.73 16.1416 cv63.4858 16.1416 64.3755 17.2471 64.3755 18.9541 cv64.3755 19.6045 li64.3755 19.7607 64.2915 19.8682 64.147 19.8682 cvcp57.4009 22.8389 mo56.8237 22.8389 li56.6914 22.8389 56.583 22.7314 56.583 22.5986 cv56.583 18.3408 li56.583 17.3311 56.1143 17.0557 55.4888 17.0557 cv55.0562 17.0557 54.5508 17.1982 54.082 17.3799 cv54.1538 17.6436 54.1899 17.9561 54.1899 18.3174 cv54.1899 22.5986 li54.1899 22.7197 54.106 22.8389 53.9736 22.8389 cv53.3364 22.8389 li53.2158 22.8389 53.1318 22.7314 53.1318 22.5986 cv53.1318 18.3174 li53.1318 17.2705 52.8311 17.0557 52.2061 17.0557 cv51.7729 17.0557 51.2437 17.2705 50.7388 17.5244 cv50.7388 22.5986 li50.7388 22.7197 50.6548 22.8389 50.5225 22.8389 cv49.8848 22.8389 li49.7646 22.8389 49.6807 22.7314 49.6807 22.5986 cv49.6807 16.4658 li49.6807 16.333 49.7769 16.2256 49.9092 16.2256 cv50.5103 16.2256 li50.6426 16.2256 50.7388 16.333 50.7388 16.4658 cv50.7388 16.6943 li51.2197 16.3936 51.833 16.1279 52.4946 16.1279 cv53.0117 16.1279 53.3965 16.2725 53.6973 16.6221 cv54.3584 16.3096 55.0679 16.1279 55.6934 16.1279 cv56.7759 16.1279 57.6416 16.6709 57.6416 18.3408 cv57.6416 22.5986 li57.6416 22.7314 57.5332 22.8389 57.4009 22.8389 cvcp48.3457 22.8623 mo48.105 22.8994 47.7925 22.9229 47.564 22.9229 cv46.4575 22.9229 45.9287 22.6357 45.9287 21.3115 cv45.9287 17.1143 li44.7622 16.9834 li44.6299 16.9697 44.5337 16.8994 44.5337 16.7666 cv44.5337 16.4424 li44.5337 16.3096 44.6299 16.2256 44.7622 16.2256 cv45.9287 16.2256 li45.9287 15.0459 li45.9287 14.9268 46.0127 14.8311 46.145 14.8057 cv46.7705 14.71 li46.7822 14.71 46.7944 14.71 46.8066 14.71 cv46.9028 14.71 46.9868 14.7939 46.9868 14.915 cv46.9868 16.2256 li48.2856 16.2256 li48.418 16.2256 48.5259 16.333 48.5259 16.4658 cv48.5259 16.874 li48.5259 17.0068 48.418 17.1143 48.2856 17.1143 cv46.9868 17.1143 li46.9868 21.3115 li46.9868 21.9736 47.1553 22.0693 47.6362 22.0693 cv48.3096 22.0693 li48.478 22.0693 48.562 22.1182 48.562 22.2373 cv48.562 22.6592 li48.562 22.7666 48.502 22.8389 48.3457 22.8623 cvcp43.6558 17.0557 mo43.1025 17.0557 42.5977 17.1982 41.9961 17.5596 cv41.9961 22.5986 li41.9961 22.7197 41.8882 22.8389 41.7559 22.8389 cv41.1665 22.8389 li41.0464 22.8389 40.938 22.7314 40.938 22.5986 cv40.938 16.4658 li40.938 16.333 41.0342 16.2256 41.1665 16.2256 cv41.7319 16.2256 li41.8638 16.2256 41.9604 16.333 41.9604 16.4658 cv41.9604 16.7178 li42.5615 16.2979 43.1147 16.1416 43.6558 16.1416 cv43.8242 16.1416 43.9082 16.2139 43.9082 16.3564 cv43.9082 16.8506 li43.9082 16.9834 43.8242 17.0557 43.6558 17.0557 cvcp38.2441 19.6396 mo37.3545 19.6396 li35.8994 19.6396 35.5146 19.9658 35.5146 20.8193 cv35.5146 20.9639 li35.5146 21.8291 35.9233 22.0576 36.6206 22.0576 cv37.1738 22.0576 37.667 21.8896 38.2441 21.5771 cv38.2441 19.6396 licp39.062 22.8389 mo38.5088 22.8389 li38.3765 22.8389 38.2686 22.7314 38.2686 22.5986 cv38.2686 22.335 li37.6909 22.6709 37.0898 22.9229 36.4165 22.9229 cv35.394 22.9229 34.4561 22.4775 34.4561 20.9756 cv34.4561 20.8311 li34.4561 19.5322 35.2139 18.8818 37.3545 18.8818 cv38.2441 18.8818 li38.2441 18.4014 li38.2441 17.3916 37.8955 17.042 36.9575 17.042 cv36.1758 17.042 35.5986 17.0908 35.1177 17.1396 cv35.0938 17.1396 35.0815 17.1396 35.0576 17.1396 cv34.9492 17.1396 34.8413 17.1025 34.8413 16.9463 cv34.8413 16.5264 li34.8413 16.3936 34.9253 16.3213 35.0938 16.2979 cv35.5864 16.2139 36.1396 16.1416 36.9575 16.1416 cv38.6294 16.1416 39.3027 16.9834 39.3027 18.4014 cv39.3027 22.5986 li39.3027 22.7314 39.1943 22.8389 39.062 22.8389 cvcp32.2197 19.1104 mo32.2197 17.8486 31.8467 17.0303 30.6563 17.0303 cv30.1514 17.0303 29.5859 17.0908 29.2495 17.1514 cv29.2495 21.9131 li29.646 21.9854 30.2715 22.0342 30.6563 22.0342 cv31.835 22.0342 32.2197 21.2646 32.2197 19.9775 cv32.2197 19.1104 licp30.6563 22.9229 mo30.2837 22.9229 29.7183 22.876 29.2495 22.792 cv29.2495 24.9678 li29.2495 25.0889 29.1533 25.1963 29.021 25.1963 cv28.4077 25.1963 li28.2871 25.1963 28.1909 25.1006 28.1909 24.9678 cv28.1909 16.6943 li28.1909 16.5381 28.2271 16.4658 28.4438 16.417 cv29.0811 16.2607 29.9229 16.1416 30.6563 16.1416 cv32.4482 16.1416 33.2778 17.3076 33.2778 19.1104 cv33.2778 19.9775 li33.2778 21.8643 32.4121 22.9229 30.6563 22.9229 cvcp25.6777 18.9541 mo25.6777 17.5967 25.1606 17.0674 24.1025 17.0674 cv23.0684 17.0674 22.4912 17.6553 22.4912 18.9541 cv22.4912 19.0635 li25.6777 19.0635 li25.6777 18.9541 licp26.5195 19.8682 mo22.4912 19.8682 li22.4912 20.0381 li22.4912 21.4678 23.0562 21.9971 24.1626 21.9971 cv24.8604 21.9971 25.75 21.9502 26.3032 21.8643 cv26.3271 21.8643 26.3394 21.8643 26.3633 21.8643 cv26.4595 21.8643 26.5557 21.9131 26.5557 22.0342 cv26.5557 22.4424 li26.5557 22.5986 26.5078 22.6826 26.3154 22.7197 cv25.6299 22.8506 24.9683 22.9229 24.1626 22.9229 cv22.7798 22.9229 21.4326 22.2744 21.4326 20.0381 cv21.4326 18.9541 li21.4326 17.2354 22.3828 16.1416 24.1025 16.1416 cv25.8584 16.1416 26.748 17.2471 26.748 18.9541 cv26.748 19.6045 li26.748 19.7607 26.6641 19.8682 26.5195 19.8682 cvcp19.0518 17.5596 mo19.0518 15.3838 17.9453 14.7588 16.5024 14.7588 cv15.937 14.7588 15.5645 14.7705 15.1675 14.7939 cv15.1675 21.9619 li15.5522 21.9854 15.937 21.9854 16.5024 21.9854 cv17.9453 21.9854 19.0518 21.3486 19.0518 19.1826 cv19.0518 17.5596 licp16.5024 22.9229 mo15.5884 22.9229 14.6626 22.8623 14.314 22.8037 cv14.1572 22.7783 14.061 22.6826 14.061 22.5029 cv14.061 14.2412 li14.061 14.0732 14.1572 13.9639 14.314 13.9404 cv14.6626 13.8799 15.5884 13.8193 16.5024 13.8193 cv18.7271 13.8193 20.146 14.9619 20.146 17.5596 cv20.146 19.1826 li20.146 21.7568 18.7271 22.9229 16.5024 22.9229 cvcp0 0 0 0.56 cmykf%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5[[/CSA [/0 ]]] del_resAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 12.0%%AI8_CreatorVersion: 12.0.1%%For: (PeopleGroup) (PeopleGroup)%%Title: (DTU Nanotek B UK.eps)%%CreationDate: 27/02/08 19:00%AI9_DataStream%Gb",KCNC^ZP2J!ls1g:JR#/?8'FN0l0.oSeUcI>SO)TGhB4GGH6WUPL>3jS6QH%t\op:NZ"Am&]=]DjV;PkpI9dKfS*f57hn\l<N%gP;9-QT%.TDZBOo`41Z,mA(&#U:%#8pu6d1ril1M.l+5T'<p7k40>3\Si4DC:nsVn3Z+f=I!bC&]stWQrpKJhnaYZ;p?MA>j-PsJ%c@6&Vq;aaU=')lG:1dSj(V`pV*.;\]S6fMR:2fU(cgN5i=sH]uDe9NH=)Yj%\Gg2^pZ83M/V<Ybf\#(F6;q5dib&=BI<0E$n94=b%[(1GYoeh-q&\mgRioepOqg0.\oDqH>s5lQFn,2/)rU"`D!.b"Fks'Z"r-\>1rpK^`o(M4\r_-&d\@DNWFah)un^fXW]pA]/"EZkW%X4f!rT:1GEJIa[.pN\q<s0u>3MDK6lH#nK4nN@?Eqo]A9LSMKYf9cMhOXYo9Lqi2D+!.R#GCR68]VdJ(IGIfODf4GbY$cQRrR7fg%*+p96Q%)_`+4'D)?JNGmhHiA'(r(a,nlINoBBR#]md^b"qlmU+nb1jLO'f9q7c\:f^XY1)M6`hGZk!'BnKkW8Gg!9hnWf!c`E'2P%C#$T5Hk1#`h;.2=QT&7UmFB^UVO>*FN=E,i\lH+ZJ%`IA>HF?ef!TEDU&9QsS2Mt4EJhGlcGMd"h_/kl0RupiDfT')4oOM#^#[6.%J71D"QS=7'n63@oJ.Bj)%rRERn'Ab=B^_G4s'GVE1AgG[OfF-X^ifEl%Y(r>rgqF>W\sdZ21DS`I]G>SH[:RWWKqU-auTCC3@s83%Q?)Ec<8).m/CV%0VM-+nh6pFcD6Xe(_V\I150$Rm3S'_HnXK=obFG0`\#6.L@I;NBr;Q>Ql;3P@^XO?O,CPJ-ja4,10CUod_D1"f%/;7SsOj\G5,5dF3E('I?a"9)5F`C+M)umbeiGWOhk)!9]&`IXJ2u\k7*#$&MAs;)4V/T]7)p=bC,#$PmHVSWUZUhEU^SrQ>S9dtZ%VnUR5Z0/D^;M'A%'TN]R@nX1\1hulI<Xf#K;E-jC@@@q2MrV_4p_SsNefTB?cOkcDYnW3/J(#k[QI*:mqsfYt"5%\2+'CDb+3cj4%U3VrJToi:BZ00UiH7uZWlU<,\#Ku&h">b%>=IVcShr=G#2jPZc`pqHH:gO!YAT2bA(P:>GGA-.&%><Ph_h'CjD:ipH'Z(%,(UBnp%n'jFfFa>^c)tmN;7)h]Ea&;JOC7XY=p[gg9Vk$E39P[CE6S4hJ+2ZpJgSms@L$[C'ZXfX_mLsaOhIlc(g)5ZVVrq'G=jH>`4d)5O%g3GTPYL6d'0==G1Q)`jTr_HKjnP@W\2u.t"6#MEAq1&7?^9EnGq1&82T)R%8dn^8AG6md-^ct=ZoM,=WIV(D449&)@eJH9H"Ng\m%ccHLlSc>U[3rKUQa0ihB[''&1r'gY'p_kqI[ad'_a0e&nouE&1]K__^D1gs6pJGW%;)eW>$Hbi._S>$85<ZukVoK"n,.)ZF"Aj`Q%f`l5#$h4*Dre4qJh=*EIg`L$q(08bioZ$ZMK-g&3L/G^i4CH.5JJN=QjUG+ZhBb=o9liX?C]WFQIo2-r5Q8R7b$WXnCc/rK"a:kT%CCh_q*fYh:Pp<&qSd,)shaW+U)k2B<VK_/D:gKNFk%&aB3&f8-HoKTt,GTP$enI6d5'7ngN=4>Fh]:mWV)cjHP80i1OT*V\e).NA%Z:_JjYmf-Gouc;=4L#h)_LJK(eJEL9rZpN\mu/%Ji@HqX1L]NFS2L:fXLrqEINL)bs19o_akO(Dfc%PZ51:nT]NgJ3k7ZDkbr^oi%Cald9A"d&KD,OZV(9,?hb;YsPeu3b^_4k$'5JaqEO*!)#B&')X194NK=+_[4FQ%LuJh=OZ=IT67@u78TAX6mSWV'MchN;$_:Vi:Q%aVY?!qR*;WoK9k:k$DYEGDB(7E_Z?[f79#:IiI-bKPSPsSB*1F/]mABT$+VU>KUrNF5$"9NJm+pA5"RiZo%>Y'A'9i/bp/_]Z"$q%j'M"`S25])-+6D`qNl!\d<4t3O/q%h),n0=e%tJY+abeA>l):Eg]"q.\9`HN[A@d?%cl$G]Bd)p9c,7&`$J.]O-#\>(<[W=Hcl0J%@N5&*iEED5_=l@>e]QN4j3Hsp]JoNmHX+5V,e!dG""<m@./"W0bn=U/[#le7jO3SuiuVb5XN)*6qGObp8H<OadXaB^:q:Hag4L8)%A?8%gC\lU&d<ZJp^n,pnEq:'S>5C(j]gf'@8'uOq^Uq1jrL(AmTAql'3Bqm6F[#g'k1a)gI<gJ1FS0MK-G90Rl2eWqleUsGLTbXQ%h,]"dH@,P<@e0KnrVO_'C2rk=j.@\-UH^,*"/':ns&]hKH@G\KcYM;4nICO+5>T#jl+\#NpJ@7Yq:"YbbPT9@L0e5[L#?i(]6j>J%Ie)Odm8`FYpT)e<#"L)-hi2i-+"Q,oG=+1"r$F&CJ()g$rQ`([9!<[GI(@G&cd/et/q:Sss7$$Y@d!sthkrE\G?_`Ho]l?lOmC%P%jo5p+q:kR<[o\n<Y;8'PORLNamOp5r(9`5bGe^cFgtM;Xh<j$@0l7MKEq>@2ea8-dP6l8Yo60]nkBA$!23#fOmdfKlm#\`Lo/,<1%ImAqajRrEA%u])rqtI"njQdCkI!'mZIQ*,Qe0L2!^gEaI?'7U[e>RctKWueNY?n?)M2dtJDMmo_H?]A^'$0I,P<Zn(hr(=iMqA[E%s1'$P:[3e/bhcD#=oH[H5,r8g*1l3eUcqeWE&UB>UTAM*GSO2YNmpbIeZh/4VbPut1>_67JDT3\eSIS$2Fl#nR5`128_'?r=tAEB%Xc9dCBs3/,ooYj1\N\RlqUF"aRDro:e#dW0Rp]E@A7hL\*h*gaC29kH"0i'[F]V^a6+F9lG%Tq2fUg_o=$tRXVk%hY3Ti\UCu(5C%\U!k_E(I\Qn?amVEc<it)'BC9ndoMs1<_`)1t8D^dF*7AO&ndZ@u`pB6-HKDi%fBq4:],`j-LXF3KRC*H/P*`+ZUChk$cZ[Q"sG2%Cn:l4@G//LX+rU2U%*F=%8PIhL0)4TA9$pdiQ3:aAYpW!k+?c*WlI6P<e^QTV']Q^RGG^#@(KR0GRmGT@5/[Sk,_K`W+/r8=a_!>%O$Eou(\'##g:59h'nRW/pUF-)dD8,B3klKn>/O5f$R-QucS=A*$mrW@WHYQT"r="cV5XJ%:LLHiY\lt8JcXHN_5\DUh$2H@L,D2H%[@^NN#"O1T!DpZ7MASUE#104O*'++*RKHU<@(7e&/[rbPVDb-ufVgVW%851*Ga7!TnRTdaie6TQl*N1n3;W)%)rL&2TQjT6DL(iD%h^f0"H>bF5I0HK*r'\t0a)+].ppg+?I`<B[HTLT[.^!pLfP,,6R[#fjO_,f_K6/X3D:mZELJB3hc#g"uZ+DhCPNr^pY#\KfTrkF$%AjtiNAk(p[S=MK$<G.2FoZbQ^lHBpdPg!,f>A:gO6k=:[nt^E*Xl+,GZFE:>/"T#\To<t(5BTHNWYmh^c%sS6(N8l'XIbJ4,G-_5%-QO6F=b!i:;s<8up,S#2M\OFPE"-\eUl<15I2oq[1I>HF0Bil?Wr0/95E8`%E8&/4?(I<]=_J3Y<#sC]jL<C`\_h:ccHE0/rqpD/%:JIScqR*5)3E*QRD0?&]CY]%[9nK"EC21H%C9OZkhJ?D5p(?-q_&<\<*d2K"!:(8l8):2E[Rs=h3sAHE?aNh8p`>fG9/R]59g2sE%HD:(3)5m$U``@ntlR&P7LP`_6oDro-8R^_YJD!,q5.1O$St[-nRH!(ZZY<?Bb?p<u=Z9?p%C)nPNh':O`%MC5THYNVlIZk>3b<Be%j2saDZf@j+Ldj)";Y8InM#r*7)$Z'YU.h)KSt;GnT?^5FVamZPBfPd`maRgHOEqk=.J:gIaiVZpao#[mEcfa$KG/jp:+V44)CUDn%NH9DnEdW6s5Frl;*Oj(_3qgV^fH(tC/fPp.p&&o\1-_AVkHk!3]UahgT=_Y))\B1l+COm/FETE$T$:oSg!QmlKpeRDR0B!^cPk`)%F`hePFE2JN1d@EL*CZHo5B970jAHHZ9Ym#XD,8mGG2CNuUUG#,lW_upec8K^J6:C]1n96Z0FtL/"S3S4i.DCQV"][RYhr7TM*L]T%5P%CZotc"D]EJ=<"6icM%8P`94*G\l<fTF\$)"skcsdD[ap+e9?.i.QEK3?8R=WN0K'MBu"$L>*D!0DCGL\25DN&\h&S.<J<C8UG%8%IqRm3mnuT]MJK#U#n:^XBUUmqiX/qhMco=,Y02!'%_C[GM^+^lHc5s/h[sCZ`/OR:SN3CKW-$a/5aqM?jE\CL7.L;:=fh?cPb9%b.@/*!-VU!a^A^PAXjQg=B;#gqMa.7L`eHHbJU,Ac;l@n^-B!-nm<,a&rH1C<<$]9pYSI5LJ;os9!R0I^,>5JW["%9HH_,ak,0^/%kXg'#*oDBlMI5;>NR(ILAoZ7<g5b4C_;rT"_[471`(@m]`/1iUrWjkbVmEL57VPV;<af=n3K<Jr@B)U>$O@Y%%ZiT(TbHq&5jjY_%kQ+,4T'I%4KVorniXTZPPQ1_i/\V3Wj%gWm,;UI=F!.D/5ZgfJ%Rc/\!W320J>$@`J8`DoTHbT$5k9Ic"6ZW:;qRWh\i)gadB6lN%bLhLK<;d*$q[@091!oc\UJh_c'p/G"R"3"U!LDYp2*cLbC^/)bfM)NsitOmD'S@@_-3g@X`p]UJpt?tN3-4"?^q8a,&^B=:`0i(:%#%sijZW#/1O7UhkTbEri.*X9,Vh;-k3u9^&`Yk5a)8c20l-59Ko7O@_HF%Z22$6kKgfU-eR[Kp-1T+r!BO4r4QS^4,;W<p?ECOJ6%nr05S$<;icW0IBoF0PWEf_5ub0ZU,Yj&7(n$<TEP!+>L9B$J5Dg'X-Y"uCQ6;Sae3/Z;U!Zs[lG&Ke68+AG-"e'kB/j<lKAD=9LM%4L=%8PHI&%Zq5O<MWZf\*L`+?Rc;^0/"aa)9N&I_EU!#X$0c0QF!ONrl0jS1n3![aa%9Dq&XA?I7(73Gndj+0MN*)U=FOM$4?n@]%j",?5m:6Ad?2&.Z[QSY8Xf&X\cWYADa0SKB[i5;AW<SH('k5Io/b)%5rP[8cheGBTQZ\Mi($SAmoGH'g6_SC*;*WS_W,LBb>?e$Q%>L\MuL^FnI9;'<o<NF-./LcL[Ju0d`N@_f'bh&'CU2mOJK,5MlPCmn]69/2HHu)\c`Zsd.m=8P]#R]r\6.Y^pq-nM:c:t^h3$iVZ%.K/MXccM"+Gke7aJ9h1Z^3*_Nh28PaF&Y9+7k4GU:Zsp4T(l?X6,>80pH`V;6"K"`SCB#$n)V5TVF_dg)IZs8fTT%;lTsoBk!bUL%D2S!8C^H^5=cLea:g-tEg;Xqp*EjmI/TI]*!ae.3h5BOp;+ndUJ4R(!=qr5^eWI2DQ,!3`J]A6_5g65p(0d*Hr1JEQ#%]Z@Wik:2%HY+e"q2,Co8lZ.Ca+H_9noMD1WA_k(r@&e8MP$p%oV:#$jM>?(G[VHQRKdAV`XU\-%hoe2W\>'MAqFhILo,d"Zt4A<X(nT1bsY:,%Z6%1]XR.F@X&Lo=W5=.T<fmkBH<O:s8k"_=[?ah#;N37Cfg98N=DL!U`t+?q<[b>Nd[HuIA[RiR3)nt5.MnA\\r,2]l>roOO\Y(K%4F2gP*U7gDh9G1h"6t,.bGuj+2G)LfD%H9P.]RlpoE?3pNX*KReG\N,s#Z7]+AS[I)!OB:"f%,1C4mpKKr>eWFW3kr<"PhP+?i3k%M&ckc&CutH9)9_2bmM%less.fTN1Y9>(bcb6RZ.U[5qp%MX=T!Y,\]X\,fRrj(UCtYb@m;91u)PbBAPTAN<M/KPY,>Aq\%>;KZe,%We6a(=VJlJ0OM[hc%Zug.KE4E*L&ZplU&$5OG1MoY`WmE<oRT.`%%Kj6Gt04'J(eSOKhW$Y_RcE+X#h&.dUArHg<NR/bS>AM=Rp_%oRL72Ueu'7C9E&d0l$GBgF$2jf;e&(eF\<ig8r83n\E_Tf'*!lH"PTW+L]8<&beKF!n2FpXmP'dSfo'KG0c=CkHgl==9RCl'ru>n%`ZlWU=4uHX[s7O^*dt(ZfC$J@Ns\T'dIP\iIIsT_?2I-+!U8<'=qk;]%$D#Bd10&X6:tHQBar2XOMW2>'h4>6/<UGe/au06N+C[6%[Z4nq#[9j"_FPk_P&)NY;i)>a`*<oa-HIpo@Nm^oeclOs'uL?G:;hBDjqBMCO9pW"-tGdj6]-nI>8;cs:8:+/r*H"1cg%"+WW@It%Q56U*6*#mK_`4.:)QQnD\nKZp<nOf\=gj'$>D72-Fbc1E/aM0#qA-6:NN9F,Q$0;DFP_nS.pI)#4\'@FM_(V:aXV;aMk0]4._AAs%`tj([?hhQP59&CVGAm1>J&Z+[)C-'!+',UP&R,uQOArKb#VK4C=jU6i\e,-PFc7'@Wpl"3rEqNk57hIGG4a(c)n_r1!R2Nq4V.k.%B@Z@IX.$;6#'3`Q35A0'Gj4K>"g)m!Q]CR`'csci3nY!8LH''aliQURC.VRo(_<WW5Nl8]`nM#MMHdL.L="Q18ioA=`tc%9d[C`1%jZ&`o92fohG!3_=\pS1'NMW?&&;Rq/]haE"%95WEVADU0[m]YZ.Ui'C_X;$_jDZpc[AuK/-aQo2?ktiX?l"BG<XH+!bmu0.Z*OJ*%B7a5DMcBpm$Z;GEL_qn+D*[KGEP$"NaC^9fgt=ZlN8=_i=%bM*=Iq7\_"Zmol,4n"[1<V^;aJK^dBZ]201IU01IYj<H?I8/L`YTR%E>\7>=g_]AZ_hEk<_jYGk&RdI92a!=G$[b+Y3\od-a&kP5kuVVGZ.1ok_6,PUT-&q)I;:*U[+4Ni4>K=G+<5%%9dm@HFKhAmo_G\%`_ER5%OQ&X]P5C1FMAI%73(\eBrV._Z0)[3m4kFWF;^u&^LMAND;:b5]=Br:?G)j,>WV-TJ-Y9#_>/@qING#O#Nt9dq0?q.*h8i-%kNB\WH#S3RS=^&LkJ?t>E./juT*OQB_>/@qIdU]u:[_KBr<<eXc\(i\i;>\s57c&cKCe]mr;6XW5F!:3Ifd,BWZ4IfdjQ90,S>;C%`FKUG;,hFs$dY_eL6f.pMWiiWpfpC:_t]=;n!N\dMO3c[jZ=`+?V[(;):;.M1,\-S;O"t[o;IKjn2M^dRrPT'amMWI6!m8G2t@K:%/Bq'lClbp7F`b)mg=n+UD;[6o[75dQV8Fm!ENI#G-*A05i`7&C?D5Emmb-s,d,QMph<37"Bf<!3+&3nARpJ8WE;K(WoVt$D/h-TO%)OAGm#UrR6Voq;Yh3]n(.M2<L5hh71nrs?sCl'^F9HDS^[Wn',[*gE_X@&;260tNqSum8k'O6MO!4Im[6jTn"fdUQ^;k<OHUW_,3%pSm\CZLWQoPu>ZqcbQ_7ong''%+@\pToD_5JinCVei@9<+#7[KQH.r4J0D]-:o]oDeur,!o7rk16]V!hO*oK!_[g:7)>'o39G:@t%1<$?='uS@<ZC!CQ$jcK*R59Si2EaRpRAFPfT&\fjOf)[f7nHbIjTK2MUb>r7\\.d/aidK_WE(u?7j]nTGWDPE;'dT&l/Kq@7d8bl%:3oBnSF=0_%2G.d._4>/-Ri"e$.VZSeP-;!8HqW[E&F!iC.ohM+q7M>"fgjbJQfJNS!JNji`FAihYO)1hi%OA"f`<JlSg')$8e\^%HFoLU@1t+YA>k6eTbi3`)BB"nU?Z/TJJ4*f%T[`B@bF\m?08j9f#_bK\KdVReODLL8dFU"UtMu=F#i/p+R!VaG8WNnWo14K!GKA:%BSh;"$Ul!E7N2b,X1CuC<V!3L]N:9e9&ptX8>^7KBr24la/`n^@p9_/``2e&ai4f`2R]*4FA22_B"UZ1eVd&</X:>f*d@/cArb:c%,^liDjXWShWX^bWSGXUfelLS,qi7Q:"mXrqZ$a)PpD/^X.0"r(+P#P20HtT%VE&RYi%e(Pb%XIk/p;Ms;\d=2;n,e2E?b0\\cq.S%]#Q)eY;S9,NJ;Ard%'3_U&g,"35.i!A+k=CrCY3-*lZH\3I7LY<C+Dn&t\oF-K:GP1EfQl4bk%toNP]mJ!>n<3TdFcCEurmjY3HC%L9AH-:#d=2-QV4IR$.V[]q)ML4uc3oK-pbU;OFY&K<6t799[&R/Z(B5m7hU-`2@)1WTad\?+IHVO#d>?.34>&P_GoX1JGM!-Ca<i%<*GFPIj!K1?[IuSL.QU,jP+*:_Jc(;)7Sk%(^_LXa-_Be*]'HZ`O>c;C7LHfBDp?FQj/"2/)FNqb_U'9S2rJ5lM)M@;q\hJTt?[+%&Oou./%;KH`aR.nT?Ndu`W!eLs"S@7>(?E@qR<HrC!93\X6"Y!/cY1kfkB1mmf^V8?VYY?fNXQnC;nFIbP*@Z1/Vdn1@:MT\tWb;%G3hhV8K-s<HQ@/p.BrIb)P]a!CqH%`S=Q,d3^/T:ANpXUg>ULHD>/Dh#O?Cu\`AE=^9_]TBK$c+?7%nf<P]_Xk<E9RE/(c,+SF7h%`HP/O?'bQ%iXEo9LcpeoB"Gig>]i`[WtLjR=cJd7`lW7+ojZX\q,e'H&e-/W:sk0EG%@m(P:[ZSa_a'3cZQRakiUFU/Mt?hDY85^%c*2brHG"rDfK`@uhEj#WVH#!@G?QITr*qfa&ocm)(!Qc4'L[`fg!QQs=N,fH@uaKWa2!rbM(FStCHf0U_1`T4[OSpDO>&g3^32Vd%6/#u)Jq*-7_?1*hHbrJf)S$RQ(i-#lm-%$f;qQkZo60=j^0AP.M:Wm>Bj\;T5`#`o)uE43]AQd(h&RPi/YGBP!_m)M$A64BQ_3T(%P9m*Y$usFe,EijCp<W:l@tVh^Sn\ga1@dG2I]Cg*1&)13^R!4CnP:GQ[-9`^G[0G%`=p\KdSk.aPWZ;EbkX7ocUkQ-'\8%#=m)L_%U?WU>\n25?<4/m?[SC7@M^mEWR`L#%\tR,!)t8t1QZng]2je^T0<%uY@$8hs8jM!5mOp$+]"0hBG]C*TkK/#dQkYk[md2"mgIp2Y%?M2/Oqrc,Q>2=t$I$M6)*T5f#XZ^\D&+/:iqou`rkGi:8[dF'1fWWiRG$Wh'K0-KU:X^qu3nmW91_VM1ckX1!9%u.=c=1_7c8;)_%=mjJ0?!.n.Q0"TB\l*3e57[&"kjn(p&^NO#Z!"Y.W#J1\^EEij@$Pon"rY$#@Lidt;7s&pI%@*LOfbr&87FFaeLXU^5`Ob[$.C.l%CQ.gM3?"aXBLR/tR/B=(LBdLX_&YY\0s\VC^[qBMi1\!cCJ].@+@"WPHT'LadI\D[O?V/dM>ns%WR\g[Pb!,nB14Ag2RT8*_M^"[%%CL3CUkk41f0Kr(`O0R%:U<sKK4^"P)u-W\Lnu3.Z6ibO';I<&O"qD`\`#T`C/g_b;BhjciK_qkCh5i6Z6)or&#LlZ.G)U4%7`jh%$]e#U:&Q33IT4H.cW")D?4O#V0tPP):4=):g7@\AVTUC=EcT?K/a(W-U,q#R4OP3=6RFrdI$V@'Q^dhbfQ>MK@%qpFNl.n7mk*_'%b<tg%$WXQ)jFc$P:"h*m`YZ(!?(AFM=/sNFi`<JX?FB4GC43/UE!F"#g:CI5^Y6gLelLt]lNZM<WJ0=f2>C9@a.P;2XSm17.ARkj%(Qi?!>[Q)R;Q[<k%,3c=G*=4VB@Se^G-*/u91mg);Hc8j9k@W?)F+ZTBOM,4gK:bPV6I@,Ci!73bN]s6`UH3k(GUnmNM@-4dP6h5%Ad,bYN%#44I8_S_A_8\8-&ZKGR:ZOq2Oek!VkpAIN&Bi$k\B@Rj!J>t@k6h.)^R^W^MYf!Y2,()>Hh;9pK%,(2OPnmc44(E8Jl*1%XOd4ZRLN,QIb?hd%<rE7R4%Z2o-EZ*n`R*eomH8So5t8[Wj#<cpRTWrc@R\SjbLRF!)8\XPX,(2!#rfU<_!0e'#]515T'VW>A9lq%l51s-a5=5P+5lMT-[.d9qpElb0'(kT,LME`n97Z=Zg$`9YPW,ragTGa[P>m+2]p^c80q<=4fRt-nGK<XkO@/a+iSZeiJhU!/@"3a%`eFR7O`XZ?:2/e,)$_DKTts*K>;s(`7a.,d\j?%Q'Vh7OOJ=fBLCG(CeT=.E2\`&d>@WV`c:i"`g+?$q;N$.8>YPI7db1ct2U]u1%505cFQjZ;lW3\/&K]Sm"ILuI60`(c'fBUhG3Hp*hX)3kW'E?])Ol&=<<M&+5#NN-B294\]*q)sG@On'Nd7_N,Aa&`58>Re2W8r?m%rJ^)*'/ZL\3G<B]4bSFiWs4V&FGIj@,<D/;F9a2Z3\(^!Yc?7rSh+nejsT?_^HXG(e,T-cRS-+EauU.kLZAgqf\W$6\4D<5QcO/%%M2G0[f</m#mA82]PA$8jgsV@tp)]Hu\-QZuL-&<j(iDuMbO';-)_uE%rp:iY`p5o/72mJ2U]55<n_Gf,MMHoSY'SZ5=\..kF*U#m%(t45"kEL9bpK3F]qrq)I8NKr)4a!2PGBq&CODa.nV^7nZB:d7E:L.GC9WgG[]37q6LUOW0R$D8T#IR42PNJe.9[Tq<EOlC?<$Hp>%Y0,Eio2R)_GV&9iFRgnob3Y_K/]lub@?_u]h0TRi,_#$;\5b>*e=2T%hNd\pB4U[_`#8B8q%u)p=fpZtqRF"_,_9$:>uIda7oti!%bG;>iQ]h>=dN.F&MtW&k@jZ-QK!*BlW[p!(IgJuLcu#Z*rH;7%YPOXed6/Pi9!.;rgU,peF'/VSIaWhDkmJ%$G1AS<*hPg%)m<`Y%K"?MU#p_%%WO>Dp9`O2:<jbKD`p@l[33Ljp\#8mu)-:E>(g/#jY2q&]p;58`3g7^a!rWfegZR/.<hQNnHsdNhHJBHZ2XU'\`q8qk%R<>/`Zm='YG3m.>-%8-n.;;1N%iE_DS(eucrfbig_/m2b)ekG\aQE*Rb9t:ueQ>!k*]b:#I.//2ekP\gQblarH49>Mj(aFIR3`0P%]NcfL,!"oR;U1s&%OA7")>"d[7TF5A`u0.BEL!'.8K&W^ZFJ"i4jn;^b':Rq]sf@Z#CcO;:Ph\NjnDp:q5N$*3D\69STHubE^Nmb%qi_-3H\Y%iV'u!l-#iUk82meGs!f3Vfj+2f,;QrC(UN0>>0bfcA(Z]\buJcsjg1]7<E,P+4dhM+-dG?A$bUkQ-Jp#uSY;6B[[AK+%C;kIe<CrDG789I74+->*T*V5d"#>8(VLNj!GC6hK&gKUbT2eMCSIX%J@h3p!kLuek<7^5t>4P*]KDpW@Sq[a"(j7:jC2J4O5Us\1%n@G.1YSmeO>FEKMI>Ao3:T>-9%,FaQh)N<mGdG</T^p>k_N!us/aif,53jlnH%ZR-)F2<-DR3=L^S\`qIQ2J(Hq!$BbE/+F3ek&"%oS,g5<4<tZpCHt8;('(&:eHusmmTjE4_-\s=8^NX]toY:!'T,4HalT?E0'GG*o4^s\qbWS&,59/ma42QUO0L@GFT];E0'FQg<[QU%\4?;`=ECuBpG8K%i?$gm4h?DqF:\-0*q%F(E=Hg8]/R@p53&sg%3Frb4kufZ\4=#HBfOnCHalT?E0'GG*o300O00M9-c!`;!`JmT%'qUK:cN]G$<OtJBK#k07A).lW5Wl)u9KtmII``?..AHm$KfM/D-GnZTLaXA85>!ZEq%f^mXXr1j\$C5c,nHNi6C]H,#cc@QHjRP$%;5buR(#i'?1JjD=D5DrtT4<B478hZ66Jgbng=Yea@FlN,_E#Vc\(Y,sPV/sS):6gNUnK1P7\=EqDPIrVP7pUM'G;G)WCC8j^<NR2%3D51G0om2n<(])"6M,$Jl20IBgo-OpEH3aGgRiWFas,,F[?l.-^iU*b'&ll+Y&Ndf8I%O^UII*jh,P77;L4K9+^n?KQAEU9,-2t2%XuKJuOe=2Z=j,m$MZVnj>*_&S"K72Ohn8m%o?"Bl%\0YB[B.euf@pGZpeQY3ggc>k"30;7fb(J9Q=F2/8*:f5c-_6YpqkS?L"5`8%l^h(aJ:^X_P#*e@;OY^IpWJmBNNPR1A!1b.5^tsA+dYid2fXm/s(PBYi!BC6DCH<[L^D1*>HO!9Q=Z[3Xu.?q<%Fc9P>tLVOn*1I%?<(cPT&lI*1?U^`dO\FY<OJ-6c'P8uNmQgQkgi<_./.h%(L"O>F3OkUeWNut.`^QqUK)?]J-],VP^pbZ9"lSG<#[-U5)3>XHTK5H%/]g/NEG$,2WWBZ.Iu@_YpN3ZQ87\lh,bH^L.ksRg/NqLZMaGsu0lajJZpGBD&qboPa/i(>g..J>U/X;?kB&ucl0%p0,=Y.\85bJ&%7H$*0Z&B.r1/obmi#sj26?B//FUH;_OMp%j[;@?0XbcGnjXn-=LB*AJK@Yi;eLF.'KRbjNTNNqdXS-HXM5;+O%^G.A`3Po]gDO"(%47oemO7sm'^/Fnt_Q0qjFcP4.-rqi3h%inO'</p+8LT#Flmg2!dM?sp84mQp1L!CBWViYc9'r:Ie.,buRP-N=\m.05mYCA=AFoa+%7F$'0f,Y4Q4rlcZT7aS%T;u"Jr!6MsC0XJ6*YF2dX='"tRkFT4++#GO_\WD6JPEI[fGqI;F[Y1a_H&U_7,>g-l=SNL]W:R3))E*g%W[/)@*onmnW>SA*cI@e'0l_+)3441nHAt(mD\?I2W*27<ft@Zm?+L<CIhc'=O_n*g@2-FIk85L12P9_+Tei<gWj-.ChlmniMkASA%@FaSk,0(H^q56s5;<O?!5?7Qa'd6[N$AK$NpYC_-nrRCf0OJ"$-4\R`jXt-'9oFEt#f<V,*9:D5e/K2bYB.*\R?,fPk=+elZ/IL?%S^ji'Mq_T>=ibmY*-\!<r_oX(SP-,T7.>$P9g/kK7D>3*l"V%eW[+t\jW-?R13lA@km8UU+hUFml#l./Fl&'T)!=R=V2?TkN4[2i%LQWFV\Fm'uggP?6n,-\E;qt<@;LV,iY=b4tF7/LG%e0D?ei]HI]Lj9shX%ILk[#-2[)SKCr@-00;j?U(i75[)X6Yg*DipE0F3sOL%=gYS42#pmHdrj0(mQ`3'XAch5%Y%$)/em1IU/N1fS.Y>98sXBd5K5ee-QJFMVc+IRDFd)>>RH[V(a+Y:U,X8*R%TOtMSju`hKU@N%"dQn;'L!\V5nkAnLqVe3lpmtiXr_p/p8X>SeY@'#`o1oVB,TRZ%Id=Gp@c"_-]Oi_b=lUZhH*iM>+%`@klC0KWj\-GD<V<U*U/Q=%:b+_`b.3YcV7S5fU<54J!djf+@<m2On'HVQj3(D1R>rh^T4Kc8&;N:nRPL?gMCf[+_&^ScA:!>"LnBtd]r+BgO5]sLkYd.'hdM5>%(tD<@W;e\A&h/"@@I*R(-mErg&cK*77#@X!@`a>u0',G4DF8eK_?l$rPDbZ#3HI00%f%`0^<<bLa+j6,nF,ICb_H88HQh=t5WJd_%0RjE2-bSdm2\LD7.ho28O%3g]q4ue1e_1[bK=QJF@%#L0NppZhrYmmBi).>FQLaQGKfs33-!s^jC^Y=78o_'bjM>Z$=r%<D=eh-$%Y4WJt^EF=TIhhWuFP0)qS]0hLSYU$8G8)oRl_`Me=8;X#X1-?-CFtY58['&=<Q&3,VD;G)hh3n"@&'qU@$F]99l4.9CSTX]egK,t%JfD!i!4;AYDAA.oc1%SXoI#4)lH&j*ek]1m+l7E],?]"`EjamBo;-e)Lj#rB<3\&I`O_rc"OA.h<.e=*"s+\CKQZ"o@lf\=4l)$4%3mQ]aS"HC@k+hfpgj/%QB-pChs#]L.D=<;oZFIBP0Rdn'X^-?IHL)fd?EHfa<h@[H?!Da"/"&q!X(nq!)XD1@<^afB=c[Cm'JKn`%>G59HDurB^`fju?!@jhdCFlrq[uU"Zi6Aa?2rELuhV;Jpr;>h[6'05BWc(,[2k%JVrqubEEH_MLCAr[%nI*\hL&dM(6SR^==*nC*%j?kA(/p62%*lF"R%jQCVbXXDbq>5+#ci4(hru6L':<_dgaaa:k4aA"*J,]QKla;"DJ@O:S)8Q+;l2nNeflDEF\qtA&%P(5%L>R=J%/,X99'iZZt=f\CAVaXIp>Z,<0;;b]LX>=FlA>H1P^VkU!0Ts3Lhq2<&WGe][[4T*6.<Kt;%/r7OjXQQ/qHk%("c2MK'g(R&'U\tK%$3f66JqBEE[WNl%1Tc7T&8QUJ!T=ulL&PoP[0Z\EGU]ne7SQmb@jA@nppZu!UZ2]^>F5]NG!R2C*K7QL#f7Lm\Y+=mftMQ^0I+*(%3E%D$H00BCp^Qk.C/jE*/&8FmWX^^C^7;XaU3:hhep0nK7i7r'gM%@kMFjgPBG`,6\Id_>;QM&Z1mVam9oOr(P!K-/h%c$34IprL%ph:FLcK#/5i(L<6V:%re9L8^PGatG3D+L5a0?NmEQ!8_75T^St4O-=q'1Bg>XYQr=G6l6EciqJ<3cqjr3#5mtBe2D`^E25F&`eA<%6Wb!=;=(f0FFbrj(u\)gC\9I^QmFTTD7]k6OW**ca:k!p:*Ts80<b7k=66Jj2jABTJ.\^5;"R[Vbj^JCibO(?/H]:&ajRh3@68>l%7X*u8B+Nl(HS&%+oppg^9S\J*nJI&(1CrOff=u16^$ib8o<G;u*fk<a"'=3#(0A*!fb2q+3t6%B\m$BIa-GBp@DE#M98tSYQ?sZt%lblKuI?(OpHG`FriRA%TFk9,A<4S"kj<@GECEbQ7Y.)6@9AWHA%&)VgFAmor%S)=HKXiGI?kKZW`cag'YE1A*-AQR&mi?dA^(9<W%j3[iJ#RZj\,*Pu$gs?03/9\!M*E86SG5#AfLNGJK/<`uN-LCH!K<_+%JW8se+`WXM'2.fY9]-P#kYkFm&c.`9#^M/dChTjZm?o+A%3CHPr."3.1]Mcf^'*/N]IKMC.,:/<iYA"dtf/MJ#LftpCdDi5TM$'GO_/s(ER5Ve@Z0D`bQ4fZF2UquUL\d[7]VEq/l0fIGm['Wt%^Fk)<0X)'l7\(Sa]rSRQ%p)>+#jY#LK9G-(JqnJT2'bE*!<b=e)\g#P?I`Q6-/[R4=6%5,RC[EoPe1Oa]S7TV-;!B+Q/j2&SZ]"n%Jm/qULL:3^<sa1S1?`2a#+>1h^bAC9bpZE0(*1=GB;d'lIFt3#d[rIl,=7$c$eQ#Sgr)2Lm<,Y+i"ako0X']EZlX%>ch'/2?XP:9%Lm8sg#?qg!H3-W,KgL=%Y58'l0%HIUh\mpV^(\pt6fEd@mWAOt;$r:#,rlut8_p_(p>eAdX%pa'EH:Z:bnQ5EL'7?bG5(Lr]sO!)%Zmu!aW[C=+n*e"l&+FZl*5hK0B\dp0JJ8*u!VnJ\4pAS=iu5^!@BSY!"J>A&0FM&A&R76"!h:1>M;A%=%H/^S,-?$/m@U-ufelYn%,S@dB^QQs)^l<p^F^Ku5=De=QG+PCV'@+:L?_Eein0<D@g=C?2!3W"p"FF[K$uG!ics^[uD677Y0\&1ublj+ak\\'(W=qI<=kCZ7%$_[H4!_1AW@';1\G?(l5^He9HF;L^=(gI.n-_PIN>P8ur#m+:0,mY>qPKp]>@gnF9U!1Y41Q?JcZ$W\[F6Zp2MquIIj6NiON7K9Z%LY)k4SI\bO0N&+P21g;'\N6s'RIeEZ/t"*898gKmF18NJ`hWJE#6A=Z`mF*`N$g=U-tnHZ1H#*A0]g:#0P-'">h$a'dErWF"WMb0%K7hV]7N(WQ8"id4j<bf1Z3,rdZ2?4>r<S?ELOli:7SV@I[pKd#)(T:#%'=Dg"0IkiO\B'!"uM-a>0;.[4j_[9BRp9c*N+o)eM8NU%f3Z8H1fDn?00N4]T$iV2Uri;)MiT4(g,>7NRB?_^>K[I4BIT-(+krXo'_2P2UK*2&Fc[*_apO5c$*BYN2e3$/U6b`i>1t%%&m1'"%Y,3e27Y+SO'/`S>*WW?S-\*2mE*43OP\gS9<6Z?u[Ya,B#2XlFDPTnU;[5-cPGDd93S@`aC+&do>hYgYD.J8<-WD9<gB^Wde3GMe%d+,G<@:idVP2r(AirB?RAQY7L)R(^=*^h,b+B(=Z83f!@f2cl)-J6h$dnMP&!_*?Vg22(K!GY=Z1W,$.NIjDFmil;]qF5Y<7H8nl%D7nS[Vq08-%,claGI4Lrcq^]%6Fi3*:]hJ6[$Gm_#f1;G8>"p3*DD5E;G_NAJ:/q(@(d.7BY=ee"o#6X]ul=4r>&ufaM`Bkc=/"4%<7=)a/&90pdP_l&bK0**RPk4d(jV6<">\A5YABr:?8k2m?(HeN:A!(i<<O)RD8?]iKLEr:!o3l)/5o6;CgqM+-Ai[m&NX<'+iL&A%iq6Zk=A>S/)A/m5D%'5DU4?Ac)$(q$,^:HE#@$M3!sVnYC_"gdj(Qh]mY(<8n`GrW3,KpK$rSpELH#J>L9rm,%E*h__hR]ePCk*g%@=\jAd+`Qk+L4NCcko"W+?1rIM"3BSU$$8:L5&)0LPHWXh;WTDAp$3iVVA@]B6!eT/#\:E])XL"S"_G64^at(_@;XW`!-cX#AF0`%<9tH8/e/RO/feWWH_2,kU&r^jh\M\&L^MU_clgMs)+Wiq!b!)Ym5cBBb`[TSiX2u*`B,6MfU\Tb"e(oIH5FaCD^+dd)oN%s^`$PN%eg@96,Q`OIq95b1[is$K:mWH9+f"5feCL;+RD`^l\=))4b%1E*)`uD9bB_@G;G`G>,P;P8Mjh`9J@8/A!#<6j8LOY8oiX?;R@$CH%;1]e=GS\4L&7k)7$mVDM*m6>Yiauj=]#^%.+ZP*c>F&q'XFfGT*Vs,R_K?g-$.h/&5RcN*9gIS_GtDZcJqK2bd43kX&.C&&(GSPF%FocZI,\Ld%:f7\X.`C7*2pc64^HB1[>6R?]>=GYq)ShG0T&1mi$0a6?/ZYY'rj4L'+^g+?F4PbSPH]cY/cr-fhAU,ZXfB=@U<-FS%aL$gnnu,D3>Qj"I!L*3\F@)f.Hk8uuoVs`pWBYnKJc_StV4'<`#&hSN9jkjQND"?G=sW57W>(\`E^6PoN2VJ<Aq3bKoE/:dX.k`/%J07&F4?N$'U1+8-J0RW5@,R"Yoaq4^&F>o>(0([=ZtNTRXFQpL%tK/)MjPDr<.V2I8>d]))'cU(8Nn!FodE./+btTB!]2GsiREXq%]eHLgoV'[<`JmF;dABXV^c#L6-)gp9'YlsP$j%@j7O$-i=uceq?IfMFSgLbd=B<Ou_-jSU;5;^mgau#14d)bN@A;DC-s%o%c*^l!%=^MR(NMt)e,MUSG-Bl0@-5%OV=*6)^1/9XYZu%C;JR`\*[)1Bp-u;k*gUa5XVcE9D0MqY"!eI2h#Za8N@os*>S+JJV6mS(_<Jd_+%21THnmBX$WKO6+($;qJDl=_ad=mEd3=N!1E).<Ma'A2;,eLbHr$oEsn#Lqqm<J+gjK(KEuP(5%'r'uqX!^Z*iPa.D0^F;tjAr-1D%o!q/]UWeS1\kp)QiebLM6ndcX,`[[8MLns(-LnN]8M$YA=Bkm""l39-7^MLd@'PE]QQ]/-Rl3,85sXuE<=s_[12LhY,R\.aW$8^T%!_.FDoq[QlYVn7dcE_QK_JHPpQ?G!?'Hn>)Cr8#"95X2aNDD<dX+g(4epGDEXm0p?+:s5\6"Ar-AY;\ZJk"ltm7'3TKbt&/^_ssT%c&-BEL&)jAdQl:(F>GdE_$U`)M(/f[8oYs_M&JWF1m)Z3=UBsh-r5#g;e>'El:+!#!eHA8Q]R1P8-!6(NqFTL+umuT-u[JFg-Uh-%+ok&NZHL%u.,H-Z6ml,ie;&u;Y14l@V?Ppe)hnkKO3o'g;O"ftR7I`2dJ-3uZ^miKb8o&@E'g7d/RdF&!iM#n,3_Ub=#)kB@0T?k%+@\/j$^mDC#>4B/dunC$YWA2\N+#U(_.b8dQHrIDZ[r?o=lkf99'4[sC8qq'd"I-;RnAfb42X>H;Q$m55p!k!W>eLb(4f)2PrOC)%$jg@)$'UC%'ONm4#DPL)7bon)ZIj[cUk7s.N8./U1C>TfO`Q(KS$Y,E(GZB.3Z0GEYS*-3JqH`u!t%2,Dc-'>SW(LmJCd4OU"p/u%2,aIm>(BX0=W>^1Q-0q4Z4)8dBt^aSVH0FmAm;'GIF`2?<YudKNZjrgHFP3-dbmM$<>FPO6/.-e/C8Y`Yjn+<+^%bb&(nCD<[p`l%2ZQ.p[tTK+^a@0.FXqdJJR+_s34lOh^Mdm@2N$(IIZJOso:Xd6B2B!LqPTKB$c&Fc$eUBr!Pm)j6sq5+!/$geb&J!!6W"jUEmuRh%$cS9fH3gn"-B$Z@J8LH]A(1K9:d\BXa9Nl[DGaLMD3:,MLOtN+7`h6REb3sN[4Hq?KesMZ?F$KYCq2gD,GM&@Tp[6%%Dc1jDNZjY%^sN@K0e\*A-+P_5>?$K6S'he,Q6&u=n(!NM?G$\>-KaUs[KG[Z7T`FkQl9pQCdG:"MR.5b4^/;H89X.s,PO:N/o2/oUBG`li5>Vj%cG74rqA[b[XB0`e&Q_B+Me5E:1.g8-l2eJUr`6Fj5Q,lupODXZME]"CS$sE!i[.0*KOVIaV!3+D8,F5gbj6%1G62NB!n(u6C]2C;%'`JLP^'m3kJtp+h,C:s\=TQg-ghc"fN(k^r2UF3QTsl@l&&FQ>!J<QIJoNWi+L%]@iblN(A0BQq^m[`DNIlgR5eO%\J.Chti9MV.%5ojL#SkHO^EPFb$O5b6IKh'5oJXYdJQ.7q($u,l\CIKP/MLIVg>E!PEY\fVhe].14l@r_%*%o*-9oKk.!jZ^goa/52#T/JC_[+aS%@A#SgE0SS+$/>N(d;WagneG>#e@cEE40o#SgB>e"MLp0X#,S-%5R=o+"DaF0W&mFUe3XIt#9+KcXIX^R3[HXkI9L"tB*#]kD:$]r%&0Qp/H9`/j6ERDe-q`2%b``TD^_%DD13ET[>8i<;MUVXmELIcpPL7iQ1QLg\J8J4@L:*##1QLlDm<HaJhi6=n0FjXS&g^ca7XI)q%0u/a!X\o%JC%Q<7`/krG5XY5I>4Ru+AWZsKOH$=RlI,`liAn7Zp-O0r`96t'\QH-].!jG]AJN`#M5$:3Uln0>_20N^dVik#%@#9@%RB.U:D-I36m1Y&D^`2H^Y$j2t!K>])9;#J-.tdg?c*(oPe3kS.4Be=n<3p,DUSXI6AWB1W%CNRd&h(0BdXI/GZLjK"OV-fY/<0>*%8aSP`qq8Nk8aQ_@Pp#(;EV'BmFp)P($E*rXl.9*^Gp<\'d-fZ6(`Wu8H-us8QisicRMgq$/F!443s*;PjR-1dU]H[`2HnB3kY,;S%_rGSJ:^:,/VeGBSJG.!kJrDNiEf8*PXQ,"J%#K)UgW%9*^^*V<bD[ZcB4-fE1p1N-BN_VhkX8P61B`VU";-G+9(ABSg%u$Z,0Sn0%=G*N!:e'\-!;]>5A4iU/N#JqM7G9eRa<(C:4b2Gk&c9Q\c,m:D%H'N2mK#*U"<'RRNIb01,kh;B3CjUtcn&o3A"jNjg9pZ1YmG*&%C_</6J:6i+1''Y-9pmWn$4&FkVF:e,!B?f7[Ftg6.s-qG+p'Kl:f-"^,;XkuZ11_XO;i`$,];'BSH9o>Y)_[&7WLni;iM>Q1cA"-%<aK?n>p9Q,An_6/_(tCQ9W<m-$aPsROdH=fKsY3Sp&P_XrjM#(2%[i%b?KV;('HP$?fJn^s+k6+3K<D%RbL74?kU>r%VRt8/Ye2f%-GE.),eA''<*rS2EL6RdP(PYfq:%Zg&`GH$oJ-u?RO/=r,k@TEfaE'3RSa'B2Hi-Q,9$ppb$JunFYnd8JeUfZ!Mb0$Tr51jSb=r_%GG11:h;M_j!4k!u'l)4'TSfp?ZODZkD30cdRMV*j<,1#4M+,PK^ii]hfmrn3DN_5o`?UA6cIRnuPbtm_o,cE=BWhW5`\<fK+*_NX%"e<rhV!SWLkhG.:Fb\(cB:MX)$%CMlULeF"Q@TqSb%VJi_u5#'@.Y?nf^[$VP*M1)PM?@-PN\%99q0kUe1?Oc[WYp,3^J,`Tgg0G%g-PLKe"d2B7[?,j5RY8b;q';p'I&pIKqJND(Sn=GM.L;3PPU]T4$u[R)qBdrk-_Hb"_HR>,@rTnK/?C4cmS8AfEae$K]:CUFiN@j%/"ad8KE:UZPV+;FJ?"_XO-.$'XJ7bUma=@'0;8K[6=pG*A/&HEL"&AH,+qM<f`DTj(i0h95`hdG0kuf$,00c:Ta-)e+I\>+7QK^6%/OQa.aAeDaV1I49h14muR&_r<4E<:Z2DPDoI'MH/c&l66[W)cW%+D&`ClHZ6DJ:F2Snr'3.\68BRf+cj6AQub#\76BAOWE7K/0M@%j8D9O8e"1<5@Ym9i0H^[WOFDf,#B.0WKkQnRKXEE/m;Bp#XT-4M@gd1KXI!bB^\k%7Z5bBngKs*8>sP6B_`pHDiKmI(#_R@aHcBu%V]K4Q5&PlS4D_E*!]2*OCQu"C2\62r5d[$nZ,T@OM0^$c+qL"3/JB3/PAno=o.:dO`cG"DJ^L&Z^rE;;bV6;J92;#`Na?5`QD,/a%I\__AZ7]tQ=\jc09kq*KPnB.:?Q[2;BrV7I5,62t:UQD#B[GVjo%PBI:m9;d7SPp1GQ]pV`(ctrfIN]%h<ne,"`AjEEAXXubD;kF%f+l+S3,V"EZ%?d7>#?F4-8pt4/I=p:_e,6H&M-=;/bH\K+L%Y]$/JdS)UKa>it-fSVLi2-gV_Sfp).CW^75?.g9bLU/;d9"2L-Yn%d*NdDKGpq'5fpGL,\i9:WIZsa\?2.-Y_gHb$1&Oj%4u==)2upVliB3<#].paE]c;%65+CGOTC$iUsTOU6830?&KF@p!PQV==\AjB%cUCO%#-;K,&\X#<(lYF.<"rW]n3L:8MB\ji0>P^G2f)AHBS7.1&32ZMUXG=)Ubi&qX7SYuDk38QMHu!=U<-/h;:qjs.nh7\/0^b=%6Fl)AI0,.(0Lc9jkm2I?/:ukEk0XW?;JuV+)]Q,`[.-,ALX86]lNi:NG:&K3ZY1PKOsW"42$!MK)Bd=CJf#MJA^R2G^_k=Zq#o5\%NujA58_J?uSd@0u$V'hl@<G&9qQ<i?-:O*3$'YgKho38q4^H-c8i@iF\j/S7UbZQkN`WYCX-+72eq1/qN2[$WKTjN`X\$c,QTMMV%6;I/p2*s?u4A*CM#Xs[7\mkiNVRVtu!uAt]&MiV(</$I.8iCNuPmD9VE*FN8[QucR&<>:0Msf+`4-_KLMkjP'aJ*g@>BQN-X#tC%%fE774A"[B#JP&I/V?guQ?(Ef*XG.rR;0mlg7d0rNfFanidT^Q$6"IQZ6h$'HFXJp\3[]Os%:\#q!lgTu,+^O;&qF/%))t_M!]bjJ%S[KPU%g3e&4^_3AeYF]O)JGTYLsC?n):FBu#.I1pN-5X3qI#!MZ)o'uXXnbBYq=IU([S)g\QV?.bq^cjEYcnfdY"V'=gYmjM7O9`%L,B.HP+;hCQfqu)C5%YF"[di5dVc7i[*.)Aa\OEm"840R@lq0-B_Rht:qMp7Zg9-"!W1f>La,2Ya4TGid8!B=Z+i%S0aS6^+Rpu"%b$"'sg5mZ5a8A;1g!s7en_Ok,XVIUoa<K,a`Tn"E+[R^JEnVei`bTH@'UO>N\4m)6%kt)1@h&eqHdAuR#W"1l`\/J[n4"5:IEJ\#%<i1BN!<eR-+9XMYT^&t@U"DV$*2$$^C4o]%bFE]s>)9YJ9NN"O*LgW5?rJH+:U_h(=,Dc1QkBE5(QQ.jhkW^;C_BH8#!54Vnb=4`%M0Y6/,]MnVgf[.&Zb'0"`,Hi4-ngKalk3.QfX<5o3s)^)0ZnHNZlXCP&-UD9!LV+4"u29knJFD6\&b?NFrA!JQ3W^,M'XM.fo.iR%-'htV,<DkFHss7`f8)33C_/NEJk9^]Tp3r,1U9<j'J3l2S9&i)#[K>^C,#o_Clsi>'$rR/gIU<HJ;%s!"j48_Y\URcCYM/ZEI>,9%JrLRMP30.e,CNd;'VkC4Kgf.H/.!IZaX<C$JA=YJ2[-Z[@$^&PLQNKO(j7L;h3*%;#6'E5TOkI3CW$a<-#8XA!A$?0XHQc7"keYn%JI(ni5/<l-&aXV1=;XWDnK`lllWSIW3=OT+Su0bdd+\-!i(d/(OuVf)gJ%I%(Lbg%.Q=%H0q/4GFWjKr^oT5&R0c6YZu![Z%s$>m%7dFbo!>^)j['%LYL.)cZ1orAl6P1;`D\93fP;+DHBP0lI:[^>SBRq&Bm0.<CQ4:oT)1b+^=<7]L9Tm3^[-VZ5#:V-U'7ccOe5R$`%7UXZp,+"u-cn["RhD7rM[NHmU4N<"8Bk!iQ=;hHJ\M^Hl!jji%;:7p!at7ts)b(<A==oDB>p4PV2AZEKA#EGiSJ/'-aCj"QVatnJ%K</Po03kR!*0%bB*%gRmC&f9DU6UBY->=WB%")^c,3&"B9h+MrV@bC#MkkO039RLH-X&fDo93tS5ZceOgjjPl+c8.mZ'g_C$PI-$%:$6A,C>#qHQQ)X\Pt)B)5]H&<,`mT/fA[I"Lt"<kN)CZ0*mpAfb`[.@70)&;_KaL/@NZs+5\1J?YK:%ooA*%3\B=aNA:ppUC5oET%Sa6*=1Ot`M.#UfWK2&cu`KIrr!W-[:c*huF>DU'S7;)0PQQ1*@e$*-J!jOtXU.N<eM5L=KlKWW4?B"W\OsS2,Ho+(4H!&Ih6R*^f%,7ZTY1KG\##a1Nj0;WagbYrd3Gs#:aW%$qb05?YdM*>"?DpehiJf.2?ES>6]o,*]?4j?YTG/,KeQH2:VXi8?p=KD"h"g^oI9T8ob%V@r1DJ@$c>U3L'B&0Ui#el6Qa4HW^MO52bSJO4b//'q+9N<g;ngEZ_26!>I[@_shP)%@\6LgYCQ7Z:+PA361rn?@IQ$<:sdT#'FZ%k1p2%W36jXOo"SN3cuS*J5/FmU>/QRbe'@`]m+\$#i.[IX?E-j(Epl)4iqJZ$K91(HAiicLagk[MQa',!X,15^L[eGVCRU3]Or'W%?5Nu[84K=),*Xe^\LbLLSUq,&6<KaGnGq)$"ppBNCQ?YY(uCkFm'pq2fs$`A;.N;pl>5nZ=V=Pb<Ml]i)>FL"HjlCXU23cE5-`X<%(#B#q)^Ao?1r,S+VlSkZnJIi`C6;,g49F!DZ==*T9#;A`[VR+KXjeg4+"NBI8C]"G!07uHL5ET=r"?e"lORhRfdE(F26T/G`W-k%%GVd)C2RR=j(tX-cOqW@UYQ<&o1CQpm"s(ejgJ)8tQ]1SY&$F+LBkoIJH#ur]nN-(T-Z8%.M225kL;Nb*A>iWC:oV\0/AoCmTF-/P%2TmQM;O]Ks=6Lu?Q&kC^4ZUhM3ZXH1[^;M-22OBp?jO(%D!$`]2(taTl[(#>C=js'nOR,n,2nVKLQ*W*D_!l-pBg*LjIjC[gK*0B%81]hBZ\9qE#S%:hPS";"pOrT!@AP^M?c%fBjW5+>]+aAAa&qQ$hP*G+^`6r&eOC2.Y[n4a,HdC1)l'dmQC&KtSrbhh`FcH<a.pr%%m`6Q.!,PSA<e96OD3RB[*OB6<Ot;cS\D06>Gt?+Log?"l'e:%faD!*T?3I]jAZ\4cdT@RCLYso&:'cHgW.$3FmP)jT,`4[L2+"(5%<K^]Yc=YiS_Y,[H:2pBh:_F^<P`!@S0P@/Ij\:)l_d5Z-/YiEL`@M_b95ZWAGrZ]Q]4I/i+aJ48C_@E":k3,BLmhd=a&aS!^)V!H%?oFpW7P%6EPn7X4)X3MgK$#EM!QIq`q+WZM7W5b/"r5S"4i^#I"7rL@X&AoIaD>iQA"+KL+bg,UjH09S^6K8&W%Vh0="qM03:nK5%S5>%&c,4/HB;EU"J&^F#26sT:CcR)-4>p(OPBt5TA48]G:ac8]8(Gep3&iiPVVJ&PKnY>#Kl+,<;oFoNRZYgO:Q_+I"lq9Ha4E7e%+h@*SK,A^)h(j+%H%.,:++'62?\'4$fP$b=S^?LRq.*;5_B!"GPG*_Yn3N0EPP.8!3X9U^l:@.S@%Pp%!shT4,mU@KfI)YUpi93Q%7*kcPJ`ps58QElaL1$9l%sb'>6V$00h?,I&PT?AAjj6grf++&VWc4W<Ct6D-VMu2ZR`YnP.uLQ?o2!.QJ2S9B1GFs.lkI:(Z#t(B%"Il8]JuVr&7MpHg3RFeJoh@uNi#H<]]a>C3.d@?@R84&O4Wt9=-s-V&"]^:3YR(kl7`#ut*=@[9Nki5lp#9Yi2TMoWZ-jmb`P;UZ%KU>Q%pgbMAKtsKhM$ahkMb:Qh$BtU2b`9i(5Vc]nA<H4&ZDOsB`2&'Y!AlUtW!+?kP]hCLga&8=mpmps1m#D5PZ8k.]h1sNnG^qZ%/;?3<R)Q91$6_bj];;`JMUW90'nL3WkL?p3^a+uD+r8&/%;h/nj1(6u4Hf*]""X'q=g-95-t*,^<"dUth7_5;RlM9(5(Y587h^SB%2de\cP9M5*ohB9:*YRcH=a*DfLqsi]3`4"lqInNFJC;5>No4TSG/Pj1`WU)45f*SpIF8f*4.Zi*iJ%JON5QiB@AWK>G`#()P69B[%Z3`r-a-*f4Ya7p>%nVA3EJ9-7XRJ2p1)pJ:j=QtG9JOZ%\a`X1nj\Q)%Z>oe4NS2KB+/B(.h4mLc/Hk*U.1f>ECENQ1n+SHX\`[p%=&7X]OUOl$#tp<c"f)1ZAR(*u'Hs'"(F,8A%C@Ru2272c"*37THV4HV-2K/"bS4q3_o,c9X(I*F.$d9b9FG(sOiuM+U-pBrC;Id&%-S,m4Ketb%\_EQN/`tu/!lB?.cqHc/,jo\f/#9tl)"fEBASR7C^h$4pgWIXZ5RU1s1us`92OgFG,pYFpBj,Sd_I>AUZ&LJi=W1[/%*Q,L7/!eX4k:tuA&9Np[<ht9d+]Ab3CrJ%A,JIm'U?RgbK`c&.dXVI+"u4]I0ODYp^7on@JPN%nEmP?_o8/VqmL.#E)\'Uh`+V"0%ZKE6ZR4Yn44c*KW>M17'P4ORYqB6\*':VeY+kXpL`q6QucAdO",R$+/+-5^Z!7*rf(JH#'Jkp%'!Zd\:R_hQ%dqPZ:.=GPOA*sGj%*LC',35@atU*:(LY;8b6F+Q".Zj_&^Ddt%?'.NLR`KD_F^bcZRSbOl'^?I%rab8*bfg26*^.%m6RUTuFG;qWC8PKIb/:e,>*Ec/E%QmF(0/3"sq@7k02I!u)Q`#oAR"Wm;qag&pcC7be;9Lg3orJYR#Ojf>lU]Ji=o*j#,-S2cp#Las7Q%XW1YQTn$3Ddh$B2PgLPqLcZ%@%GTN`2l*nfCjfP-Ma<2e$O.]eiV,R#uO]fh'hZ:`g0Gm]CdV14!&`cZ`]dASp8k7-t\gV&6]j*#KL*nj8dF9[@A*L7i[s`aBO9!%A,-I^,&maKg6.:?a<o<=]9DV4*`*>kZFZkd&i>#^+UB'>JL3Me%[8sfPFbQ'PL'lJ$.dtS*Y2^.1fhdH9h-"oBiNY\,&I>tmj')"%mu`uTd)idqkS'D4g$06Vkt7k[BZS]V1nc@eJm/u!-$f_snF35b+qW6eA"?;&nsINR6VjDXaZ[_#++d`"nLAiK3T^Gn&M"%K,IOh9%[6tsA&mEP8hNN?lTU$l?c8^3k?rf[8'HC\@0&^3F9EMh?0p.3RAs;Tj]ulZ';%e@HTHK4iOreqLCYBu(%_mo,S7@n)%$h_b!r7eW%(M>#ijdkH-b%*Yi&Msn+/ZHc-E1j!/+br@j%EZ_>d=X7uB59VT0$b@SLX+pk00TF>@uY.*fIid0%Y`L@UF'*AA#gaRo=e)](2qVe%24n.o:6>TQoi[>t[?ts/i6-Z[(aJ2]2aVNj`7-Pn="JX.;(8@PGWOeS5fJL!IEKG@,A175%>^4pZ3\G5PsU.+/I4B&07do,EQ9P9%%fPWL:n*,D6K_gBO^NTZ!j$*9CK\UnpI5VeF>2MuC2[Be//^NY>[.OPjf#m*kAB][5-PKQ5Wjf7<#[X@&55!g9a=+=Q[AZBbT9:>%Q,L&\@P:4#O=4e,WuX-\iYXC(R2"=F$u"OfSDM%O9o<=u2<b!!BYI3bfi%s-<trX@]atkL?kBP#3oQ1I=Tl4>3?5ZC9T['(^o,a$%ke3<gRnh>+89@7;G/,%M(>JsM1$kJB46E'c'R"D+cU?)$!POaI&>q2`]b'Hi"i+QY<[=S4nbEVAkErIYE`g8rVAFuZU*/rcWB):Q%8*E#Y!0"ps"*3H:"7:g1@#AAGX?E+Td<+;tVMdfXn758]<T7"J(#-Gsa(=<c1+!->jV/>ShuY:#Ons)F*n(0&@mseSa9Ynnc,ZJ$%>BdUY7CL`+0FlL6dkO-`0grgi#5NX^bZ<eX`6%hN3i*c$q7oa"aU4H'HCGi2\?6C]]nrZ!P+j)hhRZF<8gjj@XKGdM;O>@V1Bt27%+S'K/=kB@oJ4.u??:*o"?&tm@^$LarM#N:WrO.<I;0[F&O$g5Y0_jWY(*5Z;P>DNs:B2^\TI<,@jOo1;VujHf0b8"!bu;J+jB,t,%&'2gmClBW/O9<3\AO)/]?RHK<8/_`*dEn]5%)/#>AB@u^@PYrPdI+r+&$;LjW!!Cej1W/dH4c>c$*tH*/EL%M@a;FWQuZ=#!-5"t%jqb+RQH0X?"L?-.$W5PA8Am@T0$G!g70M"0.7(2;H#9>V6bpF%F\$d=/<C_5Do6"Eb)5XQOq5t+)@CKeYY/F6VKm'<n7<*QXuRXc%]db&0W4dGp6rc[K984mf%'d2d+!o780U5fh'7ira)mr#kRu(*3;&\8t8s)SN!sfB.FqtO83V1V4;+`#hQ57JmVVtKG*0_8^*'7j%%Tl[[t)%O(0eqNo_LWW##WtI:^U[b+K7RT)ddE=]2Ce4Xp5uMN@6asW<fVUGL*2=RW^F;:5]8"*8+E!C,'cY5ffOC(?f%W*<EZre$%32'%i)BkYSO02D/%@G^>git>]p"fsbBMB)MDOYl,."f2m@o=[rMN;-u(BN1r&^BE(8XJ0pitn^P'oFQ+f*lO8$)qU>pdc=_hD)10%'d&:[N>%u0N\6X`@^&LeZ4b'Y;P`&f#Ni!uXHZ:]MY&GA:[k=sFUI=A5):5P:#UEo1`j3(`5s,S9I4sj@]5*mO*^9XNa\#8BOu"%%#pY(fP%^t$JeYjp.4W7DOQ.2"?RcDppb@\oN'N.]a>_9XioScb^N-iAi\$ojaGUG9:ATE5%*bpk-fHH+/!hOfZjig-Q'uR3Z"san%&;<?@o>g@!jRb,&`$cEt%Z6="Dau.J[n_LhdD[Jg"R?cI)m'3T_i8X$g.>a,quR2S21r5.=AEjF*eG)UQ;]-7ag*K/_IBiHl<>#O%Fa7Lt*-o^Ji:YL*S>qK*I*[&4q2@=b3<LUZK;>],T?`013K$H/5;D,hre,rS@Ug3hAUU!&L5AV0X9/V>SJ<^b_/a\0=6t]Wgs+pf%\r=,"^[`'F([3)4?K)I-mXbN_.Cio9Q;9e:M*O"JYieF/=4M)2bL$Pi58`hm<Ke9Dcb8p)1`UF>LC%L,-_CT5K*6o@>kc#tV(2pC%110i<S]O1TSrKJ(!&)uBcKBD/Z>JE7OT+D:?;q!2+bqeJAjFh2aLqFC!FA`rmZhA45g!,o#(9AI'\<u\0';AJH,BkSZ=B!H09r9.%_cR/$JTcq3Q"r9jF.Z]2O-j1"Hq"X?:AG<q;`naHO\W=V\"!Vd^[pMsLcD!en'J2!K!:/>kns#<-:=Gi4a9/e&[4b%Eg49=.HLcE%''p=s=D,PCJ6RI)dSW/#[K/LcL%/`fq6OoMmhpOI;&FIu(a;754:L36PS#W2K++r6aSF!ed%?YF[0DAmH3,kSYRgPGG^M>$NK0#`%67V)ldIW^`e`\5W\THpG-X<CU@bb(fpid,qIH<r+_]'??:,6UMAITZnN'KD=LqsOBKG0?l7_BI]*eG[b[18[\E%dpp;+Z^6N)>XX%XorF3TT,)//pP/gjW]\)Y\-iV\]o(a9)BYQYerjRS[9rkZ;hhQ\AST,:iX2ZD[3LS29looR^0Mq%?L=dP?O;DrMV9Rj1,kFW9#Xo%=HN)g$2@N-7jpF`@<8ea#'OZ^#%K&?CGSDf/k2O#]XhJQ(l(s(AIU!fm'N44SK;<\dG*Gk0s9Uu\>X#-9fNsN-kJqr)Cm(nfS&p6%A;7[aN]Y4E_[;^:M#oQs#Jb`m5]h^[-p,I+8XqZB_1_WMJC2&%2B'drk'6uj4i^GIY6^A/+q<E<(P*@CU!,aAb+fiVk#>/Kh);Z#%i,g1JGI6C5SpbH$.08QOU9FuA.1Q@LHL`(]dDj/QP*eiH;aaO^+Gh+4P8&-[jD[-'<QZK*GnhPX)ZMGBG%\pIMQ(^1c3]9c-H&#)%Ouikj:<1/e#]2#G4+K[j]OeaOGI8b<(<Smap7O_>U?[:!0TotMZ'')A"0`4pZu@j<>?Ad0\sTaZS1,qA"e(l4l%q[IG`h.hoh2YS%aX"mdCCr*)'[A6U$,bEC[dL7ai,_$t<G09)9%I0;D9#;-J\GRo9iuoha\>*SKJ461c;+(l>3Jms,rfD.%qKl.1e\bP6R',[\"ei6%FLM:*eiSm)/%,ktRV<Lpc,F,0`@d,.OaIGQJcNo969GE:6a[aS8_.Kl,\5!)5oO^6SA_[`(p+i2/[gq;6AtOVP"IF/$/&8^keR,j%8rmjS;-SqX79.J*FERjsB3eX3f]\>f1]ZO(q<I(dbib=dcGWsoXW3_58c<6R&gK'jZumm"*t1=L%Bfan>pOhL^hbt[]AJ02:fOV%%4>p_ZkQ;l?_;$hE>/D/7c?6#g73:(!n10G9BC<UA:@)+_:O$3L]26\eb%G"aG8-Iq".+(;0dr%;iPXTZOTJe%Z2g6W^=6p:jg\m2%TTX9tR`m',m:_5n[Q!d]17%6*FDM]%Ch.cC*+%CelQ0q(]P`]BU^_-s$q#<NOf0P)4YSq%3d$S^H5.?JS$inR$Yg8EUnX4]"B8Nq%aO\O#19#]Xm=0>a)9fY)=,qG-l7B]2LUK=(e_<+#b$L=jc@3ctJ`QhMhWAB>[\L2FJT&99^%qZqo&frBk3#gL#TO.iq*juD#Q.'A%o[W8Wqs3M.'f8kf-%2;2=oIINhjf+Aqf[N4O"W0S05kdSms\L8`E/6frU]mN#/5Beh7C5rl/@*]n^!F!;>oV?md@_hio9pue_@^T%%=[2.rpoa,IJs_+h>d1WJ`$Fjkj(/t=!-:k^JTKPr8hiUQP]/QCM<\/kAH!'S6nEUNQ\e-Ei97a*@q6I^bYrMWJ=B$0m3j&>[O]P%a?Q;**4J02pYt1]G5H7M(:lE9h9an=XEP8eT]l?pd0&abH1IZ/HMjN9HMR:6rTJ6@koE71haW[g[iJhDpP[4ehqsJ9NYML8,J(T>%AFf`Ym\bi@`QcA2m%dJ.O]*ImH"pl\eopD)IQIM=35&Po^B^-ZnYk3Cp#I@1\UAmUH%3)MDWFZDN2;$:]NU7ATq+5?5/Lpucu'o-%^Uq!?s2Pm"/#tf.^i7JV*S]E0j29Dl$7*U2:nSP/=)5B2/05ORHLYK::=aW4c+H:2K"SgG\@Yl@p$VaqqoaoFdc/O8<Oobf"t\NY%^H@\6%u\'kqqJa1j2i$ZHLG+qC`jml-#0#kf?A0:5MU_#]H=IoIZFt,;0h36s)Pbs2u.4/[68TXp'(_Ad.VWPV`8@:]=KbI!,_2\%h)U;)=5Vk@IXGT#hInFs6/C9iF`0+s5,`f5Fml!k*RqcT](^t\pL]>5/?W<o5C\%WlO.\%]kUl2g8E.fdtP55RiU+8[TK"`J2T5f%jSX9&p3?+gbB*$s(?0F=l,hPGUmu*4HRU_q:KJ&GUmCtEV#Pc?nF>Q#q9=l<\1b/[kUlFM4Crp;*2ITP5fU.f\'Mm?\(N%=^>X"f%^&,=LT=s0"s'6W'*c:]"@20k+mbXLA/7)\R?]?udFt5_hHo-.g*u5Y'=6Ff!gRF8uk;VE5DRna_R)HHSjiK_OgtjS'1!3bka[^W1%i[@:&?JJlChL54cHW%=CML3*TK<nPR5j1F@/;Q";4`!Bf-_^+C6>&UKKV,L_nupG^nZV+PT^<L^fkp&p/%*X-ChX?'-5knAgWQ)`%1Y28l_]H@5c2?R[M=r"46X*Hk>pmQDduEiF>KGCPK\aY\IFF.`EK]Yq0c8.PIbA+H-l)lBm]Ic+bP5B6bB%K_nLLnRaQ5\::9THp%57md0[.o?#hp:aDn)%J*m`1B%T@i>X1=!&/cE#.cn'<XG))V?N]Q8REjmC=2>LSdK>0(UtG<[a"-ML%:g3.PN`3oC=3cG?BH6cZ8%IJmc,H[@W^>:fb2g(M'1nNur-QXN_f,FoHE0.o"pMg1s`ACMYl<,+Jjo_%&9gWPBB>>U4GLCJ43[Ec7J=6JVWRern#NaAGMCM(1>%TI=f=`4<A'.1P1kI<^6gFo1cKH_d+C5dGPUAiif4IfIl(]/lSe1&G71n!=Z6]>YAch54UFNV:febuW`iB[n0jot?9nIAplQ[m7&9%htH_fZ1=!)@+?*d2uCDSYkELg54I$GNFuU#dc_;1$VT3s/.+V#p-6dYTASETY$Nca()P`(Cs*Qc*7m*edM*C6]43J>FM?jM['BV8%CURL<+BLZ/V;(g-S"E/gV7khTUIV[EI-C@rj+j],MoGAKk5LkA%su6RY0Wf@dB;MXd#RCJ4HlV&Wq15sW8jfG;QCMhjaFQ&oR!s!%DJs4FG3N$$JEG,HGj%(Q55']eNBaASLRCfD5dFZC!2IdGHU@d&O6Cd1!5#Q6hJEupq!R_<C7>L:X(PPc]1!G3`X_82mG#h]bC>He%U2ksc\*RrCGmZL`VYK]0:\O9/#;J\Ho4"i_p#!dGO'Su-Xeu\F\GGmr\'Z]2jRE0HDCb9Lj`gG9f=SZLlg[q!(4M!J1cL?ad:Y'a%cEAk7\U?O\#BPT3E-U/s-\`ER&(_>]K3-4O<E.XW=3(:,GU<1Z3E5(eo\h11YAh.`NClF!8ofB%H%#[.WF>NY&)F:*#_q"ejlbXB%"iH9@dCr^I%`'h\@d`%R[<?rP+0JpT[__?81sG_/Jbp2mF7J8,@E+@A?^T7b*+j.aFs%c:[#f\ALRIL$36]R./@M3n4!+rRn`%Do%`fFe?ps:0(Ame&N,ofDQ;8QbMfN5[[^L(5*bkMe;$dCbd_[PehcPd;""d876!I/VC0]P[10*L3Sq1&)cRV.O9gie01di.Xaf"`j=%b7:TB]</s=QVD!$(?,#R^b`\%73l_4Nd5'iChI$u@0*:dNCA2W[HL%+!Iqrp7aFLt\&jhTTP3X?Ren=.[*aLj:p^<n4&E:)Ve@H%%!'#dJ#D0DM"Dr^GHD"mUH8^ML*<`_O4Zh#s"$PCgH<*(LhJDA]IUQc(o\_rlVg(FRG_^,lB&!)Fo!TE!pqsQ9K5V]5:[I9^4<!Z!%>D1rM24d!:r9H<!?iG+dp&3G:Df<'G$93n_4RmB^oB*1RTmV'Ble>-j:A-3iMjgTJRX1\Zr2qF:mjn/As*k2Z9O:opljHR)UW2I]%f_s#P,<<R`Xj)SSaCe+\oC2qFJf-YQ6RJ2Va9;+H-W#*JnQaq`?+de^\K((D"ST&Z^H^S,4;Ket5!dDqaA>[54[+d0q*j*iq9p*<%WUEKUr\e9_UW)Nenl"iL<nZ!;cfBN-%q"#8+1f2"rc%`H`.RM"2GgL$5i8/i-Hp%[HUJE7gC&Mai4^WU!fK7U8j7PDj1!/ac`pEg%YK2GAQNL)H]cnBs\B9Bd4eZ/nc90GA0(7\)0CHmPR/LNh>:KjS`'StRr/UZu6heX?nYe<.*!"ck!sa&@_4B@'>0!2H>nXo)48If0%hA(6TgnEq.DX+F6g8tSro&S^q5.H]`<gm?n$i+b0aQ28G5.H[b0''ik3Ok/tC;>k!p'r_9K+%ML<'!L4K87'_+M>JG/g#A:dZ`_E%Di:ZsgL&!]nETT-p\41UWs_VW3I6Y_C:if"U&D^]$?k_$ma0fs^3fVDEA>5A!NGs.4:,8m\(e9/a*AEGk"B2c>7Ts&hq.brN,HQX%^A@YCZ+0T:p>Y'^:g>W&^A[==Qa^%SqlfE'Dnils42:T:oV`;O\B2']j'L/6`S61p#F!rZ,^1ra*DCJYPMA?ijAZu`l9#$tjn6Oi%L'n[<r?LEr*80-20eKQdO0,LB7?(rdpDdO0NU[Ffo5d@=*0XiP`Y--PU&9hW4,q#JoAbVF"gGJJXUQ)i'q[e7hKG,2s82lV_BVO<%.mATSZpC8?Ifn\'1-l5dm)Hl+>p6[1cYgX$)RA,%&LX#c%X+>5`-AN@*:,Qg]?S00F0OCMO6g8`3S80YG+6dMT$2*D*:3Hs"Wcu^%&aD5h>^L.<HA&T6lh^'C:8@?r:&saKWT&,q%>PoAPNU,_0n(6,SjR"8lA6P-TeV!bG!(Q"MnB,PALGmX2McA9g#poIrV,KAS"*%T%hRT*YDT@%c+og&pn]hr7Iqi3!F^U]baYk5P,1m^_H,r)?Blh$>Cj54<4QN$dV?>0:o)6lpFnG?rfC.&ChYqi2jQCH2N3#^JZYpki%$g`Q9p*A;pSr%aZl&#>c(Mgb`D0uK9DpNr<is2l@QBhXKkDjJD?/P.\n(rItguF^1>J/dLPjR6!s"9?(O.cP9IT9aL-Eo#$nha[9%4]meuC:;$[g&<ACIAQ9H@g=_pe9DHpj#NCKVmbcXHM!s1HMM`BfL[^/dqC^IFFOeB?0Ulpo7!r)Yd,++']1:5L-$505#"Gu@=<"M%[$j-8C4qp_e/1E3K2H+heDG]/rWf4<+'"*QPuTg]2%E*8>rHHQT5P<u['M*=K=?-U74!0@(\d)ohqh\"%rA,c,A0L&oYfe$q#(8>%SiZdk3]]jZ:Zif9Vg"(!pTV0<(p=)7C-D@mDf/q>?f#.+YYLH1!\F<1jjb-G7QP[`hAA(1K_X]gqE*>js4CdoAX01NAtr)Xqi[q)%r.khSWqRppd0i_Fo9(m.Cr*pt$%Fk[cY#lFZ\?'_mdBdp4Q2*MT-;S]OM>H>o+t+k?da(H4'n8aI>4F8;AVKIdHJW+]:U.IJEcEa%*H;HaFiSX[6ct\7++/D^47>)j_[`Qp+nRbjqFr:uD`/TGh#i;qpje\u"PKqGOOZ!9Jo(@0G!(4iMj=)?`/i`@o%Aq@;Uj1l@,&HP%Dqk9TBVp26mGjLZWA-YbWU=W0+:!VhT^[Bl4`aHp5-Mg^Re%U8^4X:H;"tM-h]GJLH`;"!olP:NLP*UURi:2J"[$IG#EA2FnJsI#%r^%V^^-@_!p[>T#Dh#J_+-6C_X7!Z!#DI*r'L)EB'Y\G2E5ttm/_9%pT^n).X7nPC`!a3Fj%6OEm-pD9jc6r9c$45!j10%MLQ!%A%-j2_^`f"IIiCbD-T:WgXWD2&ITE<OVk$S+0Fail(<tbYkIQ5*P]`7BB/Sr9GmshqfDr^!.:Oe+>S*Sf&AN+H`W.!>mVhg.U[$S4*%KH95@0@M3C.630,rRRU-0/J!7)/\OiOk/p[D1JC6KK_TT]fWu2]Y6A_7R$$8H?*9fp&,Y])R&pRoN*8>5V^3+[APtSD+>bX>JO")%h&RD@S3"Euq07D'l.WjLa6hJ?.(l0+Q7];Dh%u*ZmB+#S2f"?"UY3W^^Fl]3[W(r9nk[!4DKP<B`>/<UPu"'On`8_fN9N?D%K.n7%f(!=Ie7\-LHB+p)kX-U$B?^/^db\k4H_[D@\M&,AEFHE;1IUbN43Eb:I^m'o4CXPci^%NJLjkup$Kg5#^iNSum6P(42gOX1/q*^_%]Oom%L[rlgDO00s9)UMn!`'IV^&-HkDl4rUd:>G0s8B7>lWu+F(4H%S@\X/`I]*,7*#iIrk4d&RP3"sY:9V`nCgQ3goWus*(D`!V%IWp);rd(igh%fh*6FSgnml^K[]"J(Br,S"[j1ma#PJHQFmi9YoG+<c:?]cAlS`<d^a*HjVFR-_#T9F+Ub!^2VSM,M9mZ/CbE(f4D%b!Nj)S_o(-q#*7X7u6Y4;\?^YCWd7aFF0e<^[+QGpTD.N\'AEqDfXT=-<[oDLSdOR!8.UoXsQ"j6_>!%m#^8*nU!ren%o"WFa!I[%W;:LTN8OUIN-NY3)qfc=68AH>M+V*=<;<9Poq#kFm:hH==/4mM?-i'2lGY%EGS3Bn'9DCiVa%]g9S?gBdUR)FjQnq1^!%&%a7#\W%pSX\!!CukD$Vl5bO5U@Zr)M2B-u(sNm<5&qQ"(_\\oHX$d[gg#094L*ZMjaXipQI0DAPtl]<]`Vk<Fr5j*`Up2NuN`JN3@QgWj9]%WUkM:\/oN?Ib5l[o&?lil6l8cO+Cqn4lG!LigKY<OL*V]KpY8>#7nlTG^"W.n_K"*,^'FM+!];%\tJaP9d5W\7C*NU&/s8_aOLNB%#d6p\S3+<ng4;-7PpptuZ6!I4\*:[a]mQmHT>!;]>1IOdDVh7+TFbWGo&e]]S+!&-Qqc]XJS0n505nudWc(+@)tBu\^Kpk]HWC#Y%G(02KWh(3H^VBeP4huR)<B6H/n%Z[\rs(ac2h6@JR)q:Ns89'HneOmu:qcG6Br7TObp4.`:6ejgEnpipWUihG6(jgX[F5D';q';l%"PRR"<)We[cp4gal>6e1pah$OC#']bBd1'5Wk8_1Q^'i(=DTpID69_P"`CdLgSo)'RZoJ3[@>m]%?n)-#ro,%(f't6lraI\WNK7b%1m'0+en3Y$g@p,DC:s,mmaD$)<O8:tmJcae)aogtPFq<hhd1mW3!o$!P?7Fa<`$/S-%"1Z3_o"<d4MOLrLWsm@57\2@Hr1(>'SdP%A^j[`D(#7PMnQ,hYM?Lm7SWl2h5Lj3FkU]6X^SUgXRb_PX:;Mr/Bmt1G;mu/"?i/9k2"%4WRa]#]AEYGc=X^C[=O/@-Ibs7'&Frh%9R#lhAe\7Q1XoB0#?jM4OUAMs'&LJ\#?-6#(nF#%I4^oo2SbQ'gNcp&P`AVQ!li?$b/o+R@+\^Yn<<ES&\m$HDN`MS"=3o.@3k>F%<=ZQQ,#:u(Z4b5!Rh*j69"[#>iiP+uf.,a]%]q[jn.rU14m`1a[^sm@#7?4?=oCg9V$t]eW)2D(eo%C9*6lLW(<4k>>6&l?@sY.[%XZ"d/HE(1O'u3ljcEt#6R*E$Rk`aV'$i\S6hH6aX5e(2J\m%NN=DT6llY?S'S\c5?UWq:HU#%c*LolXEY'fF-.7M,@EC'/="Ju9o%7_u7+@ADGo[BZkFYU/dk#.?8^"nCCK&SsV9OB)I'k%u&FR9F)nn6$:gVSNPJBOh9+2=`AK@Ah,P84l2VBWCm)\\*Go2UcAN"ZSI3%Y1L7Ug/]kd<5?20Y3=%YE,+H>os^rlr9;Ok^]-BCqVhs?IJ4cHp5:m&j=djogT/Gg5`3qGK9WmU]/dDf>KgFr0&Mi!pr+27Ll+M`%JAC^Fr[rL?Iq7O%M`8n$6-T+JGFseDeFP$[.LSKe\dSs&PAb=\4t\2&\%gcNb;E33N:t=@[*q`Gpd)q,5e^r<@fagada(Z]5OUc\%qecYl\))^bLEZ@3L=pbfB&@#Rqpm:MGPdos>Q5R"&*tZUh*Ai:\%oRUbFHpBl[ZT'X"Z&l)tZHS^*dt[0\a!8)f((R=9D_?n#f0q%/FpY0Mn_"ihDSSs88?Za$==`eJXeO([WSR8En:$1[:#;/l*<DP?\Zh55kOVq;1%Ag,I5t1FTl[gb2Nhm]c-F&=hFhlCp45$h]4]R%n'B\]Q(L:rhqrVQp]D)$UCYSoRg/LTUbp07):>m%i#_"W"poVa8.;L4nW=4i;%ne"NZWiG,JA#m?Ib1=A$t$U^^FD&)ZOJEVec@4%>f.WHZs!I+#QLF02Z]!+.Lnp2j(67(BY9:`f<JOQ9<G&&n%NK(<VpIe7n]np-2"4eh<MsPnqS%>r<Wd]0J(L9Lr5kGLB,.9j<oct%a><<p!Zq`9OCr_L4q`LmAfMc&i-1L!pV"%S9,_TcW5k'*kLMXnVbU6_W]J<l%4K3B/di5m[T+)*##c,7UHg8]%B.ck@?l:U=uG7>%emA8m$h8lCYm`.KYt6AKfE>&^,W5rSJYkjSGQkH^@$=P<Z\]l>;?mRZK=Ds_5AI6f69Uh!@b;hr,[K+n@78)?*,"2m<%)eo'<?ge%\tq<"_?%_';CcI:I'VZDE#`D&$>u=/&1#@U/'%DnIKM#!dRhH4-Y;NQR8Rj\,tq^ldR9<&.C(Y"!%JQ4_j>e#NJSdSJJ19R3'#<]%%NHrFH0d;k+@\d%a+5DlGT;+S?7hO&72dO_J@Z&?UkL!'r-O<aMW&XW)%XHeU?)!PE&Nsg@F%m[nArLV===1,T#%@5Rtt)X`QaVg%5:i&d&>k_UL6E9ACrk,OJlYI3G+!@n"Lr/,Dtlh3Ke<6316B$oR4fm#fZYkbTl_cN9>MQkFiE<=!R<G5oNW4-<C5#_@>Fm3.$],_%A[A/2FL#3O"&0@@Yl[OKYCO^tN+*n([\sTaA/m@gZtmbe$mlUZ\P6iV=G5Z&Da>V%%/<=Xghqd)*%T%_>r4.abRIfufrdO36EkrQ%G^-/O.+G;oY0OBLfDXk-GJ)sQDgHh?Z(k>LXrC!Jn\Gb9r?i\8oMZk/n:SKi2;gg?[tR_pq7f/f044V%GJF$GYPlYbrq)2l^hp<g%EW"\NrN"7nrMaG$J,Yk6^AaP8I%WI]L?/kSp\`<DrmTK5pWUs4p<8_-IIs4W'[APNnlpa9^]'h>rQLVCrPTB,rpj\cqX-;Dp"Y;l%p*G4MSaZU58,i$#+8P4eHi*bW@@<e#R(hW7^[\FEJ,<H!m@MiVI@$g@SrW$mnF/\FB\XV</q[C5*Wb=VP`1':a?c4Li+L91P#T+4%d1n83dP'GFJo[l24PVI6&Q7DFQ+9rb$c(q`MPl)2(f"YNAEiGG%B^P:_X<2#'4^'V+G`DpVrV/l#UOFn%u/F4PYa+;J>fSc<Q(gY%Z?k^;T7eNpr*"+qU5L>%E`bTB+q00T$SIg4,mCDgBJi-k#^Z6F@K-)t#N,P%-U7KbF$Di`l+S#3ZlcXs<*q6\mB9Jr?4#==A7#gu%rr)3(6.3LirA\KEpY([\VKoBD3+uLig5gl`ENf=#B\N0T*sYNl?Me]g2!mdt%[s!&p>MZYfoLS%1`_@"\?tLM[IiGIkO@[(kO@[(%kO@[(kO@Y$s'4hQe#UI^54$2's'4hDorB[JE@LV!N;cmO+"ih-f[50toYV"6(NVg@U&STga):+UR/4'(qCdSPlj*IofoQ*-s-<#q%KqeO2kfYJFqh=7W6.'TC\O^BtU3rIs+2.UC/(!JMbE#]*"JDs2lM*6gScGBuYIXM^Pues5Wrg+uT=EkBg[;TCo]\I+\Eu.4T"O4<%PlQk&psga1]$p%XK_CFdG(K0@\Sf$ak.!jF,=eq"??>^D/UV["lrnF>@sr3.C9X1B3dh[?@T)7-j]>`7l?%qD[$6"+Dk;IA!tW'9%D/Xb!4WCa+6HeUlf3WU1Z,VpLO.EqkOWRgWrl-%-i3,BEa<s1AaN+>CTg+"H)g7MOq8QW7*]);*Er#7kn+6f#o"X_Q?[hS;?iJ'S%ro66Br>T,>ib(ISd(A2F1EZ8GH2V_g%1%HP*([g3?%;CDJ,Rq3huE5q5P`FM5Q9W*htd+YTDXUk]e2<1T%;EloNZm7)W#ehHiK_Y%^@f/]s7]<]IfXqgs4MJ>r:%>UI-_s3qkgK(lLaa!<C`'UFn/:JGl+s7o]TAKpsHE4Hh!r)UX)Rd^@8IAJ+UZ\+8sQ)D\&%UT"I\X%e^5nN^"#3Kp"LSflo1P_#(jT@I:/V<4nI/^5PsEshAYn?HL2G;j:7\p$msm(U!J2R#LC,WK&\mF^$tA!^@g.i]dXh84=,.1k`n$'%q1[G6pX*pYi&N#EWq"jT^A6u>Is$dbo>Hna0S5ct#'\qs%psbMfb]V*W6,Lo54t2%s'@&+FQ5+.M^);p\<C:roacQ2^Rf`0,np'?%?[h6nBE%4(rquGqe8<gQ?5u+OK0,NMf-e<.US!h!,?+9a++ETen(?iISHLbMMJi,_]_2H"J)\4;$,T(no:=5*nNDLG5SL)8c#(\X%hu)]uhuBZ96*S4ac[G8?&&!GGs-fuA5B>hBC[Vhok<J["+$X[t!;,8`5Q&[]]P355m2B*c`1?;]msO2#:Kp^":d"d<Dg_J"ET%B]%G+c_:cA`&mnK1!#X74!Ts8L)$f/rC_+][1mSPN:bn<<nI_ugsLVlQfdakte,6\W[2d#iE_#N4%FgN#m;BfHT@qmc#Qkh$54HKe.R%o9CEqb]9Mq_#6M=\BD()NGn*)+8Y!kSpf!aQ<nt4HXH]tl_]&+1k;sifJH]Vc_nPV'2+dCrqoR+rTX'@#,+@KI5lLr=7Z:,?iL%G%(+=_"IK.J$T20Xd%E09Dl`J+dYIsTchgYEI;hb#B9@#j$mE`H>=!ic.YCT;o"DCV!@,q/lJ*FTFD5qV0^$sq:rR,&FhZu'oJ5l.r%^t@CtZ$RR?jD.PV)%CC?T)..c&)KB;ga:\l@)oEo[4f5PI@pN$pJ&oVpV6OgpUt"7h0$DIac9VGohD%IqO9\@R;ZJ#-J+@gff)+d%Tf9*/4Z?Xu))=1:S@Hg&\Fl.Pa/8D2a]9mgo$?4!2<_[>KK?4Xj%;RHr""j:o=I57k..*ID`#Ie`jB4HIGJT=RJTcDp@[l:q*SQY%Flo8TIGHX<"E>HL;!)uYq!No$rg>EgjW"7!n+m@P]&R@#&>$1nG2D_K5CVg7^mnt#ALWh;cp,-^cg0K\[Wbc@'W#O<VUJ7=pYaQL%>&lc/@G7"EJ=7EqF#EdOb[,9uQ`;%;k2_N*!PZIBQ!FVojiGh"XupkbnkL/a-b,&ns#>"JPY0L:Q?kq$*mi7UcT%[[Sp>Q?DP%EZ%1"+$9n/*V5UKMh`+39d>&b$Jl-aI;rk'S/bU;Pi>O+9aF1gf<6W&kD2o$XoVZm]T_crh>+^;*7RG'VXH>qlA//\,!;`L<Fl;INrF%L;UbVT(Sf\Nns.;/[*N6o.BEWn3,_$i4Iinc=)^A^&L`$4o>-b0>@4uo?TVnY9//X7`?k?rnr]1]r7L*?@;>6&&-j8ho<;-ouH1C%k_h\#_B2mTb<Ph*F*HR(++1A);5`ook:Pu3r:15f2m66V]X;MWVY\WqB3+2fmHT3^q$Z;om."IgpK!+UebXYZcaSD'>R,6.+17Wr%pr=0je9UlOVr"8LoS6K-A,Q7/<iNG$"c%5,IcfHYV71m1Br.02OH_8Di5NjcdcYsqOfA5@j#ShXpZGGN[licbd`_Z_`:\=;>=GA9%hi')aOgT.pJ"HUe>j4Ds7M^KFIh5]X?d>&E7-QkHW:])P.fHPPXO;H=_*+1u%otJ]1<Z_]#^LCH>`J)5-&MH.J$#HnA$VNtJ9+K`%oZq%oI-^MH=*il=>UeX%^4/^'7cM7^*S,N$pJ_g7m8W%/\#hB4^\=P!3_sFKj^j9E4#+oCrFAN)l*>YQ-8bPiib.ls!1[dReTpD#%pKV>.h#G^o\6f$%f`YKc[HK8lc8_Xl\3Be[AXsW$CGifo4Sg:\3oBseM\^Ff]56e=?hdqf[cbC%cgS=8Fcp\Ad,R@;g5Hi^p\@$8%T<bML5,iaRi/:AnrTm=0qU9),r59C8n.pe>fO`1^qY`YVUHeUM5Q(K;Wf5s^r*29Qq4ZhE3B3p4kg/MB0&8BPL-tfK@5)sD#4F8T%`])/Y.$t!/dB!^]'MC0>c2GX-n"X!862nWFV]!'%KgX&fPZ.'P6T+eTFRM@9C&(L;L4]Gn`ko+Vh@g<Qs/QtEP<?n#@^3/T<PB\J%PkD]s96F<@H.DHFa035Rq!hiq_:4l1h!qGKXZ:[_Fk<0HH/dPYO'BC@\bsV1f:9A=L)WqEr0j*n5'>oY-Vmuqlq3I`imB9Z])'?f%2r8r*D7ADO`uVYHG3^_=hf.D.X09+oBGoa5CMIasq:=<h4FQt[0%\p'S\F]=!*aNh0a$X%.o>Btp,h_`e^ZU/:OSf"XugV1nHs\n%odTrdb8kf;l5LY24Q+]<fML`lIJYSr<1!GDHKE[7&?rU:dF6h3om5BH>!.cR[<LGH$VY%Oe_iW?ieH(?ITN)PWO:"6L\g*+[C%gl%d+_oK_[-eOUK:cCh9EF"Y'#(pI=@?R_1s65hGsW&qR2ls]38n_2L4=7GIe]]>($NB6gMQD1e%0>W9_`55bg*28$9N$\si`g`YL3n%0cVl/!me1]7<i#TlgD@Oe4CtDIIsOTDh(Q.gADKn=?fXsG`EsGD4o9<???'&<umQ.FR6r*\"3duqFI(:`HJaFgFi%J%2sB@hKc/R%*ft[<e89E[2mpLLi<!n0B1I_*J4=sh#^stf.hp'oDniou#p>!t!^H_m)J(=HCK!AA<.T]CdR&,$,=n+%K\#%']*?]/Rt/f=*R\)3%j)(*15CMjW9&BZ99_f"9oH8Th.h=!Ip=B:2/]R#:P?2*?O![,Al;mknZg,'XGiH6=H?&bcCTg5p#@rZfABEHgE?eW7a>1uq"$sX?%JpM#("@D:S"/:/FBMoFRW#XCir--aM1pnHopU7JURMtJZ"u6^fe>UF8.umsE5_472]:1o7i8\Nlf)t-Ep!e-9l;S7r*LsV\J=aKe%[_BQe4q71mG6<O$JB.=tN'OR.opXV8XK*+a>^)fplMq4;\E\(qnS:qW!)3`(/\(D4gMadee.#7/b=iR_ob]AA2ZTn#bH881Em)]-%%N$NK)hq&B2().*GPqt0hKZs2f@?Cq1j4D$/$;"3ClC?&m)ghP/=coij<t#Bl56t9p/Y>QT5f,[0H&O-[ZA+O/fbIG[+a93o^3L&%7s>?O9_o-uGfGkaXPWM#$3Ir'>N>p36at/`ICoj`>(OO#S&TMMMKp9#p^<Wiejo;pg/R!IRU"E8CG*^B"eS$fN"/l2(a%"DXKGPt%ThGK1^"$SJ<cZZS<WrN]#cOL`0#Xp!6ELGmdp9B3EZW.Pm;)QCFQY>s7;3<d&a%^;.57t3_r9Jfh,S>WmioC6DDs9I*k1ITZ:ENY%]\S4(Zh*dpj+H0)[5VckSTJk"1Psn8YPm!YII2Hn`(V8"GE#e2/MOMVn,GNM]-,UQp[>ihs1W\u]!k\BI_lb%aM.*?+27b.rqbT/%5Pc1Gp?qOeR[F\3:>i$o[*NR'rZ-LZ(E`P(5CMs@s7E;*s6uYnrH7@=nIG3\R[1\?I;aT(_]SpN(]Ngla1q9B7mH^oK>2P9XKMft%i^Rs5j0`h*huDl's86eBrPmI(qPDMdiii@RmB>=_-;i*,,_hMto!Ud]X&"-294.Mkf=pgZT7,cFJ+C$T8P2d^nO/[9^\J*VI/$X4%HgFC4HL,^FqV)OnlShGZ&J+$pmJPVVs*2^/Ic."$n>So"rR=(0TD/B%DuK7H(jEUAUPAL4NVhT-^jFr<iK&BI_sdW#GQ.G%M6ZdN%'68lsAd=[2J,.^Qo"a_mh?.]p[JREKqjG&qAmKRIK/bh0c^+"2^Qa`(o^`MQ7K^eKgU[X1VP_B045+Gm8*R>&:>OaQf[t/pW<sm;%oQ*UK&C,-027F<X3jUJCVaMZDaDb8B5R\0HP6HM3lnK$&Rb1Oc"SH8#\IeL-`knInY@7Ur1bdhpP_rT[QF#'oC#38Fb<[>aQ<]!h%0Y1:Uk3kkg<ece3Y@&L;Ec8])KCNl`aO279H6GhgHfOj[B(OdEi(G9+m4'A=Z:@b-m8hmM9q&PD469?iCL3SZUUC2c>I=JT\V_Mp%+\8>156q@Z68=d_-Wct;=;_AHrQOX>UL\]Fg<Ml>;q?"<IZaMjnIfY<cNfGX+oup8Rt8'6g:`#KGLsl>^C`rWciP6L[>(a!Q15"4%8:n#AV^S4lg\PB1ntDDo5ViB[@?D?P>9lfW=2U@\Z&GPVcJR&4c0A]q2=Mk?P.F[OKe`i&Q1;@$^L`#Z?.r=^P4J.EE`k8s5UjWX%W(a</<p>sJ<>-E5al$&"hT#b;m7.-=>RV.E,6_F%+n@Hk[Z-,u5k%*PJ:sS[s*Ni4\1[nZE0q>oe)YHYa(d8;Kn;O@JmJKZpR-"@%Hsm![h^Ab;=C`6t*lL,/ofT&.UNhf#rpQ*o83J,0##B@M,oA7Nhs6QILi4igHZS[@P:MV-#aG#EeGh"(Be1t8TCfigNm^o)>\_<H%0!up7Qf@PK=+]T5VYudUH,"#W#b(K[qa&ZC>M9UVhVHP-cue]1p4K5\2maY`?+Zs3TP<*hh$6[#DJ;=K>'<:-6.>@^6FTYc6.9dD%pYjHWcf*4/cf*3hrc>'mmmFYsl#o\nV+1?Y*q*?+FMD#=q+H9^/"/,&\h@+</(&`!ddE@^Mi%.BBtbEth_!(X8c)h.I\gc907$ts%qC`Q-(Q/2nK&6I#rrS:&jN(3nEHIB(kiKi\T"=0`RnfM:?Km9eji:,f]!\MQBQS'4W2o16;^RiYWNaE=\\!T/1[!ZicpJ>WmsJ_j%\BB<CG_qg[3I:$k@lSW1I38:'j8\r9P>D2@j.H+fqp)+VNMhdS:Zd5SjX9=[W<`Fjnc*q#a3VHodRu7,ptUq&qQIs>mX\?9m_n5K%^n-8O%tFDSkEMIhi(\"54n[olcS'O%i0U'L?@MCK-]RlPrVXXtSp]n@j^pY8"Fe\34`,5kh9TGUqVU/)#KOVEZ+)1P-[P9W-Totq%'"I+X`0hjjl4tGJ#"IM]0%:oZI)#SYkknpdgKpuQoOI&OV[tFMN]3gVIa\4ANYe=839<Vh?[aKq^mC\"^:t5.IfA-_kI[pMQN\FO%V]L;ed`ije54QJ2>6$*B:3N1X]L((tnfL$#h/rS9AOfN*^$e09?7H"JkrK-DD]3udai[[M]_J,f)`i-6ZHI0UrMuh9h#6j*LW43m%HK9<LjqBt^6oK^I#XUW<U^ZXlP7$qVUEB?(K6o4odrokU=2tuqmuKHj2]2@!-\P-&l&9Ra:&s8-O8Pph.5*k2WPdi,9RcKG.U:6h%oB3jc5Qn(?dHeC#qun#[QCDbSNc)6e<kJ,S?iR)Gj_E8kS9Qi>B<0$KM/h!@O)GB[RL"n(W+^XQ,ufkb@bT%b-><1Pd)mhmc,LmD%L4Ade^FuqOWj10k6Z`:g@t0XjT,j_a"AKBSkJcV5oYfc#T3q6I<'Kp38IA-RE/HuSs*Xa,5<k4+*KsV8h,k(5[>1R(qp'+UG.UJH%1`>-ZVcNG@oBS![=\l6LA:0U5_/m(3/:tnpJV@H=J!m+S4W;akOsW8+[kE?([0OIY\FSK_krMC.ADtX*J=cLl%-`?K@p%IH`G>bY%,<8L5I4W9mi%%6;5),n*FM.lD98IQe2,3iKNY0boaqN,`!mjM[pp^]%OIY`b8bLl#kuN:pQhHOMabmIf>X^=`LrW0C'A6h'_WhUj%!G'bO:@Y;)'7nOqfTjP9o0.L6)LV0k:LYOjIG0>3=<9PE4r1`i,;0"aCiLX:cfPm+qV^C+U?/"<`mQ(dJDi\6e1D@Ok`^[C$6D4D%O%`<9!1G9npSX3*.Xm5II6TGt33U1l8"*(a$i?lsH<Wjc`<.]%)2cDBXU71MO!870)6>Hp;"W-\K*oHYE7.lF\:'su(?36T@&*tO%#g:)[&@scb,)dMnQ-4E&:HG/M2CJ8:?=45@V*\uI<AIQV9o%5!bPD\Z/RM+ObQ9*_af"r>9.kGh_Xsq8!=fhh=T#f%of?'+o?&//%(S:U'`ug#mIu+&^+2[K0Qh;R#0&;Q`,_AP<XFC1fEUAORqSC'm;tZu.SopBDG.ka*[gskI0,hqoblmn>KC!=ISXRn'o)I?FUuD(A%br;/Bg]'Cf!Pd+,YC6#3s0#E,I_WL=F_>?`a+\<<FEY+j6;*nF(i54%RnOL8nm+p'W/4eU'tErY-4AU]]hB6Gi0e8r$npu1M:DOk%G#EMi<I5/)#Q-=aqW*;P$IG7G?4d^oS<pc"'i(]b5'UiLG4%m\5hj^5,6H2do616ue&T%SFiD^%-Nr@iiF4K1,Y?](_t/G2J;_gJ%;c4hs78p-e!-1Q7'Wn&3(R%%OOaUWD@c6s#TH@(dZqmJHcDI!#OYCenQCJSJ-UjM6D'K)gR*LiF`EE=;(cr0((b%e:rB<ajj5V!X%h$:jp(lB*u!!'J!/0eneL\8W:M\H19Z!i&*(<(#5lgi-D,\KLp0_c.\;RKWY]%Vs/Ynh&m+Keo8(s"rq+3,%@-#'n$H3.2?$1QA1%#)'!%,;R\$JRXq2`WP(%-<W2;:Q`.`+=,\Jk#tq2nVL;4#>N<h0h\5;.\N05!p.9M'PL)gP])3TKtnn,63]7M!j]<M'S'*2/rQ49%KbS2/(32U!j_.")mh7+'!jrld4[H=c13C\ccqtFS/hK[OL]Dn_63d,p7g>W!%#TK?(i3*5[AO:-.K^.'1B<,g#DacW6,$3QnW>XQ%?n9'5!eutP(dsV(Mb5.DDE\,U'[8C*"*1Z>hR:6#qg`5nn;SY@W=V$P*9I5ko=P^icibdPL'5ea1pMl]6"(Od,)cCH^eI_R(?,OC%pgO]d!%WR+O4GN((W%n=eQ\kh0f4_4-!`M<q?<r9Sq:ZGC&lDB-u'+N0d'Vff#,?j,^=#5-V+jdEkj#`'HRF?jtsP>8^fIh,N,@#%:je_MZ[djE!IZ+%Zq@L)Q3(r];FZ92&L&UU5b95iM#_)YNJ[_uEF@>%dP->"Z@GLj\h"52&7,bnkDCZuSmegJK`t:".:f#=+"t5B%$pu_YLu`eJ)%[46<@^_=5Qh(5)-"0QL''I\aT^ed.;VqZ6:D/g:.l+u(_+hAc*FFE&/]I,GUt"Z"-^a5)QGY74*2L&a9&Ku2A?64%!QIl40kBB2+`*/d-&Ri[WJ,AZBrh^]=K(3n9Arnh8s1F,&5YX>Jmu=P@_tVC/?e4S]R>a(P#*jY`G5imSe2C"bd=Th^OTT5.GeXY%".0d9RDq/l3=+B>SR!S+Z$^rJ0X3$OS,IHCJ@gJQD'M#<G.rK7dK2'n4Z(Zo>Cp7eL<,Pc9p)e>"k09;9,1Sq;B"UCbN$ja4+iVM%d"3AN(X4\AX::&90sm_a5Y3CUTE;>k,UZ.a%hlgcqa65\m?0)i,NYEXA:Ft0TI<tnUdRtra[OQ,8b%(6qcH].3Ih*:FT`C#BKd2,%j@#B@.qEdp*?j6("%UoWcYhpOV+ea+fSnpTY3g$LWU\gqH7#HZ[`W'eOrCMiaaq3<h[_)T9dB^'0P,b`X30'5;VF#k(fh]BO,iHa%QB/T+G.EQ&D4:lsWT9=9WS4`<_6EL'>hDc8U0N+5<m6:M>=ah\hK[$A]rmU?Y!P70\HV)<_uTWCb`$6kaP;TE)A<k(aNTmi!VW[U%M*0.s2^asq'8%K9LpdPP,-0$2N/D0JTaJ,8*,El&XLPg4as<-qf46=19K#Or4?'\ZAnSk*-0`Q9;Rq5kKi=ct>U*&)3;<W/_'shh%+L8*0]&N%&"Q2XFU`;Rk3*f^-&dc\SV#[Q]$W1&e@BnudE%(^9aT+#"1_r0ETdcs@NlE7J*.=ES(%3+:h'@0WB]q'X:C(6YMB+a/%OrQMSNn*%mL]f"p_)l\qY\jG$TWj3p6`8/(o5V-".J&7H2bYC660XGI.HqtZntiK]>QPm2L61U3.I"!<(uq9s30\_se[I@h">)&J%6SX22)1q!B*!V:RJ2ou+%h;I\0T(JdJkMad'$\(RZ/_(67_hgqAh;&Z`,Q)VZV"=C$:kh=A-A61,s/rk;KU'DU?lD/GT_9Fq_pYg%U.Dd@CrLh$"pGCMr7pVt>U,#u>:-q86d`:Xh89/KmW=G!CX##\(@3B&<A2`Id#qAG6j\E^])rX):P1Fh3gtkh2!==2W+:rtf4$&h%rqE'c\8-H>/*t[rLn1CU.W+;"RuGL,mm0P\GB`e%.^.Ch6!H(UXMk&[h-cdW<9Y!])uPU_3"K+Y1HO>G1&q+p;Qh#3b1Ppt"c<MS%Gk2Xj+>\LSk7q^EIT#Y-n,$;5jCT0GKeVZ<aSfJD!=D7?m0%t^`DX!/",jFK1-jM=d=i2V8D-lQXrVjd.\>QX\PSNs<%%dmC5XCk%#EuIK.Oup$$nkPp$VCM7.0tX-1dT3e"AMFL/dkjE.Gu'm/k/_jqhcZ@d$eFS?V1;L18;sV#F=h,n=[C98J$;3g,eIeM11=*Ur\u0%%Z.K5-l2ud-rC5`;N*$caq=N`.0#?p23^Efs3K.<D1E@O0h%BogT"F*;'>bRE\RaA"sL0qafVR:dnl]KY_H<jXP,=%X(=DD$s&Z7%.k)jcKbgMHeRY=NU(,5[U'[pBBSqT,9tmtW@O!58"H0oF9+_;\/Km^%dRg*0K0V<>8Zdi^]Mp$[aso'[9qt]+\JWmRI@q!#bQd$;%I)l@,Sq62ldK>Zkjn(FC+^:%orC)9H&A4gIdV>+>ngl]MBP*Hp]IB!VFe,.hf2bF.Jer-Q=+_4"jCEd2ZRm?&'6:<IEa#$"egnOP%,1)8O&*G$p@AN-QKU3.krC3h\C,(B#]Z%[rET]Y>7SLeP%$m+,?:W:#[#Mkt!)kb3hKH]p<T.eCYm>R0Lfh7<@^Jr;f`_a$r6cOk%#De%,K8#PNJ@fmQ6F:.9_:0W&C5S/'Z='%'Ojl8)ZQ*9`efn$#'uEeZC9cQR@Ir=b_u8u"YD3h6B#HJ"Q6PYh6%Tl'qa7u?\;^Pl%I-CZkqCEJgc#%6sMGC0,E+rKp"lj!HB]pT@9Ap:^E#Vbb!Ipg:fN3VWXJCBTTdk$'Nb$7(<MX2F<.tBRGc"@R\/#KH&ZPkdQ/dBW%<2]h3!HJaQRW!.*>D2us0WpuZYhq6L+oR-#Wr20)lq.AAqe;o0keZ,_!&n>\#8THC7\6]m:Q:VPC=r1\h@&-(&"I*h`p\3S&0`h.%n<I<2N,Z4?0`NT7d0VXfSo<qPTt.(8;39:)/Z/'FJghpX;;*ZO/b08`ggDOD$aH.Y@-Yb\N`8+lBtq_$N33HujFBOi73+.#TgT`8%="[Ob0l5].]N=CFC<BQj^Z1:biB+IRQWHTDn.?P$(9C6/QU6]kTW;=kiCM&NK;fiX*PDpT!b4JmB^;R5AJtt;$#h"C8iT7n/6-i>%?4co?*:hmcW^HnbYsKbDV+DBN8sG/*/D8VU%\#3mGY.Oj2l:%1Gl!;moQJh0YMhq[SgRWmjZPH/ji5l!"7eXj6:n9Tbt"Mg[gha$%[60tMmn9Sun4@pW<\,ThR7IORM!-@c'$3IC1/S7E!$6-RQq%bQeGVBV\O)P`7deH2o0jCiC2Z2!:7Aln#=`iDOMML?YahE^N^4OJ%!c:^W7B=W?"VZTAWDcQEi.Jpfch]UL@b^"`"OCIsXV=-:"$r&_;G9Gt`01D\eV6s+`aUBe1bVlX))`j](p+lGc[d9Z;!Xk_[-J+g%C]Vq=1so3ancBmGk#/[h6t=IH0O)Ep:t,-B3D)8f_c&01,*uu.2I7VPP/Jdm&A>rH[ro[$Q7WYK3D?XhOr#r'LWq9a<21-/j=YVm%J44(sDMKh86+#UR.:]/_Bq)8>0dMPt)9uE'elAi&PYrK!!s3'n!7_^]N3p($N72CoW*7,6A[r5G])*PQ"gA'jA7ThKpYoBj=uJR1%P+jjD;66O+QPfjHenO5>2DYQ=H4_!;Y?1>\,OL,P1HG4u^e_tu-1H8'm9DDQXH@+O@(oUmFH+3oZ&N;N24@;do?I!T>kh_UQ;4?.%GF7,Y`?iSS@+tQ3b*=LR>bh&3_"VlrAsX;jTnR,riH:eM!_#gOe$3@NGhfY4-u-W!r<\k4YLkaJJhO;-L3#0RoD:T4ct4gNc`18=%:oK4+d'7+.Sk?W-Y,TZF`kKu2$oO0hJDhY%JKcMbhsBoBOT7/4'8V&P/.9Gu!E'((quMCupl>M3^PcX]J'o$G8*@&%dY]_$Zo%P*%Jq#ORiW:;m!hs'K#m1'=rp;dR<o7'2`QB&OnNnI#"r8C/&OJ.THo)mIncIb2%8>p#^FGYaT9=,iJ:K7D"%f9hI[;$^@i,46@f7qT%+7_"/L..:U0/1Jji[>_Jk4l1f79Uo8m!^eYM5;b[V=hc)/0PAaAaV6k-")ae#>-S9aU:bBCg/K*V,UVA$%<\R6deJ1.#N*ngcuW(%QrE%(QE'%G`)#H00+'T9ThP1:%/L&c)k*"arsYP2`(^.1E(97eaq4Q6['UiJV*TV8lMu[;1+iuc96!/O07gKu<LPJYi`l,AK!@Wl%Y-!i4DC'/#;!<7P1bZ[s7dTOXnRF8PCG+f)@Sr$#+&8uN3a=NpO/<d3ATkQp<`_eNb<Hcc(JX`=b%;9_<7.EZg5<LO[fIH/M1#Oh%/h'*_F<MO4-^biHTTfQ<[*#sWo2sUj=)i0g$s/^p0dt)<nm.s)+kMA2A1"R.7efi/[ED;]gJidT"tV/\s*B7niG@/Hl:$\>aUt3O%W31iVi=9_LTrg<d>N:)?j5MgV(I2C^8Ki&[<`u8tm!b&>dd3d4bA-V)(JEk?c,778][fTYINE?`IO\>k=#;B6Vi#Lh.IE*MkK6`9%=Fb9Hd?Z-2e%gs5QO;[\C7l,Uo1H/Z!"FeD<o@c*jemfW/=l-7M8nPoCu27u3E2cT_H8Q8#7?5.ZFYfIg4tWO^s<&U3h*ut+OH6$%ChN3fn3r`t@nSkoe11E;'mY^LVR.Adk#+c6QV\pEWJj`Vj%)/?O\at,L\%s%J_f:tI8S5CQcKjlB3p1ZVR*Q+je@*kO=QdeE'Bb4%9l@r`fmCmN2gg?%=^#]KFiUp0)jnldrg/^4P8U!NV=If2[?f)`["$+(q)Gg5M?/BSc<8AR4N$.N%?<pt1#]Mi4BsiiHuM"oQn7tc%7i()u9WCmM8]g+(EN)%0?nG[,A';&t3>'GQ*E^O/!J7apbbf>m2Li!V-N82i*Rfnc:4(Nb_:G;MOnEkTb?5aqBJNWDK^<\jkhsG*%4=.$loINX9DUcWj/d;!sZF_=Te`G\FLPG(<0iXK;859`3ae3&d71aE//oh#Pd18V74br%DLT<$A08%j\gI-18\<eI8"*'\4^KBLb%MdZ\G*6fLjW.+2Zcps6Y#n+5;JZ)A?=g[Z#i]fofk9TDpe0pF/-KbZHjBRs.JM9mE*SLUt6V1Mkc6Q'dm(Yc1BZ#o@P>YKG,WWM3%!8`20:PMdN9"]uH"YjQnOL%h@::nhU?,S`RC4C8)LGR369QM=4c,!14oS(@i>`uE%Qk%L=1CtT.@trR1j]1SI4qn4Obm[GpF&+Q^%bp?Z2/@];%q4+9,_M:n*&5@ka-t:CVZ#g:LD"=YlRns!G<pan3dRe#)6!'/@,",2<.faL!<_p&U;h\I;G!Gt)VniuXdY.4MCVdjb%9iYiEbMY6iR]:BST4CW438?*5BZ;om^`:!)L[fu3*Er"A'JH]8'#[5P_j.m=F8;kZq<_&mD>4<2GY4OF-VHIAKuRPqINS:-Z.0%O%`X7(H1O$?=c=0Zb%r+s!QisS#CGNM.4BtoM^h$MMU+^Lr^+Xim=V@jWJ9_/*)U8-*[4e>:i`Z84A2.HMbp^l#nbXm=\>uCjl\/j]%SjD-_lRRDg+'Ebe=5@jc#heZfR:<=%)d7'U;qnNA=Wbql(Rt]MQ]sHcQoHaO,amAma8HCRdlUZ8>D$c4:07`Z@JuqE7299D<d\Jf%$!`]f`.tXKo-a1HXLGq?_UQI,]kT@>LGJ@W,Qif+(E$J<\4#o<n7)@pGEjgQ)=Z#f6)0Fl[)h0JB^(LR#I44)MXOO83n^N$<nOE?%>YGChPgFiN&(nR!k;=>I=$*f-/*NigH=*O-,?5Q%m.T^?Ab>(opUedQPAI*%=O\]mDOTY+A842m<g"EPbbR/kMn&8q,3BQ:XR9S+%&h.#54olRMKh3ZdM0-^O+(gTE1Ir>:6N+m_X&)!CX4g]"%F0j>&K>YBK!,/"i7fhsFQYCP%#)AHql=$1cPkURpt?^_VntK7<.:O<%VaXE#/#A.s'o]`('GHL3:Q$ae:&77](j'k6A0d@8YDfQ-n)P>T8Us$\a;nKc_=q)q0$g9cgAWBX:32+-@qj1i>glKplm@*%+t@]q%BnHuu;h<_]HjUU,](Jbh"^PLkQ(#UWoqN2#G_<.-17q7<Jbih(%&@U1&%GRVkohQ_`f=BMbGm7iqdVC;^nY\[!VMrk.mjL!VH=6q%ERJH-r2)FgAgFeck2Vg37`tZEH*hJpI%a)Q]GA2YOPisC0)2H(^+NT2"hPUPmO^_73_U%GJgqJZK.<)cWmI9Q5$k$1HlOA%Yp0B`%8,s'G"!'(R)Fn`+:uG`V,kqfK#mHEV?^r6X4=LOC1^dM6Gn**GU.dHi;$jiaEa!,`&kjO-Bph0mXMc1eQ:.:=(bMfl-uhU`*()t(%7+`nX.q2"W.cKc6P_NQ]oa]I]G4CMRgoQ=8,U9RQ,4c.%:ZFL7I0OkWPIi6b0"eiU_Cn^sja581)^@pk9`fKhQ,f-0O3pKi\q+:(%7\L7Y2O'kO?E,H`cU!sB=^Dkm.$[WQ8-[Nk"#G2#+9IG['N(4"dUt"4#E>/Vm=;&;5m#VnTsQtSTV4EW'N)i*3)Gr-<&#4#k,Ioh%!=F#jO#%\d.$btk2N44ORd(K-/KU(*il&&,Oj#OL<9d)o')9]mMR`/]Srns_0!tHV"BoCCp`CJP>_s1\,tOi1Lb4JU!%"j[PS07E%r).RU6rf4WSb,4ITa[A`,;)fgCgSU4?GINl(,ebLA;_V*!>WuN.p\8`PG'7S/!$dggp#/\O>MU.9pQf#2E7e&GOf_VMamb*U9K8\%Te1gX'U5V:cpUic`+6b%2kgq>jRHG-5ZIiZ75Drh`dZ?T^i3$4M_oNRGMsB(BnN-(.jBs25XHaeE:^G!m`;%lPrU7V,dJ`u-.eFT%*pFC0XlQMg-(6Xp#2'e]aWR(7@Odq5/KJL>ED0gU**6YkAYTXCJTbjE'NG_PW=Pr-#RSMAQ2A_F'*qB,C*C[L#L5&UJ8:m^dR\Ga%.,fC_AfP9*,ncK\7B9hD"C>h9T6Wp%S$_d!bMcG6@F/gU>H'KD)JXUIJP]X)VH$;O5$#f.=3kIA:PIp_.R=1[X@pRB5_#TJ>-k@P%r,5H]k`RGt?:X].X=s32eqQ!W%D/$Ap11!?g]@iKd\8Mk_O%#jVU;eKiu-:h(F1VpmAuAcIgbi)2#`u2s(:cXSGY=(s(:B-3W(h2%bX_GHfcBViphre(>EfGWs-=TlIuaaJpKR?sX1@\I(c^7'?piW,A"@/98Y%<p*SpG?ZA8N)h9BO(qNl3<AhJ]=(Q6s?Zi%d"Ot@D6%e..)0B'JEeSmX+1IiBH'GBnK1ZeOu!!u[JN`p^:c^6ID/$.LiHfkc&b%RtBm%>iQmCqR+aQig]OL0hkHrTu@g_qWtfn<n):C&5'O%jgf:kSH4eb5U#`u[8KkN,FUiYLL]mI1pISYCS9[VWH9>VPhmT:mnT+>_I#an<Ge>I9O[%S=ME.U3TI"@]gk7c#[h(d_#b+D2DLRe%8O<+&--DcP2Nr6uQuj+tF=3T@+kmL8?YcW7!Y@sbkSk(na^joMl9sb5Bqb98q"Mi9dZtQ,qO`?m96;BQ'h@qI'g5kQ'XQO19%>R@%/(T01j3BqekG!@_jKQ</K;hI&k5c<=.ZP<M0*!R?&Ljmf/M4']HP+TD#HS,`F=Ma=gL>p/&Nlm@fN8WfUVT*,gIor,O+MYG$GEu/%PpgN2l&c*nYe?b;(.PlWV-`!HUdt/$FDiSY8&6"r<TqY=1:=CO`0r3<#MUhAq:;Q5CKV4^D@\,HMkg(^L`;n,Xh;qJ0_lro2jl8Z%j2iG!>&`E+5FA2URY:'=0pY(C7,Jq(iZ@?_:Is.D-dnglek'ggJ0\E1q.(Y:^F/979&<Wk71uS/Cb:oI'd``#Dc/s,9$.5q4f+Za%30r5G`AWm^Z#$Qg]h[F_MmTd4+W!csPVt5sgZT?3Y,IH*((E^;F@q^B?<5<=0'0u>XLq[[M`3-D(YTD0!i9AW2%_>QPBgl7+lM)6%82?;WD7_-XKl"=GX]6nL1[?64Z"c!"hiN]i<-5*:-D=qEb[T1)#"75!;UMn7ccSp)eSPnL!RWcf/8QfCTfeTp,'bZbeJKkQF.c,%%3Z<T<="]d@6l/bUV0#B7iE2CXPn=a:Z$^OC)p9U6J:6+`Mf`g/-#gKqV#\qG1$Mkoq]hp&QrKO])b#*<F"ng'nbYV)W<=@(Q]c[n%.n;3$-cJ=m`JQnfTTsYm,,h@l'k-]SI\\0C<!"P$.ZJ1G8\!=dR0$i\:1]Tk,#CGE9@L6qaW?\knPTdqUh^eoA';:4XN^h#CaLZm%8uE.YNs*UP:D3(pFfiX2YtWq4cP`b$e#=>N+cHcs"$PE>Z;iS[IJk-CR8!@qMEnk0Zgh-9W_id[2k/,-=?pp_57lC4C*-6f!"<>E%-TNQD\ElB#Hk,:^$[UhKb%GdHHnpGc0U>Ss;&<;)Gh*^Z>Wa[&5$%M4W8@aoI;akjDul^r<,IWE&I#Al4_9s[?TJS7@j7<kV$i1[%G/1#u(+04-NB<eT$kZd5XP//*.YG_p>=]KmH=#s\d$LMn%>%s[>l=,/+2FF@BdP#[Qu+O,8HsOq2sGD.-J)Lr/?h,@f3-G\m-**T%B%K0[@-2PX'aLtKrAHKrb@fF*l(fm\=Yf!kpM]<L?icY6LHhm`EuWk<5,A0nZ+MPsGXT^TJab!"g%BJp3k8R=$s_$=*5go=O4aOj%p-L(cAdQ0lbAS-f<'((\W-/0AU"TOSQ>3a7?I'=6M6na3B&eVSEr#BER;FX0'hW7qU9-Xg,F8)cHl9$g;2-6da;96>HNRc@VuX53%b/>Sem#`LU==053eZPF?\4OeQ((/<P8t7D^JQHG,;^Ejeel'jIfRdXs)_oms=o^i-"Z3EUol8471.AQb@KVf@@;E,WR=f($.r<3<%aaDN+$m8BP#aqNpb*8kcbYf0JR>25<Tpp<>BkC3;]YWVqI\dqCL(Vi8%e'qq-s$9W1Bg\8YYS[<R82j[;.an>C^#?@bs3J'7*-8n%Q&.8&Fcc8q=r)llM16k;87qfF=V0[?/#Xu&jR<]mi1fN1S+XBi9`#G>"e&cZ.ADE'_J0^rC)*8gaX*T?94o4XPtO)S*&C?h@4M;f%]T0a=fHH3,?#jaLel5'<S0n%Y0U*<:2Z5uM<`#c4i2:7cVFlrm]YsBR4eu[j&dWQ$=(&FW'"jtT391CtgAS0n*a$(fr?/mVFH]*Q%U:>biej*E9fees_(D'S_bQ(]3-p]6qr`R./bH:l^.&8aVR^gj`U4Ihc44^4gP?j(P:uh#t_SljtWT&*F`_Jfr$tD,i'f61s[%H=;%l+G@!)1`@)_9HQYr"046q"/?8HTYmfD[N%2pp,1T^F*VX0gNNs@)q@B.r(Bh#_`<cD-J?MK<T7gCdh?UOVU)Oo=5`*Ti7(o>8?,b%Z0u0GSkI,m[g<TW9KZ7X'6sRV9Vn"BLira532L,qb']</ChQ?<Dac#c5o&G_//9HILG$ZJX(p^k%M8F[4:EN5U:Km+$kuA@0K5]7%>ip^7TVPJYQ-\1J0ET>sCRiPKgNX\D/?_(4U<+URoI(-7"#@M^br/PH-;q"^J6`@VS$,)]+dcI?8\()mD/P%]JrWH;SghX$F->@<%N(l>Z#Qm/`#fDsl<$=b>m_0i#%>G<c,9&Q/%0S1tV/jB<ASbh"#aP_c9"pC?Li$UF#RMNc=>=M:!e]/`\?XClSo2u9aeVr%%7/qu%Y($Z=gk*,-Rl4'$Tp6YFn03@P34;Hpj%=9'Z7D$WPu(fE=G\jG2/:3kPtOH_c=&EI]u/dYFq<3)WdbZWL(='4.9S2(PG*O.JIO!#%R=c$<T$bQsf$;sOVN0;6gE><3l4*ILqmJH<2_qdndFpKS;^`CP'cOUHrWlT_hE0QF4i6iu&"d\Wl-5RSHo+0L#]>f6l3X0r4r<'h%,8tkiQ@1?uSSbo(DdeImf=6/hL26B9csST<d6BhMgW:]g6`I6VGhD1pg*f<GS<sQVpi+a=c7ef)_rm>;b_!;UYalde"9p32S#tLO%I46(H)J4WbdS7&*mdN7l\7XGs"#$hK1ZOC+"&gB#N&=Kb>l.E;k>l](\%U_SD@O(c92SJl@_Kd@Qk`n4)(gQoQY-&$\i2e(^)l&\%L,Si2;TFgJ`c.FfhWaFoBq!$.!0R_`jc/@Qpsuqg*_6^h#/.maL;9Uo5(dR:M^:tQDXj6p2'.U\j.=UEZdR5=E79fK_)#r/XhCF*%l"DJJC?_<-XP`B#a(&?C>H0Qd5.l_,PCu0?k>MhjmA]3`6nn#rC%CCjc^"XMPDqYcroW't_+hM\c#q5]o`d2AVX;s;OUaUjIC:ZF%oDZTf*QZ8+aO[J:;J@j,*\>M8[dd'`I[2;nmAZ13#0)uLl10)RP//t>[Z,Vf5O@eI%<U1I7bU8=!6/SXOfRs56eUSPcC)U[41/,(%KUV;R\3Yn]\X%P$,`CG/2kGSJl4.\hF'_EpB+i)b\Ptd+p;]35UU@33H&.0,&!g'C#c,I7XORb6k^.)hZr?hP3?&jQi1[U#.W136%VZq\8c4R27h2sTFgp>BS[56Rffo\7<Af6T(683(k1rr9k!)RW2+^dkfJFmqX5bKBTb1PEUGQk?5S1O:dg]D[P*gd;,CCRKELNXlH%=AqSK>FQ]&ljp:A#GsE>`P>SCHmCC7d9uSKr6fsUW0:>>bcUT''Gb,VeVWP]QJ.^fp>u25!LqDif-_dL`)"`rXLYaN^1.q>&8\ns%*EaOiB7e@_@'hkbhje<47qR+p#RP;sc[ioJBkn/i`FU8Eoc;ZT?02eA=P-T4];)d7jGAW?A<7X=gVL'W,)+e9k16iO*E0qg^slbs%<6e+R88@oP&,]\H(7%Yq41=0B"cRgY9o-oiV_QdCg>jRr,&9SZ9/r?c[h6`eXq$-sbRT=E_gR*$5nZanVft!*20HtV*]V3\YjUNP%'de.5LB=6o_3&DEI1QP'6YhNl.'YprN2Oc7oEE]Kf<![a<ugX3#kh'EG8Y(mE<@\RUZ&p=G7pPemt;I2-J$paZfT[TiSrd">Hoh_%[jI!7*R#B'7lgh]g%A1AOQ)q@oIc/$c1M2;C9K[]m>]jcP:)fmG`B(R%5&(382nfq4%=k#mbsJGi_!ZA0Y'4]p8=:h#]=%`WLjPl%NFXtoB;PlBd>0J?=6"0?Br*X\^bK6YWF[7l?"pItP\Ll46j,n5.:ahggZEkZ!rR(U+[C.9GSMj:k$Mp1N4&=0@LAf;Y&P]8XF9M2%O*%h\Vre%Z;iPX_fnUj(8s-!pfV1,RgT?U+\UJfjBk\!Z#O%u'ngdMPkY'5HS)M22bA)=i[O#hB2oLL'Vt+);Y^(,lceUP$&CIht%1jk_qF4Wl1)Mg&L!sMKe!0GTR+?hrWVk>^1JVcEe&G:iaF2ZhAc@gfpN?6&0[C5u(O]m3C.3Sa9md11m64ru#.T\GLJ)fM::cBrk%eWiRU^fkL=?q@,'.&9g1ho8J5V7$FA<ITXrnCIg@'p_.1&RgMcFJob4VB(=9>i(-+]NV'\/5q0m$DCKSQCu[NDM>#\\I:D4;Qu+J%YUEn5ZkMs6Et#JolI"/ML!RA==dRi15QU:Q\2^X$!TrP_V3QSb([XK@%B]5Q0FS''U(0S`_Q8hseueF5cOS_\p!9;Zh5Gl/N("UW%6XLfA$*&ou7J02/Ij-H+Jl,Z%L3:1-7AW[i&Je#O@=AH(m*PBMdYb#MXUIWu8M9>+>R,aWRP7PO299mK*[tj-(QXKsNbJ6e@bueQ%)C'pGWaNQYC0c]p@&]*bUQ:meb\Dq(JlplhZ&C,SP_%H9R?T5i64AuM#;i1t;K.[Hh^4V++QC^T=/9K8:r;g1EHklu2d^Z&"=?e0%3rO_o"eL+X__#[p[Xm$8gn6t5B%G3=K9;]92"`HZGUTp.SF5;NR!;Q2-G1Hi&7,bK\L-75232OCP,Z8qX*2Y7_G(-90,A'BUEltR%e?ts;j-8a4bs!NYJ>$?iR'[YjFWD[kHY8d0^qta<l/AIPQsH?n=SRo1iFmc/ohUA?4dl/^d/7EDpG@&ZbE)Bnp3(cX]'s*C4faM9%5]@#M/A28r_EohaJnl=aA4pH8f2I[8d0]r<WL^iW5kE[u)@/Z()Sk;bnsF4JQnfLSZ%^Ci&Gqd4S8Z'JB-t&3qm&P)0>9"0/L><N%2DtlSO3pcYZB0$D:og-M@I-BIO1KD?1E,,HEt5H'm^XO8W,%P`9D4tea"i(Ld&Yu[7S"'s:3%OIOP**ThlKTTSo@qmiZB$_$e/.8%>A@uA$V!3&B75[#ij00!S-E'!.DEgH:G4#L_X$698UkJk0dnI[lnqMf/_\7'NhXMGF!*r<A7F9+,pa`,+[TtI@l<OS+7]SkcD^uI%\RE$IG5/Fl$?(0YHa&$ZdlZ6ud-P!>:nLc64qZ-Xbo#(<'cKDhpE'itPDXNZ8>Cb23SWXq'gUPH%Y^R0)+h2)=')uPE,^&NbCi\/%VJIeQS&`qt8:/l8^O;47H48&unUqfTi$c]#Ta_QkOb=9Q-3gqgrR>RPb8>V!ZmW<2"L+3Q+>R2FH8W\9FpuXIJXC&U<Z1jZ&1+1/%4emSM^;N#S@pOA[GIghn$I[M`?gR?JW$DYP)V=K]7G(Ir9X]45U-@p"`kWT_:WFs'P*lUglXFNm8fj5Zh1<sYYWp3nJcsab>u5Wd%aTq1pic7<N)"K-eVW>P"H^3cl>*?g3IpE<;[]d)KXaQC'QttJh\G$puSAd1"8L09e(2@9Y5.#UD[_9)\De2Ah[VmS(2:C4*g-)mI%C1'+CJ`Yf*eQ&Y6W,X>U%k=*N*Bt32-\GqX<P-ld9PSN/9JgPi,4Ve+7Pl%C\\&c=0!@d6U4Mh8@,Uq%EL]Bm>bFs"c?"V(&-]1m%rfN&D!SB00c1R>p9Rr?Ncd=)!3Rlo70>JdXJJIfY9LlGT::+(qL_RH'/4u.&p4\7L`YQVkdkb/ro*83fc,C7@F)GNr]\2;3WkGOj%o1L[`\.DX6c8I?V)n!@@4n5=1N(p.!Ya4&5Oo7(Q:_'@1S3A$$pXQR:T3[*F!\pq3f;VG?OnQWDRL`WLDXIo6:ee@kGF`:n?)EtR%5MHm>$B7f8I1lp*Du5s)PWE<REej7cNVsN30IU7dZt2a"!R[NW;4E`3J1u0@N+SqpL1J-4$Ke=qC!_$n;Whp(17/4H1.e[(LPE)T%U"-7f"5F3#1cu=f*=$.SUuVnSkhAECRo(hXcTH?eA4LM\ZK<MmJ9S9\?V%Ssg#tsqets@0oSs?81M'LE%?o2)qSnBUb#k;BF4G'g%`,E/p_"`b/0`0N6g5E2O1dBh(CpN?_i9?'`o^q:Z@OX"f&mc)pgQOW"dWSNe4VM\(+"IE]M+f<.L0M9Ec6U8`D6ZgS%/T/W!#^\!%)J=U6G;?a"9q2.,jRT>+6rNUjN*fpDd)s:ImnSu2!9T*?O*GGgS?Zi:*#O)(g"j@`(`K[_Jfk0NNk^2r"%c;"UFTP6(WR9rcUQnW%NGNiQTQX3QF.\Ba(']Q?8NBnp_N[\j-rnm78SZm!!Ajq#D+<3?(+K0N]ef!'5rceCX`l0N"idBWM/W(mf`%]J]oOWP]T<K?,0Nhu%3\]DFlde&3dNFF=n6fZU"*C%(osstFXopM.e$3S!+6cXl_Z&2^,]pagYIJj9O9S;s*XPM6p$QKVDi$56E*e<(!rU`3:iH6t:5Y[?%l""0OO=_,+MVZtmZHXBYP676PQCV]%1g\N796V1B9?feBftg(+T%-D(c[`QVE:n@(L?(fWQYi)l=ul#rEo'LEPi>G\d=J9bSupkp%mbF5G["##1ZIZrtK$8b%TXb'c_LQ*U+=m?TUS5KO#5I:cWGtGG@j=ru'8<mOXEUZd-r%aZ;(X>GW[nKj>?MB,"^!f1ll!V(mS.iJ%JP@2S$>m)fZ*8^8f+L2IgeMS<T'^"&$o(V8['jr>>3?n'o&`u)bIo\@`M,s@)#^V2eWMmM\?Mdn0JpYR42/t=XB+oV_oUa?-B!e]%n9SSo>%$qBZY2@r,IoqFBd,2q`o$tX!)--\@l+l6>G/$?#5E=lHmH/3kg9lR]XJU3W'<?SJe(X>''G]F"%;nA[R'UKP1*Am4?,)Z%#Ae+h(Wc5X+5iM]J_EsF(;!]=\MNQ%m_0n7/a$0PK3^;K=WUjQ$Em6:Htp!,.AR1PQXD"N+-[PU5cC>Z81AugNNJ(hd;1omSmb\)%_2r1SJ?'QU$Lm&nL0b\B@5eI>gJf.DfKfC9J1e9`!u%)bE+Eg6V998T!+J(M.%!Y`nOS&9="rnV;.s1l(+*3o^l`?"1RfPt]')[0%*.^q2Y]cSA^qq^g7]i0DSn9/I[V("Jl5Ak#23F)^VFk;NA$H\p-2G9:%&LO]"LR0^?*WtODCN@Q^kF1]_ZL"fs7$?CiFM+l*O%5-%isTLM<tlY%:3pAW)`S)/%8nSt/Oh>q-J*;(GY*_V8d7.9eYF>?Xp(u?I?[_6Gb^43VJX\'gI>RcauudCA2IBI#LhjDeCd`Od39-e%hK-T^Q"'^'l7$FK'%Qd]@0'h`FqrNpcN/%C$'mRj;j1F9:J:jE4_M6ubLn[\ABc'tp&MVj>QS##d'&"H>G#B1^ODn]!5;d6d2$U,%WZ_Z^#+7[59_q`4dcdaA`R.h7%SCb@n\GZo/ZO,0lm\H$6>%M%C*:,Kg="\\=:f%*#0eN7Z$af%T(1t=i:pFC)1S[#]i0p4&P.!i%mH9#C`he%X\W'-FkURA+qR8EK)>)4-aQ`)D\cekK$sZjJ^$;.iabMTqYeuVC4!*\m6^oA_ek=,t[.LJfj(qB@YGn5Z"7?Q;m?$<Q%#a?^3dGBl>1m"uAKZ"^FF@I"AG40`i?F@0hJjt.'X&Ij0/-X&(F!NHmedG`=NL#M=$X=-VMSr/1.fmKPWs]GaRQ89qFS;OeaWRpT%88pB69/?Y,'C(>c;((&4iVn9Ka\1K(@%oQ?<q:BKicK6r#"12N!'?g4<E5N]>6$[[nVK7[@+/uF#T74V(ffVo=@)NR`u80oHG,dL%YcDVhI1*pA=YT@KB#>R(@g\-R1+t->82an6otkdM&oAm,ET$G`og:ulk>!ifesgFs.?q.7bTn+7M/YQkgBtEcr,KH7N[,hWlN7_F%oqra2U):dq#8:Pg&dG__2n$LtXnMXeiDKY.>+QZ<Y&BL_*6eUU@-l5[h!4+q8e-ZjW%]_B=N7.+a6S7?(A3=$,1.Ig#l@(M4*AlI%lD)$eaXMpfdt*ABn1*&'e%DMK:EghbRlZ<LD+d/+H?5<3,a_`*D5FQf^p3<uQGN(E>]M$5mTaschu$)a<Bl+<E*aD%.1HIa]@._$%LO%REn9S#/UM:(rr"q<Z.7QH&Ytf1_/E')3'6TM1%4FJYB]de;!!DCTDJ!NEJE/?J*p22dD(ED@<O?aS,84D00"%DVNbPA[)F%F:%qA0hIUS6UF?ceX=%LapG$gQq+$F_RFp<uqah)<mt?"odB2tTOQB.B&JQI.d4&2^5S<B(.>_,YD>8$^Q.Np@'`G7&f/]43\1PaVh8%=Yj6+Fp]$h5Y+$oU@qr\o,\..kt&1\cQ2BX!IQjr#1EYC)5_!bHmh:``LJP=7,i!!#oFo5;E[qBG$Q=4pm(E'r=\#BZ0X&n31XCW%mV\a29^:J:+<*j@<T7sJZmX5JgT`RUj>-m:A9_fu$,l^la`O^nD@DnsYlrFg<%$n65-Z2Hll46LgQ?lkNT(Ae%Al%n.I[09'rgj1%rL93CX?kX/bl_/H4_is^kY#\aHm_TEGV^c-@r"F`,k0Bol[m@YoNE?\Lq61S[GAu#7LJQlFH,G@0"HQaN,C@8S+q5jcu'*<6;=J8%kOD1Z`kkSeh^I:TS&JdTD6MY/eD6r9G(Z7Na\69SdY4DKSh8&s7cd@4".:_W]XUhR+&b0]D)f>"Me1r_CDEf;/.SK)-+"IJRs/T7%mb`e06BF-VIk-`%(`:f9c1Yc%70kmhgIMh,DI8\QUTm.*2Rt`09&=?i_-D^)_VN`U'on%4J;;Yg2)\EAd$3@@>T%W5T@t?;B/hDo%L>[X:TQ6^VNW<X[VfWK%1-<#h"2jG#i=2OVNjAb2E[S)W]uPR)9kk0715X.r:bU$B;(PeJ)SG!-<CI:%g#">g.q\Pf)B=bdjUr3T%Z\m&s&#_$W;tBAT$E";C[?9;mEPLWC%ZA4/7N%]GS:Yd;%,\PqhnOdR\-sX50hJLFj:124B/F24,M>aK^7!;b-e7`FmSJ't7lXX"%VXRH^MT/)J(OTaOOLI;<Xlp-Rd1lh\!r.,Kq(7S'YZ1Z_r39^OC9t:\QAMHdP&A\_-j(L;hC_1LZ>m1W#)UN8MA)'P[W7=o2-i`s%;4c2XaK[Xl=HKF;(RA%'"N4,H\*WIoB'dOCl'0u5S[Lo'&lK6'X%&hh3X)qSi(X^d>?E)EAD5c_8>4l[fu](u]9$W&Ki\\6d0[d4%pnFH]dK(l'3l:2J1;ttqYldr1/R*FsfTh-t84P;!FDB_kK-ssY@U$+sbq2\X)i3[`CU)l<m/COL3Khh;#nIjgb!iWD>G2mQc,gHD%77VPBfaFj0W\rA0No4@C)_3K*"Y3h4+`g\Ib^iG-8@sG\%KsTDC7Ru2Lm?IEN[?2RK2^/F0s,#,Xb,RpX;G/EJ0\>\CfM@'1/hY/%LsE_;m9B^aj7#TVe(tBg(uoAD:bt$t*=C-B-D86[VDVFp1[1&4j1>;*d/4YapMM<6Y!VIrfV;QgV%%bo:L(.+/68N0q$&OF$V[n2%8aosAf_sKd.gK<E(DtdM[dj\]DJfQjN\I:seE-hRPc>TTM7JLHfL.jd8ten8@]jh>IX%>#Ye`SkYg=(VnP)R2!*i)hD.M..0X_B$%5PTDPm(/'<<H+3Y>O]mR50&[b4J0d\:5"4>4LcO\ifg"""d80JeatL)J:iVa-iad\aj4_KTP@+n:StOCZf*JIm]UdIM8mYDoOkYc%hf)>=5R.Hri"iii"a!WEXb1>forfW.q0[B;e!HXd[h`3h)%Ql(ZI.7ECoD6sh]Gr;![RJ\4e_(=%l;i'06S*rmD3Y6Is!<lg9XqX%g"K9o.+:35::9f>XSE0s\Ntbd3qB!;^9b4udH.@lBP2uYLS+EILC<o?<J]26/pIS9>PiTTCHW!@=6$IV:A2o]H3Gs!gU;BFWn&,Z%B*a"=]LTdnc4lYS$2?)C[KOk[bdr]n<2a);$<'[TF^YACNSEVL#^oZJIK)&NkXu#dc%i]kFVJHYB@F^/iFaJlAkfTuT6lUd*VXeD%2):rkGh3)-R9p</o_Rc[T`iE4YI9QB:k]L7(*R7p'9a:aUs&S1Q-Dl.Ug:%f:.pU$+GD>@&FD6^0S[rC+RQ@.YPB!YO`o;.(@#Pp%a39[+G;XNPLDC,1gh(tOm>*Qh(.d-'QA-Gm`#L3^5=\+uQ4X3sJ-DXKM^Gq<I\QXs),_Y>2&ithb14,E-3F9!UoQmjrPCD,@b0/B%5&YAg^m]2eFB$SXMfBBXZ)/kcR*m"oF93Th!kB(480Ja_<9NjGeDM4#[(1Q`I>^eN8>m7GA[5mA[+lP,7*;Asl\\7-[:g;NZ2AX;%Hc?,$1sT[$38,'\+g=?RO@g8mM%Z"XSBmWKmB#mnReXn8):EnHQ#ns3H5;jkOLB=U^bncC^2io>4/E,;*%<\Y8484oa%Uh`(Yok_%baIt1MR:C*'r>_]ck:'QaCqm*$>G[e)m<U&BCD6kU;lTWo$9u2[!^0Gf0WEnMTk"(YK)0Xh:\6e^do\_\"YpZ$f/bjJ4N&'/I3dd%PH=DaIqsgPJj#&1;IXlt4_]aP(l9fI=Wq&TP!#0SSQ+!OOUa6#%/G;(]ID:N&Xp0s3o%aa0e-'D@p66t$o'Unfkc5H<1Frr>NAM@%c4IsZ-.3_+<:Yute"X%("2rE(;n"d8@BjOd;gYC^'^;]CVGTbh`^Pr32W3hu[mHN-(>??cc&nS88=llA[s6,YJoOpsWuJ>1lW/AD%C!ZqGfcFUJ3P_",*Gqq%[/f6IOMWl(I:$(?3KGK7](tG'^H'`fg=gp<3jo3S[Mk7Y\-p/%e_=7TFN+@8p)To..Zp,:$0dc.@R.N2%_JeTL;D?jPqK4r<*c#W=(*aA>oT[L?Fis.o9oVgHUqHqA:EsLmKS6_bdqY7Kh*f-f<Z5_PfKQ5XX`6]10ht+\dntqP=)JB$[7s4'%57`iF91Dk4jnI&0Ucme#f7:5GC2aNLLDi,-1Hdk%F/On`=t3L16_m+Q:M8mtkN9XP/HG$CXc^<mI&'c6;oc>i]Sfrc**>.HNh=bi%!O(V6f']\Wg?.X%@pZG<jj/cSB;/+L3a(SQ%/9HKb"lZ/ZO/EL0t!`>/XPPW`+n)=p.0%H_r`Dsi%o^0EJt_dD4S#94ZOaE2GZ7V%60kFI'A66J@qF!X`AU>[eGA=Nc/UXq,<n>,<&7uq,?.R5Q?-lN@B@;Vp+1F=A+R'W1Mlbak1BaIfP4]=C!/;IrH-`1bh5,7=AGk9%.shc'p[2qbVp()YB)T*[[m"ZH0et.4N-4MDh/q6El0(lhLCM;X)fs[IbM'@`XW^_o\ro!9D&DNoP+Slp/RL(uKXXsAiTE3g":!,p%KPZ--)U[%%>]XNffVajjA9q\u60[.h@#kp>oQO#`\&_Cm57$^%WD="!L3m)OVZ^pT@gRPK)Zp[a;^a\N2O[J&2pas@PCd^Xq,Zr[%FfdNR6*,tEHepQPZ[DR0Wi9dX.rbtd3h!d+f@*GBN^^r&7QU.@_=`ipR3iJkcB[<E!l\rgdgR\0kO#(]+-Y&D?7(JM/<FoF0[<h,%5WXDG$u(\?pU)WBUWrXmOhsZ0&h/c\2IrV3Be@cYg1H";n].$="tbJJ=A"3&dF_R),":A'Js=h0AN-=WT/IgG;3JlU-#I#^8F*!)%T-[CrrECBJnK@?#=&j`DhcFE=`<L$`")!T-HN+2F-q]Xj$2P>j/#3j08;/ie1Y,*j8"m7C!,VgchPP\l9(#SMQerAp*?r_c?se#;%`+hql^d3n"fi"pUbhOn@XH61sS##7J:!@^;I<-R3WJ;=@N1htEeV`1"OZ(IfOLHO3"REiMd1,-?CdQZ!^f2*595?4c3.n11hnh'c%&4)ZmV?rof*WpmM_E:5c77MejD[CuLR^'l&$o6M:bJHQO7gu\@\,*-ek=J?=*]%P$<EoM4#jpHa+>O!j+ZS]C9SVBm(PlE4m^-ZP%Z.rd7K>fM^CM<!7(oZPDGB^tWrG!:n>*9$[0USeP_3V$GZ>H%HK>/203>[*)&@&mg',`R0>iM-:l0)2b0!*(CB)SJD3eiA>oah%R%K7bp\Q6Y$]ViIG3pd+kKe]'H-rBn-0Z#'^jk[==EjLO?1R=*SqXdE\O=CH!R.Ug@5`_>0oA7V[d[hm/Ljf64"j5(m',Nm(0mksOu%356O*/QQd-i;@%nHm348>P+d?@Pg6:FF?U,ULm%>^ZXAB3X.&ZlV1/qbh%ZAZ?"ej?n=HKTLQ,M/#=S#gIKs3hK^Ys[iD*-9#2Zl%ZYcD$3$VKWB_1)l]m$TVI=+GO?YiiXg>%L+aF]M^S>'HC]gB:pe0p<jM7?($L:qs%&Ag2pdn73GL,o^k#_,QN%MQ*Bf$.F)V8hne%0m9mFcm&ikf8*f%3)8_*96-%"/r5.lCs8i#Z+@YMUig^T(OV;37IRV5XAL:]81Hg<4I5Ij7iV:N=[BDc@3QJl\s9kL_hih:kk"^`%dLe(;K%e4jM.CV[?UiWch/"h7a6H,B97cbSAm;mi]eGp!_1&+f#dHVF=31hkCjH_BA4uDse1`JJobV7)ULnn_KVJFPADj2f``G@<%JGA6S^3EG%&<#CCQSY[247QL<PcV28$!;Y1*[a@D\TBSuUD&O1)TPYD/p&=?aea&@I\LG'EAW8jbaS(U$U[WgNVTT;/@?pTellh4%^WXVjRNhHhA)r)ZN7q'fd<ji>1bD@Peg=OK?/W<A:F)B<OZe'3<,aI`YoD>U=bdXPH;Nt-FmNF=C#qh!IZE=!<Yg$#.`kdqTT%H3%9t=2EgP8oh%_0ti'mIlH"8\1>X\:eb(/,`9d$L")H<fK`P\NNI;aP6SOH^*Pl\#h%DlG*PnLZ9]Uk5H^,K!VhYtpp`1gXNR8mPL3%PIHus16ORRH,=j"i/8b\VaN*O2N$$-YY&Z#)__Z%'d(H>Hrqi=;IRUdN]/7UZBf)jm?7PNSq>]o]^Nc=//:=-e]%F:9W*5LVFI([%Cmh*iq.6P0=[A72;JY75&"k43fsfb;:_E"f4*1+]Tgg.!=N'8cqMS@N'm8Q7NKPEjR!iJ1<l$<2Q"A/pW&Qe>:fSK46T9h3Os.!V%=I<joHJ='u't;8GaI*/kVkb+c\tRs/?lLp`%4VREs6_!siZKPZ4fJ,4NErS>G0ZgtN+Xg.%?qmh*]-X8e`V@2*0g(=V5?U;DR7_G%muY%H>DCQ!Gor$)%ALht4m%.m>LqOl$b!T0@h(mCdHe>QPHQDo"V?SEf:[>brT.f[\KSX:>lfM^kK7<DHDXp4pW0u%O?*j1E@Ig+%ksX/fhW-pGC7ItNTPNqAf9b9SIL`GePq32\PErn^ESF-t6Lp4!o2XZk<K_q"(acq%(kD>M>5`8->PVco(rJ?NDM'UCn]1:WdJL63%gi;Du_PJ`p$[P-$gn;$#]eet61r6;KLi4(imgp<_`np:Ffa_Ytm,pI_=M"Y>id@epgS(moYd(@j*pq,*,[."BCm47-nSm!XT(3S2%BkU!Y8FBs/"Lb&gTBu7<[N2uF$FQ-;GGTK*B>3Zo4_]W%\3a:tA,<Pl>it\rr(WPY31'9j)\&\o1tWLNes$l^<Y]hp``d0oI4WtE%/=[!UQdZNs[I0rl7?b+l:*/L4%@$7<7>'Vuf\5pH?Dq[5L!FR,R4F%64D\id(n<RiBVtA/Ci$1rY81tY[:jp7I5#CG/XjB@_fk`k%dGW=/^&&M"Rf-?87IB:jRVqA$>[><'o*)L6'C_+:--:7%LZTJ`S5rWjRp4-Xj)[$R[/er?T2WX@.rW(pB*O.?e2!I1fc#&<1CG,-%?7pA8A7_5=)V],UW);]ufs@Pa%pjU*Wm3D3S!oib"f%%$m)?Ba[A)IWJN_ZA[GsBB[`jc+G&4T.<H?3(9d/t7hf@8OJ)t_pgmu/T%r]RJqrk1gL+^dk'lmFLQ\PTaG<bfkSIL=i:,&D"r?Cul+NM+Obq=iFc@ULb]SC3QiIii8i5`P/9k]@Smm5X_+c!!sgER`;%B1(^0%g#nR"T+/KqafW*6_d'-G's2X;>fk_GQ*jhog,(mH/c.a;'6X6h6_\.gWfYf4D]sXSc/,4;m-0,!2X?o9IOEhY)V_RDTpP/S[c*Se%'t4Q'<CpN=4482^ePiCR5-rbH\f7[/Fum<]fdUX'EoD#CSX@t8jV-*HTrMf5cBX\/;oiUBMKH.F9cri-(!P*VB'NB!<9Epp[k2:;%YkuR$GfJcQ[<_oo,DV$J-UY1?E0O.!?&\>[Lrr9bbr4H_Xbg8l(iV]j[AU3l#VAX1WsOS1LD"%)=&i-*lmE>8k)kAc]H"]#\B]jG%U,/"HraKh+P$dW\;:!VBT:gg[Cd64lfq4qTGH1$.%%S86o`UhKmFgM;3r9S4nqkl0StT*F(Xj%>C5-8;BB\\Xd&EoHpND;:rWJe2%Bu-gqd'_T!TMnVomd1FRIS>aaf]3uop3MJ=rWJeSK\`6Fd$Zk\+ku\4?(I[q5=('PIbP=RegH$[Eg;8`r>p4LP<e`r5)VD93CubK%6M=i9^!=Dt*tKo)mW)1uof5,b@*J8snYnjP2f,#OG<L&3FVXU!3TX1?5LGte1E4He3'7U-RAl3BqPH+>9=QNe[JTq@2YZI^^W8Q[%f"\Qba$_d1fq3Y.bZ<NSkD1B2R4B4?3BT'0]2-PB^dcTZ=<<UPmMrBKJ?%$9=N.BbM?c63Xke'P=ROnU1%f+h9<CP4Wo".][M'8p%G&,ohK8DY>gL[5u*d4SnfuE=4l[2p^`ohQShuMG>4D3V$&@#uO6Bk^7[VnjS"fnKTM24SN`T.MGEmuZ,XX`O7A)pb!W^EXA7nhO5%*J5F!D/sd(4^aT#>.-=`U>;eXQT/NuoClHUhU7snElACXC<h.Icfll4jW%VR\'+S-5*I#,qKUon3NrkR?_H>'<0Ae6GnPQ%]oK[<%ZFZfb@_L#-G]iMGSW2'10MV8V4$Hn_b[<IO5P&rDQ-R<I+UmQM"Pp`*VoJ(`aP]5Nc5WggX1gWTfq+V2P-/uS_S1$6p*ta<*&Ajh%MqpILX\Mi7DRkAR#W#Nl*:.-Yaf2RMjXi!SQa:T32Gi?Z&NEjPc&q3k"mlfFm9"/5rDJDj<OCY/Y\3B]op_?SA(J4h',@]?;$-r\%pS9l,;Yd7r`=_AffU`c.a#rL!!KX`jdX>&+(f$nf%cXKM,H'ALVk;nK4;ZWnq^YGN_3H0&Y4j/8<]eV:<&tbp%l5d`H(`=PNjIbc%VC.,jiMu!rW(?m$q.!&dGD/Dd%Mh".5;l>LHH5lL?#,WA8X^Yf%f$ek3_8]V7)1X#2,J-Z`pPN"bfK#-8r%Fi:/WBL2U#Vg6rfS9%Z.tmf4;M!=TCa!=\j>-B)t323XL+JC=[n-`BWj5JYuB1*[I(e9An9'Y^]Vhqgn0N6kSi-]k8ctFK2+3X33obNL/q`dA*&ZnTX55Q%+-*$pbfJ9n3hNn5N(f3M15;q1G`DrObR`kR-/$sKoCfG`nJl;i[+fm[NH4&FAS2m*F7m-Z#*"<Sg2g.^#0mYq;E?/8EJI++co$m5%Y!GYYs(hN&r?uh1m47CI8:WrlP"rQfm&FMBJH1I;-U?<-j96#bJ,hC_qp/OEVp2[*CSeY2q99fR8X7GaD-<#JCK)3UbFlQ=l!l42%@[=[<2PIpWaa&"bh]):L0#k\&+0QIu1L=1=m+R:k:ukA/jm$F5Z7f0qH,rSBP?BfTjCYWX&NB0+\:-Yll^56sjhjg&Ir%mUE4GUS%?$qk-iS$c"cB\tWj8*jege>C"ZMp`D(-HS#go-F!q<#S7mTY01gq<7;qL#MGCO"n2iR1p3eD<(7I(7[Ah&gAl>s@'%WUIoUZ"p]&%8q>#R?B5qg0@i<6Ei2?"A>bKB,@_pA>/`m)>l2j]c^\=&6>3c<,ih?S,HnLgJ&9BN:3)WAkgfk_Iel_jUso#ida$obLrje7*Fb5]%$"+@B2me5*27O%q47P'GlL!8>&_55X,AMlm+)[Td^C6a*-o@>-iOBl.)4"^l2D)f!ZuOm=f7klp4t;b6""$&V?\S[6/(9o3)%r33%[WMDYDMV&gm-m<[ISdlmZ-gUp'>qmiYOjid'"G[`!%*!a-<r1NlLa>ll^r7?82[;7a)mh2,Lr<!Psj=Y,Lr;6B/X%Gg\X@%DGHL[%qKu$UWR'ajOnsH#)6(sFP`bgTrADrc>Zt@&V86r?PCSA/&PIPqYjWKDq$NcVj#=3.bA^-)*(<5c/6cbE<&imiE+[BM'ok9IV8]!+%1SqsroNTV.$9-D9S80V0W-s00WGq_-lukDCe"jj'g;`5loj&e)7MH9f#X;iihWiC0,CJ3:Pq=t4'WiQ;2C:-*@4"AG@eSO.M[WCU%_eaInF\`L-jL]<1gU+tS/n"\;Qn;+YLec\o[@@iH2[Af&O6[U_`XSKa1'Uu<r:AqEdA(oDCX:ko>[5$M]NneBVn'>D#0[k^CR9s6%_geg@Y3pH4kq"Ehh0?Sds1tFuc'^8YBD\,Ks%;k-NdmHC>rXL^:b#9&(E+<fR\YJ)3]etIXh1b!9CgK\9DRa@_`g[1G4,"eSKA*?%7O>[[*1-$cn$ie<s4i*eSFWI)?t[_Kn+K5!o[C<TXN`-XUELF(eDpG3+,+0R$J:W9B+@:)qifiZ7t)0)H[/kN?+/R"pIBV\SNcZ?%0Rl/6fkj'1h61j$?R=BBmJXAR+2r!!?Uj,iG/n4ID>2>8r93[SSL]UC5Iu+,c2,n"9_TLro@(J75cee8r,gTcjO!)Hr]**0p`*=C%rqZ9MM['ofZsRA#aju;?8$B,j.AGZlZ[CE7SRPs7s,=+De0<s3eR40&&A>[&J#CGrGr02cD3&Wtkqe5u7DC2"ko.sFrg9`*rCZS/%WFFVGDJ>]AP2%b[;J.&9jB?lgDG6(aDTSf7kD'p[UZ;3J-mCUm$[7&q>rfHO>l4N&:V$eFFoNf>)JJ$,erceW:$V="9WfJh^.HH`%1q^-Tcu@U&flRli]lV>nCZ1&:6T3c)>e2`rINI0a_n+E%RWg[G?peh5[QCZT8N,DSR?'-GA(/[SF3UR$`YRpaI'`&ah%2?6Cq;Md%o'G%OYt<>\*p^5*.[t=CT7u<5kF#%'/=16VCsQqNFMeg1,WB-aflY,Pl%\&q0N0mc0[Udbbe17GL,Fh]Qap_WNR=!QQq]M53@-o6%>dN[LNSie(;^]he)b0,R-bPYKl%Y<=P@$=]2VeY!brM82DB,.E(lme34L44+*MX%R#Ca[/\m`-k6Y`FBQq]LjQYuSh?*e(jV/)QA%kpGIm:6A70N54ZPjCtsb&rsWZkjp1J/":FD8i(MT:Rt4H0LH=FgY>+OD8j',N$1,"cBq<b4LtV6AZ&XbW<&C$q=V"^)M!%+!>nl!%[#&lpM_1f7B4BNmo$*#L?#(6D]f@@%k?>',Orn:"p$.:n@Z<>^KgqW&R89?8M/#IP3At:QHtcIH[:Q+:Mh8bloiIJq]ppH-.FA,B%hf:W0:TYH)pq&Sl;8)PnM+)#k%pf/t=T&JgW[>\,[IMK*13ZYe6_11"S]p.l.eu:VO%10=@3u`#S%6b6Wa@b8O`#n8_0tD6fKsd<%Qan'"QBO'4V^Z]=k><4*k\bo*-S9BuFsa[*IqhpEDVBHrme5h`:NOhsBVlGJNGT-iip'9]Y"c'4$`3agp]05q\NJ6HQ!(buI*-MS%b1OVG7(SLP7DZ-C=eKZDfO)<n@Lc\5%+pF4K`aVr'5F>';P::>h[/k1"tNBDqCg"4Es)5++5T_Z%"0)Nk]k8u-X(^=F/\4<%0a]4%(Cg',E6@">5P&k]?urs(a-HYbh>sfH90263e=,@L:Dm.nRRaR4>"*U/VUMD#=f]Ur,W6h)DJ\CfO#.X?rQ<:@cM->_*,bu`@WTrd%Ug8g2CKG4Z,V)*Mbt$C-)---JCb!?\A^$NuG@CF>?G@dM15>YYpR*g0\B<$K?FS85r:Op*n<gA1iNI1%l?#a&qsih/),^]_U,"H%%NM2oOM%&E?X,5-G[fj>dYJTYVWi7kN95@hN3Hg!R#)oJ$7bZ`uSFE*h&m9dRG['2Gf[^.se@:tkYtOb8GXOscA_=<*?)tQe1KV)E%R?,7$gmp.jEJ.):nk+2Vj:`!'PW/Ipm&t@e9;T;p(%0*=`ei=f.br!hYJY/2c(%lTZ_&;J\/o-h@b3Rsk=#')@QCuue=9tANZta]%'5LtTN%n'`ANm9+8?AA(cP=iqfpbE0@.\)u^Y#![JPMceFN,;99MAnfI7dHkDoV]uI1VBP;7Ho/^&mM'Q6GnceaLn+CdK&h!%T]R%[gD]tGGe6^#b*,bEI_Qj]%S,p7C.C\^LbPB2_VcU`q!7O,B[N0'D]\IH=Ep3VNssAT+TeX0L_#fk)8'g5/hI`1h51?:$lt+5Q5D%%m]k#s]K:2F8$.h<2nt>2MqXMEm#Tg:j\]iZj1>'GG7.c".ii5Gk&QM+%Mhu+B?tS:H?>pj]`,"qaZ6NNUm%$i,ZYA6;i3%dL=c-J%%JcToI[I">GlI,"6Rd>Kf(W]pmG4\<Ms$^=GPJ@sPhXem>$Si>c=S"K^/_K3>lO^s2pZi;dbLh`dJ7bS_i7@]oA/pcMGOb)fZnmE%TsqV/%bpQp1QT;1.W[PWinW;]e3DNNL:?CgN;0>5IHIK<phj%DhV5c*Z:kaNfG<l<O5@Hj]Gj&gT7hFbVu-(3<,1-VcI/*8^IQmt%*PjQiD=uo)cDW!NqrRa`kN@?5O$[3:^5gM;!sX8#7Xd2KIWKj8\fk[^/UcAup2O("hhNp.]p2k?q9e50TDpnl5K\-+F;j$%dr&e4%K@e-9oZl.(0u^!":7p]coQ?dZq<-5J-hVNk:@GZ;maQm4MlE=u`085khL/U+gEcK<5j@nK(Z&G%mb9eEHl?/bl+uC'2`cmJ6LaL2%@GbcqoUX96`U(Y?&<@tUP0s(if328O)V1^'1YBUO';O@;AQoVM5c1U+o'l"!nBsLE/roq07%Nr$+1;JARlGNQ:<b@@D/@/aag0>q%:W0/%C9T$$&6kW&s$DrNbNQbsrTgn*P,c>]Y#1r%^pe'AS0j3h';(@^K2GhB`9P1an4F@BibE])W*`e(p+a%XRBjF_3\e4R&,,/@%ZB=##*+o0[\`'cH!PH$nl9nnsHHL;M%QDf'Y5O0*Xf;8/R%MsLDOtgNp!%c,Q8&UU%"tn9(u$dBFhZKrWs+>+8OY#=j<o0d6e3gF%(74;0gG@GCn.Om$W>?d4jZ/H_]KOIV4R=ua(8p#VE&TgiDSQkBmt)V><S8F=)1GeV?!*@IN2qR3"J9R+]QKp55(\4Y<faE4HdY<f%=20OT,J%JZqc(@&="g'da6H'H7E.1KpXOa_`f3dF`mZ7\o"I=#Y]Bl*nlp0Ib#HXe9aM_f1qjOI$-$oAI"*JP'C$L.<qhYL-8qi\%c:Ck3q8g#LG*SIV3B<Gh"N2XW>b6maPNqD&Lh$<LV8U`&iR-@fOom-0bEQ.[D0#]4ha9/N`7,OpK%;k\(1>l:^hNbh-`a1)<4?\7%"kY^<E'b;G$!Ddq7qcS=B^74b&KAPO%cGtjRu(9uPGeA8>Kos."kY^<Ybd=Aiq.)8%\U0U`:Z:]e"6[hk#@R`<(47k(?K>tKq#1m%?Y??t2E,DK^8)t-?Rs8XrZlJi7JZ/-]9*itk#IYL5ORP"']g97/Sk>Sq1dD&S=q?<?^(>(DFq6KDU4!ci4cdO4p,RQG=.@klZ^3>%XuY;IPudRIm;Ak)f5Hsgg\,dg`b+&7XCX2uY2@HI6a`r[2t:da\^^9k?e)?T7XCB3IcEd26c@f>FoB<1lq%?-%!DNcpP)`Al`]tD%D-apHnP#2I15EGij/`%$kdLtCrPnSH;?`/jFoB=(LqYX"\pi\?qR+VPS5@gUI)K0;:?!f@B904\V_X!=Wp?Q=8d;?m9pq8):tKWu%IpqsY<%"a42cc!nU=#T#?,,oB.4;+82g`jIXEFIUPp'AgFS5E(>$#cIcH%hbrPgZ#9\@J8Z<^bNnQ#P-A3RHJ')Qm&6A=IF$*qLh%eb'kgeSj*M9N0P]>ei3t@33X>R&7%DYSA6I:M.jDCNhJ6cM(tOlSng991f,NlM<qe&(BF6WQ3UKmpV1<C<F,:6`J;'Nn&SVf5Ed:%ES2?/"*OQ;QM8`BD**NaI`X>bW9Pc,fUS8dW8!S5S<Z!4I)aNlTdf:'NGd@`9mY8>6`KB1Rl9-3Y2@1!kIK+8)dh.aK_>,;[&"EF%G-J.,a\)*rPNobWBD/ocrE6XE<PP5qO&OR$RpM,GUorU"22?*/S\;15B\1V2IODb8BlmXqPNBJQ>M!e@<PM]%n[1<Xa4K@@4W0il%qK59!7@YplBm`pq<d1INW9ZCVWo#K@r%rQp``MgP\r09[f5H%:^BsX>[Ej+:>LcO*$TD!i^Qs>l)=.-Y*6H$d-`>%2noaon&j84Z%Y2=KC&EVP,lM?KA%+Q6Q9Qg:<=IE.])`S_'ZEE*[':Z`&g8XE7NK4>4bH@DIY29eN<F\!HAR3(@]6S%29'hh,eFad<UmT+]>@##C%boscPfRN#-YKnHLMV!+3::eAc,o[8/Gk$Y2];%0:`Wt@uBoC_o0!-_m_g9(>cr]BNQ*q5kb^rubYbDtU`BO2@q:TD;@d`"<H@>>M%T:=.cT.^9>j@@G!g>=qT^79+Jfm0p9]XW&_Q&FfXAD<%*^H["NQsY)YDtW,+L!A-uQ]J>PmbIb]0"ZE/8!.XI2m6fIDr09pDQWk_%SFro,='>"BbJ!9!q-VtEai/<ZHh-SSlBXO3If,En4*U<CHe'u;ZY)N%3KlV@qXI&Kk/"O=fpgmT(YQD^lUTY*o8f6DpQsa>*$='F%5Bm%kqAXYVlhf?sa+#`>IeE%!O3R]HMdH?P1-7^MIsAr'>J.GO\Wg0dV<&6Np)flTp@@I51IoJ)gLp-Kh>ME`T3S<j4oK#3IJ)ju%_fJm#?.sM'+VjM%mJYWqf;mc]IpklK[k[8eII[*uRuO6L?gg-)Fap?f=6GpQHp)-Y<tEGD8I7qh-X!V=Y$S]HIUOY2L`+RqZe>5&%bE)LGg0*_,lfuI&'&Lp:?HKXJ52XY'Sc8WXpfIFl'4m>]jNsg*QT*Kp(?I!j8\B??hi6Z'YJ4F4m.A*<`k4p<G'2p;&#D@o3[+LR%?DGhW;E^.4j3@9>XH!%-b@e!6Hi@JoH2YX[c4VJWre(6]Lda0C0!9,_I>_pRK%2bd@k#Y,Rhqpd=k73YIp]6jXKEXon,9hHp\FEi%X#JUqrbO7F^2jPGcbnAhmoEcNKb_::=bf"i&dAd4pSZWrpq1'Cs2(BI,)#@NF5^KL=MaG+I6gt7kOs2HqM"lo%=bP&c`M($Is-IX%Df9QqhL,%V2R_dkEV8"Gc)n/k2GCQ!V-FK>I?T(_?G>@tE8c3BK=UgO_Bo5;CMWGNYeB_4cl[4e?.nYG5J?map6pK/Qc22Qcel=<%Jj!De?bUZ"2=aLlq:>7cB.<h:1ho:&)n[tCgj5(@D/cPpRHEutr7oDVp3D`M^De?dE,-11=bH`R8+?,q\sF^m3->P3?C,,Jll).o%!T7sP1>BTo52jg(9X_J-oVfsn[rS@X6:PClZ$V6q'#(Y_0$6\.+*?`t`F`E*(\cgir+G>RgBJ[1o:S9QX!nq70pu-Y^%PU"5ka`f%0X?*p.9l:0A9Y=Mf'Q_VY]YBWm)A^'?`L_&Y!9UKoUOK4^A7'l>FrqeHS<*VQEFN[/KVetHWl)Zp0NgPa'P8o+(14S%fq%47:rZ1%6I-#=lbf]7lgui<rfcsOYK`EQD-Z_FTY\A<F6QI"*gghkn.(D_(B>7H/c];HYM=W<$nM;s#_5,U.,Y$tinDQ*VaCSPJ,NW?MjJXS%Bl62fXtS7OnOrZ!%tFSan_kjM,4:$pn??0C2L[=>WdXVgqdt;\Q=Z+3c27P/A&?:R'ctKsSGPlBiBOs3M1K&R?<_eEUOd31NU0GM%'l$>oIWsJ@rjm8]Q%UN`IQ.9EjrApQ]76/[8b`hq@0aME_-4HKXXKmYCZrq&<OF=6^^/ctfm[LjL2e(8Ds+-e!d?OXqsc<,lut`q%WLhr&HN3C/V`oBVPOBP&>m7R12U'-E43KMGr1>)'Bdp#mEE6j[1n=l!FFL?c(ffi/.h`m%MP`e!8%*oiDT&Z2YbgpiNCV["V5#"!%q!k@b^kfq*X%sF\40R8I.=j-RG2Ae)8Ud&I^Ti1X:3'&0QZPEn'S`qIo7*!.`B3.W#<)a97tUsD0EJ.%]Qj/Dg"TAn6_88*4c*Ll%s6f&pI36\P[G.bWYAV-6!X8b8p>dSrdc6gDhgRId[bQ;1[#;8af3cfV?!;WZ$4gValYoA4CR?7+/bjt_-H[hRX2PR6.sQ%9BI@']%q8TTcfuE`t`QjXME==>5i-bo<Gf$t@6M+u%Fa3^k?NMuf/J0TkGa6hop-n;W6a)N.O1mst9[[gYUc,%)I3kpC2ZY;NTD-t$`e/68%"#0%fIt<bJ+t-$$U4*5[eUr5%`e44g"'(spmr`-@4%i/WY8)%"<gKr'H8B"QY5K5&&:MFrIH_gZ4Bh;$?>C/i%j)#h0?/qrT-Z2m%lM.*tjHRTmahW,ZSZiQOp']^;2+omLmkMUMkfYAd%[-TB@Pj_eakVCEU[Pb/Z+c(inD/m,gJ;fR1nJH\bB)A1h+J7l)u7Xomu&D>%[d)qkj&=o8L[%gIn*TNhhOZ70YJ\T<IB=HbD_]AUF.W;WEg6LWs.0'M=A6L#n6,>W_qje'c]?,gcS#U0LYr*pT=aQT)fp0er_2M-%mX@K=pWKc$kI6-<mSQURGVT$ik>XJp02J4kJ,f9uC!+KpT3ck2UZ2$u<SVZOM9HjM'/D:Ure`^gV`]f%o2j-Rcs]h)k-(..(sefk%1k3K7n[E69KBBA)1S(B4QH+BsR@11Q<oshA(J>1*^LGJb>b<ofPW=ACF7c8jNlJ*fq<R]6;:KjY5Q!,IjMeT.^Ymtc8:EYNh=u<]%iE7!6RPCJ.rF/cD_fkhs54T#tcZ4`B9o"I0_k.`G%9QD-GfbY^"`HNHGh&Ju'#Vf&'S0Y0^$WQ+?A7>]Pd`I>C5/LrZi1JZQUquK%CY@*^cf;XMm*488d`6n6[>tP%\G#B7PoF<%oAtrNs'5Dld96rJKi*odgAL3f?FXJ5T+@e3G5V#UAOCkF^FPkTC/!53e0Y(.NQ6MY%p5^:8J,T<<BOS#aZ*SHKN\NUcT>#4cn*`Kss*qe%I,FgB\:=-tiPNIOod<sfmaUsMrndBFq[712C%<F6Z)P;/dN-'7[/POOHhG%m%53ZQI1*j#M34a8%m,*knn*`ENIXUV)]X`:;4KECjrq$H>LDsI,?aBnojKsFQb!fF[^Gg*/Vn)Kfp?BVa5MZ$0[X4k.r&sf7kta-c%DkfJ-KX].<>$T7[T.DVPrWR^9@$gUjp9LMYD)>kF]5Fg^V6)s@?>f5HTQY7e\b5`O]>+%'e?t:nQi=P(na"ZCcI-lWqV/oWc`\(%%0>?cn_1)=K`Tuj!h;UqtoB^,$.$i-C[gI$UgO8Ccb.XRS'&U[I$=`"FQ_P'^&5*t]R^]Y8+i3a=s"_c>l]qfU>EK<QS/A[-nf""P%RkJ*!W4#o9s4[/N)=>'b1-JR^I<cXkoSWW8oD:oM_lE]'Dfm`2@9rolD7*/hTWd/,d!tnsof9\6[gLFP!`7OpE`crJfCU.KQ_2,:%](d#mRmAf7b?,D5?Je3kikFC5HMcu;r:rn4rqLaR3W"V6YLu!9>nE^CG4.L7,ODO>2Yb>t$$'/+HWT[/MXa6YmQK8IZ?R8CV:2gK%i,reo.U?11d:`#L0d^8<HL51/nW,U>\t@;UJ%56FhMo-k(8'fKL;JXZ>H,R+924-a=)Mq`)Gb>i]tkq-7Ia7DEa4n'pVSfa\)+d!%5@8p2kKMPI00_Tf8c.#Uq5a1Jh7&+4#sBl60<sh%Y#\u:4C9H?ju4>uU&"S5_lI.jJbI,C=ENW7nXIU@3`u6=s!meNWEZ2`V"SW1%m),hc_6UiFk/$fRS'O%^rNj%TE;U7MJ@c8[qou5>FE#n<\ME2O838!ejmVVkZkN-<,0kTiUn*V!ra4@e_mphCTI2+6I:n*5JMI<X%ikF,WcJ3e_LO#rAEPr?jFm\\PX7,aB]G;<50E2A)*Y(0Bb4E*RjmDAhhCnX%Hus(a1/+:Mom>(BQS1;07H0_VV\b[XceS"8p<F/X%p,4iD!OMaaQ3l`MRhW5j9&SgeA_N>+^0]L'8M_(ZY#f:3HgKE]O6n!,I!or:.fQ8;mn*=#%r=#q[0'm:)e>HHJt/@fmA-7Ij;>b_%6h^Of1P93$5_l(RH(@h#13K6?N,bcA<0(,K&&!;]p3WRI'Qd4;.!O@RqT$s+pGpF\DJA4()SBsRSWi@q3[ZT\T$]R?M2ir(#b<^@%le;cl0d^nVX<omDIdeVol_@&LkM4DT/_\QS)FMB3>+Mc)(RE[/!,uaX&mO2b[]G-B2O)/*KoMcOoHh+'pH_:gcEVI0U62ah[+^B]%>mWUG8IZ#4ejiO4P4320N%sX2mMPcLXkT?8;okl/l8dK:<d^,12:4;K:?,3lHT>U;`Alc120W*oNO;]cj?<_Fn#GGV=nn2f^Sm=9%UX-]SP1-qrn,?m`>Rl\lZ:_8Q[/#%uH+u9:G>rT$Q`&s&;os$/Z,&<B=1iIAV6a2%ik6S)o+1Q@o8nX3F.+aaD&][N[M]Z*Y!0Vr%JId\55J/5UlE]&O\BU,u2*,2*nf-nu<b\7]e[/(mLK5@KOM-`^h7C3BJ]Y.kL8Vi>3uJj:GU0gN5,![8\%&&Sqn0AedlrO=T.HVH%r:oH*PP3VKDjq!0Nj_e3K+.F1nH0FFXZTaR\$mu^pZhbV<Dj[.-N&?p3YskNkkfXLoB;D3qfJ-i!-tmMqp,e#^qSRYs8;PgpYima%`uVM%s-pk)id\"@_;t8UDCtdjM"X#UQKd'+Za.q>l7BX'\:4AQ`n.o]?b[\23<&B`"b^4;lg<K<Z#F-&T7$sj?<gTeen"7-C&$-a%3h+tl$f?*4L$S5X0E/HPVfVhJrqZZqGl[l2FW5!]\'!YoH*Qk@P=`sUl2SV]J)DFK!qa58jhe]b=)YBu:Is\hVeirI/F>c$ADOP5%`PQ&:ZDq->g+DqXV<__.FD_rV?gJ6Ml?3*T3PWI+AN"u&Qm2"1X=4sC*<&el%_da$Po#IcZEajoe4"6]Z*c;8;EE8Xlua"S]![5f%+/G:)RYot'l7uutX%G]04AUcUn.2C]QOQ5l;rmG0kuLs35b9h9A@?XnJ[b3I>M@)sVt.E'!b]$6(&UWHA[a(=BD>fKCq$@9Im&ck%0Sn(*VG;N<]6R?=-89u;`b(Z34l\U*^N3?<hUYt22SQZ;'>QA)CAuf?/GWRoCR:;8^S-?>Dm7b1K-)uB4)YDG>g9(7.4[k;i9_;n%Anh5UAof+!9jpq&"&jh5=-eSt_t0<!JmbomdPoZArtI/i.c@dg.:DK:>F<Y;7u.RF0-URA^Vo(8Wc_fr$JNYeD[RcUk8&fMYSX`V%KR3b"E0['dY*/d^b5`@%:^OD>mXWunElH2<`fo<#?]RB(/8oE4hZFbhq"sLjpoKVjB&Nqj04>K+4QS(te[3C3k&P9=$14c&Y6%'I%V1as]>stoj('gjqfE#D\VOp5O2La0kVG7_<!n.e+nao1PY$9rr%qo!'>j8EGP]`f-^$6A%;l>6X'=T@sr=l?*ar-p[(NlJbBWrp(%C.#e4>mDguXJoXMPZE"4"q%M(=jt0JCBbgkk*iC$Do0/%l<4d$!4?4<UG-EHJ]=qkY+[dK<g@F%=!0.PPK3jaT!_$N',W:D?O[)g%D;\AK1be<*MWQ\<!@sXo?E=QY%KMjG9F?)R,(cTt&3r5&4E`t,[(Oe)_E,kVUPLFN>/6rn6S*m*!^c%!dV"N@F+0u8\H,i9nQV\Y%=]Y)]#j\2S.r]I`N*_c<BtEd^r6GGm`;^][T232fIlLJeZ[l9/n4qmsK6ps(FW4Bu&aFKWOBP@U7gOX>2Z-8:8duJ?S"Vsn8=A._%aTr"^VQ)+nX"m]"3tlK;n82WV!;<WW,jaPI29m6f>;J1WG6-cR"&!0?TMl*2ZOE[,B"E^YP'9W\\ckEO*6\Xim=:FTaHED'3XGjl%^Vs?X0ir!fq@r?>s6Y.]c^6[_K3YOufHrnWc`jF>;9QJ):kjlU5g[Q+2Hc_I^N1(&^5#s,Z@^c#jdAOe^cQ1>jb)EC%!PFBFGcq.%/Lmb70M7bVPt'/'fQD66G)]rR!_'S3BKt*FfiV3$,#lEpfOS+/Q3bBsbo1>V9K`FMi_U!1M[2/_PV,BC@u(jGYakqP%Lr-[LdWV@%3`VMXY+BXKEtRUa%\RfAmUR-4CL!M43@@EdD&_o+jXq]eW(Z[0Gor-#>/I?I:gI'f7j(WN%(6?Gk=0P8r&T;=(<+Ia3p/,_.MKK&%LBU^WA"+TRA$<QoL.P?TNKV3t#Ulk]Z&T\6@5#]uLnOlAdrAbAN>"t(ai+nX$k5n-;C61C4&d(!KX)AKlQCaLE<6+s6.,Kom_Ea.%D"%E5A<(.s7Ha^pfWu=BT[IAPU8n:j2UPq=V&kFNV@t)@pB[";!7!?jS9.+!Qqf!.*^9`iXst+'.K4Kk`%/&3hPkMlYIWPdjW5NI%l4`p!W*fit+Nqs\W>]DAAMl,UR$YX(,$*3tN1*5L"A8op2YJ)$^%tIgd8n:4.!i2I0Fa(Flj2#r8pc,m_Li2gL=EB-[-dul"%#_q%L9%!tUX[aX<H;RN"J*M$*$c(%HNY6i)BbZ/0[*uFJN\D&T]MM&;jil-Bl"g)"="64]rnobF\_cY7WoV'p+5Y1%<BRi^>nFC<MIUO%N+hc3f?D$UCouD=o_NM9Hurc4m(oDQ#*rUbP/D=H%lNKWK<ekt)OtK;#d0=%YRui'CCl%kcPW28:-SmtLa,>*.$_RgKuj#`4i+qF%W@^]'Lr"\F:`9r=SE5]PKS25hZ:AabS(d/*6>qr`;//M5[l&gL5q@auOUVd\PbH[`7*K27r0EVr3trlG6+%hCns,fd`7e2?71dKd%"LZpU+m<t>N.q<#8kgWTMU_`k7NH0d2a%fJh&B`'9cdaSlj[?b'740N+ob*O?nrZXBE;hKkT<,'[$\Eu]b>p]7966\<MknE+9=m!%\knCt1lalCYutMFR>Bp4("H$L+s_p<4i)/Ji^!p:?nKic`]2@,>ubqZXOtmQCf/Z&2LYcr`n$eOQs.62@_$/SklRV-6%jYj*JILl%Fcb>Z^R7#\`42q;b9KDLXYNa$.ZbMS;J$@U.2i;BWYSKaTmn@u%VC0=a[er)(eEB&:esG4P]]h1)Zo.u3C1U28k.ji('Ia'#uXpg%BSC%.gH2dCoa'S0$Sg"U(=Z<9%q\47+ZSesoR)T,"nefBlMqq:P\#-8\njYinOu5+7NoRY3jV4Z@<Gl,ZD7PVlF*Dr]s8mh6N[>1%XA.H+*];Bf#M7Qe>mb^8g@!QYCMg7MARHHg/p4pBN8+C51oAdjQOI.q=gCaH<r4Joq\ZW%/I_;a#odX(MjW<R)Y*6^LnQ,.)PQ7`%'16m`p/$"__X&qokD'"%,V&GBT]C5LM)9sC[gQrX\KV$W2m/ehGUWDp'Z=g-I],WscnUbd.9fW:02o$(QB>kl%3hN<HeJhrSsP7a%I0=kdO:$lV6!ksf%lD-aD@b+</?]GpK`IV5b,K4^G["1R!":W@7S_/M&/8.L-,\93V$@HK<@I)4e"FgB>"\ip[5T^?I"7>eXV*>n%C_>i!X^4AIf[Q@15k+Y+;:JNP9A&m9\q0VTVitL2@qrHorH`PGC5QlF<U%Rh'N[W??CBZ3'f0b9#:Es"HT.K:*%K%Gm(f_7!)[#"%S;(>*eCGs&+4Zt@D<@a:&BKn1bn_i:NS&2PTs4[4DS;iG6Qg\2kY4T1bBPCW%BS&H_H^-JYIVfS&'k&$^%.j/Z?#\#$:EX7-+Lrc%\L6ZBab\uKK%fIX\>&\q]i?55Ef&o\,,2W'1Q`<OSkAf8QlRk:S:8W=q$/FG"eOj)KVT=J-3:I3i#lJOHYAlQq_F(f;iP9hXmg#\%.")Wf?dX])_C[)7nf<17Tor-#K*8J?.`;%qb?4R0Ru@'ac>j-e<1opqW0]i).Jg9#Nc]7*OfLPnj2fob8l^&l@.faQ=,fFOZeQs*%rr`p*1bca8Y<c98FTu&plP#*^NMT>50o$?-9,CD(%MFS0!!".UMJ+#3kXW(<8aT>5.iN8'41(>p'-W-8Lq"Qm8T4u$+"')X79)uJ%L!Ag=-B,N4<>/g?\-IOZj"2U/H4","iB`'WBaoU913KAo5a>DC4kT%!@)po)fq\iY<OGil!<BP%"lKa<^[]c@7?Gm1^f:om:b_&q%UdqYn+=.8I'MTFkP%s<-4]Lng)!:lf09V''2uomLm0(O-,UZooW^-sSoIpAXX%^hLBShr;6=(oHL_hL*^4ce!.W@m&3gjhq<M?1m%K&+VLe*+J?"lc:T%tO6/N$hJ:5X#9Wp/#:QL56EA<-YVc]4>'P=,[-2=lN-X"9q7[!0gKT.m>Aso>*eO%fnut>aNs/]MMX@i'WUd%<Q"][JDptK+p1bQ:NeQrG+6paKI'.OTn5o1!Wc,12/DO'K"M;\a@V(8fLUVu=%(@rS]//ag5Zs)VG8/?'!Tu-\3lK]4bN(<MUd`F%_;T)0&$a;TE="nJ6[XDTjU@VX70t1MW<2"N:%?C.lsXtgfAn#&O?^D)Eqfn3:ddq#a-_4pQD!RZ%Lf8VVhtY("Iq^!).7AY>R\oo%%TA:C!P?[O6=:0D2d/U!AhF'k0lRdE1jg=B/?GdXfE^XBfZ`-s1/nOQCR&tRAh?%s"$8WL7m+_-a(JfIf3ZCJ`JOZn>?63m4N+!Y%3J]4O(-+D=UG#]QLM7lPUj!"KSV;3=qi-?o<%60?2b+HENPB=-nY`pChHpmVi)`/`o<:iK&XE,2q3_k4Gd0[+_\ee<oB`6YhE;h[%fTLOScRKcs3$osJnqr/#J_X2o2E)oD#+4Zk^>X1CU_BCEK?ZVK`]H6TndtGp_QX]2ngSi0MAhO`d+SOjEUPUt!!,2\6@KXQ#6m%>%j9hi29B!-"#V:'YDX8[2/YH65(4K-a;>;gHjB2q/"/O(T>+OGp"E842*dWA"A(/rm)%bN_`A\o>9AjXid.FJVB"L;f<4:r.^^tUf%[YC(r'+V,0B<QOB_75)WB&a++'a44S7U#l#bhs@"!-JS]1Nl1e&m&5eeERo.oIG1kbuOi>L`6@n>$bA@6+a,.4W8E)"%4C^n\etu%Ds7N,-6@3fr"Hg;)2KdNYK#u9^U=>.m;83tAM"?Jme>'`i'n.h[#@OO,IG'Q"?pNleA<-o@pkc7mai<]9Eef7[@F*BN-Y\h#]f/Z%L'^+T$IkU)2shN1fXug]@Q[V`cS@F.;"VLic8>KUbA1f"3o`&)E?3M$!AY-j:`?#>6+SpG*l#"bET@DB[9(ti(b6g\&M@0BRK5ZL%Cm]p=04A%q>#'Xde3t1Hn?)aC0)YG@hs3Z9AreNX8-/qj%L=s8$el4L`IJGL9=@.l.%[,XJ=>4,\6F]#_!'*#?@<!W5nT1h&ZYtt%AJ>sp+j_c40`*?*XQqj&#3M=\NlWrEg%^+c"i4^q%2r7V1'.LK9#mOmmlaY,9hDXGOYC;:/e#8d*I=CjMnru<Ua8ANH7pfg`rU<[%FotY3P40\*RTdTR?bu_l^L:0#Uc&_UJI%t=b@oHUaI7k)JD+iGTU?<U7L.6\fHVs[?*s^u+]MQI3;tcD<'adr$"m8/!;(9*_[mk(%Td-qB+HSWDpCL^=?D?E?&?rZR#_9Co?\Vg,FNT3a!Nb*(R>\pH2&5F0SXtK^`4i"7Qt72O?+so><tJ1.$?E<R.'.i!"a-e6Wdj*H%4@H)7D?K]%Ktq4g\I,?[@iCbi(h+5++hu\7a\/BMYpe=nV:JTu:'3VuUEd*)j<C1/(0#a06P5BCMh3h!^^@c2!XuJ'FLZuoI.K/D%KOH]HItV*3".f/7]=-_0Vs*+EkBC4+=_/i-6`@rmTE*M%gd\/#ZmG\e&\?TA&04aP),s08enLSI!]"FZL_-C;W\O(D.J0:`L8RUj%#%V3r/2IH64T]"F)9)AcLm5Y\KM\%9/meUqH0ojF;>^g/VBkKC"5F38p618X$Hb*?+@->mn:2&TpY]"9"W2cka:nW=0iGNil5>OZ%11ct?29)1t%$ZeE,D=,BoFM'PXV.9DGU^O)1-C`Af`rONgElrk,<6D\&-d:&ljH@%8gYe2+g3Wg+g_^3Oibt4h+/*sX'qn8*dRRh%*uPa16X?uV2*QZX\`HS]rY0kR!:4h0ib./"Jn0IbE-7FC1UqqoHgqY;1ZL9B_bQ^=!qid5%@QN'WmPLZGj?]?/-%X5=XVc3l.S9(%JJc;O!$p>Z<dUnOBiq,tYUCa#L[>,ueZ!0gZ"Pm!PmO"304b=+CCKhcLk(5fHC>?]icU&Rgia:05rr"p=rGuB0s&<ib'S[:..e3!%H4u%D\?&QF!.W(*VhY;jF:+-2?N*o5!3=^"GUs8Ap`8IWL]$kr9;&p!%1;?3Nd%B&g9D4'm/`qKp/cd#:/gqe:9W43X3;;e"W0/E%,?4.]%^F%hAJ(7;o"D3-RepN0iqd?HodY6?!m/=uMna?(S-P_VkC*c3"m%30_=!p,\25,rQIe#5W.tYHWo?=[ke%*\k-Q99!/92Y%C#5N*Sga\9!F`:g^l#-+J4JI,N<b7@@Rs^;5lE7.9H\lYEC:/$C/$&#1$gj-:Aq%\L:p?88hgK+6>ikq<e`Y_3)#Fd\hHDo"=feG%:I2/'=Pb#b.n]qWMo&:R$5#`P1*a40<0ufS6`?tWVF)C9O5Os>D,CgC9c3sUdo<--q.C')Z$Las"!haW3Y@8*.bUki6=l@[e^9To%RHKog#%T/N#j#)i17\DbgiX_j@idieJ8Shd(EW.R7mjZ=3,DKO;-SQMBm>5_hpapT9G&Fc+H"nJ<lri&TX]+R8>]%5.ZU\r80F@U%NHZLlff$(_BP5J\M\OVT'fA%^D-Wg7+]c-OWG75KMP_%iWIQ*B,DM\fX.57aXH3]-5YS:*"W]<ZPDBR'QR*/.HjWX`A@9kR6#j?A%'[eCFp*fVmV_DX<j]ks;;`Qkr%CRN8;FI7p!Yi*aKuq%r+0=a"ZN^;g@`HO8dki%GV"b6-.#j,O#geF&E&7J'bRBRiZDS6fER8.4%!UFmh;1hJ]?#)o=3WRkCnX0`.n5<,'*2?<!0X#SZ6tShXG_*][F<DR7KI>q@:H/AeS?7sBeW?t-nI*7SD,EbtK\qn**f><KL0-Wq%;_:TQMn>2,Pc7lq/eY^I#Nf&QOVaUl!kd;cr"?%HGUdm!W3mJ0T39`\ajb3C8KdU)%<+cS9&UXM`:Ad<=Q9Zd@U7TgOD.mE#7TuN%Zqecf74O*mc5HR0>2s1b49a`ePWTDrMGf6]hRu\&U/%dD0*tJ-3kZs<V$tDpikZ@D#f1Y>0f\4r:sQr]'DGqR]E=:JNiXb*GE;l`%S9GLL$PC:,XNR\o$552.8!S+S%*"s]N"_O#@2-H90g^c;oc^KBrU1Wi<G;D3DJ^&ho`Pk:4Mb-T80DA)+dqoN;[\P,g7a?$/'tIA%4Gq2^d.!:7:iRsu<63Ckf$@HYP4q_j#Xkkj_Lbuh@I.'k33-4#BCu!N=3;mLgKHg-kp_64Tf$VsjB>MRnB*&E3#<;VhF0g>="8.J%i+*8D]?!621/SNNKo(QsRE@6.i]pJ6nifO3U/&'-IO<9TEAK'iG"H3'=%jMi$qm+M(e@49LjGDci(B@&8fWG^T/3:s`GI('NdJEo%%&R,dg*d&VnX("BD.,1[[1?^D[&q8anQS,%"^In5Gk*/:LJ5]M8!TuMRo>!i<ZNp0<?%0IVU0b776q;J#pE&dd7cjT\Zu!""5T/N%2WdU3'O*[82lQqTh1USoGZ376@M@`b74lbQb0*OKrNY'e:ojuQ'dB,I_EceVONl']b3OXH@;N(_.K#s<bVuq#nbCELZ1=-C\8Uhc%;M`O-IZH4kMaYcFeVU"5q;+>qBoUQoDcp`e&htaq;C-<r7A15]&M[GJ&Z"p``[SA?"l$YhLfU<<Jf,H2BJ3c#2E@>'-&I_'@fMT?%M+C[(/!l^(!APo9<ed/16+lGPg0lai#,l5M)QKZ3^k,:K@#iiW_m0!QW^MNhl(V=;naN%h([Xi30`ED,KG=AMBpGgBUaR*-H-58Y%fTL6B+C\V+/9]ER'(o[me\2fXbQANl;6*23Ie?)[fU)t77])n41IAJmR$jtVES^gL)O_!H9+qn4-h^Rc:$8NU#_uEcNYfr7C9)>L%^PVJ4,.kqS9TX5&6GS2pR:%jUM0c0!BnL2b="L6.gZ8!b@Ortt+g+Y#E-/0Vd1Ldpcl$SoP6&SVV]qIP>J]Ca-W1J,.^VKu1Cd8]%%i'g6haf.>ni=E;683-)J\jb64n71>IP(b_"!_-X7eQ"B@rdr)QWm:*YLb+1Q\*5..4q]#=p`3W<anHtQ,Ks8&pk<Iktt5bW+Ik'%HB6#/J2lc@YtIsS`b'NiQCeLi5tZ:N.)^URCBtT*2H*_:"2NLHKf'R+L_ubUHAjZ[klB7$#e6BN:IG*_"m!#o"<^;D]J6+g<JidY%hVk;$J[&26F6+EA,KB8m+os/IBtP!T!OLS(5hla.fRtY86;+*?n;pP#!p$a3]HG.Wg,:J"_5l+Z!k+`FVRdpYc6%GVS%-G(<`9N"%e:Rh">Dc8qicLAI#HtXW<]O=q0s2*cS*,3Uh]=!X[RUeK=9RVl]L!"cp)%#67QOp671quiSWJK$VXIrRY$@uhQZWH)r1,?\qG?9)%cVI/jU5;S^+f+s6Q->Z?(*#8%2g<W-Tn#%#L[a(T6(E)scB*QR:sVFbR@IXFHYqaTl!IX?PY0/YF%UY2'j"jk>a*AD^g*GS/jO5!%<X*8\&Vs@2@)-<j@14UIE"sWhj_=P,+[g"s]`4rsK[g:TEUg.Dj%g!t2@X;9P^$Z)YpEPGVN$D61KJ(.1?QcC1N*AIZuET;oi-u+%$D^R<if7I]l=__O'AJ&En<DWBZ)p1/crO-E)2`\3.<#KD\XL2"WIQ[`28V'g&Q<]r@X_F=W-NCD%BbRVXHXU[Ss2p:/?7@n,&WY9%-IWHTRPGpO'?"'M.UX#&&*\^9Q<9DT6V'ZAq]:k0;KRH0\:[fDOuEj8\TqFjKN,UQX:0L$7gU#eAnBbeb_]gIo`7D%>b#OTd).l^%H&j$*q+0g'H)RF]/.b.EZjIo8WG`,B8:u-r_5)7caj(.KKPif/^+h'(d!JnQ.75Sq7OPoQE<N"F[mFb)Qkj2Se;K\9iJMQ':m7PZ%ifG.c)64f<4_]A?*,>8%4((4gkTU-?+i%gdB]X2;'gah(?:SGL+/C8$><[VJ(Yc1uK'_`f$J$HGdPYq$9q--58L1GNC')is9U^9h%@bdYJh040q>ChR4c;Rm&`)&8)/fTX/MF5heUFJKC9g$#pldB:cl_-&AX9.pr+8ZhPm5Qq%D9(:#b%D&7g.]rV!ca3EZRoR"(.M!o%'8VDr&+GH:kYR`[]*D,,J:eWD55^V/BkK#q'L[Z4QC(j;S6Hq:847]M$H#ZX+'mn9Bb<Yu)".gLpAu-/Ih@=HKiA5OmWD@7BL3Z&%fn1k6AYYmg]g7<,`^?Bs;8aOGTsPG5^hsGD3:qt;9JoG(9Us$5'326&@MG\-eEPIVinP(n18=s/W)Zht,gT";'k#"3k[218)"43Y%:SI<OJj1!:JgCT%Pe_A?9Yh#IjL`[Z66e64r0h"KG!1QTG\\L0qhT'oOlBW&Q;hO0I*-XZGQpKarTV1jT!/.3+n/2NbhVhR3O_s`%nL3Yj"iTEJK-"B)Cn+B@+b*H'-4_^QdXMIe'eM<kLC5Sj#dMU0=jDJ*$R3UcBJ_L3/DfM8iL^`S'JZH+7*HT)J?\&tM?+frUi[JY%o6jVBB%m5<,Xat42TqHf7%"oH,r7D*@]beD'Vjm`:!c4jdK3=7M'6:'R$2huPmMGa"IU.3&6X[6k$&RKBG$4mhImK77kBN7b4V_1%SuVBK"n<lELDVHg";rL&g5_'!T+(mDL1aC5c>)H`_W6Ls&^lns@4UHL$&J.574`bU,3GFbJU6[*g#k%Z>)k82;,929hc5mB&tLik%Mf,GC`R]D$Z%r:*#_".Vp1LLRFf7%`G63G84:76*Ft-$ULUN/jchMIsi-1'7l;GElh^MsLmtAWmYES'Ulr'(6fZ_!!T(6.nI](i/%k][qQ6L['6@P/+f*$ZYSC1pT*,1[tikM=#t2`c',Z[7UIrr<nMd;Q4`+\M"f,nL74/'<V0]_]>bHb,c"oa#?S*"-[o@L8S?qpWCb%n[Aj=N*:P#0hf[)8J\<&*Y7at-<\kq@_Pl+.t@/MP,!QT?5_iQ7c?9u<=?R:'NL75Kc:G7-\%!a$qI,7os#$D,LI:s8f8r=C7VFU%i?)OI:i*X.6?%1$8T]3qI!@U`0?]NF1<"]PUMOcl+J&$t=U>X@R#_e[OG&E7@O,3@O5DG"SP]WF,BYBR<I>,f5.\WfkX:e;:s)qK%7!oX`%P\M>KW^Nh87$Z3AUMg'Eo\(/astg#823XHM&'0[%i8"a$EPE1'_`3PIBf1`A=P\o,i"-`)bc*e1+f"@X.jR9:l[I19E6lu%$bcR.^^#li8=:D/o5bcBdThQb%kNbaR,^/]i:/dB6LZsXalJG=`Puf5(=(*b_T*l6j2VhWgV"2_#]cY78HD";*"gn8<"(cFX3B"i%n9UKp_I?3`PI0sP#nf]kfYntVCFaTG.]H9T;Grot?Pn].-S?eU`qM*$@X/*Ng^':)?\k'[@)2C8=)+#,7W2)"&>Y$S-g92D;ra_@%U5Emi""#O;4CSS(#a!J-,Ne[I3q%u-2]1%OVbRlCMC&e;6VQ!Xod48(8'V6&EQ2K\0@^o?N^u903F`_e?:t"ul84rV8?u4.(g%H-%/&^bMRXmYQ!AIt\'EXM(T`a"g#Ye0o\ebd^XgRFoK+V#VF;Y^N&W-#c!E8;G@\0EVmWD7$@lf`dI5dO_jJ1nB%kt]eK$1AIOuK'h%E[,b[P8[,Q2sJ=^f058A5?6_i=';L:_LS:MOMc[+7HGb'hP@0j`/ECXD,;e&=SK,.qC.dT,%jJOBJ:aS>;C6C&M]6dUto6Blu>G%%<0Au]B-DNi-e2;fa<!(cdT($'lOi8=-o/Gl$)WtII;/#sLuj=.+Gmrs80O#16R7k(A_VB98:r%GI:@C'O*+cel"]J:U.,>6.*n%#%6,B]C8`KBgi,,n?4-AcNN<hp`/jSuY?A*]d*tbXh-UXD;;7X[neleiA68?j.;lEO3^*6J(I67W1pHh'abL#N@WI0JSj[GH5L3Y,B%*!2GTSU6'J69le5h.2RVK,]bmA!_-]1E<Zi:QN"J"9M'<K/:0]M@dA9a!498/sK,&MMS/E&`J2SYZWO<2+02%"1Xh*LY4V"L$(o5%%E.hC8pA$>'L2P*k#5`&s4.1l9r91mEoA3t"J](%U0Tj]=!C+geEV]PqH#<51P:D`'(p$bH)[=JOH;^qPUF+u/B>#iEMqPM0Jo+Z%qLk+r:J&52Lg=PCV$IG.'O_f&`:/s*l.-/Q)p<0JPt7V=3<_.87n5RG^M*NS(#3TCG]_r7kVLI@nH_r!R$-&<NM0Mb&JDW@?`S"F%-\)0%5tR8M]W9S("r@qb@l7i/Qp:i9+I,3qOjm!kO9u8>6%XrmKif\iDmHb@XFDbC.3MZHf-)RjG?r1c0Q,cJdF;&b0XVNe9Wa+r%;[]S:XAkKc:/TYa`[\D4Fb`k-U917GDegdmCb8'Gg8S1E,Thsl0t+=@oM>,o3bb$,)I&$E<NXDWasm>$<%5;0<2SqJHq:VjNsi#P%VkQq=8jn8eZ)'-mCaBW1>=@7;L_T)VWgU]UU(141!CUFUR#iTS.TQ`'+fFi&7]?kX?1V=>5S40E@k0lC),lpH@uO9gPu^#W7f4=0%#!*T*C>K)/$i?/=>Dmfufco-R&W*qsJr-V+0X8$IG$uY]J?1/8!<noB>:ZU^L,+#]D`RDJTU;/[8IQ!8emK$+2JfVeN_-]gPZlpr%kTu"H]?1jQ*Ck5VLATk*DKmQJ=qMB//'$#<>\>`6,2'B?cH7kd4=_BL'HX<5[Rt]Y,')Y(\$I7mm4<sJY(d5<Ni2^XXXeN\*7FD%%?#$Oh<AMZIbG@*h?qUJ6?T]+kX99bHLkp+KOdJeH$.7%mVV:[hPWGVd<Y]BOEJ94>PqZ&$/7^m#XqfMP%RjY^HHfX(W_K[5ORm%T%l_e-F2b&WrK`jan@X;krbk"d@K.+2&:Li)onY31d;-OZ.mY7o>NZ/Pd88^0tFrHKf!2-Q8!2)#cgILP&gS#(63HQ!LXWPDV[bN8t%&IHa'Ka%L+`'WKIn^,#O/d0"GfC*9>&pC9/EW>3HGFlq9>rnuYhE&b5U>))L_&su`5ZunB$Agp'=E+:1be*n3Gj,l[dIpCB$5Q6/%G6$49;nad=rNA6uh#E"##dQ1g,p^PNjbJMScMR*eA1`'?Ol)Ep1o9nB3-&$aVjt7k1W_IM8B<WD=H'*#nS6oCO(n>ORKZD1JH0f-%N_%F8"GO3]!>8#(0HWoT5d[I)D(eUm"/6Wi%?4gF@Nj2C_'lYoO[;qV8?pA&$<r@&O[OhlC'->FEM<JBAZi>d$/o)^1a5D^,T7dN%WP@_lU@_5iU-XB%U4L0\%r8niYn'K'?P*SF`@QEpih^S36D?bt;5/W9/e^RZ+iF_g[]4'%Z']3t0KIu[KO$c*?%Aen\4D8d%Hs:a%;5s!3<_Oi@Dq=nE7M6.C6kTqC((q&hN(n\qm^.%PE-7>b01mi@W_uO^,3.FN<JkLB8W%6#I#9B:_B=Fc/Q3#/Paff@OpC=42.`JR%6B,0e'5l)$\=ul(TmP9gkOc`8KN)uD)3LfAqqnI<\n_1C*L_h))[R]+V?nTM>sl!R&jk\?JdmT3.%A/aKfs=Dcca18H:/)^6brgV%E[lr4i$X:-755W1;GK!,5YNq5=@b2I(aka2k](1HYcD4@MCRG.0m(%T2[AGuQ/koJ7g:(]A84Y59Hth'SOg;RUDTG1K2XMk]/VrI%?H#\[C.o76Oel"e/*s7?5@NG$%,[p#T*b*m&kj%7qP,_N-;,77$qh4,F,],'o\FVEKE[]"XiS.gq"@cH.r#j2afMH=]lN'\`toDB%OLU+bO>qrn('dN"ieY1rMJ-[TSed;&LZ,5Z)'9G,],W'TEXHcOn.+;-9<eXf6sP=77%D+\6sP>KQN4"O0#k1o'+-bSjkr%Kr2!WV%R7pm&LB%^epeoM\Q.=hlaFLkQ'.IlL::>+IOadQMF1FSp,2s:L,2s:P,2sg/,N=N(Y%'TD<)KC@2`!YZ]+VQVd,,\nVP^D\OF_<V%;L#/]hr><q:[ojtmfc*'iY%1piY:H"CR@4J,&V@"d@OC=RlA!>NcElDR<nT]*'DEP2-Su?PY/2\5dWu_VTe[gd1+q(@MrEQ3;03(%?ll49=a'J'RsA.U+Zl-:-1S/-`['1bi_U)O1=7?/:%U3]$4TSYnCU+?16Im;q+*:fmq.Qo>`.Dqif+=>$%QKBa2f,bGo-k-IbljC%ZBjI6.5i?@:Jk&M%i=F#.I*!P\UH=g-W!kM[6_,,KaHqE+QaqiOA=D@,V#!K1Y@WN.QIj4l/GU/=%Tr"YC\5LRcjcN-@3Tm:U0n?%WV*ZM=\Nnk(0mY7cY\SmXcGAdK[j5&4lKEK>_GmB+:_nseD-(OpHdJ;r!C3OA3oa,5!2;^:c?4+MhQU0o8X?b4()$7.3;sg5m9eT%n:63!hKT2Yn>hBXZsePrltX\1ZBc-#nO5Qgo7=>,('.8'gLJA0V(oDWOEdl@WC%&Xl%]`0i7quK;9D:*l5'P8!c`p=,=qFP]:^\^%`Ce!8aTVi=;sI;/*&!YKlgN6N17<.Y.1@\3L^kj543h\/eBIWBT4CBTi\D&AB/%ZtMXUMqXs`N\PUYfVf#Ag@p>,p?\Xju\>u)((%*htt`G1X2h1SopEe+$?R4.@TmXGB8?9uNdp.:BFRSpKa359GIiN02(3=1pZER!1`&['jc05,1.R2BIbm;.]SA-`)]Po-klg9+d*-%Vgns6',&VjK!X`><(jH\[aG]^NWds4lrnKo%BptRf+&Oq5.<X^H0*I++)=kY*>!m[geoLU2?Imk#:p!b,S4lY8@pEQ=@I%Wg>#"f%e`Q!$XuN<8/@Yh(#eih@%_da\>(.(TOqNTfqI7$%B$gs-<F7csZ4Mpi2sNddG>aYTcJa;P'c=3c![AK3NMdiLQ>_CZJIVcBF@:@[%TrI"[&Y]u%3*daE=(&gQlTOpn_gXe&($KVfApLZ`,N`&Mh$U>$=6rjfJ66#!CXaSp/"FWP(D.rk!Z'Bp^r#rc$6"o<j\'_E/jO5`%Bp5HB8&>Ul?&L4PJ-B?b@[M-%XYIP2!&5Sl.S_i0XEAR.&LEsrH[Jo"[tupC]*6kU)Pc>^T#Tu/:hVT'Ya0<$5&FkV<Ho6X&>Y#2%$c_G/nAZQ,W](BKbipn]OsAHanbuE@Jqi1+a]u$Ji[`2#?t,f@i$,"So6UM5qctEm4D2SFmYF]a(qe@VF)c65EaD3nCCFn`(j92@%q[o"mOTiQ?<*Gb6(!$))o)_CJ55$hq\BmiC2otTepJdjl)o,Il4i2W@LnOO)@=+7&T\Z9&MA6qT9jn2QHR]H"(LCX,#aGROPHr=W%O"!FRMN?_qU4Sbi<7@:M=Z1dK%Q?\,lB;lO9i7aC,b_*&\B+i-_i2&S&G<p13>/mT&E,^M1;7.H8b$sQ'*5$Kaa5DQ?6M(Xjng*o%WSZ*+_';K6c?1,*Rat?<`9!*;bRk(?^??i``CSO1">M+7,?AbOb!Cn^fHVP/DWbG@qg](\U(`0U-1?cgFI5=8U*#!8dGDp:?(?G0%gJ)*5(js78YcdYaKg!:h+a<ZZKS<TMhG5(&R=WJsPaU7S(l$$E9Zth+n9E+rR6P\"#dQt6.JQNfn<EC6'CAqFQr`1s+Bq[2dOOE&%4.-e<.Fqll<3F[UBG65D,4%,<o\^lC=j.T*M6P6=[43F->D35h)_bNmFi/UKUh1&^\Ko%X&E\m-1HZD`@b<i5FH4)E21u9EUT(5W%R#MkEY_PgX8/-V`X-N+tG9j/&ZqM&[aTI1$M_lZ[GZU*Y&-U_qP*LXq_aCiH*E'2S&>>"H#\b9"\rp8`YkA=iMhoI5#Ti-eZ'e(s%'X@5#@#j]+m%p*9OWdH>_*#QL/SkMpHK#NSHKJaA`i$>C)Q?/1X7rR\,[jj$IBM8Xka;1e.c[fs,5>L)YFkD^eX6pMJScI]JV[85%M46dNLo?[#F%Ju<O6AN:#S#A@bC)2q3<1d&`(7il\iE-&C'lgaKW"gT2j/21@S-%8#\N,`V=1\()A.Bb*3h=TkF&/$JD1Ilg;dg+%2acj=)sW7/;V"8d]dVI]I./`Sni%F`[8^UMl*"Ftjs"1@'*4t0jh?lka6[5l!S=n2nKnYh(r`f"4p+\"IAm2jV5]r[do]PCacdDC%>-'(&>8JKkbr'WtGePOBND>)P#S%+A.0[30Bbm"9(1',loJSd(fC.@92ig/q55]X)G^[93[.Nk*kP_=!+2/f_+*TpKqX?`H$QkCh%Y^l'=&,=>bkMuMJ^V:lZ0Dt\;rI5E1=8_)O9/dr/GQ'fE2rZ7~>%AI9_PrivateDataEnd