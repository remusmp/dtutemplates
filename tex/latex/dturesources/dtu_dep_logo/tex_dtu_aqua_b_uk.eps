%!PS-Adobe-3.1 EPSF-3.0%ADO_DSC_Encoding: MacOS Roman%%Title: DTU Aqua B UK.eps%%Creator: Adobe Illustrator(R) 12%%AI8_CreatorVersion: 12.0.1%AI9_PrintingDataBegin%%For: PeopleGroup%%CreationDate: 27/02/08%%BoundingBox: 0 0 220 26%%HiResBoundingBox: 0 0 219.8121 25.1241%%CropBox: 0 0 219.8121 25.1241%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0%%+ procset Adobe_CoolType_Utility_T42 1.0 0%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%+ procset Adobe_CoolType_Core 2.23 0%%+ procset Adobe_AGM_Core 2.0 0%%+ procset Adobe_AGM_Utils 1.0 0%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Magenta Yellow Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x205 R agm 4.3861 ct 5.530%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 16 8%%BeginData: 3538 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45936FCFFD05FF5227277D7D2727527D7DFF527DFFFFFFA8F8A8FD65%FF6893A8FD05FF27FF7D27FF7D52FF527DFF5253FFFFFF525252FF7D5252%A87DFF7D7DA85252A8FD58FF9369CFFD05FF52FFFF27FF7D7DFF7D7DFF52%7DFFFFFF277D52FF27A8527D52A87D52FFA85252FD58FF686FA8FD05FF27%FFA827FF7D52FF527DFF527DFFFFA8F852F8A827FF527E52FF7D7D7D5227%52FD58FF9369CFFD05FF28525259FF7D7DFFA8277D27FFFFFF527DFF7D52%535252A87D5252527D275227FD58FF686FA8FD05FF7D7D7DFFFFA8A8FFFF%A852A8FFFFFFA8A8FFA8A8A87D27A8FF7D7D7DA87D7D7DA8FD57FF936FCA%FD1BFF7DA8FD60FF6893A8FD05FFA8FD0BFFA8FD0BFFA8FFFFFFA8FD0BFF%A8FD13FFA8FD15FFA8FD07FFA8FD1DFF936FCFFD05FF7DA8FF7DFD05FFA8%FFA8FD0CFFA8FFFFA8A8FD08FFA8FFA8FD14FFA8A8FFFFFF7DA8FD0FFFA8%A8FD05FF7DA87DFD1CFF6893A8FD05FF597DFF7DA8A87DFF7D7DA8A8FFA8%7DA8A8A87DA8A8A87DFF7DFFFFA87DFF7D7DA8FF7DA8A87DA8A8A87D7DA8%A8FFA8A852A8A87E7DFFFFFF847DA8FF52A8FFFFA8A87DFFA8A87DFFA8FF%FD06A852A8A8FFA87DA8FFA884FFA87DFF7DA8A8A87DA8A8A87DFFA8FFFD%05A87E7DFF7D7DA8FF7DA89369CFFD05FFA87DA87DFFA8A87DFF7DFF7DA8%7DFF7DA87DFF7DFFA87DA8A8A8FFFD06A87D7DFFFF7DFFFD06A8FFA8A87E%FD04A87DFFA87DA8A8A87EA8FFFFA87DFD07A8FFA8A8FFA87DFFA8FFFD04%A8FFFFFF7DA87DFF7DA87DA87DA8FFA8A8A87EA8FFFD06A8FFA8A8A8847D%7DFF686FA8FD05FF7DFF7D7DA87E7DA8FF7DFFA87DA8FF847DA8FFA8A8A8%7DA87DFFFFFF7DA8A8FF7DFF7DA8FF7DFFFD04A8FF7DFF7DFF7DFF7DA87D%A8FFA87DFF7DFF7DFFFFFF7D7D7DA87DFFA8A87DFFA8A87DA87DFF7DFF7D%A87DFD04FF7D7D7DFF7D7DA8A8FF7DA87DFFA87E7DFFA8A87DFF7DFFFFA8%7DA8A8FF7D848D69CFFD05FFA8FFA87DA87DA87DFF7DFF7DFF7DA87DA8A8%FF7DA87DA8A8A8FFFFFD04A8FFA8A8A87DFF7DFFA8FFA8A8AF7EA87DFFA8%A8A87DA8A8FFFF7EA8A8FFA8FFFFA87EFFFF7DA87DA8A8A884FD04A87DFF%FD05A87EFFFFFF7DFFFD05A8FFA8A87DA87DA8A8A87DA8A8A8FFA87DFFA8%A8A8FFA8A852A1A1A8FD05FFA8FD04FFA8A8FFFFA8A8FFFFFF7DFD06FFA8%A8FFA8FFFFFFA8FFA8FFA8FF7DFFFFA8A8FFA8FFA8FFA8A8A8FFA8A8FFA8%A8FFFFFFA8A8A8FFA8FFFFFFA8FD04FFA87DA8FFA8A8FFA8A8A8FFA8A8A8%FFFFA8A8FFFFA8FFFFA8FFFD04A87DFFFFA8A8FFA8A8A8FFA8FFFFA8A8FF%A8A8A8FF7DFD50FFA8FDAFFFFF%%EndData%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 70 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/set_gvm{	currentglobal exch setglobal}bdf/reset_gvm{	setglobal}bdf/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/thold_halftone{ 	level3		{sethalftone currenthalftone}		{			dup /HalftoneType get 3 eq			{				sethalftone currenthalftone			}			{				begin				Width Height mul {					Thresholds read {pop} if				} repeat				end				currenthalftone			} ifelse		}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			/srcDataStrs [ imageDict begin				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse				{					Width Decode length 2 div mul cvi string				} repeat				end ] def					imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put			imageDict /Decode [0 1] put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		DataSource 0 get type		dup /filetype eq			{			1 dict begin			/flushbuffer Width cvi string def			1 1 Height cvi				{				pop				0 1 DataSource length 1 sub					{					DataSource exch get					flushbuffer readstring pop pop					}for				}for			end			}if		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and			{			Width Height mul cvi				{				0 1 DataSource length 1 sub					{dup DataSource exch get exec length exch 0 ne {pop}if}for				dup 0 eq					{pop exit}if				sub dup 0 le					{exit}if				}loop			pop			}if				}		{		/DataSource load type 		dup /filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 idiv mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and			{				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul					{					DataSource length dup 0 eq						{pop exit}if					sub dup 0 le						{exit}if					}loop				pop			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 	dup type /dicttype eq		{			Adobe_AGM_Core/AGMCORE_tmp get			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			Adobe_AGM_Core/AGMCORE_tmp get exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{ 	/indexed_colorspace_dict AGMCORE_gget dup null ne {		dup /CSDBase known {			/CSDBase get /CSD get_res /Names known 		}{			pop false		}ifelse	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse{	/pdfmark_5 {cleartomark} bind def}{	/pdfmark_5 {pdfmark} bind def}ifelse/ReadBypdfmark_5{	2 dict begin	/makerString exch def string /tmpString exch def	{		currentfile tmpString readline pop		makerString anchorsearch		{		pop pop cleartomark exit		}{			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5		} ifelse	}loop	end} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for%% definitions of some fundamental procedures.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 201 dict dup begin put/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSD_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_in_pattern false def/AGMCORE_currentpagedevice nd/knockout_unitsq ndcurrentglobal true setglobal[/CSA /Gradient /Procedure]{	/Generic /Category findresource dup length dict copy /Category defineresource pop} forallsetglobal/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	//Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_&setoverprint /setoverprint ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse			/AGMCORE_gstackptr exch store		}def		/grestoreall {			AGMCORE_&grestoreall			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/setoverprint{			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint		}def			0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/sRGB ne					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			//Adobe_AGM_Core begin			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						current_spot_alias false set_spot_alias						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor						set_spot_alias						currentgray 1 ne					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						//Adobe_AGM_Core/AGMCORE_name xddf						false						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not AGMCORE_currentpagedevice/OverrideSeparations known and						{							AGMCORE_currentpagedevice/OverrideSeparations get							{								/HqnSpots /ProcSet resourcestatus								{									pop pop pop true								}if							}if						}if											{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not						}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace							false							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall								not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse			end		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	/AGMCORE_IsSeparationAProcessColor		{		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or		}def	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		level3 {			/AGMCORE_IsCurrentColor				{				dup AGMCORE_IsSeparationAProcessColor					{					AGMCORE_plate_ndx 0 eq						{dup (Cyan) eq exch /Cyan eq or}if					AGMCORE_plate_ndx 1 eq						{dup (Magenta) eq exch /Magenta eq or}if					AGMCORE_plate_ndx 2 eq						{dup (Yellow) eq exch /Yellow eq or}if					AGMCORE_plate_ndx 3 eq						{dup (Black) eq exch /Black eq or}if					AGMCORE_plate_ndx 4 eq						{pop false}if					}{					gsave					false setoverprint					current_spot_alias false set_spot_alias					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor					set_spot_alias					currentgray 1 ne					grestore					}ifelse				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf				dup type /dicttype eq					{					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end}{					channel get 0 paint? AGMCORE_separateShadingFunction					}ifelse				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					Shading /AGMCORE_ignoreshade known					currentdict end exch					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				//Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					/AGMCORE_SpotAliasAry2 where {						begin						dup 0 get dup /Separation eq						{							pop							dup length array copy							dup dup 1 get							current_spot_alias							{								dup map_alias								{									false set_spot_alias									dup 1 exch setsepcolorspace									true set_spot_alias									begin									/sep_colorspace_dict currentdict AGMCORE_gput									pop pop	pop									[ 										/Separation Name 										CSA map_csa										MappedCSA 										/sep_colorspace_proc load									]									dup Name									end								}if							}if							map_reserved_ink_name 1 xpt						}{							/DeviceN eq 							{								dup length array copy								dup dup 1 get [ 									exch {										current_spot_alias{											dup map_alias{												/Name get exch pop											}if										}if										map_reserved_ink_name									} forall 								] 1 xpt							}if						}ifelse						end					} if				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	/AGMCORE_def_ht currenthalftone def	/clonedict Adobe_AGM_Utils begin /clonedict load end def	/clonearray Adobe_AGM_Utils begin /clonearray load end def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/getrampcolor	{ 		/indx exch def		0 1 NumComp 1 sub		{			dup			Samples exch get			dup type /stringtype eq {indx get} if			exch			Scaling exch get aload pop			3 1 roll			mul add		} for		ColorSpaceFamily /Separation eq 		{sep}		{			ColorSpaceFamily /DeviceN eq			{devn} {setcolor}ifelse		}ifelse	} bdf	/sssetbackground {aload pop setcolor} bdf	/RadialShade	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/r2 xdf		/c2y xdf		/c2x xdf		/r1 xdf		/c1y xdf		/c1x xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		c1x c2x eq		{			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope c2y c1y sub c2x c1x sub div def			/theta slope 1 atan def			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if		} ifelse		gsave		clippath		c1x c1y translate		theta rotate		-90 rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax xdf		/xMax xdf		/yMin xdf		/xMin xdf		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			/max { 2 copy gt { pop } {exch pop} ifelse } bdf			/min { 2 copy lt { pop } {exch pop} ifelse } bdf			rampdict begin			40 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			c1x c1y translate			theta rotate			-90 rotate			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def			/c1y 0 def			/c1x 0 def			/c2x 0 def			ext0			{				0 getrampcolor				c2y r2 add r1 sub 0.0001 lt				{					c1x c1y r1 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2y r1 add r2 le					{						c1x c1y r1 0 360 arc						fill					}					{						c2x c2y r2 0 360 arc fill						r1 r2 eq						{							/p1x r1 neg def							/p1y c1y def							/p2x r1 def							/p2y c1y def							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto							fill						}						{							/AA r2 r1 sub c2y div def							AA -1 eq							{ /theta 89.99 def}							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}							ifelse							/SS1 90 theta add dup sin exch cos div def							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def							/p1y p1x SS1 div neg def							/SS2 90 theta sub dup sin exch cos div def							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def							/p2y p2x SS2 div neg def							r1 r2 gt							{								/L1maxX p1x yMin p1y sub SS1 div add def								/L2maxX p2x yMin p2y sub SS2 div add def							}							{								/L1maxX 0 def								/L2maxX 0 def							} ifelse							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto							L1maxX L1maxX p1x sub SS1 mul p1y add lineto							fill						} ifelse					} ifelse				} ifelse			} if		c1x c2x sub dup mul		c1y c2y sub dup mul		add 0.5 exp		0 dtransform		dup mul exch dup mul add 0.5 exp 72 div		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		1 index 1 index lt { exch } if pop		/hires xdf		hires mul		/numpix xdf		/numsteps NumSamples def		/rampIndxInc 1 def		/subsampling false def		numpix 0 ne		{			NumSamples numpix div 0.5 gt			{				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def				/rampIndxInc NumSamples 1 sub numsteps div def				/subsampling true def			} if		} if		/xInc c2x c1x sub numsteps div def		/yInc c2y c1y sub numsteps div def		/rInc r2 r1 sub numsteps div def		/cx c1x def		/cy c1y def		/radius r1 def		newpath		xInc 0 eq yInc 0 eq rInc 0 eq and and		{			0 getrampcolor			cx cy radius 0 360 arc			stroke			NumSamples 1 sub getrampcolor			cx cy radius 72 hires div add 0 360 arc			0 setlinewidth			stroke		}		{			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				cx cy radius 0 360 arc				/cx cx xInc add def				/cy cy yInc add def				/radius radius rInc add def				cx cy radius 360 0 arcn				eofill				rampIndxInc add			} repeat			pop		} ifelse		ext1		{			c2y r2 add r1 lt			{				c2x c2y r2 0 360 arc				fill			}			{				c2y r1 add r2 sub 0.0001 le				{					c2x c2y r2 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2x c2y r2 0 360 arc fill					r1 r2 eq					{						/p1x r2 neg def						/p1y c2y def						/p2x r2 def						/p2y c2y def						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto						fill					}					{						/AA r2 r1 sub c2y div def						AA -1 eq						{ /theta 89.99 def}						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}						ifelse						/SS1 90 theta add dup sin exch cos div def						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def						/p1y c2y p1x SS1 div sub def						/SS2 90 theta sub dup sin exch cos div def						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def						/p2y c2y p2x SS2 div sub def						r1 r2 lt						{							/L1maxX p1x yMax p1y sub SS1 div add def							/L2maxX p2x yMax p2y sub SS2 div add def						}						{							/L1maxX 0 def							/L2maxX 0 def						}ifelse						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto						L1maxX L1maxX p1x sub SS1 mul p1y add lineto						fill					} ifelse				} ifelse			} ifelse		} if		grestore		grestore		end		end		end		} ifelse	} bdf	/GenStrips	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/y2 xdf		/x2 xdf		/y1 xdf		/x1 xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		x1 x2 eq		{			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope y2 y1 sub x2 x1 sub div def			/theta slope 1 atan def			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if		}		ifelse		gsave		clippath		x1 y1 translate		theta rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax exch def		/xMax exch def		/yMin exch def		/xMin exch def		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			rampdict begin			20 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			x1 y1 translate			theta rotate			/xStart 0 def			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def			/ySpan yMax yMin sub def			/numsteps NumSamples def			/rampIndxInc 1 def			/subsampling false def			xStart 0 transform			xEnd 0 transform			3 -1 roll			sub dup mul			3 1 roll			sub dup mul			add 0.5 exp 72 div			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			1 index 1 index lt { exch } if pop			mul			/numpix xdf			numpix 0 ne			{				NumSamples numpix div 0.5 gt				{					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def					/rampIndxInc NumSamples 1 sub numsteps div def					/subsampling true def				} if			} if			ext0			{				0 getrampcolor				xMin xStart lt				{					xMin yMin xMin neg ySpan rectfill				} if			} if			/xInc xEnd xStart sub numsteps div def			/x xStart def			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				x yMin xInc ySpan rectfill				/x x xInc add def				rampIndxInc add			} repeat			pop			ext1 {				xMax xEnd gt				{					xEnd yMin xMax xEnd sub ySpan rectfill				} if			} if			grestore			grestore			end			end			end		} ifelse	} bdf}def/page_trailer{	end}def/doc_trailer{}def/capture_currentpagedevice {	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf} defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup //Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA get_csa_by_name setcolorspace_opt		set_crd	end}def/map_csa{	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse	{pop}{get_csa_by_name /MappedCSA xdf}ifelse} def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	CSA map_csa	/AGMCORE_sep_special Name dup () eq exch (All) eq or store	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc {setcolor} bdf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		7 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {					/AliasedColorants false def					exit				}				{					new_LookupTables names_index get 0 get null eq {						dup /Names get names_index get /name xdf						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq						or or or not {							/AliasedColorants false def							exit						} if					} if				} ifelse			} for			lut_entry_len 1 eq {				/AliasedColorants false def			} if			AliasedColorants {				dup begin				/Names new_names def				/LookupTables new_LookupTables def				/AliasedColorants true def				/NComponents lut_entry_len def				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	dup not {		CSA map_csa	} if	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			AvoidAliasedColorants {				/currentspotalias current_spot_alias def				false set_spot_alias			} if			Names {				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				/names_index names_index 1 add def			} forall			AvoidAliasedColorants {				currentspotalias set_spot_alias			} if			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx 					0 0 0 0 /setcmykcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				{setcolor} bdf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSDBase known {			CSDBase /CSD get_res begin			currentdict /Names known {				currentdict devncs			}{				1 currentdict sepcs			} ifelse			AGMCORE_host_sep{				4 dict begin				/compCnt /Names where {pop Names length}{1}ifelse def				/NewLookup HiVal 1 add string def				0 1 HiVal {					/tableIndex xdf					Lookup dup type /stringtype eq {						compCnt tableIndex map_index					}{						exec					} ifelse					/Names where {						pop setdevicencolor					}{						setsepcolor					} ifelse					currentgray					tableIndex exch					HiVal mul cvi 					NewLookup 3 1 roll put				} for				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt				end			}{				level3				{					currentdict /Names known {						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt					} ifelse				}{				[/Indexed MappedCSA HiVal					[					currentdict /Names known {						Lookup dup type /stringtype eq							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx					}{						Lookup dup type /stringtype eq							{/exch cvx /get cvx 255 /div cvx}							{/exec cvx}ifelse							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx					} ifelse					]cvx				]setcolorspace_opt				}ifelse			} ifelse			end			set_crd		}		{			CSA map_csa			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 			begin			CSDBase /CSD get_res begin			currentdict /Names known{				map_indexed_devn				devn			}			{				Lookup 1 3 -1 roll map_index				sep			}ifelse			end			end		}{			/Lookup get 4 3 -1 roll map_index setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_res{	dup /CSD eq {		pop 		//Adobe_AGM_Core begin		/AGMCORE_CSD_cache load 3 1 roll put		end	}{		defineresource pop	} ifelse}def/del_res{	{		aload pop exch		dup /CSD eq {			pop 			{				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef			}forall		}{			exch			{				1 index undefineresource			}forall			pop		} ifelse	} forall}def/get_res{	dup /CSD eq {		pop		dup type dup /nametype eq exch /stringtype eq or {			AGMCORE_CSD_cache exch get		} if	}{		findresource	} ifelse}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		/CSA get_res	} if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/wrap_paintproc{   statusdict /currentfilenameextend known{	clonedict	begin	/OldPaintProc /PaintProc load def	/PaintProc	{		mark exch		dup /OldPaintProc get stopped		{closefile restore end} if		cleartomark	}  def	end  } {pop} ifelse} def/make_pattern{	exch clonedict exch	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	1 index dup /ID get exch /Pattern add_res	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/RenderingIntent known{		currentcolorrendering/RenderingIntent get	}{null}ifelse	Intent ne {		Intent /ColorRendering {findresource} stopped		{			pop pop systemdict /findcolorrendering known			{				Intent findcolorrendering pop				/ColorRendering findresource 				true			}			{false} ifelse		}		{true} ifelse		{			dup begin			currentdict /TransformPQR known {				currentdict /TransformPQR get aload pop				3 {{} eq 3 1 roll} repeat or or			}			{true} ifelse			currentdict /MatrixPQR known {				currentdict /MatrixPQR get aload pop				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq				and and and and and and and and			}			{true} ifelse			end			or			{				clonedict begin				/TransformPQR [					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind				] def				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def				currentdict end			} if			setcolorrendering_opt		} if			}if} def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict /ColorRendering known{			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		clonedict		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/set_spot_alias_ary{	dup inherit_aliases	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf}def/set_spot_normalization_ary{	dup inherit_aliases	dup length	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if	array	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf	/AGMCORE_SpotAliasAry where{		pop		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval		AGMCORE_SpotAliasAry length	}{0} ifelse	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval	true set_spot_alias}def/inherit_aliases{	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall}def/set_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry2 where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry2{				dup/Name get AGMCORE_name eq{					/CSD get /CSD get_res					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	//Adobe_AGM_Core begin	/setcustomcolor	{		currentdict/TintProc known currentdict/CSA known and 3 1 roll		//Adobe_AGM_Core begin		dup /customcolor_tint exch AGMCORE_gput		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not		current_spot_alias and{1 index 4 get map_alias}{false}ifelse		{			false set_spot_alias			4 -1 roll{				exch pop /sep_tint AGMCORE_gget exch			}if			mark 3 1 roll			setsepcolorspace			counttomark 0 ne{				setsepcolor			}if			pop			pop			true set_spot_alias		}{			AGMCORE_&setcustomcolor			pop		}ifelse		end	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	//Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defend/set_def_ht{	AGMCORE_def_ht sethalftone} defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.25 0%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.25 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.25 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict /Adobe_CoolType_Data 2 copy known not	 { 2 copy 10 dict put }ifget	 begin	 /@opStackCountByLevel 32 dict def	 /@opStackLevel 0 def	 /@dictStackCountByLevel 32 dict def	 /@dictStackLevel 0 def	 endsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup /args			7 index			5 add array put			put get			}			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{ pop count }			if			dup /argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					 { (*) { pop stop } 128 string /Category resourceforall }				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup					 {						  /@shouldNotDisappearDictValue known								{										  {												end												currentdict 1 index eq													 { pop exit }												if										  }									 loop								}						  if					 }				if				end		}		{ false }	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end		currentglobal false setglobal	  userdict /Adobe_CoolType_Data 2 copy known not		  { 2 copy 10 dict put }		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.%%Version: 1.21 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 27 add dict copy }	{ 27 dict }ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {				mark				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put					 {					 ((Hex) 57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec					 }				stopped					 {					 cleartomark					 Adobe_CoolType_Utility /@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						  {						  2 copy get 3 index eq								{ 1 index length exch sub 1 sub { end } repeat exit }								{ pop }						  ifelse						  }					 for					 pop pop					 Adobe_CoolType_Utility /@eexecStartData get eexec					 }					 { cleartomark }				ifelse			} }			{ {				Adobe_CoolType_Utility /@eexecStartData get eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind def/T0AddT42Mtx2{	/CIDFont findresource /Metrics2 get begin def end}bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/AGMIMG_flushfilters nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/AGMIMG_flushfilters{	dup type /arraytype ne		{1 array astore}if	aload length		{		dup type /filetype eq			{			dup status 1 index currentfile ne and				{dup flushfile closefile}				{pop}			ifelse			}{pop}ifelse		} repeat}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	CSA map_csa	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{ 									Name AGMCORE_IsSeparationAProcessColor  									{ 										Operator /imagemask eq{ 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor 										}{											invert_image_samples 										}ifelse	 								}{	 									[ /Separation Name [/DeviceGray]	 									{ 	 										sep_colorspace_proc AGMCORE_get_ink_data											1 exch sub	 									} bind										] AGMCORE_&setcolorspace										/sep_tint AGMCORE_gget AGMCORE_&setcolor 									}ifelse 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name AGMCORE_IsSeparationAProcessColor not and					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	mark currentcolor counttomark dup 2 add 1 roll cleartomark} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/DataSource origMultipleDataSources		{			[			BitsPerComponent 8 idiv origDecode length 2 idiv mul string			0 1 origDecode length 2 idiv 1 sub				{				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch				origDataSource exch get 0 () /SubFileDecode filter				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx				}for 			]bind cvx		}{origDataSource}ifelse 0 () /SubFileDecode filter def			[		origcolorSpaceElemCnt string		0 2 origDecode length 2 sub			{			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx			}for		/convProc load /exec cvx		origcolorSpaceElemCnt 1 sub -1 0			{			/dup cvx 2 /add cvx /index cvx			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx			}for	]bind cvx 0 () /SubFileDecode filter	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	CSA map_csa	2 dict begin	dup	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi			{				dup 65535 gt {1 add 2 div cvi}{exit}ifelse			} loop			string		} repeat		end ] def	/dstDataStr srcDataStrs 0 get length string def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [ [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def									/MultipleDataSources true def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA get_csa_by_name 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							devn_alt_datasource						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								devn_alt_datasource							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get get_csa_by_name				}{					/Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		<<			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		>>		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		current_spot_alias{dup 4 get map_alias}{false}ifelse		{			false set_spot_alias			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask			true set_spot_alias		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Page 1) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Web</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2008-01-14T11:34:40+01:00</xap:CreateDate>
         <xap:ModifyDate>2008-02-27T17:36:07+01:00</xap:ModifyDate>
         <xap:MetadataDate>2008-02-27T17:36:07+01:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>32</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAIAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8Ak3/OLn/HR8wf8Ybb/iUm&#xA;Yen5l6z2k+mHvP6H0HmY8m+WrLyxoukfk1o35haXbtaecLbVmpqUEkiPMraxJA0UqhuMitHRaEdv&#xA;nhVm0/5Vfl2/55xaW2g2rafJ5cmv5LYqeBuhqEcfqnf7XFiMVUIXH/KovzgodxrXmMHfxbp+OKvV&#xA;vJ9xHZ/l/olxdN6UVvpNrJO77cVS2UsTXwAwK+ffya82Wy/mbpesu9yt754/Sa6zHNFNHAkpmNzY&#xA;cJHVY5D6SFF4VpWmFWa+WPzO8+6qPKXmWW7shoPm7V59Ph0ZbVhLbwRNOqubr1fikP1ff4Kb/Riq&#xA;Y2f5m+Z5fJ/l3VXaD63qfmxNDuiI/h+qNfy25Ciuz+mg+LFUH5n/ADY1rSfO1vFp2rR6tpJ1u30b&#xA;UNOTSrhIrYzNwkT9J8zC9xHWvCg/A4q9owK7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXz5/zi5/x0fMH/GG2/wCJSZh6fmXrPaT6Ye8/ofQeZjybzjSvyF8lWF5ZzPc6pf2e&#xA;n3DXdhpN5eySWMM7SGXmluAif3h5eBPWuKsxPlfTD5tTzSfU/SiWDaWPi/d/V3mWc/DT7XNBvXpi&#xA;rF9a/JbyZqepX97PNqFtaapMLnV9Jtr2WCwu5RSrzwKaEtQcqEVOKsu1jQ7LVdBvNDm5w2N7bSWc&#xA;noEI6xSoYyENDx+E7bYqld/+X3l680ry/pjLLDbeWbi0utJML8XR7JOEQZqHkpXZh3xVh9/+TEdh&#xA;5l8uaj5bubpNNsNYbULzSJ7pmsoEljkMj20DA8WMj9Ae5wqjbv8AInydc3Dzw32q2ifpD9LW9vbX&#xA;rrb295z9QywwsHjU8991NO1MCtah+Qnk29u7q6N7qtu13fLqrxQXjLCt+p5G6WIqY/UZtySDTtTF&#xA;XosEZihjiMjSlFCmV6c2oKcmoAKnvQYqvJABJNANyTirsVdirsVdirsVaV0YkKwJXZgDuPnireKu&#xA;xV2KuxVxIFKmldh88VdirsVdirsVdirsVdirsVdir58/5xc/46PmD/jDbf8AEpMw9PzL1ntJ9MPe&#xA;f0PoPMx5N4/b3Vzp/lCewuHLWerL9ZsHP7M0d0Fnhr7qocfThQy/WfNN9Z6yFtbtbm1S7htLm1Fl&#xA;NwjMrIrBrwN6fMc6gU9sCUt1S41mKHzib26iv7W0WIC0kicR1eGNxxpKeC0PxAfaO+3TCqY6p5k1&#xA;6Iavqdq0C6bok4t5LN42aScKsbSt6gcBKCT4PhPvgVu+1/zHAL/UEltvqGn6hHaG1MLGSRHkjQky&#xA;+pRSPV2+HFXXXmm/g8wwQQXS3llLfCxmiWzmjSJmqCPrZZo2kQ9VpiqM8nf8od/z0vv+oqbFUl0L&#xA;UdeOnaTpmmzwW0aaNHeNLNC0zFlbhxWjxgV964VVpfNWvSJo93JPBpemahaRyNePbvcR/Wn2MUhE&#xA;kfpKagqSfpwK68m1pbnzj9YvI7mytLMsLOSJ+BD2zsqrSX4B/PQfF7YVVra41v8AxLAI7xI7EaSl&#xA;yLL02KAcgOI/eU5V/bp02p3xVFWvmLVbm08tFTFHNrUcpnkKFgrrbNKpVeQ2DqNq9MCpNY+Ydfsf&#xA;LVlJPerPNqN9Nbx3L28s7wpHLMXbgju8p/d0RRTiNu2FWSeWNav73TruS+Ql7SV40uPRkthPGqhl&#xA;kEcvxKd6EeOBUr0zX/Mko0i4uZrb6vr6yCCNIW5Wz+k0sRJL/vRRfi2XFVb8t7GWHRpruV4pJby4&#xA;naSRIuEjMlxIhMjlnL1p8PSnTfrirHrHXUbzfHq/Kc/W9RlsCxSQW5tCohgpIR6e00fKgP7Rwqna&#xA;eYvMDzW98JbddPuNVOmrZ+kxkEayPGZDLzHxHh040wKiLfzPqMmjaTeMsfq3upmymAU8fSE8sVVF&#xA;ftcYxiqEtfNGqT65bWdvepdWmpfWEt7r6jNDFG8UbSKySO/GcfAQaEYqo6fc6n+jNAl1GeO/afVv&#xA;TiZ43Dx0FwC3IyNyPw/D4DbfCqd+Vb7W9VtYtXuriFbG8VngsY4SHReRCEzFzyPEfF8HXArFPMz6&#xA;TFrnmKfUNIfUOK2ccN0PTVYGki4qWkZlaMFiPiAwqjbnzD5g05o9HW5X61pthA88ptbi8NxcMp+D&#xA;lD9hfg+225xVGP5j179KaeLuWLR7G+gt5IPWt3lDzyKDJbvJzj9J1Oy1G/z2wK4eZNf+HVS9v+im&#xA;1L9Hmy9NvVEfr/V/V9Xlu3LfjxpTFURbeZtRk0bSbxhH617qZsphxPH0hPLH8Ir9rjGMVQtv5j8x&#xA;3Gm2koltluNWvnsrP9y3GBIXmEkj1k/eMRFsPhxVdrOva7p99baU17Es/wBXa5mvUsZ5+Z9TikYh&#xA;haQoKD4mJ+WKqM/mfzHXSp7totFsb23Uy3E1tJMq3RbiYpPjj9JTsVLffiqL8jflj5c8lzXcukPc&#xA;s16qJN9YdXFIySOPFU/myrHiEeTn63tLJqABOtu5luWuAkdz5N0W50SDR5ldrS2k9aFuX7xX5Fq8&#xA;qf5RHTpirVx5N0qe6knMtyiS3CXj2ySlYTOjK3Mp35FBWv68VXXvlHTLyfUpZJZ1XVY1jvIUkpG3&#xA;BQquFINGCrTFWr7ydpF5eS3ErTrHcukl3ZpKy28zx04tJH3+yK0603xVE3Hl3Tp7S7tH5+leXC3c&#xA;1G39RHRxQ02FYhiqF/wbpf1760JbkAXf19bb1j6IuCeTNw/yia/qpiqY6dpNpYaf9Qg5ehWVviNW&#xA;rM7SNv8ANziqGsPLWm2LQtDzJgsxp6cmrWENy3oB8Ve+KoO68kaXc2Fvp0lxdjT7eKOE2izFY5Ei&#xA;NV9QAbnxpTFUTd+VrC5u725aWeP9I25tbyGNwI3QoYwxUg/EqtscVXv5csTf2l8sk0c1pB9VAR6J&#xA;JCN+EqkHkK4qhtP8maXY3dpcRT3TiwLmzgkmZ4oxIjIVVDtQK5p398VaHkrShbvbrNcrH9Y+t23G&#xA;Ug28pLEmAgVWvqGoNRiqa6fp62VsYDPPdBmLNJcv6r7gClTTbbpiqXab5P0rT7yG5ieeQWgcWMEs&#xA;rPFbiTZvSU9Kg03rtiqP07SrbT9P+o2xdYQZWDE1YGZ2kahp/M5piqFPljTP0DFoYDrZwiP02DAS&#xA;BonEityp9rkKnbFUt1LycPr1ndadNKkaajHe3Fm0v+jjctI6IQfiJNaVpiqJj8l6VHcxzLNdCOG5&#xA;+uQWnrN9XSUsWPGPpQsSf1Yq3p/kzS7C6s54Zrlhp5kNnBJMWijEisjKqHtRzTv74qqW3lLTrcQq&#xA;s1w8Vvd/XreJ5OSxyUcELtXj+9Jpiqrpfl200y4aS0nuFtzz4WTSFrdDI3JuCEbb++2Kqr6Fp0ku&#xA;oySoZBqqJHdoxqpVEKAAdtjiqCbydYf6O0N3eW81vAtqZ4ZikkkUZqiyGnxca7Hriq+/8qWV/LC1&#xA;3dXcsMJjb6qZj6TtDTizrSpNRU77nFVq+TtJXUBdhp+AuDeLZeqfqwuCa+qI/wCblv1pXtiqxPJW&#xA;lJdRzJNdCOG5+uQ2nrN9XSUsWPGPpQsSf1Yqrv5V0ttKi00GVIreZrm3mRyssczO0nNHHesjfRiq&#xA;nN5StJfQk+u3qXkCPEL5JyJ3jduRR2pRlr0227Yq7U/KNlqcMdvd3d49qqJHLb+u3CUIeQMu1Sa9&#xA;TXFX/9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:B655F9E626C4DC11B0F7C948713094C1</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:CB4FF47BE6EC11DCA9DBE848ED1657C8</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:B555F9E626C4DC11B0F7C948713094C1</stRef:instanceID>
            <stRef:documentID>uuid:B455F9E626C4DC11B0F7C948713094C1</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Web</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>5080.000000</stDim:w>
            <stDim:h>5080.000000</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>White</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Black</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>74.609375</xapG:cyan>
                           <xapG:magenta>67.578125</xapG:magenta>
                           <xapG:yellow>66.796875</xapG:yellow>
                           <xapG:black>89.843750</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Red</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>98.828125</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Yellow</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>6.250000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>96.093750</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Green</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>62.500000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Cyan</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>51.562500</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>12.500000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Blue</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>87.890625</xapG:cyan>
                           <xapG:magenta>76.562500</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>RGB Magenta</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>26.953125</xapG:cyan>
                           <xapG:magenta>81.250000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=193 G=39 B=45</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>16.796875</xapG:cyan>
                           <xapG:magenta>97.656250</xapG:magenta>
                           <xapG:yellow>92.187500</xapG:yellow>
                           <xapG:black>6.640625</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=237 G=28 B=36</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.390625</xapG:cyan>
                           <xapG:magenta>98.828125</xapG:magenta>
                           <xapG:yellow>96.875000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=241 G=90 B=36</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>79.296875</xapG:magenta>
                           <xapG:yellow>96.484375</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=247 G=147 B=30</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>98.046875</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=251 G=176 B=59</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>34.765625</xapG:magenta>
                           <xapG:yellow>86.718750</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=252 G=238 B=33</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>4.687500</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>92.968750</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=217 G=224 B=33</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>18.750000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>97.656250</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=140 G=198 B=63</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>98.828125</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=57 G=181 B=74</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>74.218750</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>99.218750</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=146 B=69</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>85.937500</xapG:cyan>
                           <xapG:magenta>17.578125</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>3.906250</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=104 B=55</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>89.843750</xapG:cyan>
                           <xapG:magenta>33.203125</xapG:magenta>
                           <xapG:yellow>98.437500</xapG:yellow>
                           <xapG:black>25.781250</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=34 G=181 B=115</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.781250</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>74.609375</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=169 B=157</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>78.125000</xapG:cyan>
                           <xapG:magenta>8.984375</xapG:magenta>
                           <xapG:yellow>45.703125</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=41 G=171 B=226</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>69.531250</xapG:cyan>
                           <xapG:magenta>14.843750</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=113 B=188</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>87.109375</xapG:cyan>
                           <xapG:magenta>52.343750</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=46 G=49 B=146</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>98.828125</xapG:cyan>
                           <xapG:magenta>96.093750</xapG:magenta>
                           <xapG:yellow>3.515625</xapG:yellow>
                           <xapG:black>0.390625</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=27 G=20 B=100</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>26.171875</xapG:yellow>
                           <xapG:black>24.609375</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=102 G=45 B=145</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>74.218750</xapG:cyan>
                           <xapG:magenta>98.046875</xapG:magenta>
                           <xapG:yellow>0.781250</xapG:yellow>
                           <xapG:black>0.390625</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=147 G=39 B=143</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>49.218750</xapG:cyan>
                           <xapG:magenta>98.828125</xapG:magenta>
                           <xapG:yellow>1.171875</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=158 G=0 B=93</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>34.765625</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>37.109375</xapG:yellow>
                           <xapG:black>10.937500</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=212 G=20 B=90</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>11.718750</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>49.218750</xapG:yellow>
                           <xapG:black>0.781250</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=237 G=30 B=121</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>96.484375</xapG:magenta>
                           <xapG:yellow>20.312500</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=199 G=178 B=153</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>22.656250</xapG:cyan>
                           <xapG:magenta>27.343750</xapG:magenta>
                           <xapG:yellow>39.843750</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=153 G=134 B=117</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.843750</xapG:cyan>
                           <xapG:magenta>42.578125</xapG:magenta>
                           <xapG:yellow>52.343750</xapG:yellow>
                           <xapG:black>6.640625</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=115 G=99 B=87</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.390625</xapG:cyan>
                           <xapG:magenta>52.734375</xapG:magenta>
                           <xapG:yellow>60.546875</xapG:yellow>
                           <xapG:black>23.437500</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=83 G=71 B=65</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>57.421875</xapG:cyan>
                           <xapG:magenta>60.156250</xapG:magenta>
                           <xapG:yellow>63.671875</xapG:yellow>
                           <xapG:black>41.796875</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=198 G=156 B=109</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>22.656250</xapG:cyan>
                           <xapG:magenta>38.281250</xapG:magenta>
                           <xapG:yellow>63.281250</xapG:yellow>
                           <xapG:black>1.171875</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=166 G=124 B=82</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>31.640625</xapG:cyan>
                           <xapG:magenta>48.828125</xapG:magenta>
                           <xapG:yellow>73.828125</xapG:yellow>
                           <xapG:black>9.765625</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=140 G=98 B=57</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>35.937500</xapG:cyan>
                           <xapG:magenta>57.031250</xapG:magenta>
                           <xapG:yellow>83.593750</xapG:yellow>
                           <xapG:black>22.656250</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=117 G=76 B=36</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.062500</xapG:cyan>
                           <xapG:magenta>63.671875</xapG:magenta>
                           <xapG:yellow>92.968750</xapG:yellow>
                           <xapG:black>35.546875</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=96 G=56 B=19</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>41.406250</xapG:cyan>
                           <xapG:magenta>69.531250</xapG:magenta>
                           <xapG:yellow>96.484375</xapG:yellow>
                           <xapG:black>48.828125</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=66 G=33 B=11</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>47.656250</xapG:cyan>
                           <xapG:magenta>73.046875</xapG:magenta>
                           <xapG:yellow>83.203125</xapG:yellow>
                           <xapG:black>67.968750</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Web Color Group</xapG:groupName>
                  <xapG:groupType>1</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=236 G=28 B=36</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.781250</xapG:cyan>
                           <xapG:magenta>98.828125</xapG:magenta>
                           <xapG:yellow>96.875000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=169 B=157</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>78.125000</xapG:cyan>
                           <xapG:magenta>8.984375</xapG:magenta>
                           <xapG:yellow>45.703125</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=102 G=45 B=145</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>74.218750</xapG:cyan>
                           <xapG:magenta>98.046875</xapG:magenta>
                           <xapG:yellow>0.781250</xapG:yellow>
                           <xapG:black>0.390625</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=139 G=146 B=152 1</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>48.437500</xapG:cyan>
                           <xapG:magenta>36.328125</xapG:magenta>
                           <xapG:yellow>33.593750</xapG:yellow>
                           <xapG:black>1.562500</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Grayscale</xapG:groupName>
                  <xapG:groupType>1</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=90</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>229</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=80</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>204</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=70</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>178</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=60</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>153</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=50</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>127</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=40</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>101</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=30</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>76</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=20</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>50</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=10</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>25</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=5</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>12</xapG:gray>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_AGM_Core/capture_currentpagedevice get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -25.124 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 25.124 li219.812 25.124 li219.812 0 licpclp[1 0 0 1 0 0 ] concat3.57178 0.0898438 mo3.57178 22.7666 li0 22.7666 li0 0.0898438 li3.57178 0.0898438 licpfalse sop/0 [/DeviceCMYK] /CSA add_res0 0.91 0.72 0.23 cmykf20.2456 5.12012 mo20.2456 3.99316 li20.2456 2.63232 20.0464 1.62598 19.2876 0.892578 cv18.6494 0.276367 17.6938 0 16.5366 0 cv15.6528 0 14.6128 0.0717773 14.2578 0.132324 cv14.0776 0.162109 13.9751 0.264648 13.9751 0.46875 cv13.9751 8.64502 li13.9751 8.85547 14.0776 8.95166 14.2578 8.98193 cv14.6128 9.0415 15.6528 9.11426 16.5366 9.11426 cv17.7046 9.11426 18.667 8.82813 19.3057 8.19922 cv20.0537 7.46143 20.2456 6.4668 20.2456 5.12012 cvcp18.8691 5.06348 mo18.8691 6.18848 18.7358 6.87646 18.2515 7.36621 cv17.8306 7.79102 17.2261 7.94141 16.5366 7.94141 cv16.0317 7.94141 15.6826 7.92969 15.3643 7.91162 cv15.3643 1.20801 li15.6885 1.19043 16.0317 1.17236 16.5366 1.17236 cv17.1992 1.17236 17.7832 1.30957 18.2012 1.69678 cv18.7163 2.17383 18.8691 2.89063 18.8691 4.05029 cv18.8691 5.06348 licp34.7842 5.74707 mo34.7842 0.318359 li34.7842 0.186523 34.6763 0.0898438 34.5498 0.0898438 cv33.6299 0.0898438 li33.4976 0.0898438 33.3955 0.192383 33.3955 0.318359 cv33.3955 5.74707 li33.3955 7.21436 32.9868 7.95361 31.5923 7.95361 cv30.1973 7.95361 29.7886 7.20801 29.7886 5.74707 cv29.7886 0.318359 li29.7886 0.186523 29.6802 0.0898438 29.5542 0.0898438 cv28.6343 0.0898438 li28.502 0.0898438 28.3994 0.192383 28.3994 0.318359 cv28.3994 5.74707 li28.3994 8.17627 29.6504 9.11426 31.5923 9.11426 cv33.5337 9.11426 34.7842 8.17627 34.7842 5.74707 cvcp27.2676 1.05225 mo27.2676 0.3125 li27.2676 0.180176 27.1655 0.0898438 27.0327 0.0898438 cv21.2012 0.0898438 li21.0693 0.0898438 20.9609 0.186523 20.9609 0.3125 cv20.9609 1.05225 li20.9609 1.18457 21.0693 1.25635 21.2012 1.25635 cv23.4258 1.25635 li23.4258 8.7832 li23.4258 8.91553 23.5278 9.02344 23.6543 9.02344 cv24.5801 9.02344 li24.7124 9.02344 24.8086 8.90918 24.8086 8.7832 cv24.8086 1.25635 li27.0327 1.25635 li27.1655 1.25635 27.2676 1.17822 27.2676 1.05225 cvcp60.8379 8.06445 mo61.9175 8.41211 li62.0522 8.45557 62.1577 8.58594 62.1577 8.72363 cv62.1577 8.85547 62.1577 8.7832 62.1577 8.7832 cv62.1577 8.91553 62.0498 9.02344 61.9175 9.02344 cv59.8257 9.02344 li59.6934 9.02344 59.5874 8.91553 59.5825 8.7832 cv59.5723 8.49121 li58.9517 8.89258 58.355 9.10791 57.6157 9.10791 cv56.002 9.10791 55.5298 8.03711 55.5298 6.51074 cv55.5298 2.57324 li55.5298 2.44092 55.6377 2.32617 55.77 2.32617 cv56.6118 2.32617 li56.7441 2.32617 56.8521 2.44092 56.8521 2.57324 cv56.8521 6.51074 li56.8521 7.63965 57.1611 7.98975 58.0244 7.98975 cv58.4995 7.98975 59.0708 7.74316 59.5156 7.51465 cv59.5156 2.57324 li59.5156 2.44678 59.6235 2.32617 59.7559 2.32617 cv60.6035 2.32617 li60.73 2.32617 60.8379 2.44092 60.8379 2.57324 cv60.8379 8.06445 licp47.2842 8.75342 mo47.3242 8.91357 47.2383 9.02344 47.0859 9.02344 cv46.0938 9.02344 li45.9858 9.02344 45.9014 8.93359 45.8774 8.83154 cv45.21 6.30615 li42.27 6.30615 li41.6089 8.83154 li41.5845 8.93359 41.4883 9.02344 41.3862 9.02344 cv40.3945 9.02344 li40.2432 9.02344 40.1553 8.90088 40.1958 8.75342 cv42.2944 1.07031 li42.5464 0.145996 43.2559 0 43.7427 0 cv44.2241 0 44.936 0.149414 45.186 1.06396 cv47.2842 8.75342 licp43.9536 1.38281 mo43.9175 1.24414 43.8633 1.17822 43.7427 1.17822 cv43.6167 1.17822 43.563 1.24414 43.5269 1.38281 cv42.5469 5.146 li44.9336 5.146 li43.9536 1.38281 licp53.3936 11.3926 mo52.5337 11.3926 li52.4077 11.3926 52.2993 11.2905 52.2993 11.1582 cv52.2993 9.00586 li51.8486 9.07813 51.3555 9.11377 51.019 9.11377 cv49.1792 9.11377 48.2715 8.01367 48.2715 6.13184 cv48.2715 5.23633 li48.2715 3.39648 49.1494 2.24219 51.019 2.24219 cv51.7646 2.24219 52.6411 2.36523 53.3335 2.53662 cv53.5796 2.59766 53.6221 2.66309 53.6221 2.8374 cv53.6221 11.1582 li53.6221 11.2842 53.5259 11.3926 53.3936 11.3926 cvcp52.2993 3.43848 mo52.0229 3.38477 51.4878 3.33643 51.019 3.33643 cv49.9067 3.33643 49.5942 4.10596 49.5942 5.23633 cv49.5942 6.13184 li49.5942 7.26807 49.9126 8.01953 51.019 8.01953 cv51.3496 8.01953 51.9326 7.97754 52.2993 7.91748 cv52.2993 3.43848 licp68.9253 8.41211 mo69.0601 8.45557 69.1655 8.58594 69.1655 8.72363 cv69.1655 8.85547 69.1655 8.7832 69.1655 8.7832 cv69.1655 8.91553 69.0576 9.02344 68.9253 9.02344 cv66.8926 9.02344 li66.7603 9.02344 66.6484 8.91553 66.6436 8.7832 cv66.6343 8.51514 li66.0933 8.8584 65.4292 9.11377 64.8042 9.11377 cv63.7939 9.11377 62.7842 8.69922 62.7842 7.13574 cv62.7842 7.03955 li62.7842 5.70508 63.584 5.02588 65.6997 5.02588 cv66.5234 5.02588 li66.5234 4.521 li66.5234 3.625 66.1748 3.35449 65.3511 3.35449 cv64.5757 3.35449 63.8994 3.42676 63.458 3.44678 cv63.3984 3.44922 li63.2837 3.45459 63.1748 3.41455 63.1748 3.25244 cv63.1748 2.65723 li63.1748 2.5249 63.2524 2.44678 63.415 2.4165 cv63.9023 2.32617 64.5273 2.24219 65.3511 2.24219 cv67.0405 2.24219 67.8462 3.04199 67.8462 4.521 cv67.8462 8.06445 li68.9253 8.41211 licp66.5234 5.93359 mo65.6997 5.93359 li64.4253 5.93359 64.1128 6.27002 64.1128 7.03369 cv64.1128 7.12988 li64.1128 7.85742 64.4492 8.0498 65.0986 8.0498 cv65.5918 8.0498 66.0605 7.89355 66.5234 7.64063 cv66.5234 5.93359 licp0 0 0 1 cmykf217.563 22.8516 mo217.118 22.8516 216.251 22.8154 215.663 22.6709 cv215.506 22.6348 215.41 22.5625 215.41 22.4307 cv215.41 22.0098 li215.41 21.9014 215.506 21.8291 215.626 21.8291 cv215.651 21.8291 215.663 21.8291 215.675 21.8291 cv216.251 21.9014 217.13 21.9619 217.563 21.9619 cv218.344 21.9619 218.753 21.7568 218.753 21.1074 cv218.753 20.7471 218.537 20.5186 217.851 20.1094 cv216.636 19.3877 li215.904 18.9424 215.41 18.4258 215.41 17.6689 cv215.41 16.417 216.348 16.0693 217.586 16.0693 cv218.26 16.0693 218.898 16.1289 219.462 16.2256 cv219.619 16.249 219.691 16.333 219.691 16.4658 cv219.691 16.8623 li219.691 17.0068 219.607 17.0674 219.487 17.0674 cv219.474 17.0674 219.462 17.0674 219.451 17.0674 cv219.03 17.0313 218.26 16.9707 217.586 16.9707 cv216.914 16.9707 216.468 17.0557 216.468 17.6689 cv216.468 18.0293 216.746 18.2578 217.298 18.582 cv218.489 19.292 li219.487 19.8809 219.812 20.3975 219.812 21.1074 cv219.812 22.335 218.91 22.8516 217.563 22.8516 cvcp213.114 18.8828 mo213.114 17.5244 212.596 16.9951 211.539 16.9951 cv210.503 16.9951 209.927 17.584 209.927 18.8828 cv209.927 18.9912 li213.114 18.9912 li213.114 18.8828 licp213.955 19.7969 mo209.927 19.7969 li209.927 19.9648 li209.927 21.3965 210.492 21.9248 211.598 21.9248 cv212.296 21.9248 213.185 21.877 213.739 21.7939 cv213.763 21.7939 213.775 21.7939 213.799 21.7939 cv213.895 21.7939 213.992 21.8408 213.992 21.9619 cv213.992 22.3701 li213.992 22.5264 213.943 22.6104 213.751 22.6475 cv213.066 22.7793 212.404 22.8516 211.598 22.8516 cv210.215 22.8516 208.869 22.2021 208.869 19.9648 cv208.869 18.8828 li208.869 17.1631 209.818 16.0693 211.539 16.0693 cv213.294 16.0693 214.184 17.1748 214.184 18.8828 cv214.184 19.5322 li214.184 19.6885 214.099 19.7969 213.955 19.7969 cvcp207.554 22.7188 mo207.158 22.791 206.617 22.8516 206.051 22.8516 cv204.416 22.8516 203.49 21.6963 203.49 19.9287 cv203.49 18.9912 li203.49 17.2236 204.404 16.0693 206.051 16.0693 cv206.605 16.0693 207.158 16.1289 207.554 16.2012 cv207.747 16.2373 207.794 16.2979 207.794 16.4658 cv207.794 16.8984 li207.794 17.0186 207.699 17.0791 207.591 17.0791 cv207.566 17.0791 207.554 17.0791 207.542 17.0791 cv207.013 17.0186 206.64 16.9951 206.051 16.9951 cv205.089 16.9951 204.548 17.6318 204.548 18.9912 cv204.548 19.9287 li204.548 21.2764 205.078 21.9248 206.051 21.9248 cv206.64 21.9248 207.013 21.9014 207.542 21.8408 cv207.554 21.8408 207.566 21.8408 207.591 21.8408 cv207.699 21.8408 207.794 21.9014 207.794 22.0215 cv207.794 22.4541 li207.794 22.6104 207.747 22.6826 207.554 22.7188 cvcp202.369 16.9834 mo201.815 16.9834 201.31 17.1279 200.708 17.4873 cv200.708 22.5264 li200.708 22.6475 200.601 22.7666 200.468 22.7666 cv199.878 22.7666 li199.759 22.7666 199.651 22.6592 199.651 22.5264 cv199.651 16.3936 li199.651 16.2607 199.747 16.1533 199.878 16.1533 cv200.445 16.1533 li200.577 16.1533 200.672 16.2607 200.672 16.3936 cv200.672 16.6465 li201.274 16.2256 201.828 16.0693 202.369 16.0693 cv202.537 16.0693 202.621 16.1416 202.621 16.2861 cv202.621 16.7783 li202.621 16.9111 202.537 16.9834 202.369 16.9834 cvcp197.73 22.7666 mo197.128 22.7666 li196.997 22.7666 196.9 22.6592 196.9 22.5264 cv196.9 22.2979 li196.239 22.6709 195.698 22.8516 194.988 22.8516 cv193.544 22.8516 192.896 21.9492 192.896 20.3506 cv192.896 16.3936 li192.896 16.2607 193.003 16.1533 193.136 16.1533 cv193.713 16.1533 li193.845 16.1533 193.954 16.2607 193.954 16.3936 cv193.954 20.3506 li193.954 21.5645 194.363 21.9375 195.277 21.9375 cv195.782 21.9375 196.347 21.7451 196.9 21.4678 cv196.9 16.3936 li196.9 16.2734 197.008 16.1533 197.14 16.1533 cv197.73 16.1533 li197.85 16.1533 197.958 16.2607 197.958 16.3936 cv197.958 22.5264 li197.958 22.6592 197.863 22.7666 197.73 22.7666 cvcp190.447 19.0029 mo190.447 17.7764 189.954 16.9951 188.824 16.9951 cv187.705 16.9951 187.212 17.7646 187.212 19.0029 cv187.212 19.917 li187.212 21.1436 187.693 21.9248 188.824 21.9248 cv189.941 21.9248 190.447 21.1553 190.447 19.917 cv190.447 19.0029 licp188.824 22.8516 mo187.056 22.8516 186.154 21.6846 186.154 19.917 cv186.154 19.0029 li186.154 17.2354 187.056 16.0693 188.824 16.0693 cv190.591 16.0693 191.505 17.2354 191.505 19.0029 cv191.505 19.917 li191.505 21.6846 190.591 22.8516 188.824 22.8516 cvcp182.759 22.8516 mo182.314 22.8516 181.449 22.8154 180.859 22.6709 cv180.703 22.6348 180.607 22.5625 180.607 22.4307 cv180.607 22.0098 li180.607 21.9014 180.703 21.8291 180.824 21.8291 cv180.847 21.8291 180.859 21.8291 180.872 21.8291 cv181.449 21.9014 182.327 21.9619 182.759 21.9619 cv183.541 21.9619 183.95 21.7568 183.95 21.1074 cv183.95 20.7471 183.734 20.5186 183.048 20.1094 cv181.833 19.3877 li181.1 18.9424 180.607 18.4258 180.607 17.6689 cv180.607 16.417 181.544 16.0693 182.784 16.0693 cv183.457 16.0693 184.094 16.1289 184.66 16.2256 cv184.816 16.249 184.888 16.333 184.888 16.4658 cv184.888 16.8623 li184.888 17.0068 184.804 17.0674 184.683 17.0674 cv184.671 17.0674 184.66 17.0674 184.648 17.0674 cv184.226 17.0313 183.457 16.9707 182.784 16.9707 cv182.111 16.9707 181.666 17.0557 181.666 17.6689 cv181.666 18.0293 181.942 18.2578 182.496 18.582 cv183.685 19.292 li184.683 19.8809 185.008 20.3975 185.008 21.1074 cv185.008 22.335 184.106 22.8516 182.759 22.8516 cvcp178.31 18.8828 mo178.31 17.5244 177.792 16.9951 176.735 16.9951 cv175.701 16.9951 175.124 17.584 175.124 18.8828 cv175.124 18.9912 li178.31 18.9912 li178.31 18.8828 licp179.152 19.7969 mo175.124 19.7969 li175.124 19.9648 li175.124 21.3965 175.689 21.9248 176.794 21.9248 cv177.493 21.9248 178.382 21.877 178.935 21.7939 cv178.959 21.7939 178.972 21.7939 178.996 21.7939 cv179.091 21.7939 179.188 21.8408 179.188 21.9619 cv179.188 22.3701 li179.188 22.5264 179.14 22.6104 178.947 22.6475 cv178.262 22.7793 177.601 22.8516 176.794 22.8516 cv175.412 22.8516 174.065 22.2021 174.065 19.9648 cv174.065 18.8828 li174.065 17.1631 175.015 16.0693 176.735 16.0693 cv178.491 16.0693 179.38 17.1748 179.38 18.8828 cv179.38 19.5322 li179.38 19.6885 179.296 19.7969 179.152 19.7969 cvcp171.576 16.333 mo171.576 15.1309 170.794 14.7344 169.291 14.7344 cv168.918 14.7344 168.257 14.7344 167.968 14.7705 cv167.968 18.0654 li168.498 18.0771 169.015 18.0889 169.291 18.0889 cv170.771 18.0889 171.576 17.7158 171.576 16.417 cv171.576 16.333 licp172.838 22.7666 mo172.069 22.7666 li171.924 22.7666 171.853 22.7666 171.756 22.6104 cv169.603 19.0273 li169.568 19.0273 169.532 19.0273 169.496 19.0273 cv169.423 19.0273 169.363 19.0273 169.291 19.0273 cv168.894 19.0273 168.605 19.0146 167.968 18.9912 cv167.968 22.5264 li167.968 22.6475 167.884 22.7666 167.751 22.7666 cv167.103 22.7666 li166.982 22.7666 166.886 22.6592 166.886 22.5264 cv166.886 14.1084 li166.886 13.9404 166.958 13.8682 167.174 13.8447 cv167.692 13.7842 168.593 13.748 169.291 13.748 cv171.191 13.748 172.658 14.3857 172.658 16.333 cv172.658 16.417 li172.658 17.7646 171.865 18.5576 170.771 18.8467 cv172.958 22.5029 li172.983 22.5381 172.996 22.5752 172.996 22.6104 cv172.996 22.6953 172.935 22.7666 172.838 22.7666 cvcp162.208 22.7188 mo161.812 22.791 161.27 22.8516 160.705 22.8516 cv159.07 22.8516 158.144 21.6963 158.144 19.9287 cv158.144 18.9912 li158.144 17.2236 159.058 16.0693 160.705 16.0693 cv161.258 16.0693 161.812 16.1289 162.208 16.2012 cv162.4 16.2373 162.449 16.2979 162.449 16.4658 cv162.449 16.8984 li162.449 17.0186 162.353 17.0791 162.245 17.0791 cv162.22 17.0791 162.208 17.0791 162.197 17.0791 cv161.667 17.0186 161.294 16.9951 160.705 16.9951 cv159.744 16.9951 159.202 17.6318 159.202 18.9912 cv159.202 19.9287 li159.202 21.2764 159.731 21.9248 160.705 21.9248 cv161.294 21.9248 161.667 21.9014 162.197 21.8408 cv162.208 21.8408 162.22 21.8408 162.245 21.8408 cv162.353 21.8408 162.449 21.9014 162.449 22.0215 cv162.449 22.4541 li162.449 22.6104 162.4 22.6826 162.208 22.7188 cvcp156.339 22.7666 mo155.763 22.7666 li155.63 22.7666 155.522 22.6592 155.522 22.5264 cv155.522 16.3936 li155.522 16.2607 155.63 16.1533 155.763 16.1533 cv156.339 16.1533 li156.472 16.1533 156.581 16.2607 156.581 16.3936 cv156.581 22.5264 li156.581 22.6592 156.472 22.7666 156.339 22.7666 cvcp156.364 15.0947 mo155.75 15.0947 li155.619 15.0947 155.509 14.9873 155.509 14.8545 cv155.509 13.8916 li155.509 13.7598 155.619 13.6514 155.75 13.6514 cv156.364 13.6514 li156.496 13.6514 156.605 13.7598 156.605 13.8916 cv156.605 14.8545 li156.605 14.9873 156.496 15.0947 156.364 15.0947 cvcp153.97 22.791 mo153.729 22.8271 153.417 22.8516 153.188 22.8516 cv152.082 22.8516 151.552 22.5625 151.552 21.2393 cv151.552 17.043 li150.386 16.9111 li150.253 16.8984 150.158 16.8271 150.158 16.6943 cv150.158 16.3701 li150.158 16.2373 150.253 16.1533 150.386 16.1533 cv151.552 16.1533 li151.552 14.9746 li151.552 14.8545 151.636 14.7588 151.769 14.7344 cv152.394 14.6377 li152.407 14.6377 152.418 14.6377 152.431 14.6377 cv152.527 14.6377 152.611 14.7217 152.611 14.8428 cv152.611 16.1533 li153.91 16.1533 li154.042 16.1533 154.15 16.2607 154.15 16.3936 cv154.15 16.8027 li154.15 16.9346 154.042 17.043 153.91 17.043 cv152.611 17.043 li152.611 21.2393 li152.611 21.9014 152.779 21.9971 153.261 21.9971 cv153.933 21.9971 li154.102 21.9971 154.186 22.0459 154.186 22.166 cv154.186 22.5869 li154.186 22.6953 154.126 22.7666 153.97 22.791 cvcp148.152 19.5684 mo147.262 19.5684 li145.806 19.5684 145.421 19.8936 145.421 20.7471 cv145.421 20.8916 li145.421 21.7568 145.831 21.9854 146.528 21.9854 cv147.082 21.9854 147.574 21.8174 148.152 21.5049 cv148.152 19.5684 licp148.969 22.7666 mo148.416 22.7666 li148.285 22.7666 148.175 22.6592 148.175 22.5264 cv148.175 22.2627 li147.599 22.5986 146.998 22.8516 146.324 22.8516 cv145.302 22.8516 144.364 22.4063 144.364 20.9033 cv144.364 20.7588 li144.364 19.46 145.122 18.8105 147.262 18.8105 cv148.152 18.8105 li148.152 18.3291 li148.152 17.3193 147.803 16.9707 146.865 16.9707 cv146.083 16.9707 145.506 17.0186 145.025 17.0674 cv145.001 17.0674 144.99 17.0674 144.964 17.0674 cv144.857 17.0674 144.749 17.0313 144.749 16.874 cv144.749 16.4541 li144.749 16.3213 144.833 16.249 145.001 16.2256 cv145.494 16.1416 146.047 16.0693 146.865 16.0693 cv148.537 16.0693 149.21 16.9111 149.21 18.3291 cv149.21 22.5264 li149.21 22.6592 149.101 22.7666 148.969 22.7666 cvcp142.741 22.7666 mo142.139 22.7666 li142.007 22.7666 141.911 22.6592 141.911 22.5264 cv141.911 22.2979 li141.25 22.6709 140.708 22.8516 139.999 22.8516 cv138.556 22.8516 137.906 21.9492 137.906 20.3506 cv137.906 16.3936 li137.906 16.2607 138.014 16.1533 138.146 16.1533 cv138.724 16.1533 li138.857 16.1533 138.964 16.2607 138.964 16.3936 cv138.964 20.3506 li138.964 21.5645 139.374 21.9375 140.287 21.9375 cv140.792 21.9375 141.357 21.7451 141.911 21.4678 cv141.911 16.3936 li141.911 16.2734 142.019 16.1533 142.152 16.1533 cv142.741 16.1533 li142.861 16.1533 142.968 16.2607 142.968 16.3936 cv142.968 22.5264 li142.968 22.6592 142.873 22.7666 142.741 22.7666 cvcp135.212 17.0791 mo134.888 17.0186 134.311 16.959 133.806 16.959 cv132.615 16.959 132.242 17.7646 132.242 19.0391 cv132.242 19.9053 li132.242 21.1924 132.627 21.9619 133.806 21.9619 cv134.179 21.9619 134.816 21.9131 135.212 21.8408 cv135.212 17.0791 licp136.054 25.124 mo135.441 25.124 li135.321 25.124 135.212 25.0283 135.212 24.8955 cv135.212 22.7188 li134.755 22.8037 134.191 22.8516 133.806 22.8516 cv132.062 22.8516 131.184 21.7939 131.184 19.9053 cv131.184 19.0391 li131.184 17.2354 132.001 16.0693 133.806 16.0693 cv134.527 16.0693 135.38 16.1885 136.019 16.3457 cv136.235 16.3936 136.271 16.4541 136.271 16.6221 cv136.271 24.8955 li136.271 25.0156 136.187 25.124 136.054 25.124 cvcp127.068 14.915 mo127.033 14.7822 126.96 14.6982 126.839 14.6982 cv126.708 14.6982 126.635 14.7822 126.599 14.915 cv125.505 18.8701 li128.163 18.8701 li127.068 14.915 licp130.087 22.7666 mo129.377 22.7666 li129.269 22.7666 129.197 22.6826 129.173 22.5869 cv128.391 19.8213 li125.277 19.8213 li124.507 22.5869 li124.483 22.6826 124.386 22.7666 124.291 22.7666 cv123.582 22.7666 li123.46 22.7666 123.376 22.6826 123.376 22.5752 cv123.376 22.5508 123.376 22.5146 123.388 22.4902 cv125.613 14.6621 li125.818 13.9287 126.382 13.748 126.839 13.748 cv127.285 13.748 127.85 13.917 128.054 14.6494 cv130.279 22.4902 li130.291 22.5146 130.291 22.5508 130.291 22.5752 cv130.291 22.6826 130.219 22.7666 130.087 22.7666 cvcp119.74 14.458 mo119.163 14.458 li118.597 14.458 118.429 14.626 118.429 15.2881 cv118.429 16.1533 li119.691 16.1533 li119.824 16.1533 119.919 16.249 119.919 16.3701 cv119.919 16.8389 li119.919 16.959 119.824 17.043 119.691 17.043 cv118.429 17.043 li118.429 22.5264 li118.429 22.6475 118.321 22.7666 118.201 22.7666 cv117.611 22.7666 li117.479 22.7666 117.371 22.6475 117.371 22.5264 cv117.371 17.043 li116.205 16.9111 li116.072 16.8984 115.976 16.8145 115.976 16.6943 cv115.976 16.3701 li115.976 16.249 116.072 16.1533 116.205 16.1533 cv117.371 16.1533 li117.371 15.2881 li117.371 14.001 117.996 13.6162 119.054 13.6162 cv119.378 13.6162 119.572 13.6514 119.728 13.6875 cv119.86 13.7236 119.957 13.7725 119.957 13.8799 cv119.957 14.2764 li119.957 14.4092 119.873 14.458 119.74 14.458 cvcp114.015 19.0029 mo114.015 17.7764 113.523 16.9951 112.392 16.9951 cv111.274 16.9951 110.781 17.7646 110.781 19.0029 cv110.781 19.917 li110.781 21.1436 111.261 21.9248 112.392 21.9248 cv113.51 21.9248 114.015 21.1553 114.015 19.917 cv114.015 19.0029 licp112.392 22.8516 mo110.625 22.8516 109.722 21.6846 109.722 19.917 cv109.722 19.0029 li109.722 17.2354 110.625 16.0693 112.392 16.0693 cv114.16 16.0693 115.074 17.2354 115.074 19.0029 cv115.074 19.917 li115.074 21.6846 114.16 22.8516 112.392 22.8516 cvcp104.569 18.8828 mo104.569 17.5244 104.052 16.9951 102.994 16.9951 cv101.959 16.9951 101.382 17.584 101.382 18.8828 cv101.382 18.9912 li104.569 18.9912 li104.569 18.8828 licp105.411 19.7969 mo101.382 19.7969 li101.382 19.9648 li101.382 21.3965 101.947 21.9248 103.054 21.9248 cv103.751 21.9248 104.641 21.877 105.194 21.7939 cv105.218 21.7939 105.23 21.7939 105.254 21.7939 cv105.35 21.7939 105.447 21.8408 105.447 21.9619 cv105.447 22.3701 li105.447 22.5264 105.398 22.6104 105.206 22.6475 cv104.521 22.7793 103.859 22.8516 103.054 22.8516 cv101.67 22.8516 100.324 22.2021 100.324 19.9648 cv100.324 18.8828 li100.324 17.1631 101.274 16.0693 102.994 16.0693 cv104.749 16.0693 105.639 17.1748 105.639 18.8828 cv105.639 19.5322 li105.639 19.6885 105.555 19.7969 105.411 19.7969 cvcp99.2056 22.791 mo98.9648 22.8271 98.6523 22.8516 98.4238 22.8516 cv97.3179 22.8516 96.7886 22.5625 96.7886 21.2393 cv96.7886 17.043 li95.6221 16.9111 li95.4897 16.8984 95.3936 16.8271 95.3936 16.6943 cv95.3936 16.3701 li95.3936 16.2373 95.4897 16.1533 95.6221 16.1533 cv96.7886 16.1533 li96.7886 14.9746 li96.7886 14.8545 96.8726 14.7588 97.0049 14.7344 cv97.6304 14.6377 li97.6421 14.6377 97.6543 14.6377 97.6665 14.6377 cv97.7622 14.6377 97.8467 14.7217 97.8467 14.8428 cv97.8467 16.1533 li99.1455 16.1533 li99.2778 16.1533 99.3857 16.2607 99.3857 16.3936 cv99.3857 16.8027 li99.3857 16.9346 99.2778 17.043 99.1455 17.043 cv97.8467 17.043 li97.8467 21.2393 li97.8467 21.9014 98.0151 21.9971 98.4961 21.9971 cv99.1694 21.9971 li99.3379 21.9971 99.4219 22.0459 99.4219 22.166 cv99.4219 22.5869 li99.4219 22.6953 99.3618 22.7666 99.2056 22.791 cvcp94.0469 22.7666 mo93.4453 22.7666 li93.313 22.7666 93.2168 22.6592 93.2168 22.5264 cv93.2168 22.2979 li92.5557 22.6709 92.0146 22.8516 91.3052 22.8516 cv89.8618 22.8516 89.2124 21.9492 89.2124 20.3506 cv89.2124 16.3936 li89.2124 16.2607 89.3208 16.1533 89.4531 16.1533 cv90.0303 16.1533 li90.1626 16.1533 90.271 16.2607 90.271 16.3936 cv90.271 20.3506 li90.271 21.5645 90.6797 21.9375 91.5938 21.9375 cv92.0986 21.9375 92.6641 21.7451 93.2168 21.4678 cv93.2168 16.3936 li93.2168 16.2734 93.3252 16.1533 93.4575 16.1533 cv94.0469 16.1533 li94.167 16.1533 94.2754 16.2607 94.2754 16.3936 cv94.2754 22.5264 li94.2754 22.6592 94.1792 22.7666 94.0469 22.7666 cvcp87.7925 22.791 mo87.5518 22.8271 87.2393 22.8516 87.0107 22.8516 cv85.9043 22.8516 85.3755 22.5625 85.3755 21.2393 cv85.3755 17.043 li84.209 16.9111 li84.0767 16.8984 83.9805 16.8271 83.9805 16.6943 cv83.9805 16.3701 li83.9805 16.2373 84.0767 16.1533 84.209 16.1533 cv85.3755 16.1533 li85.3755 14.9746 li85.3755 14.8545 85.4595 14.7588 85.5918 14.7344 cv86.2173 14.6377 li86.229 14.6377 86.2412 14.6377 86.2529 14.6377 cv86.3496 14.6377 86.4336 14.7217 86.4336 14.8428 cv86.4336 16.1533 li87.7324 16.1533 li87.8647 16.1533 87.9731 16.2607 87.9731 16.3936 cv87.9731 16.8027 li87.9731 16.9346 87.8647 17.043 87.7324 17.043 cv86.4336 17.043 li86.4336 21.2393 li86.4336 21.9014 86.6021 21.9971 87.083 21.9971 cv87.7563 21.9971 li87.9248 21.9971 88.0088 22.0459 88.0088 22.166 cv88.0088 22.5869 li88.0088 22.6953 87.9487 22.7666 87.7925 22.791 cvcp82.4771 22.7666 mo81.8999 22.7666 li81.7681 22.7666 81.6597 22.6592 81.6597 22.5264 cv81.6597 16.3936 li81.6597 16.2607 81.7681 16.1533 81.8999 16.1533 cv82.4771 16.1533 li82.6094 16.1533 82.7178 16.2607 82.7178 16.3936 cv82.7178 22.5264 li82.7178 22.6592 82.6094 22.7666 82.4771 22.7666 cvcp82.501 15.0947 mo81.8882 15.0947 li81.7559 15.0947 81.6475 14.9873 81.6475 14.8545 cv81.6475 13.8916 li81.6475 13.7598 81.7559 13.6514 81.8882 13.6514 cv82.501 13.6514 li82.6338 13.6514 82.7417 13.7598 82.7417 13.8916 cv82.7417 14.8545 li82.7417 14.9873 82.6338 15.0947 82.501 15.0947 cvcp80.1074 22.791 mo79.8667 22.8271 79.5542 22.8516 79.3257 22.8516 cv78.2192 22.8516 77.6899 22.5625 77.6899 21.2393 cv77.6899 17.043 li76.5239 16.9111 li76.3916 16.8984 76.2949 16.8271 76.2949 16.6943 cv76.2949 16.3701 li76.2949 16.2373 76.3916 16.1533 76.5239 16.1533 cv77.6899 16.1533 li77.6899 14.9746 li77.6899 14.8545 77.7744 14.7588 77.9067 14.7344 cv78.5317 14.6377 li78.5435 14.6377 78.5562 14.6377 78.5679 14.6377 cv78.6641 14.6377 78.7485 14.7217 78.7485 14.8428 cv78.7485 16.1533 li80.0469 16.1533 li80.1792 16.1533 80.2876 16.2607 80.2876 16.3936 cv80.2876 16.8027 li80.2876 16.9346 80.1792 17.043 80.0469 17.043 cv78.7485 17.043 li78.7485 21.2393 li78.7485 21.9014 78.9165 21.9971 79.3979 21.9971 cv80.0713 21.9971 li80.2397 21.9971 80.3237 22.0459 80.3237 22.166 cv80.3237 22.5869 li80.3237 22.6953 80.2637 22.7666 80.1074 22.791 cvcp73.3154 22.8516 mo72.8706 22.8516 72.0044 22.8154 71.415 22.6709 cv71.2588 22.6348 71.1626 22.5625 71.1626 22.4307 cv71.1626 22.0098 li71.1626 21.9014 71.2588 21.8291 71.3789 21.8291 cv71.4028 21.8291 71.415 21.8291 71.4272 21.8291 cv72.0044 21.9014 72.8823 21.9619 73.3154 21.9619 cv74.0972 21.9619 74.5054 21.7568 74.5054 21.1074 cv74.5054 20.7471 74.2896 20.5186 73.604 20.1094 cv72.3892 19.3877 li71.6558 18.9424 71.1626 18.4258 71.1626 17.6689 cv71.1626 16.417 72.1006 16.0693 73.3394 16.0693 cv74.0127 16.0693 74.6499 16.1289 75.2153 16.2256 cv75.3716 16.249 75.4438 16.333 75.4438 16.4658 cv75.4438 16.8623 li75.4438 17.0068 75.3599 17.0674 75.2393 17.0674 cv75.2275 17.0674 75.2153 17.0674 75.2031 17.0674 cv74.7822 17.0313 74.0127 16.9707 73.3394 16.9707 cv72.6655 16.9707 72.2212 17.0557 72.2212 17.6689 cv72.2212 18.0293 72.4976 18.2578 73.0508 18.582 cv74.2412 19.292 li75.2393 19.8809 75.564 20.3975 75.564 21.1074 cv75.564 22.335 74.6621 22.8516 73.3154 22.8516 cvcp69.5034 22.7666 mo68.9263 22.7666 li68.7939 22.7666 68.6855 22.6592 68.6855 22.5264 cv68.6855 18.5703 li68.6855 17.3555 68.2764 16.9834 67.3628 16.9834 cv66.8579 16.9834 66.2925 17.1748 65.7393 17.4521 cv65.7393 22.5264 li65.7393 22.6475 65.6313 22.7666 65.499 22.7666 cv64.9097 22.7666 li64.7896 22.7666 64.6812 22.6592 64.6812 22.5264 cv64.6812 16.3936 li64.6812 16.2607 64.7773 16.1533 64.9097 16.1533 cv65.5107 16.1533 li65.6431 16.1533 65.7393 16.2607 65.7393 16.3936 cv65.7393 16.6221 li66.4009 16.249 66.9419 16.0693 67.6514 16.0693 cv69.0942 16.0693 69.7437 16.9707 69.7437 18.5703 cv69.7437 22.5264 li69.7437 22.6592 69.6357 22.7666 69.5034 22.7666 cvcp62.5884 22.7666 mo61.9272 22.7666 li61.8071 22.7666 61.7104 22.6592 61.7104 22.5264 cv61.7104 14.0605 li61.7104 13.9404 61.7949 13.832 61.9272 13.832 cv62.5884 13.832 li62.709 13.832 62.8052 13.9287 62.8052 14.0605 cv62.8052 22.5264 li62.8052 22.6475 62.7212 22.7666 62.5884 22.7666 cvcp56.4146 22.7666 mo55.7886 22.7666 li55.6685 22.7666 55.5728 22.6592 55.5728 22.5264 cv55.5728 13.9521 li55.5728 13.832 55.6567 13.7236 55.7886 13.7236 cv56.4146 13.7236 li56.5347 13.7236 56.6309 13.8193 56.6309 13.9521 cv56.6309 22.5264 li56.6309 22.6475 56.5464 22.7666 56.4146 22.7666 cvcp52.7588 19.5684 mo51.8687 19.5684 li50.4136 19.5684 50.0288 19.8936 50.0288 20.7471 cv50.0288 20.8916 li50.0288 21.7568 50.4375 21.9854 51.1353 21.9854 cv51.6885 21.9854 52.1816 21.8174 52.7588 21.5049 cv52.7588 19.5684 licp53.5767 22.7666 mo53.0229 22.7666 li52.8911 22.7666 52.7827 22.6592 52.7827 22.5264 cv52.7827 22.2627 li52.2056 22.5986 51.6045 22.8516 50.9307 22.8516 cv49.9087 22.8516 48.9707 22.4063 48.9707 20.9033 cv48.9707 20.7588 li48.9707 19.46 49.7285 18.8105 51.8687 18.8105 cv52.7588 18.8105 li52.7588 18.3291 li52.7588 17.3193 52.4097 16.9707 51.4722 16.9707 cv50.6904 16.9707 50.1133 17.0186 49.6323 17.0674 cv49.6079 17.0674 49.5962 17.0674 49.5718 17.0674 cv49.4639 17.0674 49.3555 17.0313 49.3555 16.874 cv49.3555 16.4541 li49.3555 16.3213 49.4399 16.249 49.6079 16.2256 cv50.1011 16.1416 50.6543 16.0693 51.4722 16.0693 cv53.1436 16.0693 53.8169 16.9111 53.8169 18.3291 cv53.8169 22.5264 li53.8169 22.6592 53.7085 22.7666 53.5767 22.7666 cvcp47.3354 22.7666 mo46.7583 22.7666 li46.6255 22.7666 46.5176 22.6592 46.5176 22.5264 cv46.5176 18.5703 li46.5176 17.3555 46.1089 16.9834 45.1948 16.9834 cv44.6899 16.9834 44.1245 17.1748 43.5713 17.4521 cv43.5713 22.5264 li43.5713 22.6475 43.4634 22.7666 43.3311 22.7666 cv42.7417 22.7666 li42.6216 22.7666 42.5132 22.6592 42.5132 22.5264 cv42.5132 16.3936 li42.5132 16.2607 42.6094 16.1533 42.7417 16.1533 cv43.3428 16.1533 li43.4751 16.1533 43.5713 16.2607 43.5713 16.3936 cv43.5713 16.6221 li44.2329 16.249 44.7739 16.0693 45.4834 16.0693 cv46.9263 16.0693 47.5757 16.9707 47.5757 18.5703 cv47.5757 22.5264 li47.5757 22.6592 47.4678 22.7666 47.3354 22.7666 cvcp40.0356 19.0029 mo40.0356 17.7764 39.543 16.9951 38.4126 16.9951 cv37.2939 16.9951 36.8013 17.7646 36.8013 19.0029 cv36.8013 19.917 li36.8013 21.1436 37.2822 21.9248 38.4126 21.9248 cv39.5308 21.9248 40.0356 21.1553 40.0356 19.917 cv40.0356 19.0029 licp38.4126 22.8516 mo36.645 22.8516 35.7427 21.6846 35.7427 19.917 cv35.7427 19.0029 li35.7427 17.2354 36.645 16.0693 38.4126 16.0693 cv40.1802 16.0693 41.0942 17.2354 41.0942 19.0029 cv41.0942 19.917 li41.0942 21.6846 40.1802 22.8516 38.4126 22.8516 cvcp33.939 22.7666 mo33.3618 22.7666 li33.2295 22.7666 33.1216 22.6592 33.1216 22.5264 cv33.1216 16.3936 li33.1216 16.2607 33.2295 16.1533 33.3618 16.1533 cv33.939 16.1533 li34.0713 16.1533 34.1797 16.2607 34.1797 16.3936 cv34.1797 22.5264 li34.1797 22.6592 34.0713 22.7666 33.939 22.7666 cvcp33.9634 15.0947 mo33.3496 15.0947 li33.2173 15.0947 33.1094 14.9873 33.1094 14.8545 cv33.1094 13.8916 li33.1094 13.7598 33.2173 13.6514 33.3496 13.6514 cv33.9634 13.6514 li34.0952 13.6514 34.2036 13.7598 34.2036 13.8916 cv34.2036 14.8545 li34.2036 14.9873 34.0952 15.0947 33.9634 15.0947 cvcp31.6543 22.791 mo31.4141 22.8271 31.1011 22.8516 30.8726 22.8516 cv29.7661 22.8516 29.2373 22.5625 29.2373 21.2393 cv29.2373 17.043 li28.0708 16.9111 li27.9385 16.8984 27.8423 16.8271 27.8423 16.6943 cv27.8423 16.3701 li27.8423 16.2373 27.9385 16.1533 28.0708 16.1533 cv29.2373 16.1533 li29.2373 14.9746 li29.2373 14.8545 29.3218 14.7588 29.4536 14.7344 cv30.0791 14.6377 li30.0908 14.6377 30.103 14.6377 30.1152 14.6377 cv30.2114 14.6377 30.2954 14.7217 30.2954 14.8428 cv30.2954 16.1533 li31.5942 16.1533 li31.7266 16.1533 31.8345 16.2607 31.8345 16.3936 cv31.8345 16.8027 li31.8345 16.9346 31.7266 17.043 31.5942 17.043 cv30.2954 17.043 li30.2954 21.2393 li30.2954 21.9014 30.4639 21.9971 30.9448 21.9971 cv31.6182 21.9971 li31.7866 21.9971 31.8706 22.0459 31.8706 22.166 cv31.8706 22.5869 li31.8706 22.6953 31.811 22.7666 31.6543 22.791 cvcp25.666 19.5684 mo24.7759 19.5684 li23.3208 19.5684 22.936 19.8936 22.936 20.7471 cv22.936 20.8916 li22.936 21.7568 23.3447 21.9854 24.0425 21.9854 cv24.5952 21.9854 25.0884 21.8174 25.666 21.5049 cv25.666 19.5684 licp26.4834 22.7666 mo25.9302 22.7666 li25.7983 22.7666 25.6899 22.6592 25.6899 22.5264 cv25.6899 22.2627 li25.1128 22.5986 24.5112 22.8516 23.8379 22.8516 cv22.8154 22.8516 21.8774 22.4063 21.8774 20.9033 cv21.8774 20.7588 li21.8774 19.46 22.6353 18.8105 24.7759 18.8105 cv25.666 18.8105 li25.666 18.3291 li25.666 17.3193 25.3169 16.9707 24.3789 16.9707 cv23.5972 16.9707 23.02 17.0186 22.5391 17.0674 cv22.5151 17.0674 22.5029 17.0674 22.479 17.0674 cv22.3706 17.0674 22.2627 17.0313 22.2627 16.874 cv22.2627 16.4541 li22.2627 16.3213 22.3467 16.249 22.5151 16.2256 cv23.0083 16.1416 23.561 16.0693 24.3789 16.0693 cv26.0508 16.0693 26.7241 16.9111 26.7241 18.3291 cv26.7241 22.5264 li26.7241 22.6592 26.6157 22.7666 26.4834 22.7666 cvcp20.0137 22.7666 mo19.2686 22.7666 li19.0757 22.7666 18.9434 22.6953 18.8833 22.5752 cv15.1675 15.5156 li15.1558 15.4912 15.1436 15.4795 15.1313 15.4795 cv15.1196 15.4795 15.1196 15.4912 15.1196 15.5156 cv15.1196 22.5381 li15.1196 22.6592 15.0234 22.7666 14.9028 22.7666 cv14.2778 22.7666 li14.1577 22.7666 14.061 22.7432 14.061 22.6221 cv14.061 14.1689 li14.061 13.9766 14.2173 13.832 14.4097 13.832 cv15.0713 13.832 li15.4077 13.832 15.4683 13.8916 15.5645 14.0732 cv19.2563 21.0957 li19.2803 21.1318 li19.2925 21.1318 19.2925 21.1074 19.2925 21.0957 cv19.2925 14.0605 li19.2925 13.9404 19.3887 13.832 19.5088 13.832 cv20.146 13.832 li20.2783 13.832 20.3628 13.9404 20.3628 14.0605 cv20.3628 22.4189 li20.3628 22.6104 20.2061 22.7666 20.0137 22.7666 cvcp0 0 0 0.56 cmykf%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5[[/CSA [/0 ]]] del_resAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 12.0%%AI8_CreatorVersion: 12.0.1%%For: (PeopleGroup) (PeopleGroup)%%Title: (DTU Aqua B UK.eps)%%CreationDate: 27/02/08 17:36%AI9_DataStream%Gb",KCNC^ZP2J!ls1g:J(e7hP$AE,P0.oSeUcI>SO)TGhB4GGH6WUPL>3jS6QH%t\op:NZ"Am&]=]DjV;PkpI9dKfS*f57hn\l<N%gP;9-QT%.TDZBO!8^j\2'AUMU2:8G'^A-];?iI;)fIo%_I1rjC2!A+/l$=8"#uF&b>AFr&42/CQ\6dtGIt)ZhZ2"*6IX?3ap[Ko#%DpEh:i;)Fu(0=SH^J8BBk81m4?Q=K2hje"Z/P^6QY0ZPa@9OmL2/d(;QWJ+?ICT8jE<e/"/V<Ybf\#(F6;rB%`6SScqW?f&iU,WO%BQN_;lYH:l,C\V/`6YV'p\-?EkQ?!Hrlorjhtb11qqLGh!!)ijdsqA$q"aL@rS@;JjmC<BI7[05\@DNWFah)]'4C*OU>[3ocR#7]%nQXO=mA*UC:cIm[#6$g4a5S2-MdLHN/hV)1Da1t6iI$-#61]&;GQ7O1?SF6Hn-/>@IIk@oe`-"82ja7qL81qVWqt!-gVjn$:TAnj%FcPL`j.l0`.e)Koh9V"+=Ol0,#9;c2TW@u*bk0TaDi;7*K'tlSDLT7s\(K_BD1E5/>/>+\.mHnV\Od2/</<3t'<h4K._\bWZe,OA%+`2R.JF?o<^:V#Tq=<Z$6$kK^VJ.B\FCPES^2=[fggBM&h\HU_VfhC]8LQg^$`?]lDk&kH+/nW^%JTUT)]fApe,5]j<aAM9Gtfsf%nNA#Ic1r[0T`VT%DA&Up1I-S^j7E0>^J)#b@Ih/Ls.%;^]18BkiC@\]m2Z+C>PpXV$WLp>?YfR?C]%4KqY'OqCJuhJYS9d)_r"S=%3@s:Il)D&C[TKDDYtPNi=M&FT<81k2r.Mhie9m:Qk&[UaTAqm%3L2Zg`G\OJS\s0ZVtg5T.Fk+5;h(c2oLAZmCWcBT='sm(/;7TN%hcL6+,U9/SE('I?bM\3G2i_*SK'M?_n2L?#,Jr?j'$V)tN$H3s3,\X9Tf=BH-d=!O+%tS&n2HXn4[ka>&,)OUQtDIm$%GlJ)EIJ^%qG)I6[q!`qNMH^U?n!';rl17;"_lKY*N^1XO/6fCZGJFK<#<T1^[Wrs*N_R*VOf"8Iq'oI+9&-;,V5X7V>'!h"UD9pJj6PQe3BCE%/4K.Wo0O\"hIFm2?h@Z>=k8L'a:FTQd0XFEkcct)R_Hc2iGU89pl4=/3MF%Z)p@1'W\4L]Aae!id2NA'"c!7_"P^0DKIMQ^Z7f`_%C#5h52!ad?RQ'TDXGDgpqMqE5mF42IVsil*H;6PcYaO(4k([&!NB`*2H+-_Cl3l:IH"Y5]A_\["(;.ugLUAoJa\L0_/@1ku!IH(J%M7)qk87/4.nm6'tC+<6(+8hb0U>hfBTl9N%oRk?rJ+EX3;gi(+61Y'Jj$!@3s/2J#kjK)Dh1:'9Np)u15Q/f<oQU;,I]>&]NsV!L%Vk9.dqE+^Q5BZfGHB)cr^M.!<Du#=jL[d66DJZB0.88rFD,3rEe+gr[@t0I;gBKkc'S#/h;)f$Sn(?='Y+aD@(Y3F#kpb3#hmSY.%[]u99_P[UspoQui+Q3"Hr_Yod[UTE@UNUMB%G%=5V)1N>0;Lhb="MmHC^!%5]*P*2WD+2aC$mABr$X,jPhO%f!]3^[J=]T@n\Nnp%=^1<.'AmD+kp+cVfq>TKn$2%VdqEG:n/Im1.(Ri+H7/@l?ua/)<:j=dp`!GT)3?oS2uO8hqUj9Gq%8S_=O"'D>f""`Ie!G@kC6Y)%pc#o+l>(u"WT![A@t)V#oUU:QD:>#m?ZTpApAVQ3oQP,hjH3%flVjgSk9T'3Z'ol`Dd/Z=RL?q^C)O9FAkDu_I>_t*d^d)V_GB^X%Z!TK^!'LqL$\iE<MFbqdJ"/C[T9HkY55IL2r:]7/`>4MC+'X##fuF`sW*]:+Bp3^sHqPdH*S<FH9/%prNY$*k,kg"abGfD-1=itD%?HUGn\7J%6-L7&rOiLh9<kK73`?/%)]6chU!,$q(/'Xrm"LUM\/ZU.A+FQdj2&Vjt`HULmA3;;b<e$shZ:rlCot5c10'<#;VL;\`%9LT5cY/fWRkEYK/9jk?Knm=NZ4O,S9-cda>!(!jP;E'X17+RXTq]rABXAm3$Lb2Y"V)bsjT8Is*J),=H?)HO/WDZ"u9)='_PGgi?%YL:1KHKK_Q?+ID.la=\"cIg[L:NKk90)\O$ZWo0$B\Yp'D,'I]@da05aj"&>p#sm&p)6s(O.lf,Ig9`^ch(N>*5;N&o&0["\af,I%hqg\6d-F!>XM0\OKK%dq4ht-K]t8^fnFb&<gZhR)Df:,/9YNa+Im9?,/T0Eor,TY.qK"t\!.&haNs3@skEd:)>he+rGA'kKH1Kce%s1PqPLWU%HT3a`ehCgcGo_JX^k.Ab%mc!4'acEp?=/g]*Y>R:s*2-J`2r=(QXDmde%F+P9S%(``9h0F%480L=^%r3-jY"#+5JOe@%r;#dY_u%W8Tbe,bTADunD=Op\X7NqlXrm\.s$raDDq@50?<r#mcIc5a^-BBE^V%'[]`.<YrSi-ECWD?W[s-HCZpj3#bs)tF[i^K&%-HQ#-gW@4&hgJVY1bR7hbF>uF6fNR?ds-6<!U[7XfC.$M/7Nhlhk.oOY=G8UebRJch'Bj9P=U-&It=268J8j;U\5-.`ffu-HF8JS%2JP"Z.DGiJh>,eu+Lcigr!>Rd"u!Ym`1@P8bA%k6m>\H]eULX"Z`9)O=ZqQ'\3?lf'rmsed`Nu=*'@O2eH2Y<WOY&j-gJ(<)c0BN%h&+KG*3*@?B\MUIR5OTu\2gOW;dF18)c4D2[b>H!K*Doich(HalP"\]C84I41aoQY39*^eXZ8-md.34AM)huO<N)$_"%oYqXLH$S%p;kPGg`G2`Hg5A0>2utGc@Q8h5m1uZOdin,otPH:^(0Y>0XPk>1cuWu%FO_XBok*o37'M3VW-"OGQX".7LWde6^C$]Y[u`JF<3OS%^P_'<)3?k?=cdpeR@k]`(t@\VdE7_i<t9&<#?G9d\;[JD2Q*8=H4CBZeeNp@_<>ELl[e$:,0+8l+arLFFUb@k4OmJds&Z$D?bDf_%_8p#q>F9XG9420_)MLYP;ckHp.q.Csip[Q$@/;'r"]$(=fr%/5K^'V&MBFr>-rfC(_H`keXt5B]J3Cr'7l-P%(8fs)1)O,T#*u+j%,WpXsR_u]W_$UBK9*_M4@!*Djk8MqL"P/$.!?)pY63KO_#:O$]=W0Pp)K=mCE+oea7>'R-Up\u!\!Ym&<b%oQX>DJ&F5p88J&[[$%dtna<,Grr08E8pKgMD8H97u54iOe3rF+1GHV!G_)R._8^f'j>E6QNX)D<'[9,Pr@&[-[%eX/ib]EFYoKSS;-]gdITf3"OH>\@5mj%<uj>m-oKJUm`+\CXA#cY"M7i3Z%ocr)OM8-(RZ//RrW]#r)B49,18D'B;m[_1fH/2j_UdhWY.J5.Edq+RC7^^ouZ2+@B=\TD20md%8c7'UEN<^4W&GqV+'lP$1U;<jif&9-I%5;'?tB5d.Sc[uHe[^3XtEU/#K&F/@?E;P/,+&U2U2SVQ+j%IjK%jpUA[&Pft_;0(Nae+%;IuOV<)@^.2j)uU;s/VA4ZY6k.f8h0<BW4!$JnPCWE.<o0)Arr60_X_!)\s<-`rh@YHcgIlAIUU<h"Mj2assj!f_uk)aD-LK]m'W%C9"Da'@T\WeDqE_<@bcgVVP,Za'Fl>=JMI$4]TM$r/.`o@dCT3Wki+Q00FX_*)og<q'f^[c`N81J?:2#^GAgD)f[cQC2<Y20f/-m%b-rNPe_%,?/!]l5Taas(KO5bS@S!D5DL5W6BR=om'G&RsL/j,&g+ZBs:FsDVd70@We'ld0e)SpQl0S'+Zonkrrm[Lm;Zfp9"#Qi<%3B]A_3Bik'bYF0ng66L8:Y^d1;-*i';6Y%8O&(dsO6=Qij.kZ.3)mrtfH&^V"2\UO`2T?#c;3TCoD*bl5FT(Q0_]WI[rVZ2FTVcJ%St4/%B#h7RCc4AD[BhRY1H2W_;sRQg>dCMm:6//1NfW<mZ_O:jp*^pV,BmZa0%EI*dAu$Np7sihkO#?6C>1YR^3-Pp%Ih:?Lh.T%%_aufto.UPB0Ya:g5.FudHB/mIqu%4gVLIrGrlDQ4Gjh34+961"SI2=3WB5+?D@YCC&SN`sZkisNMucQ(!&^`+HO;7J0rR,h:jH5@%ICs]q#Ha<Zr-IV1=s`$bOmY8^/<dSYLrT*9GFbZQTEjnp\h:H+6N@u=rKY)kIrBt<h`onE\6;RT!5SD1WVs!p!d95lqJXV`=>S8<%aXla\=j']74#T7P;+*)L?2G8%NKRm\r&RU4=4WXl"L-p$8HptD.c\/Q`3SqReS!C'70J`]=ro""Eje=1p\ge.Q2dj$PXq%2V#"09%])O[g5A[?`<JolborVBk<#sq6eRLL"2Et4;7o.93p%[t(;u?\]D1%B'1Q.HOdrl_/%ONi(+&3qR+\j4V,>P%o;)pV(31Xmi1J2_G%ZO6:2cY7b[$<%B`=[:>AEIbDV$n-Y("`eei6k:\doI-71+Zop2'mE2IT`bYbC@MI()LpK);j[S7SHD/@!Q'-iEZduM%H'ID"UkPr%"+2UgarCFR#*KM8))t.:T#0n`dBs"tNHPI5?,eK"T^#$4h.K"5O+GlS*1_\3XFU4-^]Y(k$EsXDX9%%-@P_C-^htX[)lFh<TbuPb%2_d:70RaPg_q,q1a-d%m!T#[uNG')?--f1=2`NlnS=O\LI%6hs%%Z;b7;6)%4<8NtgUW]F2U9Z#c4J:I8T0&oS0+8ld$pTTW#;Ok%kJm)Jd**K+R5mtt6hB<c]VJ\%P7jdhMDHGtP%Whi1_3P+)PC+8ONkW<#@QFZd)$c46&n`lJ1=ss5QZJh>F78Y")9>gSf,c90h;JG%W3i3m"k&"A.7JX"/qPn\ohSAi5*2D@oX)<pW:S5jB26&3][/"e3@UQKr,cUArb76[=0-c^O"a/iP/jE>V^J:<:!\qa<M[AcVS_r#%VB%$qm6jo3H4o&Vh9%rIRk$Dna^b-dl1+ZO<fXN9NOP)d"EiP,M:hOCD7,tl%R+[MD'.(^@GP\rj/3e\``7gTbI5@h/G'T[:OT;B%UgDVHnlMV?Z-m,Y57E7WJOTN:\"LHL4)Ji.RVYhK^*>+0W%<K@(KIRUCUU#]_?u`la>^F"2DSW8VMiU=1(7K.:ehMCaU7-?Sas$W%E>ah9Mmie;\KNB.mfZeF>NUjs)*'Y+.cZc;9r.EZ6U)qCT&\e-l2g&GVu,%fD0@GT3mU[n^`KKE(I+VbG^A@RGm4GiCu5K&d05Yl%K5jei8A(/d-CH3'jCj3l8RbIReZK.bDj_DI9!g%uVm%Ilrb")TG=-(QfkDC4=E\ASaL&mV$4D7W*-\$T-UoZo;Ze5oZ=m6o=B.l:%b#\N0@g3u9n,P2D$<_1J-M)l\=W!CRpo1iV>ORu^GigLt?mo"ukT(0@IETt$\u47-GP.kYn0rgdB%)fIpQ,W@S`5?3TPGI5%2q0A%a$*=%#cba4:mq]rTcfd2P1#ZHfrV3IRPkg:Xibr@/$ZOX`3*"coUlO!C0F%eXQX@q9e-r9;UnrOeOh^-<+HB%X^\F"-jJc\c)jfU%8Yn:9J]hd[WH"lX79(riF*/5*3Rm4gUEc>T`Al6V2*9=T8@t?iZp3i#;9Q!b)E(1=6Z!A+]dg%0W:U653K=?_/CaX\;?&_<LBC;H%()Z:&e-2V./S]qcC5&T&7WfY@GZ56Ld3(V@r.uF"P7Z<-=\AN6s31n^\CR1X`h6?)/6[\b/41gi(puD:XbuLLK!),X/[tg\mGhn=%-*X)>,"kS)o?2<1Ch5V%G(a[@a_$4C`):_o/?4>k5$8Q?ShONg9$N)+0e*/u<ZRDe@I$7g09Cn(G-I*JEE;(.`l'@$@RA!Z4;9=t%E0.>$E3P+K'd4^[h^[tsM0nPFl7M\m^5;Ec](CMZ4etqnY\L=jW\J8_385fb5hE%"S(.(]VqS5kDt1WoWRg;1O*P?fJ0;;>dh2=<%h#c&NWib[I)kJ2lq0()I8a!FRhH0p9&f%He`Ps,G.9G3ZdC4AmD'",+8([1FQB)AI+49Z,Z$l8G+'nb6B`[JP5["k.`!he;+jgct%>!bhc88/OTp5m-8;ADZ`dO^Oj,;&CQZA`>K8@FOhqZpCsWkq:NAs-sY&Q=N'9>k'J%49.NfO?$_PL]pHBbeMlR81\F6KSq:TTBJ6%N$r4++[_-IG$>]6?;@7]L&>8LC<u17Z`4%Qes7)RY!K+GZGSYkef(Si>e4V"W`Ic[<`ukcCg2U9$[%5gkUl,T\,$lCY)TKhEg:gN%'6N)gW@M1oZ9:]pLl3gZ'?M_Dg5DNu6n5fBFiP8G1gg$rB0R?jW-<1R5C^[c2]<qVX<1KI?4gBV=ccUfWX(4Z5$?66`ju`d?$2)@%ZE!DRPPnlI?p>38Dg(cuZ5^HOPQB#IB0?e2\7a@YW2lAlEX$Sa%62-r(O530,mCDmK9qVfdM3h2ZoZkM8r#BAC?u#iW+nn,lPL/4%A3]9]&'!?7HAYq7`eMjli(?'tWQ,a^K[Q;#P3"ZmPY4qrhf_0"qRV&fArWX\g(9%Q%_YYnC^jB/Ju0>OA%+koUFK^H8]'n-d,].&%%^i?$DC;bm1LLt[g0b\KJQ<)`Qd$$g$*gf;U1]'[2N(Q=Ad`LGA;D'XN,:iIMK-7DPfRHnN83)GZ&INCJlbT)/m+]"]tjC'#3j&P%f<l+r_c&kBMUA_.N\<jTC,8:hk^%Bl<eqgWVK!ID9=^p/"LFt=gf@2i&E\#>)bX)QZ$'GFm],VKXs^B?C-_S=fQ^=dNp)2!';MQ^%cl-3JYbUNM>i<2aic^i*1C[N16@-,>7IOA8BuWlL;@Y$jlF^iNc#g]5]gWq.8nk:*.^A.JB^IP#)KZjp-,3r3Q#5<KJ%N6O^L"RD%r*2;J#Cm'BkJ?t>E./juT*OQB_>/@qING#O#Nt9dq0?q.*h8i-kNB\WH#S3RS=^&LkJ?t>E.74bK2:r>h#.EfcHh.7oAKO/3'Rr!%c\(i\i;EKT3BrcMFFOA%4K9Aij3oCtT-P"o*lVY&PYkCtP7,^7Cke7^.>m?EOSE'PHGfN>GOLpj*/^*O.-3N9DdQ8/-5k3)oJ/;b%OA_=YP4PW/,OdZ=8t0h'9$-KjIR.=63]HU?MCd"M<,@W%]6/5)<SH1WrGCILG-sel>G]4hBlU5k74#)Td,J(Gb[.!`g$[P[WmKcS%*Soo-B5'9(`ue%u5+>kArc%`'g%;:,S1Z8d1)cJ"-jV7tl)2]hL#&+M[42a]Ud3[n]^h9k`,(8]X\9ba<OR.;7^USn2loB4MF$U-%,bD,`0,.ZK1B=kCogB(f#MCP=I8c^.m%_bQH2"<.NjA5,I$IUMp!:FW/+nb+d1"Jne"MaomXdQJV:IY;VB7R1(7*#"."EJUs%o__%jOUM8Gk6]\pHsu;-'*H(F2JN!M&GrbY=oU.oeOLfbSA%AEjD&f>mq#2<LGXtT/Ji&l'\A\St>!%3K^4Kr^TO\lfA7]gS?K,Oh&.$%SB8rN"0#<\4%CVNlZbFbc;>l8BBeF"g.(>`4AL2lPFV*U8.?<!M^l9m9d_Ah8dX$@#h;WSeO]s6qJ\<Z$>N6YW$2[MR0BVUVL_pY%n=,_mmG_3l5i2@6jkl!s#mI=D\a)1!_$W#t<dMBE&Rc>&6tE6NYb;k_Yo4Ve&>JGu7"H#4b77QqnRC0M]Ns[6("UKD*4[;a@b!q,%f1H;4E2;0kQZG1FC`qqX+En\ceZ.Q6PlYR96"l++N=//o%RqBG8?9<qDcQA/iOi6Tnk.s_Q:Rlic"X$^0up>/$Y*BVNlG&p7*3FY%9/a5JMKDP]iF]_n:Xt@q`%@6p&0?&d%q^jM,p[oAdcDuE9<&IVTq)$*Lt5V^X8@pSk6:/-J['U58,!dXS1+Dj"X)@VM_H>rkb^@Y%PMe2l,0FUlFtRr`M,P//iD[6c>B(k^=h4dt34d-Unujr/mu<'?c-W!BQ(e;9dl>'1_diCg9)VB(q&[N$LH0[Vhc2tX9+milH7%X>%N&)VQr&ofUEV*IC7XpY]H9(,i+)<-&]B(`ABSN\.&l%C.CF:._!18rP@(i,<)a65SiI`K[L/ODBC4iWF>>(0nPV&ai$ggZ/$,i`N%l`'+V7pW[8&<AjR;CNWELm3UhGV`%-(FGX;79!HQmXHA65@8c$DMC`,_rTQ\9Yt_?nenq$SeqeZSB%"I@idG!8&_q9SnadYX(VC\%lBhd)8LrY&Pg"r"!Lu2-$0q:/)H5>%l(P_V'G3f==t@(]7E/c]<hIU*TuI#L9`Hha,$KKn8c#oqoP)NB&$+f<8M0u/g=^/q/FN_\%Z<p@IrRb><g1nUO.a.Q5q(bf^?S_#;,J'U\=*Eq&LIiENb'P.M6Rf84*#bS@Veiu3e=<)!(cjjA&S409f@o346#H@D&-qNA7(MB3%:;4&P;J8!+;I1\7elBO-=6DeS<cEf$?6Jpk#/td_oj*ma\`+%=[>6u,:1h)S@U+%L`iB`@/m41#m)I.f>kMR[ZM@T2a:\q.nPIVj%b][O&,a0etXiYE?p<RlfSET+cj"3+*,&['u$dGo,VL#n/B%T@I4l/L]N2BT&;0Q1n2uI/I:D.X,TbYfQKG6h1&)#@*=BNOmLguHD%S&`=0,Ddt1&SjS=.D^]P\$dd!0T[tO'Y\`QHpQJ!fn+_?I)5slG^I;%%iVtmnec/?+RJ;`cr8SPL%BKO9>4WKfSS3&n7c7<?9j>P%dMr'TZ+Jpr'&=QLKIri_+9G8G-45CBd$LBjNftcdfF2cBVB_9><qal14Ca#aj.9usHnt7Q?%/g%%5IVdgV9'#qsdH.+118q[Wl'?%n\l0ie'_07W0BENoZ[+k:<uM?4;?A%3a(X?"et9"+hD7kT2`5$]!b@B@uDhiqjPTVFh49d1)o_F*LCu;PW+tOmOtP??=8rB3_DZh%>ja6o_Rd<;FEhf4Pip/7(RPo&p?q;frS'utia2;p(]3C<elpmbR!b104<<A:c`K?N)\;>oCAZ8fG3>l?`4#(4CtPrAdWSpMXFiUB%^JE<2XZG39XY^\Dn'Df]ZV&t.D9cU/b0Di7SQYC(V-R4=6'^Q'>e3gHGs;f*`p!![L(V`n40_r"8#R@qgqP!;[U>ADi!((2-XmSm%fMT;aP'igsCQYa*&kHIh$e6e+P<b,e1^VVV8o'CV5rfj[k\*D0JscI'K80[*Z,%GCat^3<-bo9Nd,:V6rG,5P6QeVJo6WCJ$dnSd%=-,Vq8r<QqW2\=`:6_;qTP$\E_D\fr-,PQl^(%JimA,Q%:Y.lChSlm>`D<g<e:V@j\f:FK+c)s:^To1iV%]UZ*02ihBt<1`^1pW;%j\d:se_ueD;J]o/Y-K-Gfajr2!\)aA8e"9ZXUC1aThYJ.VLDLe)UDAdUg=P3E\Y/K:elHWh:eFg@]%<seoGfSGqJ4/GG7.Pc90Mp%7RJLc7spW6NL-.2B\7FS?so^S;i\br)"0'>X33m#XUA.98E>ESRSDKd:<"*YCL*I?c<%$jWo@'enm8`lc"_[-ol(,KGhT`4H,&(U%)qJ'QdH_#!m&>]u1H"r06cYiWF0,=\UFDuW@2G&=79j3O85cRsPmlD,qf\/L>A)JBGBU):>t[fARSm<QZV>";%2qJ>,A:KimFtaK%SY`Qu<,?ARMTb9&7E+a_VACtHG)`70cdFP0.V8jqB8e8KV0u8kR:Y#);^I?9[[C_09fAJa%B$&%L5\"S!pFC`T&V//NajU)4rYe4%@D?\89!7!06X-cuZ1h;q'/l7*X3M2ZlU_q+S?1<<&=O&*N.0GB=UfTdesRoY>4X$+"S(ZY](LI?cLZ/_b,V[BQM6rrQHk(8#N^`T%UB"#Q<KocF5l_kA!*2Sj:_L]q&3q*70O&7e4R*b4294U\di[N7n0`EE3r@=RT.]3]5pOd8C%-=BA@(ObjfePt3Q\_S8%(.o=>q>T%B1O=LXZ`ZRM"(>BoB5VrN?Q8bjl)26cn)H]eAd4F)j,5DCJJU)_\i\(k+TUYK3L:Eo1$rh7CkeYOqa[_Jrl`f$&8s,+OtR#lo,WS%;d3ajT$C#FA(iM/V,E5'[TlN3]$f979fCGI2*T,A3g^:CA#Q^ec@k;PomRJNLbS])1"Y^>O#_E:BWH!13>;GF*0K,A_,[)al3H@U%/N(T.#9N>2EFLGj<RFI[HY)F4Hq:(`:8m6$m/;n04;0QI:H<*-e3/J;"02We)0CYR#9u9r-$0A>lT-O+iNT?5+.b$(>imEso"RCD%/CXXmbaM0o:!,L01Pb$!0%f$KDR`5k31%^+15UlceCUj=&FH=A/<ab5[bT;o]Cm;1Wji=GfS2Id1`1+'>0H;QM]4EkRf;[se]-o@%)FYSiNMHMkZglj(%>oppn#gufBj"!YHZOHtF;WJ]NouXQ9(uGJ#lEjcm7B??f0+8F2g9PaDNJbt';m.Ic=``k;bp\.]hGRj"M7i3%Z%ocr)OQe%8I)XrZ]jOLl:fU,:iX&OPuJrZH*5<C9(Q%/H?_"/ZukjgB?KS4dk/]$&n."L,Md\TiZs!<N4;kDEn$S@XPT66O_84t%I)HouPkc.UY?A!e'`,>KI3aAFEEuJE3(I&4cc`,fd[--r8CAO?08oO^4C]^ViI\5X9<'O"VLJnLVU01WcM_of33W1H!7<qN`Cd8r%E8.bYHuiEn%"?WVV!/6trcZgOlQ2ZcXW+HR$A,j?FU9<DX/WO":JCfLk>nu]cGo3o\i?kE41D-\<#JbL7Mo8O[]\^?.e^a.#<J'k%VZQf20\bdAa&\k7<.&'c"FAiBEAm4TH,fLLR$i)i3j^0\2g4Q+8gSpPBIRX`<Y$%q.@]'5=8nE5M8=8EVAj63ccG8?il`^h7FbL(%1EJRsNI:49L=T)hg6]ZVTm@.;Zf>eWV3rV9]Y%JrlQS@RlVc$$m1(DFaVj^g'1Pu;DT<W?*-%76^.B4a&[JpgBKad_]ZPK3V7j>c%7gFM>mSA[3?fh#biVBJ*iAj]c%@qT'ST7(uhtrT>e9cs>Whh-:1*po6]LXud9)g@b51s36DBgpMA/DT5(g>5<P[i@(F3R^*''6Ho%fi;"C(Hn1MT-qoVh[@)EQ6tK5et&Lu::?Q;k\A(^RT2qCo0lBI2`lEP]:TA)9ER%tWht8j[Wd,-.M<sj,+hk-iggS,<auYeBBS!G%McA9jQ!3`I<.k1*'qU-ibntUOk\=sZh*<I-iUFFKa06HfYZmO8E.*N_R89gt#n5WdT\VTFa*=r.aIr+K5/N<I]e/[Tl9=Meo6Gus%XVsIEQ#<p.$,<@OeUBK#KmZ>K-d.U=g,atrMY)WlrD^6K%JLD,DG_dq,>_!t,4@rmUci6O*`r9gAA,g<@K8RHUO0L@pMc2]i?$gm%4h?DqF:\-0*q%E=gnT5+7sCIDk\uUNQJ0[#F1=a7nQ9kB8,"g4io(s7_`bSdHZTemkT90>I;o^6e@RZOofhEB)\!kVd669[HalST%DeV2dUO0L@pMc2]i?$gAH]P<M]I1M7CB@E1it\/He^"G\86*5eH@j5BDe%T<MEj;)JP89q=anL-"Y$2HMhO/OJ0r.j^PF9[nNTW#%^A/P=m]A%oPddrC$7-4QbX.gJ=U;%VWI,#e'2b\Y$l.bueMC$g!H"Ze\t<J^j[E(t;F97#o%Ma`Smg4k?c"hCJ%+-;\!/MF)B$oM%`MB1U(.Op2<GnQH\<@S!j:i4I`2Q46:;4uNLH/"`__I2iF&Yaj.milCh!+^q=PTj@h/RHhBA9&$hT@%fBsj:PnA',VV\7ugCT_XD%i^jA@<hi,A.c")@+]<WL%O#7[W0W7\0I!SB+Kd\*(6P7>gf_h]UPf35fNOS!$O!Dc9]*M\^[oRT/In;QF1&*tFP#7Mf(`$qmG)32%d0%DIC=s3(-C/.I$qKJ!b0A=f^%fIpiJ#hQ*p]Cs[X`s,P`eir%8rY:EVIYC)i_!dP%0Yn;F#^q+sE:GPW*TC/,s<]dGP<2J8QeN%NJIn_=BhnhI[4Q;+g*[Fp/EQ<Ss*/P:Qb3]OBtq&AY/"QkVD<^lI%4aNE*BPF3U&JSrV1XQg!!l2(83@D\lTk6?CBT6e.?$4t=V5%-)4I\d!uC$Xd"@U>tVgVpf&1YT0A$7(4/*`;_?*SUN'o`FfGJQVgjV5+np)`B1QR9Q6`(Tj!uiT9J&ETVi*mlYVC.1FL4@I)A7[W%'?@1MY1cC4%\cocl0!.RqW[2>lm"thMb$a+L.1&Y#dK<u"Ys%-7Go=E1.$&^=EOto8<CdI^9qf,(p/V_dH)smTn`W/&qebk2q9BL%B7tdk8t]<?`2rZK-]+Z<3Y&FW,fI!Ydb>X>B05aj^Q8+6YeF$67)H"0IW^\*JgaYM'AXF%OqXh5Le0"Ci9Vr:Emb_G7S$-bWA@aL%8u_`d8P8BCUsol[Bpp\4*P,K7)t&LPZ=NS*#t<-_0@q3OgHHW?p7HuGJ"NcBL\qE^S8);'<ZVj/2QS9cnXD0.U*"_2C;Uhi2h=]0%@b;[3'm2q':Vp-kQpfcL,jK!k"h^o+@Mps=2l\/4m2k=?*N9oLqTdTL.ku$]p,KI.iHgJHZ#:7_fr/(8h:]IIXBiCCXFCse09L*O%S7*,G8`pp:5W58/4J=R'I&aG`$K&'(98fFnaC3W_e0;pK4o)!McV`kn/O*83YSA<`8IC1^3VV?eX7D?_Z7oWhDC,kDMWHI%iD#5Y%;@(.>l5\kj[F?-33j3V4@[W;+1?V*o0<sIlXI[nD3fDa"<a!LhnJlbEPQ"LW&"Q@rRmca^i_;TC5XiDU($THM/ZL)(%-8Ki8htZ^%/EmHd*?i'fcKTK6a*$6t;AeRj-)HJG8W::'MhdH2YIO809&*it[dX-(do5%#Ro4]*Ks++:^N8i3ILblFbgnnH,J6Vjf&#bt=m000%>I;D;\G[l)C/^A_Lu?h"jK%U-2fFhGF`Yq$nl`?-:Gi,WQ.'m*PO:[b"0>G8!"OKLLFs:u#,5$=KU`YFbY"1>83b*V![etR;Q!G2%Ec+E7,[:\?O;K*s!hqXs%[`oNM2K3%)W#]c"U11-',3VR_*JbVKS[>$53te;_6+i+)tp:qr7.Q\_oCYTE+^'Ffa[FM.JEJFQR@ce%4NgE4%Gk/h7p;<J4m;t8:o^sg0Q$%[.NRc5LJTKbL!$rgetou/%\h*#hZA0%4(3D]/aq&;6fZ?h@@<-,PFlDA2%YO(-CQ]Z1Q!b$%O22jWn76k+kD5ar0>48RmZ6?('Bi>K7,MF,Wu0A\O/W(86P:hk_I;d&`$cgTf+Itgr'ZC93b$3bpFbPp&T0s`;8NWqVj!%':-!AT%Ih)9,K>,O5n&L1Ta7/QZ>Khj(^j@6_eNc+oE%lbK![kYI-8uQ_W%/RcdZ6n1rqWAF5LnI$I=o([BOI7Wl]1II$iV)+,2c>7gQqF#%<J<SO3@/$6(i0S$eOjhc.ceE^RT^I2=';;]*j5/M7DBu\4b"4>FEH2)B:[$+1S(=W'R(6KE9jCX-s-3?[]?m^Kki9%l:J2sZrP%N%4f0u?I,BT8AmhC<.U\KAG>2pZX)"KbVUd-J-A!2B9`VQm3GoRkP0NKn-hJd;^Zro;=k6AHINdQlD^/D);0')((A"AL8;MGlaAfDs%8]A9=)?eA-s&=VR/I!77NeDQ/c=8nrmQKBaCc]l#WgfWSQfb(?F52''SS'9F(&pA\4DjPD'!f$V[P3/J5-8+=8p]hI\mDL1l;jM'%[U!*cat&lN8?6L22]D!tX]@j,DHW$:p(T1g79cHic>WhP1<,MhZN2PMb%iQ;X1+,[!8u,2[l<4%?/F@DhYd<:<C)_h0</qTi&@+=%q>U<kIW9Q6P\U2HEUaF`,_c;al9d8h'j#`k.HEiF?nQT^-Q^0cCC_Y9Ls/@Dqt^,-n^%4;+9*:1^J<#6S&p0Z=$:gJiICk.rp-t;%?%BH<aVhnjn*0tbo%A&1#eGk2q[P,MIYQa+ngjWU//;,6^KIV6b,7[*]3J6K92XVPS?+MXY[jQ/-bmTKr%O;KrSQ77m&=p$cF#7<%*[u2Yrs\le5NOA\')GrO5Quu1=qs-]bnQQH-40q4."[&=g9u,M#W&T7H4Xk<h#ZIRU4rS_kd:]oBm;)3Rmp+PX^`T_]_Jt1=/4d_%X':qsgNGk(p)T+'*!jD"]Xa\_FkOKNKeOa]V)_I(9R5cG8GEYdB51E0[O]/!"0)hb3PM#lfV3P8$.aAp3Cap[YM3b*Ru0e;>A+j$%_RU6:EDik^(c7Oj`D);Jpl[oDj4tH3N]`k]deIMj?d@^9Yi&0Yihb'pf1\L1p3<+#Z#*%&ln?KRMNqCpq`l58NBGKS!>@l?Wi\%W%OEUuNLX64FdQ2KZl8TPe:MD@CCqh%J'+s;RVaFQ"(fBY0D01=ZI2Lp8XD@Jarg4uglYX68P`ZmA%*0*N/l!Vq8h[CFDcc&$?oO<k%Sq%ENg/.E?8'LIZg>ZmuUb)[SGKJ:G@pqH9lUH*\*G5o?#(%pt]_.hM,><lLX77$^atjRh*nS/D]"RRJW:R9o=WWWDb6(i"G8=8k%f@^eh76:rqCV!^on&L^J(1Fu]YY0s/0U@&,GjE:B!I^!4P'Y#>`o5DNb]VN-2H75I"6:Y'+_r8X<N`gIThF6<;%0/W%!5F&=:RiW%8VFW$_dF(]]uG4b/[(6g74*e/k3j=<6,!lk/`Y4Y*XE+<kTZ3i:>F2!$S6J#2'#Y[f66mr+bt.uTe)C*`?ssFTS'MC/V/oHoHA4:%Z4fn"ktL"JD<Ont&J=l(G6iJKODJU2%dfZ-+ur%bLF@Tk9tXBF&/,'Q`dS"GXWo-O*Ns/n,M+m0(5Q-:FOA+/R>D$><P`cbNL;]=%jg"(Z6^A@S2E'(hc%l.gS\1`H0BqpBM=-_(e\<_fX"^ag>=P/)5/"#*&._i6=pXFb7"^Z[]7Pf\?8Wum`;p*##TFJlQ<r*OdO!f-%KNI3P@%"THLQoD_M7eQdcmD?I?'XIr&Y6)*<J"EhQ\SrN;HF0N=#/uK_?QG%YeVqbgs%6Da;,f7/n_+.(Oar/@+(Z+Td)mVXp`kn%PMF)9qsAO1T\pR:eM+2jYd>HfLsP]PC0t?sKnu!6[Kg"L2L5Eq7YO0Z]<;#.Ub:2f52R8-'##%-=[V/&aR40O6W"2M)'q9`Jk=e)%JbJ.fJ#c>cQuR0<QH^,)ZA&MYAp3q<n\);nXL'I)=k/]\q"OMiWs<l1(62i#7^R'GdQe->hgg(l#G2'(Nc>NdTJ4u;>Ct1I@$h,"%RKtMb=TM9Wgr/W/LPBa^30@6'\b=@sOmF!c+HhOfQ=!5I8)QkQMn6)[0J#/80g!]X^Bs)[`@oS3!r*ABE,FpOFTC#i.Y9gh9a3NH%9'@t:gU:-;#ajnIhdur2)>#iEps]VB\u]]-\HU@Z1]a@_B!>>QWOjW^b?ppe7CnE)9+7tSPnVM(cRjJQncStFWY,FCYY"$5J2)f!%iD=.JQ^L=SL=eZAK/n(VJ]2M;d.)81!_2JgK0sGXJBeBM5StpPdi(Nek?K%[YfqB&*LFt`l(uAUgUUNl:ZKk%LkC444CdSu1<'tE%I2'%V\sXIc?'t1lBUCQn7P<uch!!sYiIVNPO28YH#,;TN`hUm/(NL/uFkM=6f3!J<TRI#5T#8@t!i)W,i7fmkm#748<eaYa\UddS%X%9*?@KROe4tU?ZU)rN4E4!E3s,L#JKk_J>Jnm#ID&Okh[?hp`Bi!t_?IIp2dD\V>@Vm(-_G&R5pT<N])RPaNRuhJ`!t+jWJC,jc%^cG!kC1RRi_h;&b_],l^@St>J#VBm(=:)&t0NZ^=8#&="Ll%QJD%?WuZ4fK`DRcbX:<L!H1TKSs$erU?I04CQ2)eDZl_st)Y=[0J%kF??AB=/D#2_OJngGZ@RN>!cRP\gQ%>\]oH!pFCPi%VJi#YB&2gi3=IU,":C5Rgh\BFc;K1ls/W73j"EL23j"#nq,i_Wdp7"9G8!%8aSFKZiIM2Q'l(!`^W6:Q$3hG@XTI_gnJdRVD_at`Dc*d>m>78juZbu&87um)kgNXBW(q>.p>TXBS><O9r-*TUCO0=)(?uG"2MX9%)6hs'*jjdXhL^+,`*VOpWI>42&7f65+_S%l$E@g5Q5*ffG\J*)aCSn+(ekqM3/kMk-3BV!YZEa1=0EPd\unfH<%%NW_C>VFi3m"u%0LDMpD1V,*':()E;)U-i@hZfi_$D&8XUnr<GObM_?E>L%%#p'Ab;KPQ!`?b7NJmk"3"e=bhLhqQ[fM+45W/j\d;cPW3Hr@;J9^\,%&=bWk0Ertpa?ppL!CPS1Ta'LAojPa_fu_&BgTWqtD<U@HCCjXE")&+9"q[;j-:E+t_9hd3&OSp[M8M[gM/I=F+L=*M(t7m)Y-YY:%KGE!)Na71%[7sL6J0(pk3T5]`C178NY(JQ]4=YL_1`$CS)4(i?lb-)Q$W2IgP])IS%n)+c6"lAAb)E*:"G*e;L3=RKChCf*-ZK=C%[,RVf>3o![Q3,<*+h`eFNAluFZjl#J1ggcrH#"'l@hO>X^jP:nd+],p(8sk=gQ9hSG%tg>hFqCbD;<?P*G%!TR>i5#UZK/N?7DgC%ooXP*bsb@fBg>n"G^t\/O!GEjdJ>Dbnk;_$fI0#qCHN!a('q5="bmW9"-;Q3%<422$=.16V@]96Z7S_V!*2C*]+4cm1?#eRgk9G_%9-=H-mO"TFPIr0J$c0[#e7]Ta=pP<Ihhr>JF1Zr_8Wkkd#UlYUD\ZaNS/Z,ud9iL%Q)t+]bcRVj.h,lW-dQ]Er.O^1VO#c[7"8AY%Nt="`ZoRG9[7OIf$l=Iq$#^9\Pu^mo<mbG.%:iY],'h\:&h\e*SUa</!]m#Q"$Qu;BR3[I^!n,h$UFeiQVpNsA:li%bU0Q&MT2L'%Cb69@K2d_$8i`QnGt(cN0/LDBGkqFmpf5__5sPu'Gb1K#Gu6;J<ksin'/8oFMY`,/70n'3(Q5;H;d-Q01021dY6VkXd7$_<1o`fB%-`#4Rc]""@M'O/Om<THiXH5e7;#qT$U2]BbhHlRL<r10Vg#>Jsl"JNm@UL.YMNZJ>:'tAO%0h@m&0heM?*,(K>;,:GE_dA%ALslm%_dK_%KW%c6C@7B4MB5>gg+ZB?9pD[nK'$7?\ZDugp.!PDTTO*T<Kg!];\P"MQ`I]`+W72GCtc=`]"kS\/m;\!.hjnA\o$9OdaP4@%D]#F$6@lpMA-=EVRk_!uJ5(?X@j2OYb,Rk[Po@FqQ?HEa7`)>B;['.V>'71fN%B,0"tX5R]SnNE\-ZtkT'@(J8-YMPl3$>Cm]&RY%0L>Ph'1kG(AH&>q"b@fh2p+`aWS\C<#W'DG*r0%bcr&pn?sT^;?LbsA<2(1ND%]@W(e$`l:m6.Y[NlVd""^STd"6-d';J_)!jL<D%d`[_"f1h_QL`di9JuXXA<#IU''p8_U<`G2c=90YZgNq;f&Qg!?5A++[Ddg(W2G:Y!7>d1c#I\'/UntMETZ/@I`7;a",3qC%YZ>nW%#nVnZR%U_S_(s@`8O4SBVfj;V[R,q*1uO=#Tk6_PKL1*J5\Zm*A\+:uUL462Q:-u@'W!dNL-uKD+IYj1RB-N[/X.Wpeu>tG6?T%F%*e?RHX\6`)&gRI`!QTKu64oaO=HkaX?>Uk+=qQ9/38%m$?PIDj#bmNa60^hW(tWMdACH/"YRSJTP/h5I%4Op+JkRGEO_FY;U"N1<%nE#[E0fYlRba'r#,(\4_23IMUbU]*PfJ!E(FqCF:f7hGmS-,V]]P0sE6s-!R>K/?GNo78X,Kj`!hc[bs[&e:>,:2sHH8X60)/)?(%T1u.Q\t*9&F/`*lZ654d`70dCD2UY*_Fg=a#)7f8aFm.*6&I<9L]^#;8#'r?/QlmT)cAuq;+>H$P8OOhRE2p(VbPkac3p$D>b-fg%-s2>J#f/g(Wr[pG[C7Q0MG?WM=hs?tS^?d/\JhGs@P'jGRB-j2ONM,B,?Y49f<el:=&UVH<jOAU[6Eoa=Y#F?:reYm-U$7I>%qrM%KrU#M`Lq'8:_r7W&(l-NmuT*#NX'B*5qA3HPoG5rle=`m,[cgHY.>?2gqYO:Cn+ebUu/Yh(E5eY8AE2*PBkMkdk`BV$2mfETES`M%l36Onn,VB[0Hr35G(@ES&`l!.fqG@)(--+E^kH5h7Qgn.A<TH"8AI,TZS?3F)Q9@2:ZR->:U_`'MRH(!TL6Q8A#!R16+Jaf]ip^f%LI.Ge$8:(2C:7@ih@WW6Y0]k+VM="[4#b8"!T7XDaI&=0ac]nrf.AJk_G+_L7n\mlhtLm,C+inJ,nolm!o!bIFsF)d"&'.`0t&4W%-H4ZIae#Vg5pX)6J<B^LCDSmccqskV(3!`5;.j9E/,bIj<7\*5NJK)/fgW6AE1%th0D,>$7XqJmae-;;r;GM7T;#-OjQ:="UU\Fn%(nhda4_Zqua3jlU%l6;djdgpjUk#gVoNK$#%Y[+LKJ.u(]&4tjfZ5,W7TP%\,<+A%)e0NgW=?3C;s:??h*\Cm=MUR?KO>dZ1'h\F%Wjpe:-lGQ6-a9IF@&"k'&J-U1-(mW:2Yd-)>YkYCV<?:/;;<f9c_L7THf7hB6_Gbe8S,;i/VDaWgKIHGUS?Y+^_UE"#](G+A[Sd*%[^omL%#9`p<>2.HZ%/o[F+(oC!!:07h(Smf:DbKT(`XiC@feT>>r:>>]R5F!&p5iqi6LZhco+12^S9X-JO(aL/.b-c(Vs9%/F#tB%(q!0AikYg'!c-s?YYIb!=J$A]``YR1EuVJC&-N8KPTCB)M,:6g.>j9H"7md+(N9LHN_CJ/q3D4oS0BfjH^n[Pojm\Odu5M5,@K9U%N+$R5j,Ba[7lt&Jk]`eF!K9CDPsbqFJC,E55R]>V?u&_k?lH`54>A+:!mm&-J<mk0?<JPh$tLSuK_dM*@sAJ8KtU;i&b3D\68"S*%#`>327Ti1Q6)&%h5,i')BQ2r;M"I/T5Qdi>5UNN;Ctk8,;>Wa(..G6%SnhF;D?+2?dLrKZn]IO)7e>s"-8cCW1QRi7)q?L-m:ba]%G*sRPImYgTZ33ee[^7-O]Ia"->@[jt.naBcCJqdiaF8<8DGn(I@jQqU?lV<1UE+oSL]T%+@J[Bt?/EXh!jqj51Bp@e8tIj@"t"mQ%O_+fl0oJ(Xe;h>K$b<lM"_katXGrN%!]lNHddVK#"k5gR_C=3M%A:D>XWSjJQJCIT"RC:U)FG\hosXC1&hjC9ehZ8Vg_gr>#`U>Q%0Nsbn$9Ab7q$b)K*'j_eKi7iG<q\_/J]KT+&D#bg+-]X6%=nH+#as+S"JZ/PFcj+-+S#b&9Fi7j5fCCA7!%p89*9FcNI/H7"G'#R%?Xr"o.`jihCCX5E0f4e,^mHMQU3>q;9PabK,?r*`.:AcpLJ.[ZAlGRb\,sO+Q>'3J70&@H:9CrjapO\MP))@3-kqn)g;j\qFDSUS%-0,9'22U'E7&L"jJudpWNKG1mkYreF%uni^Wg-X'@[@A;TNN1`:U!O)'2rXTpk%jC9dHT%73V%7VL8FITt`2U6k':iddks3Ym#]<%m$Dt$j$.!U>YZNU^?0U$!18GDYlbmT=j*`fV2=Zh22UbV/Ci>dD;=5:]&]ND;a*&M@mkPM%D<0<Uo$_8%#I+17J9&SJn>^IU5bHK%`5kCLK!O!t66-LY\fc^T5enf+9^&Hl;l@<ga'GWS>BfiY21R;R=bYS:/?%Rocn%On5T?M/R-$g_/="r^8RbQ&3Nud(6oJG%YF?dg%BCSNfVmH%?*i5iQke%/n2qk;5W%gsmd0H7H9`ZUu2/.C>3;W>nELl'ohAI\>6\6C<ctHQeN+JXdJ9%*seSp#10c7UD%!F`gP@S5M%rZnrRcm63_D:>A*0f9?6Jup&[[8,)?I&IV_Z??eng,,d[W0-2%+j`Poj4(GY'SQgiCE_oWdfjG:DIT"On"bDEmEQ8A`("lYTQtB*%;F/tpb",[Zj<+o]!q_?H3&X)732(S=Bq6ugou^oe$t2C`)l8Ha,bSm_a^_,!2<u[9Wk1)aer+2AYE50g.iCdC;B[n/UBkNG=ggT5%!X>,^+:og_<f@r-TEm:QG3Atb#)K-$YYe0,<Qbqi&2G!^G\Ng.EAq:;/EU[U'TZK.J;js<,@<"r5]\1eJSgnZ!5inm/fURlW*>_4%KI>Ll]h52NK4[?kM\)V>4p%-R5Zn\unXp;k`-?c.X\o8Khp7\2'Y'u9Fm:POK*YG2955dD]4O?_L5T(J#(f[iX^]3Q!FbAk#MT()%JC,Q`M*-YB.MAbd/6Y4DkZ_P-Ajn],3-$=YeYre@Jr^jY!=rCOPlQdLi#:]m`sou'!"^_p7'(A@>G>FnM9(;qIETP6_'E9md<s,+%^%#@WARMn.&[:f)3\sI2hNCebJtpqb];;G0]H=-3ZE+G'Gh/'e9p;#_6tJdIin)6?FdhS\K[2&%l;R)G0,h4l[f#iT%Fepq\5AHM%&0?C^+E<Sn-h`FrCq';/G(CT?@2r"AehU]Jp2rg.$]Z1QH)r,-LfP3\]SR(CFA'K5dBM;8=Tf,[:^]GT&dU%&>XGpNV?Sm!fJnPW%RAh<2bP&.tM1#RGRkJE*J2Ze_,`<i\WD25@#W-YD"/,p7),RVU"c4/X<,/(#,&Spn/SlUdH3/H5@mc1.>m;Nq)LK7p49D"ZP8qmX%ZI"9[Ch,f(2efY9X:U?EH3?a$90dDNHIgM0hK'9mVu\DP;+,=H"pSQe"VjJX147H7\"X.BkR4W#`=8;9$lYgn(duYD^o4VN.ObgW%a=9@"gfl/'U12a5Q"[H:@ha*dh[3;=-]88o[8=#N:nN93'o^O+832?./W69HO*PgLQIMCSdDj2-.W%;.jWV!lr]1+T_4?E.j"-XT%V5+EW8I`JLP6QiLRik0j>Zl/^'/2n^A3N<PfqZT_F](+=Y%N@1o7E)f<`kniWP3.JZ:U1SDZ]#ei-01E:eqmJU686lTIu=f$`V>f%KB&4Kbc7HBYI.c>-=a&A52g%XChlqTdH/Y)JWLO.?&ar+.$#"F%RSS&\aJ+#XXW\7m!o91CP5B-2H=0rW00lE=XA[S1u+CQT5@D!%(5-1?d@ttFd7u!Has*f#1pUfNjAqi7d4.q^.eZ+Qe/0U%H_;#"P:6Q;79:k]$`i4l9U+D,]hs*+.<YjYKCi366kGdSi"18\7,<^D%L!Id_7Y@):JUfI%P)*b0Zim$;>6YR<Ma3<\>,Q4-gB3!r9+TYh@5[;lN!A"5#,:^\?A>iHN59@o4JQ27J3FgDI;GrS?n4lVF)24A%huu2WB!0_36F2VCZCF?>On9d^5SgKj8YU+@O'tc!Y%6\rcm:_UZW^etBu*W=P-iso/+#)M8+P,$f78:lf\"Jd/_^0"!S$P5h(3m[%A&(8f-/qJBdP3X?7^NiXC[A5u:/&OA4\5LnY]:M+O>`oVoeHJC=*D!;::te(?YdWZ,dI\5@.Cf1=btGI]::d9[IK\i$H4<a'lF]$%_?13^hO$[Ib20Jk%)P[HNU]Z_#e\Q=Eh@BQXd(>C5lcH]*=)[?%B-l*@44#F&dN)K[i-F@feR1\SJL4e,L_oHElVc0.+m$@p=$-9%oi5HF'W+:6`.]FSj>Ue85+=shP/.Wj<]iPO9k%G)1C9Rs/pGmoiU#tH3\_T[)Tp64(V9ea34<Zrjc4k-)iX>m)Qec8,QpCiG5u5r%J3f,>?p$p)a=T.rJmCk7[cN&d94Ea7GW)<kHAQ38gPF-)#@A<!lntLG2&jKYL1$/_Ca`jOer4DV1IXr>"m9.H2+!W=P?Np]&R/ck%NWeuKdPd7J#[ef\@Y(he)!otXgtK255o^suLg]7sQDAeC`CSn;*6%-T6X`hm.n`27:@a8'*[%\LrCt,1&X[/+k[C7k'S]o:Cq!pr%N.F3&$u"=1lPf;G@ED[uC&eVP'^I$1F@#UD:ET^eZ4Cn&E!/7.-Pf17D`l,bf"./Q?4K>GV5J$K+ga-j/\"a/[Nl>Ee2ENii^F],%R*&,O8^+&^5[B2p"Y_IN=_>Ot.4lJnl@W?MOjSJY=+E`s(ThKDJmm'F.h+"fc;4X6hHL,!g16.6,ha-!maJen(g:;OEdIgkRq2\B%>Xk@t(m`2C(6^#J4>"/a_*Nqci<3Pe'/`e.WtC_@[E)pX!ON9XQM8U%SLmBh303Uf:7Bi!)O:Ro<c/AIQ2kc]E0R^AOE/O9pP+gJ%(06?f=]`]$Nm37Xbh+?[H0<-2/+OQ8i$f;0`ZXRa`!b0H1.NRn/Ot^\Kc34sVJ%9LM+LkV*!>(9^PI+rG*>e8SnUSca!.Kg0?uRo%^kl)'f_jf63ma.9"#lmD8;L^aE,9,sd=ML)?dj9>RTfD9iT3P-H0#XV"q]Sd1^R^NosOPt+sOE("/Ai9KL^,r"LFnpB+]YPWA'oc%Po*%`"&R['mqX[[o6e#F4g&gT!86;qP$6o3@cr&$jpYWD%a&7Eia@tP8?nuZA&(946*ot8o+iN(:=5KBc6W]9dkklB]KkgZVJ&kI%:SR*'^:H?HYnuGKX(2OB+s5'*EunBSkg0T+g5&*joSf&+!.s8XgIpd95P%k2806+.$Yg$[iJX-M>GBGDlC5.HQ!f?0GapZ2p,iO*%8l%6AN#hCZ\L$g-ASX$k"P0T#Bu+VL#SU]tKrK_d2'?anY:(G/'Ej6+[5HJR'MmdilsodLGb>UTo*R==>pFqikk<*47$*]?T9q<+%G"0Bi1Er4BSe:!]"5-Er#!?^pQpR&WLhEr:]m4gQ%dN@J8>L\sJPI6,31uHHUaS/9"7tqmEA(W=.mg^@(2Ju/`C1&QCesV*S3m!+%W?*9S11EjuQf@=GM#[RTn8Ht]W9FYa([i6]P8?\T)3U+1M[3l&5VC5u@Ab6"N"?aP;*4id\Np:-j-jI6*/:pM3BOC5<&SQ(<>:j!%^,haqI$On7@?i:A;[,F;3?J>MYUJ7*YYT(X<JC/I_8]#K#n?ANalt:#5Wjd6OBSHC.Z_C;Y3_NAY`eLpL+QU8A1P&[`5daF5#QM0%%_s:n[:*OJ'>FZhbka\r8+qcc:<dQMQ8&BZ1Z$>/K2(_O-cS%$MW=ou(i7!oa:,saYX(eM_02#F`[,-.a+N]`IG1-K804=dBtTHf%`edoFA0R`J\=mk**#WKl"B6kW4NfF`&?*HQJ^(J-JCGnTbS@^G=QSSTFAL3RN_TgjSh9>A5u$>K!#U;=3h*Zi6-Te:b50u:\/I9J%HT[H.X@P;rcs`]kaP2R^j*a8*3]ZE.dC,<a)%t-QnSB?V"bK)D$"_%Al$X^?93>oPr0MAtEOc=.f'^JemkGS=WOHQg&28mm7CA82%2f'@aa,''Crl-?<[O!7)K-t2hGd5pQjRK0iZ9*(t+op@3QrTfh7iS:$IE1[kO!KYE+te)cB-,JV;Z2]Y6H+fc&TV't[24C2@9G*W%VDOSDp*"YhYS2V]0WLa;ME;7<&W,M-AW>(#BU.YFOg>oaLp0%$Uf6&62O),a&uFUW'?o.nAU2`GkHL;7<"!D*CG?2cq3"t,G$YX_%`,:uRH:V@J/=XQ\0be"u-).8=d.(,XXtN:L,+-WSW"BE$DC%[hJOXtIQ(YG)=F`-U8Uf,^XO5eiP!OeDDpP\NbeSV+hl9Yj2)8AU%c.HV5=bn4%+upouKl87?.-_1DhA(u'0b-@'0IIPYH1S7Cp),;7bF^N!G)\%)+'Xb5%ZcS``MB*1(Klk23n29d`_lF"/e60dN%)7#%CLJB\>@F";h%VRiTOoIUi`"oM5QSF=_t!Co>=^CEmN;_)BX^Z@9&<n]eAiUVj&]VY!B/XYALFj19Kj=.KQ+tuq.-EI++-oG_PB>V%U<We0NB.]K)OP/[p&G0CDTMo/!;8uo'YYPd1=7nm7j*+^A5ZF5THREKhF$/!d*U28P4nrM-Y:=G8NAVld^;I(K.7ih/R,W%XD)1_%]V[FcgPR2Vf_cC:$_U3`e-o$H0KV^BAo+$.%)Jh*P+X9?[1S.bE"96iEd\U!-oa^7@BY8NUPcVa5j$OH:JXL`/.*-n?pU&d$u>u5%TTLp_9S\4oR3Sr=A\C',XN`IMGcWaD:baXi(*Vhh,sE3&BH]&Y=/&"ae=r+DQia)a*4)F2,*:"b1g)*9LofiW)DN]"B)p283bgqd%1o9$b'/p5pi&fU!$4UNa,\9u35d(fa$bS]H15hjO+D*?EJ3q<gb\ej\Rj,7.B163tbW0et4YY!QX,)IKDaW8(juBMS$'/UYotZI`%9%L&M3(d9Q!gSGG7X)%X^h1m2L6#`"i6ar$cjc@;nYF539RTjoKSRMB6Im/T+C_QDN)!>-W'2-n,bQuuQQnKDWu\GPJ2+kY2it8Z%B:ngLrf6/nF1<@o)^@(n<`j&u$(bUhg#R\VSSUX?_QbA'(@5UqbsRX:@pG_d&1]k<Sd\+T0mS\T1/gk%Df.[;RCppV]>L?c$;Y\1%mhpa\bDLq6<ce&A\>U#'A6dO1+O0$K<@\cPcdbt'=<teI7`*S`631f9GSuiW(Ia.Xi5Nd6;ZgloDiGq$dX[j3ini,!>)>G$!],NL%`\?p`ii8Ci,DmcZ3n(q]IH9rWZma<n]3;Emn-P!U<Zqp47..L\</WcHRt*3M1,P1k(5]Yng'T:5/k5f^H't,]0Q:/nbdMOI1=1X$%)%AT:L<ZSD<sd!.F.1[MXftpP95J*s@$V"a:<2jAhMUDOb'ArU1Ba9/M%s_I8''1H%pSQ3`JAH$Y%YDB8Dug;Yr!RhQU-Qf0oX`R%WNTuAAtW)%TH*UAqL#"_OSaX7_a[!I!\ml<JF%PO?tRS6AP]%efiIf;X5pp&[!i:8b/EEUGmLj!KJC.kUiU#h*D+)l^rN324hu,8%iWYOeMVur$ZTq#-R&9A8_K8s1GY6j0b*`'VB?+T8-k>_WS>_5Gf'?#XjIBUN3\:H)m+WB!a[D"KCU'\X4YVkK8gjUr\o0V:?o"F_%Ed#g-PAcT_R\j1jg)Z1`:/V`l'2)`MDF`8V!bR;2$4Dm97[VWW'VA_4%5CBTAq:28@ra+UWnM+&!RhWO;*Q:0D</&K.qo!*kr_=T%c3Xk2k.rlGE$aIM#V6#:71N;&ele6<>G[7$&QkrP/MV$:d^?b2U.INse24:tV=dT)<'jPaAN*5nT!9T+kAG^*if;&cgT9`'SL<8O%+,\`_/qfMoik]V9#WY.+6nN%@`=[l;&G"E1^f\;PTL^&RUpagn$*m,Zm-\E]M?f@JSucfYN!)j^?3gUf@%^)PJcfQo`MD\Gb9SnI%D1]/SZH%S7$B<TA8^l(@BH!.YPXo!Y`]K"_aEo20)g!j<'`*J0?affaCqA'Z//g9d2GIkBVVkLoD2DR"(-F]nR0Wq<cWDQYQonu$%bg9:%CN9sViJ/Q-5eMuG:Q@G$9#O=&qFI_>@kH(4R"SN3U%`)i!N9SOKej420pi\Q*!Ji8U.[H_/X*tf>"k`cUtK9?6a*elH'H5h%&L^31PGEu*lC,/;Vo.u_!U&)]*.oP,N'KR:lbs`uIX1+$^+riP@0@$l6VH]!"ro&U5fd@FD*r>!?h>HMaOqJ-T$&noa.`*Lfo(p,%^fVgb!Og27KL=^@_PdbVlI]iB^q=TM\AaqZ:sEVhLJt"!;gm4A>qK[D./7g*"3/E-`f6'"!\q)Vi"\nVDH)Lm".i7I&lA+,8"]AA%`5ift9*=0!Zn+NuHDM/r<XV7>qFfaMB&'Z6QU?7K%Fc_5QdE8[AL(A"SH*G/eQQ!.`k>4O4rm>kM:u1#(e_l/(`*uT7QIJe`-E;L%Oq2@r+qW(o"P(Lc1^'#eCst\4i8n90"LH.2H6k;J[FgBL2'`MIj_DgFUc:gP9I<1d&d-k^-Drfl;3N2+>Rc"/%[q;LF7tj6i>"e$%HS<;?4W"='ND;GYF;D]pC_"MR/e]M70CYr`#(#`Lf;93<.2!Y`RiV"<MZpT*9anYs_i?`)2MKskfe_%I7mM!($H+BP5VIf%:'#=d%Xqf'X;1*i1aZ1^7JK,GFYj$l#V^Mh`A#^"Faq=K1#QUW>l@9j7`B\dD4.'L0$YrP9<AY_@T]tGI)a%8eH^/i@;8ot^dr?6cN/S(Z%=uh;T*k9"BBV`A4M8utg`)mW(1bo,uF7V,baOXX75`on@%ZEdIlZ>g^;[a6lY<bA0)RC/=+`VNdWD;[^69_VP;mJ_:VV\0S33Fb7%EGsk$Y,!I:]XMcWU(U(L'W^PcZIEH*iJbV>1l+8a@b,ZM1a%qR[?j_dEnB>c9eX+'#,8l,F2+j8Aea*.`T,>3!=Z\%MhQr4kp-sp%fb8nX"t5??"aTh"26+HoGg(dY5kC5E#ru&>_uhd#'cSBS&`eJG:DqM'f[ktu23PtqB/DFo1P;lB"BfbGXdG'P?aMmLiBo,o,q8os%q09(rNaBZb8Aa`42bU\^Kp]1u5,K=N4FeD$Nk'jZTd=`t!.etWbsE+&&/$]l]F4=aGS*5`;G%L:C0oZYrt)E<AK=[?%LXOOqV,uA%UU&l@OQ8e$\qYgl!:5jcK5$nr,CGosZ>33+:9R7p/SZqF0i:p_k`TAs-UV]ea[aHo.nleja[G&clpe*Rpgt`#:m=F.X\tr,fDpLj%P+>$/?d:e+Dj6CjNMV@!TP6Ac&dRNP1<0lnHg'7%9SPnd[rl,.c_3,Ag8[Qck@jeWV@aD7G4]ec3*T:r:llA1h9`8V"LdR=#fil6%lYd,+k,oj]"c1poAAnan.(0thPP)B/Tj.kF&l*+=LdjpJet_Q\8HYj_&i\[)=hQ`q)-TslY1k;[%*Ds2cC!)fS`1mHb=+\)6:>n*%:t"HKchN2D9nae7j>DRZ7RARC.mB,N\9EmIBuNSOFQ3L;Z_NH?\escHUo_N(Wtag,gjsb9)(T82QQeT9`tNjc7%FC*K+DDrBN)EI%5)i'M.<.,!$WBWgQP_1rm\AY9\RQIe&6]qj?,FZjV'K6FQ66?L</M%Q!ou=1ns>6N/q2"g-6plG&+[uNKm<Fdd]XXnU:<j0&G"f^%Y*6RA'19+l`C]hrp<$qQ!c8#g<2F22E\*\H#t3aukPR%s.QRIN4u(4!PCqlTi7jAckcIeADfkNk+i-3no1&&]fl/1k\os7h$bnq.%Fj8k2&scIdR"lg'TB2:DCpIm#K<X"0PPUTa8R3B?'h@,$#C(Z=/Z7m.%GrtuBKfp$@*X9oi#q87ihs-A7a>HU^e[Z!V`u?`T@heM%>$53E[p`ap!UE"e6t\pr6a0gdmM5Vm)L$85JhH(8l`WE>_F8d,OdEQ[YIi`.7nTpdTB0"u;'O@]+7)#8p/Uc(hK&7>dgsHF6.I4b%o5jAJ$k:6]f3na6g<$8/d3+!K"P5f@:[-#ROj$n@:1nUo[qDIL,JX\qS+HHHU24%X)l17E]bcr!Crg#nW>X'i,r.-g;LfQ`VgE".%1m##nV*SHf5K1%K\ViI/@,CChOR*fpoh2,pkqL\>@\B89H0(L>g"[qkdj$1U+.pqJW)Gm4knFY3G,/%gr@MX_jmP;l)'Y(gq)`\6%U`f#u=$"@6T#hQ-A.P8-B`tNb^)Wtf5YARQXopgT3nE!R4Q)O_J94c:P&13FBOQ9kDuOQW`-Xrq;\Xs,*JR,3&._.<3b:^<c61"T%+EIJP!qbZP>ciQ#Xe(%O2XEdp)]g*G9;A9BO-!!0B_;46GW#='<A%Rf`!MbYXr')u/,gPV8mf,+mI3RK[?Jg<AQ_Aj0-a:'0Oeu'%*T9C2Zk74FSqg^18Zfn-+l%uh6W=]Y&7a37SLX_E-tm,OW!aY#9t<fi*:0(-88^4'P1%'7#ja7m81-"4Z>A&\""pjp+]Ou8_qP2C%=H,*?\>H?FB>\4Cl_N)X;ElYSm!(/%*,<#W,Sm2g=os-fm1G59HIs3SR"67rQGFE\c.YjRXc$%i&?d_=!6/H379RN"!'@;p@&F5I%>kBq`>)[6B%PFbaAeWHY3=5m%[)NH0,;rsn)k!D&VW1E+jfj=_D5':Tq#PHl!>&P1.a$$k9bM(JCbT;3-"(h5P)TZ%NHni\AC%NF%aX[E=Rn1FU_aU4%E[^P*Z1;QtX#Uno;R]@P%QN:#_&_ofQ=jPD8P4MYLFB5j>D`Nu]UjKU=0useZm;Ns_%`#25=f5gdj.@f#<?$!%F-UdeEF-TiN5iU?[bY(ATOKAkYB.RS\-XmNNT?*cS^T<t0LB!di==e-&oSX@l!:D_LP7JpSNUYJ];Rbu4H(Q=CTM&O`;j^A%P8Y0%gX]AEO=k-],%ld*@=b;Q96qdY11'$%5lD<I:GRdspf[fY!eiF'8]!0)[&n\U&GTMV7FbNqN0:SL;VU`i@\Bo,5SFo@890p@+<_05%OL(-6UDE]j=UEAUkQBM/#RqHeqN/d9`pK^62Vi5#U%OG@`/6.!Y%CkV@WQN+ENom]GU+@4Yol<;SIeQtcql;`8<UC6)[RCfD3+sl%-RWnM+@`D%98dX5W6h:;L85I+C-jhD!BMq7^!`\1:Xk]iIo03d5+S61fNB"+4Z9mH&e0B$B"iS:1\:ERW&$/p="=MfCf8$9Mo<[E%3GmT0eH^`Q7DgXk:)?JD$SWN[b3jI]&erl3!KR\X)#AbQ=to]0Pa69CU3#.)6'92F1&MBR`gM1XX:opreJ"P+lRp\-Yjtp5llAN,%ot]Zo=:@f3GPEl%Cnq&tY:RKN\hE`F7QGA>/Z<2"JL5G08irIbSF+RKJW/\O'cgK^/fP\"$]!>WqmqPe%^0*s"DIsB,/[5`DBp]'%C(H7uXA3'^^0ZN5hkk8/aF[Ru&ud;A!<H2d-aNDcOA'CrGPg8<C^+run!0YRJND!Cj.S%8A+b"?Yd,&k\?he^AK^gKL:;H]OmOR!%7GsYRDf<A)]=b\h]_VBR.fr3B>^fOuqZ4H/21>/ohu7qJGm2GlInh(5J#WGFpM\?k]m[N.O2mS'pQr?JkBF\Cqr4ZuTDj+aFTZ!a%Jo9CMrq(0Eq"Wt3IoLn]]":&mQ+2'gH1glKEJ*.-P<XPFF.^4b?h_<`=Q"CQ3r8]tdFF$HkASk:P<]*7k4/SfHk!48r7nFDO7TCW%Wc@hM8e)S%Y(J$n)d)6P4S;P90?+L\TBck#"8V+9N8sW0s'AsccYahBhEoh+[i9X_L\38D(DOR_3-p+G3_qq=<KCLo?SC<n^E5Tk%0"o.nptP#;r3kW9o6t]ToDAF4_i`sY@mnpmKhU>fh#6ka[CEbLN1CZ_3c[jR4\q'=e(Tg&cVN^G(T2J8s7ZMW0HP@`[@Vc!2n-!Z%0CLPPd#C01O0S><QWK+8,d^M5a[b!B*SScUolh5HkPs1DA7_#R*uJn+Z"(CMI!iFB:P#>:(^dXElY9/GLW-$?:G7/JaiXD)Y*o#3%?BEdJ%sJhJ^YYN2G^jun>$AQV]df@-c[]SrqNj]mqdFJgIXc]'H9AaT:@FasRggX=ZUE%om[Et=onV:_QhOuJc0s&2-n9._pRdK_%mj;E/\@-#[g>9V1%bfdbkS+8=Dc^$&&"r=']/p8&pZgMfbE";Mh]$Fo4/dM<WU>aXg]qujT^EiM]n<n?;"st9lJ?@IO2]Z8pZHI5%Ish>M^/rQP;>ZT'BtDYLCU<'Tck^Eg#LJ2pMjtmXh]=HMEI!Qbg-V;^.m<]3PEZ`?@P:0iq<@0QK@I3AP4W,-+$P.d4MR<3)#$Ib%*kd9aNi.hST7\t\+38^#qt<&Fml$YGf/NWp]6>>5pTk[KmD"Q(gnP<C3iq?$_qhrrMoG"?o;hED_eu<KQ]FTHm_e&DiTg>YIXC\V%rqp@j_C\i:#*\hjUHJA8LYJ<;,=\(O55?V1:`RGfer/:`gUk5uqOZ4(OlG59gYaWJ4qRQd(^hP3G7PW(lq+/RY0^<J3oO`<K`#WX%>l<nJ'PP+t:j1U)nOdZ)/6c9[Sk0.^rq>pFrf"8`kHIH/?8K>UA"pY,o$E\eCY&m_bB+skaqh:j2ds0MDr3CHD4Dl`64?=>L0lj+%)iB?bU:[H3rA&hgr:1hsAGh=$(ihVJ[F6Y#`t(R&)_HMIhY6WRbPV%cMu3#hg*cU)[>_HXXRk`Jrql<19a6SA3:GWE?$UcQn^d?n%R25@_`SJiJSB3o,K!sK?06&Rm^CD5ML)u2;7pj$!hqh\amM:_1NOAuYDS2)0iaitVr^`qTe;K6Dg*3-P&/hlG&s\oG5(.j'rq>nk%r"bOVqdBT^D6<Esjjj0OYNA#_S>2G7d@/ak%Oaph,B</=F%X?ZG9>]!?JYVYgE*=@09E7ULtU&eZetfTf<,VI5g4[YiVTIihJR>O%CU\$1:SYT[HaD834'K#sH[Y?,DI;[sr@Li]a1$I[?E?8"+':D?kKQ1E3imbeZ4Hji?K9]TQ8EnUqneNi15j![U\t_ppZFIoMlYHf%X2W%9.bf!_-c`V(YquX'g[:HP1S&GE)JuR*m$]M-4NJ7560WPVjQ<Af>A8$Nd-))/$QhFDr:o79r*jZZ\@MY%r50R1U[)u7C:*;O%+1.eh,0sfaU[!4H46lTT][SFMGBmQ_3rL+:U"^NT[p==14eR(A4<F?YOH4g`GN02`mpY@A/Waf#$,C5\_VPiSd3JK.#f*V0^3<f#%&AGch]%SJtmHPRTokk?F^Tg-eJ,As1rph/kKrA88kq.6$7%V7i[OH[<oTMF#b<_*7e@\m6H2Y4WpL>#@>O1Ok)QnNPs)%DN!BIeW%^Y=Wn;Yf-3`qAcfp3JjOLkVJ[(sU=bI.WhbMt=!-Df4Hma2)$>)&s\Vj,)a6`P_Adk2;MFG84,$f@=kj4'kLmI1@!;1k#-*mjfCH%D55P*Ulq8*>[F$e>ADf=bsV4T*.hUB9_l5DEPX?h8$jr#O$bVFNgP1&5cl'ap4o[bQYg^=((E&`7Gtn6_d'jaE1$/?g)$W.#_s:&%P8spa)(fA@_I4e'&e=MR,`=6&h9Len>eIRcR.2ET(HupHLDa3V>mZ9`J!=o>/b[_te*e(h%PrQ%qa0lai@mX1pp5^mCk6-/:&nU*%36_.0m0`si>lLAoM<<K#%Cb/#ca8H(Qo/i@^p:j-r,/S)qdgGoK15S63q,frIh>6kO(2L`2qqIO?<G#-G[o-mA1`+i8\grPK@+a;%dr"[:*%9NeMWXoZ'Q*L#%i"Crd1-k-a!o`a*<6Qng4>pa3^HsmU)rOOJY%jpB*SJ)5gKr4lp/njT:V<CSN#=!XBufI)a3uBi[N^p%+5UG\N7g,gO1]=!&,reMrnuPNee:,+#*6e$_\Q[*7?+2U(]X?VpQtnb>^_*ErnEq0NWP4b#>[IPkIc(UIjj41iqdgsU6GPuoqEeu%X/;I:$bu!6r;-gb_uF)[(R(1$4o9gEgSjZ<%sC1Dbt(TK88GOT%.]h7g3igK\R<F;l];Eb2_r5ImKljaGW_<OD\qjpD_B)B/:fr8%cL6h'+HJsNSPKg'.l,W'C6-\M=+4$@9)c3::$VTgWP?]Frb/S5]=\h>^/[)amk]5rp;9t?o7sJeY<Ufk"S(E^LCFs`1XNUDU'YlY%iuSecdItFa2Rm[_KtsEYYEFqfaS;n.bB*$7nLLnRaQ5\::9V`n!3U>bH;A5+Xu"Dq]?C*Gf8KOr4D+V\ka%+B5-`Jl5JQ5Bo?dGU%EBIu1%gN*Dl+k-+HuLJ-LXpGmDjSE2i(cJGPBY!:*-WelPahNMX`j$HKfhB*O:Nu)Xd,b"l9[[>-8ITkO:Nu)K*usD>n/LJSf4in%VS.Tiq;=U=4dD&TjP]"b*=2,;\'%:uWV#7rp=nTllLri7,J:Vcq>EI(s69YaGE*_S^Y8+%An\qt[t:/3]0!C/Qg`coHsFm6Da<U%%),C=#lKpJ]gi6Z>Zh`&%eX"+!_>!W:4JNk#Lp)9A>:a[+K"\\h$5AiMT5VL@a5u^=ir6!j`S7S6n'5j#*^/e@2/`!Of!q&g<UhtV%ah]6H0Zb>/EX.f`_'HKc-92f1]DBhQFa<q)^Z!&JErS]+-V$'RH;'5IpgYg)@o;:>loiCU;.D^Umeg<%0up)WS?[aO:FQ7;m7u\[%rVZG!E<5FnDJR//ElD[QZF:k9aZi"?\F>;Ok).KX->cTBpYUMrP"\](0tVEZAQQt?bHos-Q%nW`CrD1mRtKOo-SZ\/2@$k=_/==u%gDoQ<b9K+$D%:`YKAEC\W$eq+49mrsBgG8$@"`jN)V6$6TcTmYm^iDpP1+*WYS4gaAZGN2BYu!K`oQr9BT+%SNp"b+T6ateF(gM>%OWDcAnKP.:H.bbG[LH^$H1lN+H2mj=jX+WgJTpN/J_P2$H,r4XCV98XjIb.lDB7BlF0a%\R0`M?FWU*KIG3KF$JXB_4V'QN[ctR`%]mTj$:*"c]k4SWC\$s*n0)>=t+!W;bkj2N/liK6l]KJi0JS/F5H[6lcoYm8;IiBI1p"M:\f(af4TV^a8rjh'YACid<mCRQa(\bEc%mM9`M,%^Y[rP+78rF75UO'gG(W!Vh5W]Z9-A.KI:TUP8PC:=-KF'gBn`RmJ8(H%dOdWeM5o;V-QVB3Ea^L"Y1,'K,BmkbrC(Yt]N%E`[Sbg:Ud/%]h49,K9E!W8S4UNDC3bG$&,+2m$[fN>gcP(cB;DjC$Ki"8-lq[f=1BnOM-'G@aba7ZE$tA!`/npZGaK,42I'j5=bq%F]$9:q8N=.e[N#SirbdMo#R5]2a-]@/q1Q#Su3&_SW6GXo[EWV`Tc4<s#hoN0#fCB]in2q^mj*1pQtUj)luu7M#^3KG^6\cWf^&I%V`+g>%O&Q3\Gd!3j$0sh>$9tO\(PHDpV(1<*^?AdP3P2&G4^Abrk,%c5?i*26c,H)o^eI`rbNa]]Xteh*`"b)iF`Gg5NFKO_u)sP%d?et2hi?<"DP(>cLX\ag?o7`MiU3V!.ptF8A4PEA<8DO7pQ0FWnH[sCaj.NCq65LNFU1-j^4)9fcC585DYLs)3^2K`&4*`T&S1Q-%M]`s'SfNk6gL=an!:aRnV0quGS.tY'51oRIpY3,@3gsd?9`)?]?>9nq?E/A,/BC-94",KKH-[HE^<`kLNTU-DL$t](*>H5?_Y8g`%pg.]?>!3mse)?timA@l^H3"Npha-9aBRC&EYJ3m=NUICRnbr@PmG"9%cGu^[cDl5pe3W'J5D@Ft1kfie1u*)9Di;%!"/pUBjm)fh%&b3`@qfn8T&N`+PIC\BU:GZ;sdWho6a<BT_-OPE#TCLoD7ekDffr+$%G\U1N'rZY)L&#))\iRV$jf8]=DEjXu>i,MSQS!$j+7F]k%)K4ZudSG@IEguCKpLQ:#25krV9W*]&HaK-J>D+$[5VLS3qC+F[G5^!aQS1.BN#?Kq09OiQj)'=AK7lEPgq>ea=M2@-haTfn<-iRi%qt9n'LDmAkDY.!T=?nUZI^Q(4nngl?[TgOBS_Y;)?^s0l^%lo&^?O@c;TJ1V4".b60U=;oYMC"T[I(*/0/m[)d\GL7q7ePc+1?.^%V".<q]P_iZUr=)HZ'A+XW:As/MN$d[Et/(#1=ku,Uss&DXEoo*!U)lr#\VBW&(9<P8:.,."h?:0CN3dni\O!mDEH")It"o@=Zg/X%\`,no5DXc\r<h]E0u.j3aR)9"g,F<A+>/*A5.kL]Y_VetUMcCTD+aa^I0*1X-GB</[r8/kp<dD7RfE>l_<YDY";ZF^ULKu'14H/!%nf/T[[-%,+L6CX`e5!3gL2:2X5kMD1itiJjH@C'`s8I>L`SD:+`'UpjF726g]XkcUrqpf#iT%^8GE]i03:@j5Ed!ssNaInhkFLX7%AB/uY[WLiN2P61M50?94@%As$Fmb;2qJ]*f0$6Mq4.Y8][J9\]YXaN=;H"1@^h_+(q/gtYgqW2J0DDW^+1KO(]l.rG?7&gd5)6")%B)pTi_QG4C5=;%UAF,E<Vt#+-MXSC\g3%T4=/bt8F,]#U&r_(\kSr3*qa*%:!/X<SPZ7FRkOkE\-gbW*O&r+<oj,o6n`n(=q03N>%e.[o-];Im'qb2ZNn'Y]^/`c7ZY.`$j^;o]8h=mh?^B$juisSV4]T;"WCA_)[q^?2D#46T)pm#>-ICaFUp<oN>gFnT9,-q1Gh;[kp%nno7;,eLA-pZFc#?fQPgBJu(%:4YCuJ(r7Xfr=RjWOO!e/q2FtC@^AgD!ED@jH"k)Im)`C1ZFi!UQDh8F+ouLAHrads*/a:oC:Xm%>9n@sh]F)mm(/k`1//sR4@QReedrbRNl]`UHO-fKN1;u@]%V]mfp+"3*3pVp27Mhc1VJ1:l^tmNqHDEf:2\pcCS25L&b>)=gRIZ*%M3q$"'nL"UT.b-*0</qTE#\>Jf=tVkFF.$dBm+t"AQ;Ndi8<FAXWHE8n#@@$oCq/#O8f;(rYn,;:<_dgaaa:k4aDs^J#H\!h_`g/%k[kHdDl64.0Y-V&rRCY?SKLa)gY-?E\uBE0-3ESA0rc[QF(c[u5P6pf!dkd"mBgbjmkbV]4]U?mcHAg&G:^1l^p_hChu^AlJF-;p%?;8S/g"K/;h1eMSYlpRu1^p:1=nXCubuE:EFIL:7@r!l;FmXN@4Z-PkDKffDc`5YoJ9HG=gC9mugW@cckAN">&=`mtjlBE)XVDOe%@*)`_Y`@2DBlqPa8\\n&=',l\@$nNs\ea/r8f9M:<ndq1k@1X[e13IpX\k:s?[$6P?_)?ZCMR$($`cD%-u6`e3"*(,n_MHs%7*d%%O*S5)@B-_5q!N?V\$Hr*9Pn0HJdM*LLP3,C%+AL/V&;^%m0kjPf7=\L7\kVfJ:tD9be]P%1IgQS6=7n_JdjE1hKE4+!2X2TY(1LI%S8tnW1)MoN'E"YR=i@MPM45c5/--'lA/GW#<g?$)R`L[k]W;6Va6(;2]+T%ANHhKuj0_L(X$c3t._LK'BFk!TKrqL7b^kB)G#lA?%?7?!K"Y(42Mm_:g+@icC[Y6Fnn.re[ka7qk=0'TRPb..U<X%t-LGQ%a$taR_)Z&MPf7LbZUGl5R'bE!"M=/qk$5OS;f_X;e5c6;*%l"Dl\9rL!G.:R)QJh,_=IS,`AHX)ZF*J*GTW)9cLC=qaXEG_fC")J;ATRgrRIR/??5Qk;P/>Uf]S9`in=Jj[%&q&74]4ir#/fIjn%:5uoE?eD>4/Wu:D!h*kQBeD'sQ-FCh=TQg-]^)tCVmb,K,8G09Uau;I$Ci#[=8f79-\(u5o(RWh:LCa8Z1#COh1"mkT)<kWH[@XG%'1``3H]SjVG;gm.BT)]P_rY*c(;G)=&lDNi#7rjYhVUaTjGti3IIX1;/r1DFmd>-.OF#cZ?=a.n7$h=jB(F46_oKaWq"E=/A[uDf%K$bVWKm($6$:!`6!Q[4%CFl.362K8Kl0$l8ADcbsqpnuUmkD\o__Crt_sBIDB&@n<qei$iIHrP+o>#faedWn[GRLTg[EJs5ZOXK,%ZO4%%\NqlJj*NOo"1)9;[BVX2LGb_^na:_qb9AUpZM5pPibc$@Lnn)-T^]@_(<AL7CKm-?.;+Xt>RP-]Q7g>on7C6W$UcZ*(UZb.%3?jAu>?C<;TIeA2frG\qRDh61_ZlTLpt^M-s8JO:?hsN8rV^T"O$<UV3r6YY]P0W\6qW*%S.TTg#4>@&Dih34JAe*Q&Kf-Q&2fT+%k4fO%5LTF@l;\k83``:e$,"&rW:>qgFNOfLau/O::9+OpH4V#d@&1sH?X'sRiG2gi[aTj3`!17#bHbhe7B6N35eEAS?fHIsWVuk`%]a8po=)fqZ))!eS8)n/s]T1fO>&#YFIJ60WYM)MD5$D.G/ZD7BmT(uIP!?SZmnZI[KOJj966,tM56M6=+[8Pg5b<NC'DP,6KKQT)%n<"Q(2WNHJ"i%D!^$iX_>LHV07Qm'm3k*D63d%If<7P,(_hr#A;MkK55nk2n9`dnZBorU+!A,/@,SeI<U'R4;_1KfPY"-cug8_#H%cR-1>G)-c&QaTa.;6_[m)7Uq,b$;g%C13BFWK!?c!&BD\9%kG\/GK>f#?dLIS#/@P8[?U`0g:6I5RN$`P&]GP=o(L_'O,&R':?*_%&LB`#/BfJl$3^(lAY3=>,"QG+"OI0Ec?#reLPeYE]1ac3;:31!?jJ_5#N)gg$`6X\`ebP*D?:tqTu[?9St`#i3#t9(K<M@)H$q66%9r12/1R/#(nurrH$Ga,`0Ik^%U6S,d1Sr,&$Y;DQBr.Waj9-)71:=H]<Ka4bVAojBDOSiirfL;k90\%;AF<%OMoc)[o1F!NS]^%l%nA\a>EB$sKZ]##Mf*-VgcuWUIiVt`,j^(7+lt@l>CmY/e;oD)*J5Y;U?nqbXfE],B.YA'GLWh%2>&jXrM8X%Edi&E+@6"0hcq#;^%rXf^N)^,^3MQq=@9oClM"4pedX&$D?llR,e*pO7CokLJ,o5+DK^Nof!ms*TV?=-h$W0N8+L=1!fnABbUa[[HOeAjcNi3.&.\5;^4%U""#[muRFjf=pk4msaG8s73EZI:G$O)_>nI^\;sPlEaiIlC$h-J**`6J*&C+.#tiHH,J8t^[mfloX4-No<Y&PoAispIHV]*1C^Sd%f&5\o^ZTN"oAsmTn\hoOr0`V[q[I=([pcpta^9>Vqu?APJ,I>WrqastIfESR-Km(Z0DWe0I-]PErg$p'B/N<=V<OAF,<@eH4:i8H%GK6)o+I@XL!-nu!UL,'_:o4Zr)0;c&<Gt?K78(Df9D?&kS8'#SpBl"q'_c*KXqgj9nG/g<l/3>3;jf4?3]g/j.u'q*qr->KfQ\PF%,#Q6,\JH)L$(TS!+g_4qPfs+MC?o%<0e/!\*]h+bTh,:"Q<]C4@L9+U((d\U6fHpS$`7K,6)tr.bn(&1hS!ZkIm3kJpOC6*c[Om/%O,m5N0?-3C#OMcHQO?+V/(KtfK(]T*Q\1r\5PoG^o^>:7%\!+)p>_f[hJ5=cRb#1Gj.L,ACHi;t[f,F16.<6n4rcCRqpCIWVJ!)\%3+uLhUE9_8a'g&BD>ITkI5q-br&O[8r&O[8r&O[8r410=Qb(N8C@StJqf)$hQ[2@(C<LBtMZ#6(s4,PQ9;N_RoNqt(E'jTDglH46%^DQjQ)u;4bIdDdfMkM6i62s7E@mB4-V>G;,BR_?)nk.;Y+o64UZs.r2&t4k0+(rqj0>IDloXXnjUD59[kUWhtIa,8J^usEeY!.$j%'h@Yk5k*e]DRfMN4754ZqT_0?Hd.NtY;pbP^gdh&ouW]kFF+n!]q_?.@!k\OgMX)QDGfN:d4::0gjE02+.YC'QJC+p?X&s;m&$4H%hZTsHe2VLE<S*g'h'*=\ARG>(kMQ*N"7LWlRpLTj`b`E:Er+:n=']^FETH\#-Z<k_#?QetnHU02l]4:$M,-8)n\9A5O5KJ^SY\Wd%n^`oE$oO&MIf0%(]toF#D`mf]TD\VR^[\H+plBq)``KnLR?'T)mPjRX#JG=fIp?%W_Oi.[P-95a?[V-G^\,P>J,Jq7Ie*,lJ,&)K%^Acb4s5I=f9+I&]FYs.^f:Spp\)-c6s6$Y*IIG5VrR9q:!2&G(p=qGgr9cKcqhOp[Bks(sID&8'OeZ!K]TX>lrp:4ZqUHsBo^'n1%I-KhXo?rOMr9W)Y4n7&m5P3^b_rR@9YEF0RoZCrfoaYg:p4km0c)7.ai%I_F=Qa>C4S?tFIe^C]#/%EOHc6T-"/d&iaZ"Y3ZetVq%ZS/98\B[`#4SsbLIJ-$H8d6518_l@PA^+q<iH=U;oUA'ic3TJG4SOJH55O,CSR_+NETIdki22gVSTk%M=.ag4"X?",o"q_/IHBM(%Q\dWVGRX<*aH\.@jHk>o_dE2BB3oi)"TIML?[C\!s8&'HJ,Lp@gGQ2O7uuKaNb72AM/WCWB4^_V<;lHE?i/J;2S*0A!DS*=S%TK=%rP7Tgphs)_0N$/Dk;.U8c_(Ni"=dYt)ft^35Pk0LIqh^iXRP4jhtuD#YFkO'k3C-N*4b(_4,!D)O+$'/cW_Om^%g7k^[a=%>%2B]%#$*^'BD_Ne+8OL:Q4s?6ci<bZ++IL"\-%[1W,T=hj+1#(a%u%O]^YR.5P!+mN]U$-'fLR)P8,SFj?Giu^ddMOC+=W%G;f1lTlM5s%,i.,S\Ff6u>gda5Nl0U8DEA=h[_e/5HILc!jTe#V*,.*G5>VUQnuH-XRsNnG^A,BS?aQ&o(SCZ_(I.Q'.3B65+K[R\%@5lBl#6U?%P,=j9s-%ANqE:Z@W";cI:>Xfl4TFo;^]0f-$6X]Qs74(jP?iB"nV6%L.l$iMn,:J>T75Wr+b'F=o1sl51[k:-8`J<:TMcj4)Uo>N%3<.T;qX/j&Wn^6#r:bEMo[i7b!Y%(2'tk#0p,6CHh?P.ug/DQP".P:J^@oX#pPoip8Tk<jZ0P]_95f(4Vn`%U;`"%DDgqP2Dcgau%>q]Ef,?J,uP:+$BV@S+;)q^7oFX0?JNR*"9:$Z669ijuB$r/)rDY"<T^#dSFWI.";Q&;R=o=&NFqJJBg:+ODq'$qKq_dhU%mLPq8%mUsibNA7+]Xk8#.GFCeZrf`CkrB!gS&D2?#\L1-ZGK`$4>R)U?q40IYqk9(#k)3UB`kVPcIR:U5GhEdaVlZ_c2n\13+8Qp1BA$'`%b+pHXcYhP0qDZ+TSWtNjC"g8bF;*1f346,Z>YeCfFsTAGk/Q.\9g1PC=.Ip>.`\\PH/i[jmr2oNf)\l3EqG5>O'RaX'*lehY+k\U%:>?qfP-oq=*moKC2"\gEc=i5N*Zg?rVo*M5FKlKA7S<Gh(*;9:ng.0:4@RMOCtY4:+%NR!Yd`O8i));T(\n[.%RZ&bFR9/^$CVWM%(.X*4nBnFFT(PEO9RpJC/s^[ck%DA,(g)IMnF)6I]dSGAp\RA%/+hMBbI\gC&,89^XuDto=Q=8es3ail56&KX0>?rRZVUPc#N**i%Z-'UApu54*C?MW6T7$QhDn!]pnZIB?EVVHfiX`cm#M/,0O8crM*I.AbT.F-p.=CQ/M`NN+r5.XACDB$OmFm)irj2?eebNji3ab_^%69-ZF4;c\`<T6<P5$u\.m9_?p!SmH?/a#(lnHB/??@M^LGA/Q*U"/oT5Q@$Ll>1pc@@`aWH+-]9D;TP@l/aQDj[pV>Yqi]Yq;,=d%lFu>hcHFQ4\Q%fF:H>WNo)C(WrE[`M;<c1]j%=f3/_oH[B7D")HB5Cp`Ll<8`0L=gF63L#HI"2n]st+8s6CE#oU]?-:M.OteVo^9%nu<s%*o&\U,C<3X@Xd`PX/PZXCaM@(S.e-c1Kb%AqE;laSiAB)8iWa;?W)cDGjoF&Fe8FmeV%d$<VXmWCCK+h4mAoj'3\mk=lRn*%bjnOoRF5-Ils?.f:&_g#)>s[<Vj^5#?M`G?QPi$^s0FkkQTf%?JJN)SqFdG::2(?DcTYuEkCq5c:%(0)rlChZp]'-F7@hUSgNqHf%^/p?^\aTOh]5;tejBFk@p^a_ij+ZrMrm/lfm&H^Sl5^uAiY,*PqpV2:o[t<NnV%Ld`M"N"=n9%Nrt#.nO8e>RJ,cu-j1#@ZQd/HW%kkJ'dcKQ#=F8E7:GKl6.OFC=L9HJr)HOPPs9lhuq-9tKdlTuE,;@I&V^G3k--l-3Ps0(9nL@.ao&9@m6'YMsm%=^%eHV[19^=.b/%i.%W/0Wi%_"N03u.`T=Ncge2@/F7>@n&Q)PIBULch%a!tFo;%)X04^9r7G"'F_2),r9A'5:0r/#FXKtV\G#4J(9g:]^[h.W-a()?%``"h2k2r./h0An?'3?9fdNkB.oST]P5&oD<2rAZ1mC1tma6g@lHHXPl>^,2mX0+Ec#'fL'RN$.Yp%CIChgMuWFn]1>n%9[Vem*:?%!.*]5PW?DTcF[>(oaThX?g##d:7OY`6D%Vu$38q'a'GkEL;kPNpbXide@A?3IL?/+V*9rHH$'Q!XDMYC['k7nhR9j.:LccZ?$G'*%e!NW_\<!8liAJ+%<Te77D=dRs55BVD/PQ6;p=J)=6A,=%Q.K8bo51C@h4@Z>T;6/iTh)r-'nDmimH3`;<Z6ZdhK[57Y(ifS+$n<$%HE[fP&O$3[](6]aW(cH</$H\TAq7Lu`Cj#9#L&4Do.36@hNl0m]5B]Q;TX,)^$=;j@$@0?56M,?:D<u(@n;(gB_7>:>^t!u7jSok%4)s;_Va6M1P%K!E*A5REM`aXb7btIrhQ!4RA=bo+gKjJHXftC,JD8c1d3/ji;-th??ZZ,P"nLg1n#gR1aC184&:f@%)9Ujj<"B:8%+CU&4OPS^uP,//Polo5pJTT`qT_!>^FOo5lRq:JQhg2'GGJGM'IKD8fLnE;A_[2+s21SM]0tR2AeQ9ng$.,<U<BooQ3pnqu33K>h%>^l%nl]KNp=X"P_o!Nf!8<u*<%!2/.ORIps?<KICd(/Im.,P#n<(%TRa)qC^h/s0$/P,$;D69D,L:Y!JbQB=Pl>cHRj4=?/TH<do%-;P$EGadF\5WN^FFksGdQ%NiW-a!]IVsgdjDfC>)6[e@X5iD_$EP388d-FH?ju*5*WWaKrh5B3m!!5![H<bang64H\'*;5Cm_%TR%>AlNE"4[$"df`i;#0b=$^ae/\l`IYOE\i4JL<7Yo+]EU0M3HOsJ&@7)hJiF92('r7*MD>J.uu+u,E<kXnd6%'-\3=!$@o<@L@)(U%<L3Al>[@G)#'RTFA+-$_a+GD7p9lE`]1),7h*N`XrW4UAETA(>\%IWNJ1ot!3<A!`D/r2i0*8mhTWl>2nXPkRT#Weh6>)PUOZ^35%'mQ2pQZ^`F9CbKe-dVpiK,"[38+R_$CK4:];h/.l[2>X'giTAm6,5D\l6q`%Z0SJfX+AfC=)G@8#OtIaRQ_eK3=K.i)?aK%q)*R-%$nT87pif/NQ.sWsaDSZF%1L"lmCKRhdIf,1pYb-!r;>pV@!>iB%GGGB?!Q8\,'Vp[J+ZlMHXAB[e&U<NUK21=b\Z/55L9?^#kd*R%]5RY_n(jN%D3_/on:VR_Y<2c>n,J<\Ie_l_rl(MCqu!X0k!P^Rpurgd1Y]*_a.N:Ka$0/lTDRD.IHp8cr$QE4?$]\e"$O;oV([#L%RihRta$9NVIs_+`07EiIO$3-nDqu5qCI,VCOW<5&mG%[8s7t_?s4^Vinb')7l#WKlX$;%0CH$u>e?^*NiT.2Tm8*cI';,0M=2+[A%YPd^!+8O!M]^8d`daMtoOlb#0rkSg]rm^*PqpLfPqqS+Kp&jd[NRDjcK=Q@k5IU)HhXZFDpujqilHr*doah)crI=<@^Uu;@h(JB!%Tm_=K^,J7FT(da0,9QaNqu>lN^OAsfXM+Udgu5lu_56O+rjB3tn9_qE^fu<UriO.gjt;p%Qeg"2%aN)#V>K[6A`GTFI"RI,JF_F&%m_Q0-WNlG_[bC:L]'Q_$G;h?:2V`GT_FQce>Z*A2F'DknD2"_0m#0FD&P+T2*#:OG_h6cU6!t@Qb_)Q8p65kLrRb%$`4_>=YitYY%fRPsk%(HA8@b-7p/G2Z)GF6KmON=RN=.hC/Xqd,qH]j5NU#c/&(eD6ngMb#<r7`a-Zq,aS#h&+spjJpjr,t0sP/qOQ$;$6D;3XM]%<OP8Yk3_)%\Wk7*Q`%s(D*[/_D*UXp,"Q8NP%`DW_EatpN+M"j'kf$s#/WViF8Nj'RGPWcZVSi1oc/irjM#0;"C'FJ6"?NX!1q;E%i2sS60;."Sp$pUOKMaM35Y$+%iMpj.497C(T^2S+$E3[,^0%%UkTr%3$iie"j@.0+M:0AnnE!=pUFDH![kpme3`pV94@tF+Y#S2i%9S%S&4>+WlR@nhl[T/WhHp"H7<fJP)$F(Bs;lbUPqP@oVKEk7-\.jMg0u7)+dJl3C_ZT3q_:M874O'..A"k+X]T=!R+XlIP?MOWi%MnfuG-ACD83S_NWg<3Tli/aP(QU&?7AfM%_(r3sH$GmSp)+KJgYmu.E%k79%T&Z+9HfYK1:C*E*;]S43L'uc1HDN@U)[l8o*;n.D%8n/#+A\C+s^IhQG$dASt]e>PD1_i6Ag+fHtm0MCAG^StFTR":dIjJgc0A6qgk.T2lO>QElp4K5d2maY`S\(ToT]t2?m0?A;DJ;=K%RW_'m6.</Eg(0X<h9^SsFSql[/^o0q1`XqlpiH4OpiH4OpiE_?>cRMpOR>KIS^Mqcd=/(84-pT9YEjG4;P;j'k"D-1Mj=!.1gc3K%4/Ma^U:ja!0*^-S9CkHt^/pb1C"i<>hH,m>$UsZ@UApLOGJE@V!2LSpEYNsBS`DbVq=0ZHDS#)0;^[W-3[/V?Z'2)'D<`#X*?-$a%C:a)&aX(:Dm."$BY2S'Xq=d&EcpR7`T:$_fEh>*n+sq_u*]qmh:7Zml7m?J<Im3\hPQ1IR-U.+8o;Q]hWFNr3H/Nc>M7QOKJ\QR0%^Rk;lF"b9"dRu5WpZ&1Nlg_`:+;Ln<EHsRKBArd+?[h9#j^pDqe(Sk=IJMjn$Q^PfjX6L`++3EHj8F*bJ+:&s++%t;=Uu!nht(b^%S(r/\o,"%u\+f+&1%7simYUju*rP4.O#=-EmPuG1k/ag=Ka4`2&bptdFiQ2n00^14s4Gf/([F3^f_NlC7*C_QNN%]*[(i3m`?ua&%\P_CRT8Gc#jl``608,si5POsKmd&eBJ]HQFLS(Sgo>cbbHuSWl5g#4Q?0<<5cnqEn7uqIF*C"Std8NF$qp1.dMEk(N:'0XK`ZBH3%neD]hroa05:*%%7o%RdVl6us^s#g+NZ($ap3Sp"r`/cF2%A=kqd#L.96TaV0!e&P]LVDs0Sr;F3>ohbOnHAF[,EDR/7XitriR1gh%,@$NJ5kt$t5H7,oMbcq0E;;)L+8i;L=0qi&\M$/Y6)o,#\umuA_+'4AVAkSk>:kod0)iuEIqhKag,(W6hTXm1W\II^gbdO@S&2T\%6=V,fRNH2L<TBjA2D_*7)ZD1mZAN(s1!$TXT7$V+b:L/<lo":ZgctVeT4H)W#AGAJPCrLQn[T`)nbC#b(VMbmcTHH8!YZ*7U<r'f%++N@tc_G3pA6)&V(;i`2+mJU4o@oJbDUU%/L3LP7'n,$<HHUH^e#P;Ch^!X>ghd@Ui3>p_i>:-R->@L]L3/u^aj/W-MdU2b_='"Z%]XLtR:6H5mGd8!UkC"OA]&:CAQ?IO.S&,+qNY=i'bA\[#9$s/i@;-?[Y5uu_,2@ZB'0^tW"SI]D"S@]SFOD-mm_TP]Vn6854Z?o_%e_fD`I3_1c,-<k,&I\m'n^@,![MXY$\cY\-RIu\@I&b4T@.XtQ,r58.c^odo++;k,fZ6RTp)l>\a,Z[NL$n_lbC:jCS4LZ+q#ldC%ppcK#q'V?1oLKBu\.9U&$O$b2,b^c\7o&OuP7o9nk/lW]l/[_Z?Qs1@:J;YOX74Q"jq?Cb5,tR<QI0%/5g*8a@e"<9!`.jO#b"Wq%Ws^HmI5K'=681HjFOgk<T-q%#q!^$UBn8(WZLB8qY"b_u,KFrg1*5A;%OeC&#sO([=9E<;&6hbl9GLUW+gok+^;E=]QdQVT5RDl0%Bg1.3$QagP4f`CL6cB<Hs/pa_%TVK#njhYmB0ZFd8)a1a@R&n.n@Ram]a2AG[pqUYi6aE_hu?ncqr+H%n?C_JIHd87h;t25YHYt4%_[6-s7e0;1J\M++HQ%@2k&\<85B[fVpq;+I%HlXB5L4Jfn+?0dhu)X:CR'J.n*XK;fidQZiS#lSSLqV'P,ArtS"n@XdtFuR(D?se%@b4N^Y.]V4!r$(Ue&<h^-JC/k$i>2n[6M9oe/^m+*^fT$^Pmb.3?a1[oO`YU`5=CoAaVs?'<7c;hHGN%3t`%M[WKWI_"6dfSH.".%Z*%M@0m(kN!I/.b(lT%uOuC;KI%VV?@Pm;5e-Jdr'IjlKS<5?kCFI$<UlT+u+5!Y3\@imGLX\6L'5<?1.HZ"'N*M)`VhF)%dAC%#%Ld2$=F/3r`Q9Z,'%KepbMGRm!&!Fs-GXasm_=0XCU'3XZJF,JBLmm=3I50Y(7=[pF=Pnp'Z.d:14>Jb8)3G77rkj7c/_7>42I]Ob%79VF%X&_:d1=44bnUt4?=tYK"!*2u!]_%9dTdn0?N&45$R&-YLJG5@$<XluG,VBc:a``9HQ53#=U6Xh+;mKcS;Wth%-ml#\\M+Bp%RZ\$>)^.HiY_]6>!DS,q/1q)0TG4fWihgZ<"WE#IS<%/?g/,lf"A5@Q/I$5k:oo<Yh/WgDPQ\!ZMp`"XJ7#gJJN^r6!U(DRU0ds+%S!7IN.709A5f<.$5[i[R,"bIhDcC1n,g?VI8oU;N@AOhG&LHq@;FmIMO$FjWZ]*=_>V)h_D(rah@$q1Gis87,"ATJ_3Pa$)YCnej%5t[(ZJTE)2CnaHsR"_9U@_W4gP8(BX\,dYb=G&NI$=L`G[E.uoE/[rm<[h8^9d3/#=,ql]!NUpP@%*2rJ?gJYRR29.8=$.GY](-[%?CJb<P/N%oYR)S/7mWq2c)jmloF01S3%4kBT-j(Z+Q?Nh?cW>OP3]0FJ=E9tO^NTja@S:O-V7/Z!#^3[,(OqY=EU]%$mCHY@$6<u%b5r];(B_gj+ps`NfP=f%!L-._R:jpfbO,PO&.C083SmR:"G:16b#0Z"!J"J\PqI[IJ<!0@62>a4gJk.K&OMl6d_dP("11\,/8HX:%`gd5S9?>o(Up7%VC(82n>t6-F5jPif`P=rnZ'/,q=ZK:aS)[(s@O-D;U"j2t.t\$AW]7sq\5e9Hj@Cj*'Mu00QnGq:nBh<\lZi\Q%+(M,m'[1Xgg-V3?"G8$W/ZdYZ?romVGFA"%-3[SMnP)=[_R=2lQcWbh+5\nK/5"c25FjIc0&^$h#`b.?0-HXh^e7Q9%CPPg+;h1'%nt\TN,V;a,1b%Tc795M7#._kHGdHnb+J]FQ+NVGhEssX9K;)]]/a3=5;@3f1!%\f*8Q*@AKWshBO<R3,UeBi@q;s]jhZ='3MO"Su%OV;_T&bJ[nHlgp(<g5u^+M_&!!Q>;4O+e6-&Z4n%=l!^\82no2O`eXLgUV,LPAh6pA%ACN4.AcU]_@;T$0f+)Z<46)`bSCki,@<C%_hhV3$,@'F).:Ue1:Dq%[LEb%Pm?EG@lfY3@kP/p/gF9KV?1<YH"BmR2Jm[mX?7mIFq^]#=.bQhZXM#m''+U&T!:Pa/*4%:&.`8g%6+J!jJ:7SVA"!f]2^53?6j5;#1F7'l]k_+%&+o;7#q!L,TZ@qDmD5U>lE^_j@[TK[_Q4Tpg+sKpDQ]lmM.GI#=\9Emc-d`\NU;AO%frmt=]!@ArY$XWV'^5tVaO<*Y5/CWGMB=$u/1\96q"c$4plH1=LCYe.QWBVE6LoOR^hVst<0h#rlo>[uMEbK(!"9['`K"SE8nsWd%Z,cr9T-n?lqZ_L.M-VbQ\r52S6J%l>LJFKfLJF"B2>@1r5m^HYNZ:$[)aFl]m,@N^.5U49*%at/Hm.GX;b1n)qI<`%3XDg7WN-Yu%!(W+o,e?B9\n`)$3+slRV&ib3/I`+S9+&d;N$*+pTQq0*JKc7FcB-\26PM>8ia@>q&u^[U1G<>+3+\oun5I%=9Ca6G>f+pj&lsei%dR4oi_.?ck:9_)>ST:MS4.-9o806La:!\\F'!;OFE?D2H_#c;TpUW?9aJ%g`M/M9KFR;N+YeQno>pJ$+Et>MZ]89tH9CrOt,h4SG%6D3*$5QoB]TFAGm-6ab\q7@Clfji[B=NS,R4_PSug7IpD]6"0bVl>>A><2C(UN5+9OAa'Rh7]?$CGgIc<m30HEBcuQ=Jlp7HGnnL%s'cSc"4khX:,bkjs1X<=X%'cX2S*mZU&cXuHpn:]bhq#t79Zmee9h/k^/d&#RDiARN;5;Ns4:t86IA=c6/Y8<PjHc4@P">a:j,EP%TgT/a[T%oqa'P!f-TFjR']gk\8q=8%@S-:0Ub'!t$;)JZb7sGtdK!GX6D5l'&2Ge&'2kXLJehl(GXdRKO]9N<,"XPsVHE8Q&cdiK%kVD7Nja/(3k\aZ=7,O$5:3od3T4/'TZK?^*U+@>-`P<rqe:Fe;,>,Le`',iss5RZ"V,5J;o<_%-?j0q3O_)nJWYS2@aSrDK9EDIc%aD5+&X")RT'PJAcTiM8rp.NkL)%RjBQ"A!.b)(,374Db))5rd56SblZ!\6$piaI+r0.i"4L^>cO,-T0f"@6Hh85c[6&ua;&:lTNo%CEbDb<="2^apW1;BN7MSL@n4^-pnBK6$O7hZ9X.Wi;/N,J7NmbI1:,9(8PMk;4na/0<)(\g*MnEMiBT_g#OGtMPNXGk9oB!'iL.O%7@N/b+9aDY);rnY91\B%*:/fX<i;ee$8@qT1aBiSq1iGsBfZgaA]&Q'dHZlu%,hY60edM#\IaZ2;mA34jWq7cOY[Ja,B,*I<)'*r%*Un;RG["N+_Hf)EQ7fQ^/JLNp_*S@@oEO[`+sGEC+lss,mTd.2/JrF\F\%^b@O/?4(hQ&ZF\V?VLKB/:aOEP10\!7//9bUV]Q_84%J%Ot2+[r[SYme@CaSL=HTLIf<cn6AWUAu':H9e5h$V"rRgY/[%PH#$rRMK/E3#EhXHAK@73("J:#$"d@?`6-]<T"68.A1OV$='k]%=gCp?Bc.mjTg0?aWDj&("Tq\VC4KaS3$8_HC-YsQ*!E>))dLZ(U&Q*kX(MS%pWQc2^Ys_ns7uu4dK&?WRcsfuYW"/L9pk-q78J]$%-`cZ6A#4hsG.iG#!k8".VjO7L]3YJj#g>M\V&'LaS?3^RIgU+9!mRJ&gU^j-mV,i=,^!(EBfrM*ap;18p'XKNquR$\(^et`XQC^o%](*-P'b<sk06.2jCB=W!?r1N6LJ1o#&Vf&*Mj8/gS+dE]Prc:@ZIQn^GU#WON\/-0("#*j7#%K@CD6!0OQ-f6.T^:C&i08j.L0QU%DaV4R(f1q#qIs0%#"),e*6='O:/N0-<?8F_7/d7C4SPj*OT8@^:^LuQ&d>ZU-)*Oqp2to'VT]6N'#!@cWE9Iu^>^QSh0$eS\5@nA%$.`L0%ukG:Yr1Eh][*cX'!$KQOm)RW6b@e!%qk)&''][KOrfMrMog>nP(=u)qF[_TZ;?i\P^t037pIJ);+*HfIniV=;!!4iqf:A;%;$ErQgJ4T/B(,_M;&pKa0Z5RpB.1K(:^3"HgQP1U.e?!C7%n#RPg^cMi3;"C4q<J&G'PgY1Y>q_`DG8R:aDJDdnh%SU]G\ITp1,5%=:-G#M\Sj=bm>@ZlUT<CTElOeqIfrtqSG<u5kH3o[$7B!^k[TReEna5=RuR;eh@*RZor5c&l.HUPRE;g-!I.)f>sL.ECpL)YH[,*%?*UPD$\VLi'5W?_"V&U_F%S.:."qZ3Mk)P0OVtO\@EX$0D7FB((o^WkVJB?D#pMopZ^.)'<@]2g'Sk1gJCtAs[6uJhm4BpMZl(g&%(3*8U/jlW+^'AHTXFN;K=e4Zfpst+aNK9p3W/XmnlR:IuL&dce=uhekMuftc"GYaue\(`Lqk3(F%R(KoPHf39r#T-*Q])_rUfen/%0,6BN,I'pY,FNb8jqGjaZi)ZrIMds=dja2qju-.X$$$B?G/&rUjbc7RkWLZi]c=E4jTS@liE9B0*@Qn4;%q?!XB6&U2f/VRR]pOV%![dIg[Z-a6b:A,%*6l:s^(*32)9^(,C)7HrC8),Y/=D?mdOq_=C,;-[D`&A!9k6"eGfWLM#`A13]6m^+J.1ZF@\3hIJoO&+;um#L%J=n"`j$:iW,$F]51kjZ2\LY%o+q+`/%K;4BT8]#EJ4PfQ-s0&m5X1]eqi7#nGF!BVElLbbcq'FQKh+dgcjMBHNCT;I!-ibkPBlZ$%8ga#)jI7S@TM*]u&numR,mW'>#(X<f^J"Q]HqU&>dA4nm%.^\`MMA/lIV_?5QH2;&+&.)k.8+,a4g>\oL]Vmj3t,@#Qt,*+;G1Wm%_U9pg<_HUFPu^G-hhC-QoMHE^,+T$!O@9N=e2X5"C,m%!'D^@?6B-ICPJ&o-rW(5u-7.k?"6]hAP<T&;OaE6HKKg_6D+@N=&7E=8%JDmJd$No<bS58lP+Dk_U-B#/(Q@5T;XH8<TCZMg+8_Y^/qOSbQ9<b'$]6d!E(ej4`bPASKPiD1fPO#@]=,kCuBa.%p*A3#qePYAt%O2^ZYPJ2^UR7&K([-37Qii^pN^]o'n?bqaq8ru5B84N#=Ak!F^ja]=mZ>S/Sf!X@7**`T`<TRs(at]lC="&%/ojBhK8aN#\IT0\A%ZI?cNQ!h!#$]<3D?Jp8l)n)bm;<(_u7-FZOCLM"g6X+VFCC\;63+'S5\.$[e:tSE=#TTsH<[fN1+69^a4/qPOR_8C6;E8.VYV-6b%ooZ>J8"66F8eoeiNJbTPU0LVhH_\fqne<_mTNb-tV9/BeE$OPB6?n,$."p?fOt.226XmP?ptBW]Bd"Nj-i6u>Z$8!m2f!4>eL7IP%QH[C#_Vp9Ombs,u+X8<&F25K7VJmCYFQ<e`fm=ih;5VOhP)_0&9#"V"hP-DeD25F-<)V$geAuSYUD3#R&l*?*PPEPa]IdJuG;sMJ%'_D#E1'PjhQf+b*Ci"U3kh[ZIMInr?cfSJrS$>BThD2tXTA`;+Q<RGHZ0fO8Ai#qV-"PA5`ogg1][g>iV)&GFhsj#sN\-o5!9'Ji%(3:bIE-Qe`j3^=iGc_;`(QJbCgl2Xfb<=(3Km4N"l4[]+ZFO(Bl4,FK9:,5%nge!@`:@+;(:.:sTWK-=.3+f$?Ym'*s'7n1[%ahS%??KqcFm)\5I3&*'QGtPGN"n8pH^ks7Gd0&#af5k7bEA,0FYStN_0r]WY/l$6q01hlTt3c'eYNtC'*N80BUD=&"<<S_S,d'k_bba,%TfD]'WXHehi3gBZ;-b=4,tZQN*2^P*Q8neOQp<W$F2oT,htnGdOX*]=_X2"Zl4[kI/c:.oNtM+H$2Z20$=pQd3PmC/=/AV6bYrS<%p-@q?&f60V#nm@:mnY"Y0P&(se.k#9%W<#2pRf9ci=phU0-Ya/9\BI-XON3Xm^#q1ER'HqT:FHj9QN2B*6:fpn.Q7Z+gMlMj=CD1%"*FMNKL`hFTf$P0Q26aVKgBi;6PRYtP>#V18Ja&gY1Zo@B.8],Ti3[6;kYb")"UEP>s]6p4R:>U;no,.HX*Xo;OLt?'dT^`Oji_*%^g!5WdqmuB+d\5FO8m^DYXF.$iV_\=E%lc?eJ[m4G`A,gWa*Xn),hIaG7,L]EK)4t#B.Uj]HD0KQM^g'$Z*-PEDc1D,qnUirb>_f%]9G]&^;1JS;CD"V;@[!+EL<]^LHT]p[DA$2_OgJF*U]<$R+0',>#YqXJZJ1,bcV`mQW4Q8=k/i%9AGp'bFWsE7-cR8?@[YtZT`Ku%$gFF2QG4PFbZB$FMR-jkIS0\/lKJ(j+^'J2&3%f/MP%^TQ<i$@GFT73pA8*lQtt9-(>J*'2Cq\ULU6:MVnqmL--coGcH@>%VY9@r%s$H,F%[P\s?lOk7eq$Ot^F4/#Kp\8C?eK8t(Zc;"Te,."$%4MnXfoGmol*4#g._"0%/_<k^nJS5#+$PeOaK%!=F^?Vj\&JUHo+:=%BHoDe13agCH=PGj/3go/4-dHR[ORCS[OMk*dfDNVFPl6`G-BJBbt$.2:2RuX\uC\GQ`85#eO;7*^%tYFIJMOo0!s.SRjeCSogt@:%-Fkk!g<QO[j@2!_WQkAc/psp[q8=__q\Y\gMUo.1J4<mSd`Hn]?*W+=)5P.Yd`&XkJ$JbuP`On*G#h.dZ_D<T``o.p.f]nNFpf5E%H&OmR@;j?gWgCT/7Q1Lb2TP$\YYH1'?`<4'&X::-l/GSEUTQ)cKHo*tiX1!q5*6Tb*F0R$aX#@d,:hV43<jjDi6NQea4>"pI?p\P%Z`(RGIgM.a>bT/>=u-rGo[>V.$/^Mo$6=EG?pqe0+L`Pe6H,F34VN60(RRmmk3us\k_(GBTIYZ=-due&^).1ZBc?1;/lbAea@_f(%UK@&m.ST(*Qjb2.kh9r?4X\.i:dMT?(.1rhZrn6\.8GR7M/@e=3$s3=EdpM!mFqYK-k[Q(7IMZN3)m!f^8dp2M\]U7/r#X<9@0%9%PCpE=$:XQZ$713P1oIR=(F]Y4`s>T0#_<j+!!D+D#L&p^dG$Vp37oVcIKMi%!Mnfn-O:\f$A&?(_H'7""44+tPKcWt_QJcd(7KgX%dthI:k)TQonOJ0W;<K>s$S)6MglNAn&<I#,2TjF)fMS#.GWQnA+db^3"1<be4<k@q/)i)$81^OW]L'om\.38GJR.?t/kWDW0/'*i%$PZ#)?8MAr85`ZUJ6cRE1$.q81fBKS?s&jp."f,@-"rd7C<Gpb:hE7aQ\?MR,nr.u_)0<M$m$mSJ>,"le>95<=c1crUS^==TP6]R%J2LdaD3$&XW(ns6<&#R,e7B1k%*!pFWk;Pd_B$\WN.r4--&@6aUSipFH:2%sLErNP0e>X:F,U]r\e;7NI^=eR0"e8u,U83TXhFdd%Q5Kc'#6trE@KfR7&h,;>9-QMa#qQsj7&;0DPh[uj<?kWoI8FZ,K-o''$PY&E(J:tL0F*8b9p.Qj@Ye\_"Z6-L=(KE`.*:Di,HEa^%/2T:2boh"iAVZN[%P-Y3HlTu^&V,ihll]GE9-=`KV(*HA&_/!Yg$lt?W.Z=>r726P<IebF%!&GST/7NA>Z:JC%@u!S3!N45TW#qh%8>?WU&;`O)4=uUU1+6%3%a$&RXGK3aF_/6V3e_r3q'n^f-B3RBp-hh6a<m^M8ge1C#?jP9P8FJD'j4&[kQ5Xp*Lds9<J3^("0*h;%JoPGb^,#6^_UFZO#dX,SF,V7"R]*8DdTe=q3*q7ULKIl>7-/C8.TeNYQeKl#Sl,J6mC_+mGa1Z61`OeBC<`Q/g)`j/<7ddW("82(%Q1D`@EuFgQTm;Pg&-3(&P4:-N+"=JGXD8(@>LYL@jN<b>Oo5LM$U'TZiJ`6'DC1f8=_S,MJASn)W6DsEjlhkAFD]NPL,AK*M$miU%l_Et,K)@Qes5rFX)>lE@s39Q<=nutGs32t`&cQ!XLO91&S!*deAV0!XjTa,i@mS*4QG)X"mX$#[Nj^ju:q$.$-^edKB1dJ?\%T1#%@R*J.F'63UAR)I-b94X?@Q)[dIrUHY9*Gm7K4(]^H9&,U(sCssL54tu?Cq/_2Z2Gt"t#r340>nD-21(7FcC;t)rJ#Td9Cf^icI.!%05UgR^_``=Qa',3]1h,O2E*C=-C[Pp54!66mb:KL^gf#oaF%a)<0Z9rjq$P3R(O&+lpLXgW;'sSS]E1T[tr5>'BQ.]=&F6CS#7u>%=LffF06CmQph<%_OUi0.=BJn6J:jgq$mnhLd/A*DE[R'q,TSQcSV8uX$"mei[Y*u!=t5^9KTZiA#)$JA=Zh<t;7V0[k^=BK4`Z.]%jb0E.Vr5`2SHs\`;*A;UO-^3mm.Q-2oh3Da[GU#SEtHj3-snqoCbN_7WY3U&5fK7Nis"$B5g)Sab,[g$$g[On`3\t7X$Io"MI5YW%QkDt4_,JL6NTCF-)Vp$(^(`$5KR0K?gm^nM2k>%]!^,C9$(OeaeQXl3H?Hud*o2>(]jZ=CP?+A1S&s1"VA!IB5TXaFPgs!=%]s;.%n@CcQ>VD-";]omud^AX,(W"mfN8A*RP`I2EE+d"<:]=aZ3bT/7PJpW*]b#U1FGP:>UHThI+.Plg#$<7hJH:pUNTH@XAH&0rCFXU:%d1o6KMQsQg3`VEgLV-+d_($<5i:E1RY2NJpUD2HR]#M%dP4UYXUFt!;c@oLSO\jcM"Dji#34bhN/mC.H`R62,l?QMi'=j><(U<O;%M(IM]JDY!(i!P^+=k?'C:e^#JD2*RVM^->3WjM/^8/AMqP-e2jnB\1on@bj@,^_m)i`"7$#+:.)NA?Dt>8[ugB1k\F7Qr=YKiE7b%"9q9G8@#J!d"]tJ)N&JCRaBS%/JW?"8c(OeJj`ZmQ30Mk;VS$i9EjBWQ=cBo'j\(lE@i-Q-X;1Mft<5bD4hV_]DeW,dTA6g>(bQS%Ut_89RgC$&><d0`+RARp6%c->+QJfOHMo?a/e'2I5S(hk5RO0LFeBqWVCrZmo5]/Q,)9,!.Y9.0C0=-<eeOSS@ZjJtP--!*4UfGG%g66%Xb3!pt#$')/%!/]8>&;c%!UVb.'h>*!#Fn9cjh3#J2laI?@d-uADOfku<T<7B%eL;:L%g->D?/?>R&drMNg`Y=qdW'f?GkH@%/.L..J=`7TB*p2_3LLrpCE^*HVdTE+Z.bD3P>,<USn("i;nE4HE=:m7\Ni=r_`J^Y..X<P.jR5l$pH;8#OXE!I2CE%!fOcO_eQ]3%;')aG7d>e]=7)Tbaf7"b"lh>"ba$T[7=RDW;e:`JJ`Xl\:ca>eY"Vm`^FPR8A!ejDMFfraG%Km\;9K0[YBhi#ppL^k:8Ti]OVuA$%R(jo!4mea2\Rq%@Y##ndS:p40B6&0;ltj#o*XXTB3g5F'=P8-BR`XZtl`#!S(6pEgna64_oPC`3bi5t$<fjkOm4BDXs0Ys8'f%nG%AUm$jPDSZ&\hBUZ000:iAoiu@o;]jt!#g3XP&[f2hi?g-$@8]m!%V#1JCRK`!*W%'feBUBMS;J^'e6P0__AY!HFD$U(r6QU[6i9l%T<JpNqf9E0eq#6eOAFpF52a,*0hG>p=taIH&fp[:&TfRfaf9)Wc;WMoA24OHAkOGq'u7U8Z]M.!'RX[FBGYJN1<GNCC2GPQTT'#A%=4$e'k&?_4=u<L88X$Bd=L$)d1;FV_@u4_[Bd3fn-s;5I;H[SRe/W)"$Dkta#,0Dg]SJC#W-mI[nKGZq%!'5kB`SJ6"ud6sreHmC%WGpLfY_PoMEjdC&\TkOa5f%%T&O<($N0DCP))"%lH7H%S_l:R=P=d+,rfJafEfq0e'j,L$L'V`qFo0G[>puRu$&ep[YOWB)5que*%$!t"H:?pmQd%$pgNetn)*&ilqVpmDcs'/mN?Sh$[7`$c<2Blq:+okB%HP77=$;-fe+U'Bpe2Hep1fI=!87c+:H/9T?1Ficb\[j;q%g,TIG;%"B7KPTt(=#^^A?J^,B?n8f[U)[%c^bomM/^nO)b+ecg.Q1l=.sI4#'FOlA@ErH9J7''h)];@TC,XI)5boE9;Y%r470KRZ%pMAetKsam"4(`!#+=Mt!)U\s2"=r3PnF:VWBCCdE#he.uZ?H3QKN*?q27,FdZ]d>%c6n"m4P\d,Z_&'Wi&\+&npqN5b@6,k!JIm5%'?NOB2gi'..`"YkStu2;%&)%A8@bj[E;/#ZYn56Xj7h:2#RDcK.G0J>J17AD8g;3bIpeepZ!:j(88pJo,QG6IPDGk=o(eQ.P)D[D%ACX[;E`*-uHkDs(Osn^_q-4+2-3T^*cs&,D_GO--.F?4MD0-VGjFB*_A_(]\%Kr*LS5[gG&Q*igL<BT8hPFg'.VBDD=(&frK;d$r%+P77LXb<M*b(M[^65W!YV)6M_ijq.lDFVVmSJ$U,SPb&Kb=S^q,;=?!OI6<j#,[Ll)tsPg't."#@.l?6Yr`*3K6S\L84(6QYrdVl%%UZ<)1_YGVll+Y\kV>pml,I8^.eSOhE"^beK6(or?-Z06-cXNU#&&7B5>E3QV2B7=\1uYOaQ#l@YA^L1)Mf:hAB)b<Tjm1=R,d%3%n7oRjCK8nLM0qYqrP=^LQ@[0)^js4TPL.OiLJ6$-j'lfeCfaP*Cp%W:DB/<RHh2[?S*_/_g;.H>S#7^"MYRSggiS%!X)IHtmctp&%HJ4/#2N@@k96!-6Tgf/DaY<Aj;$`d%DmU)c]cG;1QJToq>bSV\7/:WR]cG"uGo:;"(u4<s+7AN,P*;S==*Hdno/1BLTc-\M"+5JU%l>Gc$qMO6Q90m1+gD8Ge%Mo0KPJtetDQ^\f%5SI"_/nk<fc#'ZSJYTfD6/:)fD1j)`Nt,pODi,WW>;XbWOHq!]%#J@n85XhgYAX(%V_>;]j$q7MY-*_L_Wsk$HnaBGSnh[DDAGU/quWj-a(f*D:(HabG4mc;icY=DL!]D1EYa%<g^+K:#&8csiES`XdT`?[1sEoOV&Hgf%cI3\m`7]-+BTlT`kR=uc`n'(9[aisc:t'MCPUs4acOABCG/WFG/bgpJ)He0=`0a-5+62slL=Q"InmEZ/G5!h=o;uXuJ`4_j*Ct[$%Do^c_?/t'.AsR`FR<[2(CY)+4TAMieQ/[(=@@[nhir`iX<]d:f(_7,mAcUT\VBeB!'8cE^a<(NE99++>]PYbuRNL;(4d[=7pP&l5%lXqGZ,$P'-19ejMGOqNpEbji3@^2J-X'\3<G%]U'6eu!?4WKVRDO)6f5X';q\!f=\,apNG@=haa*sqgSSW2%NeqH6)_SHK#W"fG5%j!N@B"rR!G[6*(kII!D_$t8X%>@\I-7a4j65]l1Ff'_rs)\qeok`XYfmHX%/S3+'97T(BHZo8n6,qK$E32dCmU_5q=\gAOrP!NYq%D(rVS=<1-PH5LON3u8E$L!R/]fDS&uO]\]a+ipc[O*C;Q=1SK4S+0rqX<Bb?R%e7Jq>l%Z^)kcq/4AW$HV+X'YghsVFEpMr9M#'O%rUPK`B>a&!OTaYkBK"Gsg0NSjMan&]>iUjGOKC<)Ao9<VS'Q"J1[QEn4_TKO2O3I@i3fr"#.*<pOd5d'C\]US#nJS'WlElBg/[]3%_eCks%'o9Y=!*RAm<!Dbg"qag@U3AVYZNAfV-tW,I$Y(e/mf"0VLT]AnYH:V5*[J5ACT(qCCY3%'+9p[U9c/9bid`:jB,K=63q1Y%_MmHf^rddVUoi+X)MOV@j9lKgj'u3cnULt1453,RdH0:W1pfFPK&iW56o:.\Sk$fLA.8<dBs)5PD4<$cG:`spVs:l&1t9#9(!4jB%hj->1:lTZc$UYTnmBbJdC5m1Pn?&hFQ`F=(`RYO]N.E2o",6)f-rifXcrt`3a/J.sJUY".*Qe#pD4nuabtu&B>.XtT#%aSLB7V(u%_,L)I94)ZbYoT3:*=VgD9O.c[YhmmU"f=bp)ne%+"0lN-(n[jK[u[moRO6r0Yk$:!&WNqMf5=3gM,b`$,+0-#Pau[_4ad?[\[E%l%\kB[C(Kp>_2?_%RH585hcnO(]O_NB1pSLGAgZh^YJZ5Wg2U1SU&o4=7;eBiC)40aAaNRo(4JB,=L=ZNL;IfNfVdT.nkE4$Y@(p3[%]QW$B2sVFB_s:6H/j.cK2qdB^)e=cgfj5R\c%<KAUD+0U(Y=4i-[#L2kWBEK*mIX1QhJ3_*@ckk7'8Q0D-LYi_3%3J@\d2^rV8u9%5I$FaJIqSLJmY2Wqur?9)N_`(n7eg?QM'OcU-W0=[<41!;DAk`.\^ikW/ab[JVu"m6;dMn!r`PM+M<N76mF`l#Y<DS_@eJ>67#s?%d1qtH_'F_2.i:oUl"7Cke>-?()[e)s`_9JKYX7'#G_8!\>7C2gCA5U.?*LD'D'GVQpF9Dff<G>Io8M*i5jaJQT^7Eaq*5dO!Fnt3%U/,2u81Ek*pnVO-mZmW];!DlI5Qf$#N2<4$%Yb,:`S[D9UmaL[(3@<j//H.7?E'Ys-F3u9-*o;?K0"0hqE/K2<4u=eU8fK*F]5Gq%^F;koW/2F'\m(40[F^>W7:eurHrMih64/\a_H^(phdNoF74GH?7b,o,brTIE6[:sKn&AJLPWHt&C[+U9'mCgU8>ZKXd17\98!S"V%8iI=OB<Wo7ZWS^8H*91i0\W!L\gIQC-$Po/_T2dS^>Rrc[NjPBlN;%OTRSc`k(pjp:'d<bQ>er#g'1;rE!o@P.97*gO<Or`L4WYD%E7C>s2,;9C@&[-fj_<\NJ_(]rZ0"oHem7QEd*-K%oRg`t'EZ'HYRO:[$_=j=&bWgn9cd\N_MRpS;DcTM:^/Iua22dP_"RW&_u60#%I:-`;18B1743Qa+q^6_P]mO+1YdL(Q7=65fKFX=)K*>\WQ8-4`NGu0L19Bf@`n>#/!Qihd?u2M3Cj6BlTdC6,n/$Ao2/Z)*N2P;p%Ag3%Zb@8aUhV'b!gQ?ne+gr1o(Aa>[2[^Ro"Q%14W#/Z.\2UA:cCQ_5,+qH^\_7o1n'X4O=;:L7O\jObae:$Xc\>qt^00[MDFGcq%L]f(cOWqk_,Je<L-NR"&Y!qlAN0+9YWl?VJ2Tu?"SWU6B`H1S&LK@6'/(bPCj6!8+P!e4$n\V(d27=?dPQpiMVWnraj$cJcip8Z:%,>0dHmG="h&Gcs32:o)OorJ]"!^u5$!nH)1gaP=4>!@X!]ZiTA5fW&ZCg^q"XoYIs.h\H[k_j$]m"5WS+i*u9#/Wr#]-jE%5l@/>%nu<$>DC(')d)(_e>,/,Kh-r?'4MPGo-k'$4(8K,akmjN&C6[U>89m@QB%;,mN@&V/jHn3tLrDnOLbBEo>HrWl[A.:A4senrgM$^k%96(R]/j$b8id3bAk3G9+ZWX>fIQN@KddE^S^gpg3*0@G.4OlN!.q/ZrC[a!#GtM$KKNF0!pjjXU-q5Q<4<[QDp).Au%\fk2'k5;/%KSXb*1a"(T9(VJdBJ.pZA4f.>Cn!%*3kOGTG&qX`+Ee0=Pm:6.@+r<:o2@54@^*VM"*!#Hg9K5CaWo"eDDU)FN>^#N(q1cR`Ztr"%YZ2e!4BpRsg>06DU2/LB'\jU@D.r;X>?<\d*KIpUE/X"]<?K`#Q-9IJ:=bGt$)WnP16eeEC]Yq@3$'Cb2?T*:ekRG.%Im\0N(0/c%,>HS$p]*#;IH*<4+Xeti-s>`D_'"PcejTPZ`7Y-,RF^NsasAB"b)ke"PK"SWDnd)rOlsLeqCAG<fl\[rX!L/kh#S9;as['Q6YU%g%A,YX0XePWDWR0d:#j=9-Z<H+$ED4p>f'`@1(27"ZWdA@t(k@V"hOU6_;BEiT;F"@-D>;3OR5QGu;_Ut=&$PkF=j53p_0geN=R>?Q%-E'K4?u4)C/SI(eL&e0L>5PqW16aE?9D+oo$;?.C-c<ZTKX\GhbZ7?,YuJ9Oq:*F`M)cCe01O[$,GfqS:Ud8s8P)/a]6d"';_USE%i*?NXeCl`m4&2br[fdSm!We^b=2RBmfoFGE<fd@M"?.5?LprCsZ7/]B"XN_WToI<q(V"+L3ao<=[h)^6'-"a!=S"2Ag<XSWU`sSQ%NB;GVL;TFbWQ'\7kXp9`7!)uk:kZCE207b9gfn1a`&a:alj)oHfO1-iDZr%%F`6bk`-$BPo3S[9(iK_a#JKNHS,m=c.FarG2U@F!%JbMPZPR#+.>si6;iP`1WVIBc.o6>eE70AOU5`%Q?h4piAs(6:s<Gj"[Gm_QpY81e_@_$\189OuS7+XrA[6Dmg2$FJK5(N!;?OmPS%=TUmN!H,s86'["s-f*18/YJ#3Mh>XenX`3.4>]kr.?:sb7=,Dp_rmg8XCPb^V'qS.CZ$HqCl\Q7K"3e7Ce0Hurls;fp$!S=igeR]%PaV[6d^R.RqZC[7dX^1EPm1Pc"_3\V-oE"^n!J65S7$%B78J040U;aNc2%4kI:lU_RD.of['PhcW(g]MCf(g+?_UWW4<$fn,n>t=%-Dl*5[%=`pR3+Dl_^togCe(G5I<I!WcdHnj0GVZpM&aKPm0)*S%f".s9Rk5\ZniURBS<4oMkd+\+h6lHU-HuhUnhY=>X5gq3^?&Q%UR0.^bQ4gcG@rpSVJSqFVn2*-e4e1hDeF:^9OQR=e/;D)@P'lX^dQOSJ9,-a0h7=jrUnQ7?tf`@nugKPUZ&HiWk=0T>Ar(SeIRnA%A(.@lQ9A4`"gkB_L<foPSItQ(@!24@3p+4)%o%a9g#?,d^RApESh"]VZu+-40joa'-q%6C\94op%Xr\E/&C?(R>,0JV$i62f?e8(%*#i-bdW?<E@G2aZk#>A3q=J*+E!)<C`Dh)qYs0hEq2SUb*7L$T*nrN6(Ed4,!ZM+dVkl*d$ApF^<BC<\\j/Fl>@$l7#;k:A$?+Fd%SHlud-Q\+cc(+m0HZ7^^q]3dm.NTWNR@XMh[,27%HEe!"9W(/C-kVACXSCS=F[1.X&bqZ5X5UlIRYiYWXt>@ZV_UHD=h#0oK7Z`M%&[W'@MdIT+:bAIW^OX=)`P?.FSeKGS.t_5#1)%IRN(aD"EFM;=Ms%;`"MS_&%MilRIOdZ">JbrJbXa_![_C1$L'7Q3*cVn<-,b$R%52.S)Fc7`U/T;(2/MZ2)1sMH5&6rL_U_/VP-p1VD:0:n4(J:IR9ls/eOT=.B4rj5(onf-Ya[T2TZ'V`J$,2RM?V#oL>s/6mn^+F@%H#'l'i"k6;'YNCU!U0RYKB[?\F1Dc_R'H181VbLJNbBe'0sD+WK@pGXP`QY*(BTe9\TPP17!0f.R\"7l&8]r"fA/X5WWBb0`\c.&%BY/++0K%s`eI44%/+J8VF"llq.D][0Le@-HiTNn=IU2W2Zn%!ur.;-Q0g3,UCA6nA\F0RDS;jMi/\ia2!LTIb>LDR!))8GZ%9RrW%>^%e$X<m)^5eX9q1"fnud4G?*0@=G@2[.`nKF*9)+)iQT.V<De<SZTt/3O4a3NDl4L;k!/]ef?r:+2el&TK[ih&L9Gm4KrGZ5nS[%'=_/Yjt=u)o6bM)XS7Z<<SuZ4`oICN\ruc.^h)QS^&6YT,Tu^oMK&OK)taVcB0t\OG!TDcdUEE`.uI[+cE$$D(d-GZac.=%on/s_%&fp;7A6rI9<m5Ql-1'75;"Oe_L#[>IE=rDsPL4(47W03dfMk1H$o^5BMGh'1]eckG=qj7I52atjDJkaAj4lX-Qu)'l0#U4P7Z.GQ%L,DEZV7MqBi:YWS#<g>%@9bkjd[=X-fh*O"RH^OcJaWp<6]%b*CuB8^5EOqPD_s.FRn#")\i"K=3C<nCQrnm0cc2ub:!bJBSC72N%*#PpE2Je$TZN6#bEIOu3q>=`^X^/Ws9``ns[_BHZ@HoD2GQP51%CS!F`C?73'ltXi0ZA@s3E:no&rAU;q9f$^+MMnE)Aqeb[>u"o%=aalpNS6c[*f=fg>>kG[hap>$ObNIZLm%V`%4kA8@D7@#Yn%-C>2pQ+i29WQrR#R5!#I65N<@eAaW$7P![BCBBF\p&FF#5<`*QE1%Pn#?T;PW8p^`SL26"H*k%r[,LURRgck>V'$hPT@u_Ro'J7!<g?leZ@4d\J6&O+U/t_i_C(+:,Y@8f\PgXNn9&fbE@HpJ/n>G\o&n%&Nk9?]>&95-+BnH5qG"!%$$PV"+o@nNRl"[Ceo;hWM`TNKQ;O#)YXr@Sq0uk2a*Jr,Dh8g8^@STTJeXuBmYA]F!N]NZQ;AP(Ng8[%m=r%a@(7]?\?M)%Y@j2*;$+cpdnPgoXU"e4$A$T$E2p,&b:NsR(7GDLoG*'a(.S2c.?SKem"hgOc*SGdU9l]kaTBZLSMphCd`s>4%JstVt\"FsKBctIh"gU2n5MY'L)I?%\".QA0/Nc+K$S<KsSf(E&YKM3P"4)'7g=5;Gp4E?/*$^)M!Vd(%ZOK*_+P1't(E4Rg[C-3s%O_:X7WH>bT&J"_2H,>#en*O6NQ9^tcY5ic*d0M(AD_-tZ,bli/\/!^2kihD9RL\nVJLN@e['9bnrP2sTf.T&e9ZgH=k[1>'FBG0f%O#H\@kLAli^=l%rL>rJ:)r-[%IY!C+H@u4A9Hr%1DTq5DXo0:uE<Pp1[3`O#-5sN7'_/H9Tb\8cle?PJAq#'.%q\5c,lQG7ALA]+%pFs0JF)[IN_%fGK(naTN]LZ_F")=MVe\h"R*=?<8W3gIWDZ%ag0]TTCD%#XsdL*TPc1Y\F10a!0d21,pj>3S%VTaV8Q4)R(W8EZ8%S=MPX@*QYGnqja]<-T/`dchCu$_5JR1fsG?__E=U)o04Ra^P[;C>NQL1[H<=*/eYZ#Agk&bE1+RTfANHRn4pp[Fnq?6O2T<lA5j<%6Zg,]lA6Du.PPPYDF:Q83gEKXO2*QAPsIe,5]'=X:hrROZHZ</#XOlL>`aNqmAKFT;1-@9!'Ie*=NfQ25Ct4>LJjO.jZ9=VAsFd1%X&KPbDlTh3"g@92(9eN0HjC/ka-:TNM<S/3kP#3\(9&a.pO7fp#-urR09`nQEs7?<@0<9`c"^!>3CJU?gjlTc5mLX!'#9m1el2,D%Eq;)U1>\.0-6(jdB=F)iGT1iT4/=*k//2%XW)Q4G,0:3V1)n<h*MHO+"eFk7!`B's^"N=L`[KIh!$(u?0fcXEg0Vt@;JA]]kmEZ+%NbE?t+`5ml=^$HrAM_:3a8fF)7a.;R,`sKNkmuiW)bhm);jn(e.TZ[\W3KQMG$ZtJA(brrDVS"ATj\8,LRqKj;-BHAg2lb\#D4TZ%O\mn$m1H-jDiX2F7(uqt1TA5AL;<#+@QAh`:b(^[Puo'cFWd+3(r"W'We6V>]2S(=63X/0QV0@sn=%1W/o@kq=RkMh-d3%<o@^NR%EB&,kZGISQC$:3T$k)0k=bWtS%(PG1LVBLX]8l63<Bo"PlW-OFYl0OrQM#hEY*b;2.nSkg-4Zj-^fgsE@"#FX-""S_l53$TPc;Ku%k`_CbZFErOnJtYhXXl`#XW=jM$p^40YrtKfhlLuR!RGb1Upb"+KGoeh2.!5LS"U=GB5/+,i<%JsX14R>8VchAJ2Cqg$a+h8P8RFF%Fq<q:/E>054ch%o=902<;4i4<R*Pr5=kG"pX`*S*CrqqE/t`R\C_BrtKGleY!T-A6dNN@H!G"gQ%%+t<`@PgLSoggU,t0Oi3d*a#%9b#`_TM&C#$DmME,]<[c,c3ITC,6]2#)F@K3C%an7@u'>8sq:+@Q'iga"*`Wj`Dk:5rg"AO:q**ccQ;\p%<(rpBJFL_s\7h#M8$L%2/#go-)N'=>.`JW('sY9]88r9A2!ec>O68fV`pc+!\J@!h"Ce1WI`X:1tDG(P+d9;4-o,(c^\2IY)\GG!c?V(CLf>&2s9W?/.;Ol%qmi:pFK1+alh)&U$_[4O2UT9#(2E6i/CJ?OW-OWl*,h`YHY1k,"OZ!I^geD\d!FU&g;)qCe9&&R_OSM>rN3tkI%Dh+C0MK:K=.h0%45I<9"Q?D$f6SfkAno#2Q`+cU4?$:+%F-b_^MD]$?l<Sa9\T^J(*m)cB*2c%73*l-/iA?^VXD%"!Mma&o,!'DWi*R\)&2_>!ScbS%>08l51\n@k@>OD/P8LX'=eX/)8,&$j4J3U\d<*$:K%nL&Kj&eNoWV/Dj3h#`a:tSi#XXH21>.N+N"se&r6iaMU]o2L<Hb8d7i7?)%Pu3?\R9LLqBMFT^f;I6u$g'uACDRBO1\5,=8B8?2]%]T1K/IPQ^:&4'R8+-clt/mX%l7[TPaS-gU.!1\!@bg9d+1W!>Q[4<I)ZRD%&Y5@">9N%mh.)Y"J/-L4U9B#S)IP;cCL*RA[qT6p2eP1OB@"OV$0bPjP@7/LNab&#O90u<M]ef,M_qI*q'BeF$q/fS5,u=cVJ@I,%$BR$r1/V6CN*7E:e"_%SV#+?&$IW%*\^<QMJM\;.1//a*MR3psU('X>$\Lj(aY(kOc&m2#Gm[8nA)7W.^9gMDRlrom94g_!4$2Ah%V+"b%qYHc2!cO*`R9q566_._a4fsW[Mf.ZNG[*[@j49)c2Do0)ZuKV5fk6!q8bA"o0:9*?bUcWOG&R1h-37:6BBX-)WGb4;n@[@_%5g&M29ho)lOgA7h*R]XZ@X(/6+jq-Z'V.frqV&]l__]+M`XF:N]Y0oD6n4-`QIi4"/d"Zd9oi&LBXLBdRMLX*^22X?l/W,p>9Y*U%@tkg8.?H89g-pa`)OP?L5[#X4%ehRGVFY?U@`f<tNI*.#`kQ68f>Rc"B"=nq*9j][1ukPudpn8WeiV?Z+pI#$7lq[ZFOXM<9b@bM%?-DA$cO;)Fe](fUAk9bJ/?RH^=S?m<4l%r.Jb3ahZ+M&ab`Rpof&^(cECWRY)Sa"iX7Vq&&o$2"Ef8fpBkM:"4s(g"Jk0)T88Hua%@?g%oXV3bU!,_Und41F&b`%3s95H=*h-&^Go*?e4m61EZSi2Y;[V(L1L_P/-A\'qaGE8Uj-32KNK!D591H@cg>3or\bc,KS@0J.j%[8^ra<0>bATn+%.,*D+<7-c?^L$mZlUkbQI8>@K+.I?VPB/.gUEl`#]=uS;uL!;uES*l[c*nIl#`Cqiu.`NW0U9(7Ko\";,iQ`3h%FKj?;hL%N8.aP)(gL]51/L:n.Rm"efl1fe\nnDl`=#OpeFK@4#=T7mS7&2Wd-9n%Po*'kqq\S@l1WERO(nR*u;4j.Ino/%qDI%Ub%2SEPjP\KWT4d@urN0^ot=kB78&Oi1eRusB:e#A2jW62BNkP8R+,u89(oB#+SRbs7"Si*Mc0s_HAWDC\t2VTq:?sS,F46s.sg:nL`%HRa)QJR**"Y._4()7=q)ls]$mSo-),<K<>-#Le$D\+N[3`Z)75g>uP2[c&&@'H+p%p6feZC]/?sVnL!&A*o8dm##BAg;_\T.mI=]%)kT$IFDo8sf8Q$!Q6O3#.`_&MS07rdAnFB<59l0OBm6_j1C*9q84G?tZ&,.GD0<'QM%0<nVSZPJ.-Mb+GELB&#:IDPXcl\8\$iOE%^@dJ:#dYroSN@cbW::g?U:s482m.P/pSYURR_^,t7=[PiRF#*NHl^be2<L/`L*@X4?b>Xg-5=KEisI$%H.CjL7taPL#X.?CE#O;e%[GGVP'\N##dbp0XBI,;F6ol)S\U#+U/6O*d5AQ"\`f9k!(X:?>IDn`cUgo5q`]4tnd_<((BkM9=6E9fjb[c?l_.,$m6(2J'XB1N.%mpA@Ql]AEAd/-TXOMWD;@doPhYBm!ed?r5m.J!HiOFh]gGlOhE5Gmm"1V[CO[',%e7LHhY"&]gZ8YQ?9MO5.,$#??RR@tL6UsPm`%=Vu[t!BtF#^3M#KWMRf,#`]B,AoOt-3_3_fV*3b07HA9aecKH$(en%%VmoH!oVs6M]#DCo&Co8t$p_hZR($hLm^>ZUk#]XY&lO=(%@$Bf/EEG,mC(ju)$hU8QQn=iE<.JmqQoBgDbQcN!cqf^R59"#PU=:A3^n/#g5XWdu@nm5rm+#\+T\1Oo=gqW6eXc:WVBh3?[A,3(%!!\,MmU-SD!Mp>IoPZ(oDYOUX0+)o,[,tKY0^->^R#EmZod^I#Ek].Iig,&$NFXV4JpA2,<4$%+<'Anm9t%lFMqX\Z4roG]hW'G$%)-AM29ZqPM.lJ2Ej(bq"d1%*`_j1''J&/reR4HGmCoUE(cuT&WIa2\<Re$HO>i42BK+W2ZIRNa3ElLd:CYVt7Z>6PG2-Z?M@gccn%mTD<N<9W(pABAlBiN$te&*K'rA'+H`GBKE_&,@!A[g[5)0ekkSZe[3Zdh=I)*_j5[U?PN2,`ppTD0[-('pA6e-TU=)`(jGqmijHO%*\^Ecf?0@V'<pjKD$o_o(;*k3:eRYCOLa&Qcq9gj.i5R<Dr'9^f$cfH,0_c!XBoa]6onjE86\j:0^E$gh&gBr7c-Vh,A4pN4a.0?%REoRn>u<t[KkZ4T-7jq/==<Fs/_O%^G01Z6=ZYc/KViP'06\D6FNc$k7g0^I_-Js2e@Jaf?RsPc3R\AM8,&a%>&)WeP$oUNT3iX4%GaP68rK=6)>,3haMcee-?01$5^F&Sur\E_oQ<?LjA%b:93:/AoCQ35?R.k*5,F#%?qDYa_?0,C[c&c<t;)*aV+7#ugKfM%SM*A3k%GV3`uQI,Jd1S7N#^0<qOITeLG;-Dp0+(%;2EbSmnV`oo*DlLpJeY8UZX[u.9=cih<^I!tpU<Hk'RAA4:7;%V?Vg'#h&Zk'A3?CC^%1VYmf5s&]'GjU3YVQ.X`<CrM1PWik72<Ne-@jXn^qoLR55<24#-cbGaE(l^d,sc=1/AEfVh<64!9sMd2]jiNOQdF@oCr`VE$$/6X%p=)-HYH>0PUL-7+mp7N&4UmZeX=R1;l`m>B.D"oaX;V?!Brm1RB"S.m8]Ff.*<lnKNZmW08d.A\EC*8T+eC,+2/YrW"k@`^Lr$RM%';G8fQ$?1m;iQoJXKL3R:/Dk4Y90UDX,4r&9f<m2S!lIu4AbOdOOd@)Q3nSMC(OJn29lYuL";+l@qIp+'P+2I@l_T!OsF1'1SXTb%!!#g2m3ph8@K;^OT#U'TI;>_/4Yp"]c7QIu;Yg6r<7n:Fa[W8;nDji$P+M#EmT$3Aoqn9?Hco6\%t#p;EZk>".as9dn^Bs!OBKfA%0h\S*Q0-4EAf4R<*%\$<Ni8Wj`*CCq=(s3Z20ln&6+r.[A4YcTJt,cf$Q@jJmV/m7)P%'IK?/OdO<JV*P2.2/qsVP-eJLA\d5AqM%Qh1L)Nc#@GVrd485!TTMqN+V(Tc1DnBUO'8gn?=;B`#H'7`GY[ipIlZ5(G6Nm@FL9>b<_UU5S7.gp+uQPa_`17@.f:44F3"25&`d%hNb6o5hU3i1'TnjXn@&%?#E3(#4]3fe)PNoC`dS9+;$J+-:6(ep:]cbDFcts<j513KXaUs?IcRQ-!_[>8=fRVmuT$@5^!R"hC]4%%qfo5l[\Ku&YtBu6*"9<mQdtk@HLC!F=`a!jnn$cX(#B*WTcJ#I>.rd\FW?k.<^Xg7Mk"ts$km,hq=&3U1KX;A*Ghh5!<[>Ue]dF-%fOWW:=)j:EASr,4;H1*Hp:5E-C/n&TMR>:JUCSVoZ"*o?;=mZXqKCVRh+ECT8r^G\4688*p%+c^_J<C"XK""'=r]0dH49d"bUT,U%qWs2rdhE^:MD/g<MI*?@]3o,#2N'a7CO?mm"Ph2bLm;0<e't,6=pZR;Ef1.Ep;NcBE@G_kGnhu3[\Z<'2l+Z_6Ot4r2J`ds**>&H%q#rZ7<kDFk2Q^/i^$%Ws22;sl?M@kiHad[-kO@>V$:N-fXM(?OoG101oJ3SPigBNCg9V*1aR#(#\tqdcN*B&X.]^grB"@HBRJg<>%m@2G$@C2:Y?I:Q]_eEj'c&?Iu]7QFSNEIp$3]44K9a6UE2JCSgF6)[je$'(\]fK0VRBfO]cA[?P`b+r(g?VqiDLfMDm-`SI*`-'Q%7o;?+>E:8EjLV4MGHl(sC=p;l\Ie1(h^AFFfJ3E_,JF^C,]iYmR.X^_gBT5dk'TCID-@N0[8sKW_<se>B$L8Nl=Vh*Q?uA@8Ya$2%ZQZ!]FtRktMnsS,q=eL'.$6K(BD8a+EPUr4ajn^lhX]aYgmhe*e?4[03ub?`D3E&qX]')*S\pclT7`!3IZ#AsZ;O[nld`HU5eCXs%;*+Dm5uX9G:+X-nm08Peg#p`*p0-3ib__53"dc57YN-_g\_ZO"<!Amsl<<!Q<H1*k?G,WhZqS%"\CaPMCPD>9Brt4^ZioPabD@\/%ZVEqMft!u@pX]aaBg=KIW[oXkqmbAr1hPBgAK*blENr]\JW5dZ_u#W@=XuJS-`\jhq(>'H,lM>EDlqU//R/^oT>910f1CX],kKOh%7$L&qYhQ3..0]F/LO&L46?car?XI($_[Fk[a^0HO3#p$nGHIfVkj2*l5s)LsBB\\Xd,@&dp3qbA%&nQ):<E4rnI1ue#s.lMl<_f`%.J&J^#s'q2ZF;W3p*](Rdt2p.6YCn#cJl3=eS")LD,8NXVZlg<L/'t1`cGteNB2DL6YCn#:349i:M8lb*6aN3HKD<Td+P%a6U&9P%L1KV65[CqC6*G_J]_+jhH#K<D*8m>4Ub<ngYeFFVi2r%F(+a[?./Wi\SeWqkHL:K,+k%AgcM"jk]#hMjqimWA.BB*):%k!7A8</+%#+Nh9a!Z:6ReS16QF,@orsYCoo]KTB*]iWE=o2^')NsG_4uR"'DXMR6P*=+T%A+U]RBt_IjA95/B*TuKaCoc-=#`HFBaq0'<Y36&%SbL_'3Gg<kD;LZV1>Sd-Tki1s"Y&14#nOYUm_ck/Sa,StdgH\u<O$@MFmaCd/SF,84'QZSCb_NfE"n+12-(mCX`<)SVVd!U;XQrk%U6T2.LGh/-(A:cDoVsWd/6^RI;k##/CXeA1O7bEA]%A&Xb@W>1RjQPN<3](91?J?//Ko&s:/nc5"aW%=^#\AK'UWp$YEIZ%r#D?N%%V'q"n,+/-L%?roE'5[BQE*-)55eeXh)&9jd6b+pAe2O8Gg=T(kqe\RHf,nd/i7/o*KHcf3PJ*u@]BtDF:3\<hVV7AG"6*4*dHk-%<S1;Y*QN!BbZ%/8]4YR03+dLP6=l/p'#2ER*Q(o*.QFnB_/4jn.gHQ-Z+K'rfrah2(!k(V2ZXkrE0CQt/'$dCoW*Re#Np93[G-/0%_mh2Mml]5YGK'F'b_%Wc?)`[<=/2\pK#W/cSJeDS<3G3dFVel?M<eXmF1$Ngga_R&.5MC1dMrL3eX_iOmd&=tE)rP<m#_12-\gR%%O;lgKOX@-"k6<E,MUdKMQBF@,AU;DMnMnu26i(cPnjHHQIc((.V4tT=TiMDVS(Jf%W%u%rIE\k%ac%Li%O-[U$5X_YG75['R^j?8%2Bu^UQjmY<FE+-E\L],-Otmtg0cQjebK*fR:,a5PX,^!PN""MbDY]99G77O+c0$W&6T;C(RI8_,C7!ZJi%?f@ja5p:jtuL%7L!so%CteIjU?t7E)&XDs=<9i1Yh-.#7V5KN#J1MecmiX<C)iejgM99U`XNg'<e!6PJii+MF,Z:Km&54,=OD@'[:e31]pD4!nY!1o%(s.I%>mc5(_@5flW?VN.L(#LOPME[cU^lUWa(a.u,[29VF1>r1rqMjmho/pIeN):i>Z:H'h4F'Eb729Nn@RS]V_Z9K==^:b.jdP*GPGHY%0D6t,>P1**/#e_ZRHXYMg:k3QMI-,Q(!M")'a9/^e(s9-"Vh15EE$1>EED3u*s!,HrpK6Iqq>t*8Lcl-1GbWo3?ItDSPCY+D5g,r%2hUpb\68"42?!HTA*V@(%l`YMYo2Z@iSL2Mo8V(OCE&s.>s;MLldH_k;iPP-rgP<?nBC]I_bN[5Rh*QMDp=6N=m*[[I'=9"Gbalh%i`cJKm$_WP>jSk9L0@?<&(c<r4#C=2k-VT1@.KH/,DP<<[?$1"D%RH7Bom:I9]U)lR)lOZs7q_Te*E,&/[p[l*8AccCG"84n8^U'%\]SH-DnH]IGpX?9e+PEBcM274a`YKA@cPoD?k^O=["Ies^C:3*o/7TPmFc:fe^,cjC5=q>Dk(^[%A07A1mp8\W#Vie[UGgeD8PPE%EKoE4K=53`Q#X86;`eXLL4.W'[km\8UfN6'dd?M7TlsUNL\E=mr>^P1)h.-72N0cl8me;CJX]X>0Zg@Sk&Q;ZVb_Nnr0g2HW]<"#%VW5l<WTIHd,gpiRWTIGL[HRbB4rBZ/F1.%W(Gj3)I5-qEe/'p`8:<4fN78[2YCRbXdb=%=oNq\@"Y>Un=DDZi`\l-6'gQt5$a>rO%E'u/q773Ut>A&Oe325&5@a6YBN[XV/`LU%.V8BY4>>CRn2q5"#Be%ml\NehJ3.6-s],^30;W0ZRj)R'tf*IFF"oUBs&!4l%h<Ag1%NsDYi"Xf;(<K2us$&itn0i<Lh]f,F*_mAP\S)$ZlPPm<5^>%p2X\kc"R"%(^jJ`mAC"oVQ.q5`%E$"eYJ$EbD^u[+g^_Oc%bc`'P%IQtU<r8#s%lE0F/r9?N>eiXd'S+tGR(Cc.LDU'p(GQ6nYbcffNZAJTh;9erhT?rLU0$@$fhV$"hZ_.]h`>M;D\b&Lr,?1EPY]CUN%-+e;$om2HY\pQ+.np&MO.Dr;JIt%.TiTjpoDQcMU]DXZ<_sZE;:SUj[3!JZCq<._UY`F5SQ&E'?<.39Z@ek=t?Om3:Co2`bs1311%8(pX[gDfud+Reu#)0X,FSNIn_dGk(X-V*F5@EECs1@0JQK>oC_DCZg#&,dnWKDdh^Q`rP,_f!)1C$8&_IdaGc&,k_ic*sb"U,bB8%`Qq=ELP]-eI.d<6n`7LKhYfGq*r?pX@K,q;lfFnH:YN"XmR2/+da=Og%7SclBblaJiY9G=rF^A?U_Y,_Ym*;JK]r*rk+*uck0]h*%[QVRrUsCSq(&]%PVe\hiRP@mQRnE1gWFFWBDJ>]BP2%2K;J-c1jB?lgDNBjPDFpb,QNnC5_rLS?-mCUo$[6lp>rfWT>l4&nNk5P1%p%ZPX)JJ$-erceg/iC9Kj6Oanmum5F%B_6B0\j'I2Vf3Gmu4R:>52N<OA.Y^QS+;LT1(ZoTV6KDAt;ZJhiZ[:mER6.P"dlTk2Xt3%fQ;2X9XEsfOTic\gMFH@2h]C%S$%`=Sj&VrF=Gke,JDYAA^_+ZZZ$oN/@4RFjjFTqm?oSrDNJ<EjX/1sRr2%Th8"@PVTPbT`**7u%R8l0$TIu@SR;"S8#Yf#fflVk2;t@iM1n/C0r/Im6Fk1B?5u!pKKQgZZh4UW7jB#*D9fI`71X;ke)9'TFL8-1UMeosja!_&XJY+]e%DGVtAJ/YCcB%%43V&Oepf/20&n_WD5\hX#G'4fQ$C1):6ntar\&OkQ[2>kS&b,-,RdL=t/'5,c_`/oW#2Rh%,>&c/+A&&P/;eFJf%Npa\Xfa5)qC]L>NIt-b'#2m1&!;]t]Bd2C'I#DRg)&p$!\2AH9C[GT(2huYK9^C5go>AeL?JV8ZX<FL9d&BZ:dtok9;6=NRa2TZ]%Y:]%Q[d6t/<m]a#Ap(Z8gNd%j+q7rX/S?<le9Wp3^8ho/e]Zj?R:XD3d.Plel9CY82(nm,NFu"Q\XPPsl:bdWA0habao=AJ4Q90I%1To*\e7J&IrQ9,:FAps$mNREV(:p!Hb[!HB*1((n8X[2F7r`LA]0=*%[ERIJQ/!keWD/em8ahAFhoq(PjIRmK9ZOX]gD\SpNSX/'%Rp=>V9)&;3!Pn)CH!k;Yds+acPir%!Z%n<,\tM\ahQCZtTPh'f?S*c_LTX>Um+D6Q^7`@u2,]2YcrdsL%/E<i'rGI=(O>)<^3lZ9%n&Hu6L7fJ,Du'$!qeg'WeI84HTX!0=6gYjf..*IkO(/6\gLWQ$23WCa]F$7F\U::2%*j;oW7''E7^^YoZ>4hLD/,9BMX84"`['?!%N*Q5ta237,>3_H%0;$MY<^:>7-5rKJ.q3,X.SU<tjl_Qdn2`SIlFi3OAa$mf))LfcN'?*6>2hnZW1X*W3hqA/b`!E^qi&eWhZkot%aXS/,rnaYMf9j5nDEaX9F^R-V'3!Eug23>#0`&/Fg6qf'J=#=sR(c`]ok&G_Xdci?cB-2!nJ')Aqg3o.hFdqp.khWTF#3pPHJkP:%G>fc1WA+pDLhOI2>?87L<O[;>$?mZbEH$oL1M/f\dHSt`.;tAsU-Y(8VVd-Q$?srub%kACDR=>P)Oj$H]27s=E/hK/'5Ku/dutR!%@uO.K)PuSdl/#8g-T@0V1[*[mCi&sdg,Hc5N71aoO/jiFCWG7P7I<e9c(\6Hp8@)gfUJ"S:7]u'N&]B*S&?$<Pc.jDPkj_C+<&_'%E"b.D!pE=d+cP^Zl#8gE-B5!cPZJXT"F@Vje&Q*S9bY1l8$Q3&D%98DZ[EJ$APB@<<d#e5jmtB"lHge'nrHZ@`)^SG/\BM;&_a9>%6&t9NbIuG\@b;Kc1$I2cFuc^tI^^p'fL@(R9jR0alXMWmn"\.%p>m?b0cS"mMQLo(2dW)an3sh7@J6QNpZUXF1"C@A**9432b`9i%Z_#5#\3cP-;XTZ<2)%cSW9b@-g\X.lH_U@FRaV,qqc=6'k[@ZPe+o:'T:aA8IWhd-T6;WlYHoptHN1ZQem<eY7J'jbnQg@bH'dOG%WQ!ilE7N6;U?VLQj;^UeqDrF/If.]i/ulgtq!#YZn&*<'NN>,6DDh-K2:CtPMFU#t>+E?HS6^P-/.(cNj.jh^I3#bA48bjtm[WY>%O#E3kcMoBn]G[$(p9q:],5:Qr9jL7C:/+s,HFQ$f$."(6I.P>=TAcP!Q>!A;F8pd+?]q*)9t&s9*L:T!=_S9$f:II1QM^Dr`(08A%=,)1rjS,!jcA.I$h)CmZpZ?k.4,gs*UIKRu@Ui/QCTc+K3?*Cs-"6fK4S25DgnXHGD4Wi`kk]\nk9'9Uae/=b(R1<*1&!,fDWAUG%.uOka8`nLKg/!d$%(O\n<"X_QMarcUT\qo&^5CUid30P54=%i9Ir;]tnhm@=rarC*MdrO;gLXRuZ9Tb;bd);09R(9hSVsg=/5bU$%Xdq?nBOdt.d^bcWV2^Gd5$M(AnsS\URd.)u"c]Y.BRE!9X(Cq]M",UlF@k$@*n@7K"lNU-8PTpgqh`WiVuA*HE+8KRGAsC8#.rSn%3Gu.'nNQ*$2,j3LL*oI"p;(Xk/0!j0efaR.^^Z&N%,ehLF(ZEF^f-i,);IWl\+2?M[3kU.@=DB!]6VW6em#KM/7T/4(^M@e0t&<#%l[5tB<XUf$,o*!<Ors-ioNAMF>?n7bCen@*^i>a&k?\Y3Pik^uo(F2=n=\Nd>F^"L_VO^K\NWN6]*iq@=(QaBAb^+JG(*N81bSM-%&:D2Jp==puq?W,CHSrH2mo^=G?Cq_U7s*"?p8NT&Y$O(TNn'O)Mi?lJl&C1I`f6&2`oA[?r4\R)fK"RRq7XKr@4Go^V?EGS*aOTb%%.i(p^->V-A*Ou)=8.c8DerYnSY8b8o9&M68X67Z3Biem%#p6,\NChM`mrNu'?(FcEf#A3_S`e!-jNT0bCj#KD0#[^ha9/pM2<bJ%H*)"Z/AS\SJ<ThncW3n]TPiFD$a=IXi0Z!+A$Q*hcHs@3dFMHN6Nf\^%cGDZS$?+Hj-T_+>KtKY"kY^<Ybd=AjRd;2%\WI6a7VT0%kYIc_1FgO+X<QD8Mt4:K_G+*rYHuSFS"$i7?W<0TY8-.<I?HRjU3q('h9ZLRZRX,LN4\jH7JR-fbF3iV^&dmWV^T^>kYgI'Q<8Lr%resDXDUe?#)-A]*)es%l^GBJBc00&D\>nG.G=.(qIa^^>[]f!U1@))S/Xu9QrMI:JW`<?>Z$/R[UorV=WdYsGe'lh>)]c6J,OVG1%lSi!UO!9CWW9`W]2mB;hZe"`DFo=eM1K".p%-m\KY3IsBhpU-L)a13@'gUL(oc$%:qT963qMhZCf/gZe9O5E\&SK@Y`+^jL*a[Am%AIM:5f2$%DoN1^T0Is9/Y2<pm_XJMCc;rP8U`Qp8ZTj)RI\Y4ec;K^AqOI:olh[S]#)Kq6lLCFQY3)CIO\+j7NT_"BYiE9*]=NHd%X87gsHu,E$p><]R$HJ\nA;Q;GlSlDThk57_UorURJ8;7'gn4<p8R9(s4$J=h9Uh<umU0.fmnZs8DtH>^iqua*oaB7jUq]]'O0<EW%_[+T=KQ[4t[PEIr<X2K-^X90Bb2t\IX6Xu<]SAt`m0r:V7GG&MWh8Kb1YRT$DHB#C<n]t3)$;[L-E-5h]O-(GktSGmV68]tg3DA`%IUf^UB2[?"FB-(3f&N7HQB!fSrjmPk/&g+VWc=fZoQC,$=h&HO^O_f6'@c]ES<'5;Y2<nMLMo,B^94*sf>+D8B=kQcG[8(jjh4Dm%f5Gb2^M3!'[5Y3XfAi>a)4mo*FbZJVS1Wo<FB-(VGGhpKlSlDTh]NI-,^'&T=7mL\`?qPL2nH$HR!Z!ik<+a*lDO'(S#WVu9>BSQ%Fo@'?AH0o<'BD9d\pcGl*ZSD9DmWu0Hu'R@rC/;llATY]\pf('N2laISW$6Ef5L;<9d@8nijsT6j+/0&[1h0b)aLZK"N;^hlSi"9%GD<$6Y+MPnhrl\H/C*MFqDEsoHj-ePb1kf\L:S+<o#;\oM<Rpd+5$)R2*#i8B+0b0]T:MW[i6s%:$ojpY]/6no8ZG4O!/,T/4<T<%KNYcG56<teQ71n0h5s`@0E0XNZ129EYbs]QNn(u.aiX3t@t"+=hW"IMELG-[\rpmU?iKTfnU,ZEl%A)uLK?C"f<:h%>i*0oohr*g%n7S&'f3:1tmC.$&-?iMi4@sk\`p9GpqUL&ci:?>So(;2nRll+K"*MfCs#tj+SmOPXRQU&,?cho3s'/*$h"YtQH2Hh&rT*?[pLWpp%hWf+OiUW1djMSBL9.)(t="g-B^@eooq>K@5]otZ^:1+#bs)[5XDUtlf87q%O+$8f-V>1A.)[gB5=]kTHl!W]Po2j8h0-$UcD-p!.%pCAp*G^?2Ip["ONe`CGu4."M??TT[%I4F0O]*E8_<m0@=s'SHb[k[8eFoLIVgU2`*h]=m'Fap'^=6Go&I64OnQOi].;$fdp-^cXT%/RQ,uH=\5(L_qi$Mog_ZMiSf%m4:*6\pSWbLUWHdlcJk,(Yd'&o07CnITJ0d;^SJ>%Xkd5I;P6a;4cg<`3$0AekU\/q/I.So6iP:%o.C@'eb\s28p=li6N!t!>+`pTH6U\Tg[.4-)tPABcWkbbioU*tlGmt:"\c6##QM>l75];O=4](=6aEh([EUX49!cP*"g306[@)Zr%Rha2uXeQuOhm`$gGk#\Ip<(7EmDZ^3mXb=^oOe"!dd-e7U\?>*0GfhgJAM3Cr$iYXlh8SAr,k`$Ye>D*s0RRsr!q*jKLL%O?KS=r%OOl#Xl\bVOg$Re&?#T2d]5,SocX5PJrk-?j4TDssq<d428_2Ja7GlM%algX^/+*pL/r)ZYX`mjL\NekS$%DsFem#%:i#5hWm]&Lb%rU]HSH`*3`5NpGN\[$l5?.*)oF)s@g:4N)bp1e4`r/!7F5^R8t):n4<9(4aKjm5<^F:,eNVV(TRi%(_51pOBtN/t'U5NOWtH>h@(%P!>JJ"B_j#Ys!8ab1H^`,XJ#=i1J?jlUu+R]CG6tbO`2bTt<]^@C!=cO(K$=Z>$Ja8,"'IkptFVPuUlrhC\]<q6eiZ*G4?93a\j4%l-hAtZ.OA>=Imh*PI3^$2B&E._)!s\RtPC3h<S-#Ds^lDqI/u2H2m'0B=En.d(W+2?=/0%.sYk/jgWOPc)\PR'3Jqo1;D1"kaDG"%$d7ZWCsq_`?r+@)X;+Fm=lQ&;SpS1D56:;H?KRk<?=e>#e*hhlqtA@DHVG@p$U&_>B%\nh.q`JpYkOJ*^0611IgHt-T.?.EIs6?Q%l,L%1%%p`f=4ZC(]gZ*D0XP&BZsMN'IeqNa^T;k]KqX<L?j,iWMoj];,4=1ZVqYG?K1`R8`\\e8GCTuAGF*P$s1S&_IYE:FILlOr%i4M)MQ=^6nrX.>N6n6]N?Cl>nV#IfCAXSo5W.%tN%!%BDKKZuoX2P$jJ(TIYPd&cjb9b+AGRpo`?WOf0/^3-9i9fj"1l[DIH+Q!T%(V$r?fMD6=ZJPmeV0m`9o>C<,T,[\.(Z,=b\e8%8AXJ@!Fr)[Wq7f%,BIU2tED^LV[%.#@FDe9*)cc/2.hc^uM5E[u7riRoXp*3>%fL#T,p>b6*_XVJfr+&q\@+<-&)c'H9pYMunis*6#n%QQL7=LUOVc^ZY2nGl:90/\H$H'haks%eB@L7>Id?\_/EIS(?\,iQX4Fcnh%`OeF*6^hu&4gA>?ruS%^I35Q0Q+P67;qGMp*eOc'H27mbl,hNUpKr'+/9YALmGai^p".@pfB,;r_S]Kqg><M4"r9aY#QA,BOn),`%C2lN7&mj>ng'O*p^A[qCZF9^\^9ca4*.pl1Ip[e;ShMgj&:Ikh*aHG3Q%8L.9DH[=?H4pW?-t\Sd-Hn^P8hj`'D7hEW=A'8ULZ7D%-K(WooAM%PGi15u!+Pn?(+A]IGU;Tkd#UGoHLr=_HZX50YNk`MK5TmqB-HR7bq)Q,dc-8<Dhh$)bs.sNU+m*2QKCTnd?8;)NGdb@%d1bEUb7QPPB1^kY%=DJ_EnnU3`P?]VSZr\7qh8qYRV!DtpZNhJN+Eh\qj[@AA2^(kdFs*AZgjQ`=CWNB]H=FeRk5]Vc;P0pGqRda%Ir-R=Ok4f+bR\QqeKB'2cM:6VWDD>uYdY^"He.rJpm&8]7X%J^@Zlo;4Sna8EV/S5C%U`MI/K8#kL&<OHU"635Fk3WIZ59#q>Nna%](\D"0k]t(YBZ&o*CPnSIJk2bqE8S?ml54^A3Tk_cae:,?Ca<as8M7]e<Nf7^RY"N7`FVOAX'aEREQP]'/D=Vre`^gV`^)-o2j-R%cs^C9k-(..(sa9A1k3K7EOT\-KBBA)1S'6IQH*gcRAm<a<oshA(Q/]j^LGJb>b<ofPW=B%3I&tC7q:*Dnu_2?-u-EgGCIU7H22mA%D7FdDPMa]/f=mg1\Hqdn.g?]phlNi[fe21"7m:AV2.*(ne"NNqn^f;7#-=_FhK"'P_&L]6hKA%7`%^a773IsZn%,]m=(-%RjkYU&%Rf4`(UAMk,7FHn68ojjGdJ,nDHaC#gnB#0Xn)H\9mf!#gj[NDKEdd?K5M(?0ZkpDQ@FQNG2LZBW0<Eo`QbBAO"+PAbfapCIhg21O%CX]\4<DNS'p>jQY_9&I9DdU4!c`M;lG1LQe1M6CVo8i:&K7deAs7c0ZO8V:5#KN``=6A(O4l*bpYHkVJp4%HRQs5D>P7P0^9s)B9%`R1`%Wund"PV9?'ZT`OX6Xp#SnX[S\s*`VrnDNi=>:[bVmF<0<H$0#^k<E?<gto^@L+TV1VZjG)Y/62_h73E%IHUL`o1uN=]_ucS%\)&rk0E$:l$dIS@B[8<hm;fDn=46K6o8@gB_cRK&@l__=[b.L;`p@Bjm<Z%Aq<.IPm=UbTn'/=cT"HTqDLOcnF7&VR5<%2CJ%jW>%fWNPMhq<<q1OF?=<UUdcnai)cDVZo,5=%BWJ&Rmdd4Bc#nM[VbGAaBB3;,H(IFtX:-4Y;_\pspg[#qIN93X:eC_-9(=eo92KV@+_%>S*7?W3t5Yf\G>.q&3ACh<_`)[b&T6k=q*&Q$V]\HbZGEoH3AIO8][5q@C:$IK,(&rJ,UY!W@S`Edpg`l0%1Fs%[&?>ilKgYh_a_%boX%O5CCR;q`f2m.j1=41YbZk'AZsM7N:?\iU(sc`Y8:CZ#9HfQXuuZA)=n2s$D!"R.e[T++0$O^O"_o,AY6=@>"%+\;)QR@qg,d%nLc\WQdK)#:XTKO;\N6sdV=e+P@ob,l-bQ\=8e#+Z>nOqEr";3rkH/$p[??keJA\j$e7.FNn$Zpg.7RuDI4@=ih6#AO/,d6O*fKr%Y-b)g(ColGI8t^+p%6RaDd0D/mi\NVB#=DpqSqC(bkZp`jY2uSo\2;s^K=gD&cpJ9O#PJaIBhqaY8>RZVmfcMjFqS?j96PTrP5$\%r[E#k1dc"27bcegatml2.rQO.=PS5-n_g%!V8JK;?i\/O&FNaopK@O)pO$OE=\+\e`q"=b+\BO_+QCUV+\>#WqgV0QqK"e.6'"e7%)J=VLJMMX8ih6u?(Ui2R6/F)3*3mCs<BIkeX8<?]fDPR2ic!_m:7oES^O2rKhn=0nr,P"S#F>WD_rR4iI1SM^l!h>m7@q'Lr;=FO%L"iberJQ*,]o=o"JD#Bsa7s`(%1:fZ-1Lcf,0?XgDsP#>ZpN1/\k[%p@F'E`D!tp%gS87TnZQ6q5ftI"@&(-5*=r>/+JW0QjQ(E#%-foFo`t4g`ZMt0AkoE-H3Y[RslO7j$W<6EL9QC%uq./aK^oKuoIPAo;5o6@-F-h<YILb^g_c]HQ9.Ta9s)k[7S6VW53I1RF9'7HI%3hCI<FN2Djmn:11\;;_J3P$+%UMHU93kU<!0E&K;U(<fK&P\X6bL?.Cb2Nac!#1p0M9YI'>>i<V)q`*sQ*l0;kY$)-m=UEWQt#S@%6mH8a@C]BrF=$9u-T*;o8Y\Ed915Zi/&nYs\7al$GOB@%:Ec9XWTQN+/@dD3B7ap130-QM+68Le']X:FceMaU2qCa*P.M:t^T3NM%A`6D4rh<"+N^!K?8l#!KYksbeE]G]Mb::':d,serj@sLhn#5;(0@04(Vimg&Z/.@_=1k_BUpF(qie(`Do8aA6o9B$VF':5!D&][N%[L"gQh0?3tOUm?\5/&DZlCup?-t^Ql)B?"tl0[$QbI#[pDH`mE6b<dpaBm#fmbD04^gu)FK2Z1E]nD;E4I04fQdA(%>En=,L=__\%g2P^8amu:o:O_ssBn(X/^2\DcGT1o`n5-#"5;L(&b):sfHft6:VsZcS-A<UV_Z+PfF1&?)^7Y.(a.KcsVmET-aO>dj5<nZ=qgRS`%bI?Nga8\:^l'OL1DZ]sXJ'3/`Ut&^b/c9&im="7Nd^+",Bs)[8=a7])lf@^3\,Fco5E7t"r9rDUKO-k+mG>H<G@cf,I1OY1SQgd(%,k']+psTj:S)-LChfk6o>O]Cos3pem\bl\^q[*9bK)[.Q)Z%f4;tq`bk.Z$PknuV^^[TE2nAB_UrQe_4pL*F^gLT_.2Y<f/ep4aG%F$#^+e#eKiRl^sZ>1HnWQ$0;8R->qDNc+p[hsCkdYLiTZF*Y7$gSs?OQf_Vg^n.%+gRU_\pUudDZ>8bMS]d1jS"tmp5%M+cQ=Xe5%ecX->o=>8?!iE9uOR3f`DD[N#lSQ`Hp,`jeV0OObGq>qQP2<Ppp*&bQ$1o0`?qQUfA=n0J'R?CE._@%N12a%`:AN;uh99DQDKET!%%tQ2::a*/f\#(lk>mjqjOV\>2Qnef^Kbb&de1)[g/#kEq;A_Rj9k-b#(%G5"9^91gD*4**;[3(*8D:2P"A.SK,euSQTIt$rYT@4Q%QKe-9=Fhf!D'NKseH9]h`2@U"=Y1)NU6(DiP"9MTPZk6\,brJ\at`tL$qt81Pkq)T>M5`_U=d-0#WuoQ?4@7B%ErBZ@mr>Q(L\%_%C:o(.KG<&(Oc]Nd<XJ)+XG#PD-H<''#.oWRP3-=ALooupg<X2:!l>>SaK&Q1"ar"%DTSbe7YlcU(eF_\,gtbMOf+A4BafpI(>Mqs%f9Y8%IE84,O-GJML!5/!h6\e>>9:u:3i+dAe>@mq0;oC]=YZ))KsXjHedtlXAPMc",RG]l0t!m2+S]9n225/#J#\+2X(pp6D,R,@%U&/Fl@5,Grbu5YO2rm^9q=8!\itbGL5JU22qTmUFg=+N7DoZ5I(,n-hm=U@BqXre,M.4iQf^Qk]`',>QN@f*JkAFuY<n&gh4G=l=%?N<t@>hjiTd,0Ahcu\.3AK<q!FEuQWm`R,U!*Gp!.*c`c"PY7tOTu*s<]9A>Cq-dfh(iMTiU_Y/6Rg5K)Ee6+8_eZ(_2&L93+)s3%jo?$=I[@s`.#9)n0RdMc3(6/L;m7<OGt$d+9XT^Eabgo9,10R#(iZ=ApEY]l:(;9SWoTl9[&Z@Y#_NX-#"Z[Jg-(\N?0K&EL`BQ0%5_RST>/4Z8H5Zm3fTPJpCFcLNd"S^p!NWL]f2#uI6WWfmWc2r&7?`=I7rCq^"Zc.WPVM%gL]BSK+.F*$VC:89N!Vc\A#q(nrh(S5%&uMNdWV\C*ZkkJ*nd`EQi%NGsSF-g<5`P+NYS)86^Z0FqY9eQ1J]cV-+T(e/;;k!k:DFabWR)&08bXZ]$W`QZ%-F9V.cSGcLg[*H%_OB<QlSY`)J0Ir*OBY56eL\P"*7lS?`[FCaJ?`)lM9q3WS;fob@#61-qDU^)Pc2]3j.t`Y_U9!+BU[A`":Wj7n*hMSM(?JG@D,Vp%Q3,T1&`+8HQDsibZD+;pYWn5f](ZE+\;V.&^bV[W6R3Ds-*^Uq!:_!u^.n$/;=aWd<E;]S@A412NAr@HSY--$K[_n=H<CNZ:D65r%8NhdV>DZ7Hj@n"O&d$sk'+tb&du&`"Zd=M"MBFTL&PZiEHAR4<Jg".0.;2bhYb7Y'`$o@<@g,RO:-jf0b2b"?4/HWd4pchX%L6(s%d0'IS/6^B$`D)jj.N0G\2H2NKEZ&8If$[N\k03Q5hXi5o]i'UM9b&qYWbaq^V8*EkoB7XMTbASVD+Y7fI\18KV$.8E=Hu]!1hKJ%%9pI'IPsPLB`LB+(mK+417DO5&_7ll@S"S`;_@NJcKhrl$/]"6d4cQ/PO)tIjUfk^<X"KKK5cgcI9h,Jt"Wo5C9K`PI2EA'0BIPf1%9aE<+S.O&5Xiuf5JMnD["UsOt(9o")(9A)$;2R99iep]!eK_.fLq3:>rP!6Xd0TDRF275>)p4FsND%,*2Da^])RjCq?o5D[D'Qp?%''I,2@ei",'G6O2AZNZj9\N5:EPW+k1O3a-Rinb_H#r9Tb&`P=+1No=Up#P.<Yct-I-Wb%W%s,l#_HpT_J:.B;jc=NLG?df*"^K%%2>[BL9M<>?Y^MEJK/395#qINql8M#RWJjr?3Ef#nTg!F"N9S'&=pr>k,W"FMY%F#sI,B=HC&tbt1>#\WHO(u!on('uj(SRjbgl&(%:_7\JCENfW,T8`iba+)l4XhjDZC]2?)4<sm$euM-daLPm_08G4!$ng,msE[o5c#0JFC>7O>;ZR]>3\Uc3u:ATacXaOKYN55GEA\Z%_LsC(D4="*8T="94/6E"?#L/4@(F,caiQg@7+$f8MT5cq!X&jJM/*,RQ"I[$Wsii':D<j'M3_U3pkN\T!_>\<`NnrS45aCeDYOa8%(m)6<(p&t=15>skU`^p3`U(jtS39!-jjBMe6SoB>O=;qCIF>]9Z&k?;9su7Fo74UV!!<O>oi!!_XHf\cjFU*rajfK&3KtM:qZQ*]%O<C4+W7=>VhrD-WWJp7r6h[MBWG#f4:keQ$>tM1]1`78t8o7.g2&[`?/XCaKYQPQ\JZOKlejtY9WT:a[jum?,(t9l_*c;.EoghI6%IM)kJ0q8EbMOn840gV(%IOGi['GIoFW1U%nLLnTf"RS`qR"7@c_aLf-2L5_$ND=:h,f"7Ub7\5#fI)'mJdEQJ-u1^Q'3*/S"(]Pf%,Y)?lZP,#l-,CXuR8k(SNkTL$&i.g>(Q__Y7cH%>7hIO+RmB.R^Kn^F%%@S1;i7_2:Y!=]aH#2dOd-Z*TL</A50XN6NL+Zl$hoan%ZKMb?k5$EMT=r/'c#u9ZZm!gKN0=KO-+KIb7DO+gi*FJ7NL3!jRE#k1%."<h=S9^GB*EjHf.s[H%_=>2&?qQPC(%9\IO#>%?UE+n%8P#6c_F@oVG_Fg,TEN81"iRe_&H&,KY<q9_O=kc+X`JqG62t@1+OIGIJP%!Bf`i1pLe%Ub)&(De#-8naSQ&:BJE>tF/jXX%)F,sq%l;F(&@0)EVo>J]qe+a'.n`:,;nW@HS]i]A.dBeG\.R$m@?n$N)'$Zn(GE#CLpp*mP1Cr%K6fR:'X`)[=`CO="%E,PV3+25IF@S`9%6-"qg>Mur)4QJ0rX#(_O/6lQa<A\Gqpsp;\->`P&>2?b[U^u5r@hni;TehHY#+@BT^pL0m]`jjoL\)olG-0:Fl%h$$+a(Go@!@pV%kk7ia^n)%:;Bo]XmWTkVW(em]d8:;Eee6lI?0h27)0@3<bJ>FU'H.Q`Wh2o:&ON:$^?H1kM6[FB09)CRntPVU$ChEJ34*!=3('*9%>c>!k^filFUWG"Y<%l71X[WkJUsKYU,XVY>OW)mm2P41bXrc7D<Lk+El7"iS9"CcZ,>t4B`%Y(hm%jfCZjr-/;VJF-f`(WdA<!2'%1<W4ZOojhZO?$<Mj?8RoJ/(o-;&)!+C.?@a14c9cJ>CEUE-N,b!?eh5M(b6qTZKHpo7R`eT2qm^1TR,L^4^AGl6bbd*oLbk[hs/O%o.\0p'pn9n:b05i8%^W69QUX5CWYoKlUES:b;.ke*i"iFng9tA#/l<q)F93a>93ki=-Ed3fuo<0X,Dj,ArKFdZHqZ<;<`jD(D_bY%Vo`WCrFg_\J\3>K]K&=I#6iqQCdt-+lF09:_9do%TY(NFPTi_Ec[sPBk;J6A2VK7W4nM[gBMB]!\Mf..C38n71'e`&$c?egk+1`P%!^hf!.79E"O68d@I&NP"pXHLkUECpg!`GJ]RZ#n%P(XGIEC-Bp$J*[._5B:*#4.]3eqhg9F+7Y(Lfj:A,Efq1M\Tp,W<n4AU95\@%:d5(-UpO,(W>$HZAX01`6fbtW%q]MX!Kq*dSmZ;h.31'!TX(^V75$pkUuW>M)B#,9kVR+j'4ETE>h\aN@VRf_V0,oLTaLoi4Uing%@'['V=CPtj)j%K39-cR-K@U]7#(Sd=e4K$NmUp+s4F4+VSr5jcSmdV/a>RqW%O9U#@>qH$MiCf+(@lmCdQ'g\XPi20]fBPo6RoYp%@6MIuIhMs72dj>g1.CW)&6YfFE=5fm/u:96"7.!>h(U'T@edY[qmrDOoa&I[VI"p==r+Yd=s8alqLD.-%lNL)iu7Y:DGnX+c^6Ic%P-Ft2ri)/.^n?`l/Oqj0++ngcLf9I!jq`@u`aikpf#.3$IF.?#oi5om.lt.h&c#\#lc'\!pRT3d][W;W8/`"KDGlC,=L1H^Gs'NZ%jRZ3epBs14_0qZ51Gg6<-S9Uf.'0k3XHA%pcm\8kf=G#rHlnS&J`flgXjp>fa=La=glMd%C\o+];5Xm=jEg5u%\mgf+In;j1JTDW%U*GZ6;BZ!-Q@SBN=re[(WW=i)["3Yb\K3m9VF)f7OH[K_@5nUgiUdfeZIt=`&J)r6F2SdQ'uIup6+T;lP>"1U7Y)r.6r#U?qV((^%na#5d4K2cl-,V\eD2du#Bi43Z&@$APpRXk0hX_TJM4$GPoU%_m`hQ^"2C5AhE\*]SX4/AAp;k6KGfm=T7Z45kH;HR@2k?c4+?NZ:%X;=01qA+ICSJBlVb4(L"o6rmYY"Th48*?h2hoM:cLg."PC;eT?@>ZFHN7eEDc@"KR(>fA9PH_71.ZB-R-C]>1;8tO9!6:6:KUrK6%W6Z)\.RPGeCt5R,?&/QcpO1_slY,$S**X/:YCO^Bf^Ar:nO/?C5q<dWjCRR[`l&QGPTm;@LK:!f@$$sJ4<,k,AW\38=g=[rRi6:1%W%hq5".#6QVQB5K7K98DX>08kaWa3nnNfV`l%";=D3aqa&S6E,baI>hF65D(?sN7\AG[<UFE3SkC&8jiPE?=rlu.l?p(8E[IoGi5%W[AUXXmitqgYY"4;.QYT$C,/TjCE^,5A?Bs1E%L;W^If\'O+Sf%>5p=j7cZPe5&pY;D>if'$P9R=Ws[Jf_iad9r`D+k[ZB^EHJ$5%[`SG:$BY8N[mcrgfK4BH4J;\QS.BkXq&KHRIX=V&*KA/rcLK7Io;fT"ih^7Sk?raoAJ<;V*51Ud?Y=iJa:lGq3Len,n`I<8S73Ek%B79qlN<g9-XJ$#9U.fD6gS1G[oalhQZ<Ur34,bMRhgH^X@<3_Vcm.+=n2Xgn3l$9lNL#J>23Gq\6Qr%D3"2);,^&&]%UtJF2@`Y\%#fin=/i[BKFk'n?,#KUsY2@/G@'Wq/Fl'J48J2h%_N8(k$=de,NT9hq)KV*G`-s;>bsL_.(u5jhcXME4XZ8$W^ck[c5)hPmGt`LE%"6TNnfK-6C78]Q!BudLITlM+T7`TQG,n,N?lO#UmY*%X%p6_SF`gCr%H6%j24t703$B0mY30#GP2YJ'l6p]M+3O!O@V:@>\GksEo%WFZ*OC7.M7GAWS]ALlpu%r)u:Wb7/hb5`,=^/N3+RLcAub8d8+1'Iuh@/\Qj:DdAgiI\=<Ah?Q;1lpl&S?kaDRffInR9%Kfip#GV%V3YhS2(*4rC7eGgK2TmsY>l@=AN1lD/,c??N,LfY:+]D+W+A6Q]G+-Y$Qt@chAN@>1]SuR>R?mJc?4qb[fYrX6;-`s"LZH`C2IaF%$!O"kNa02EX-hKs=PD.o""%Ge_>D+7%j4I.Hn?5UFquN^\C26E4ui]r,7]`l`o'_s,gF77ADa7RCs'>F`p0'7R3(s+.Gm0Y&aE?\%]]BQ@90""%l=[&b$F%nsDIh]f0R@M[XEBMXk*ebmi-XZ_&I'@R_&<>dV8T3"858:A"Cp,C5XrA\Q@gde**?G3$Es$5P]#UeGs3rf%Ps(a.b1[:W%e;q7U4N!#<dFgT8Yp[!WQC.#)N@X2*L%eNj:l:IUlG&)C705o+B#)2H;tY3?=7SeAKoY4YWN`r%dsonX=8CD'WGdh%Gu\GHT#W6=]VdL:+up5Qc]_;0=TX`mIrjm&6A\gTrZUO)7S6n*micbW8k0=In6=C@.O`n6cS?1%/Pgp)7%sl)VasgIpmLYS-;g$s%`fX>u>>dj6Hr&%?,hSa$R>Dte'J)7-&O>S21S1!Y,BdSD67asfQD_XIMP@TnSDu0PY+7bB6&_U-o0Ej7h&/cjFqhr5qD4:t,HF.8%-2RS@f_R(ZLM7F(W5?BNE"Rl('9[kLIs43#8#=hf)9SLUbpOb?9$!/;U0_TMSWRSZ%S8LqV^/ijQ70<H:)8PD#$DYEE(U`sG=hp-%PtPcjT991@O6]^WTO3i&=c,9e6-L&>\-%l#WZ+L#W07p5$Ue265?4PUot"WGNOWJ]J;#_D'WP+hZ.*MQDeV1W.EGnV3$G@XG>+_c%4sofZ]2Om>K5aKsHE*9ja20Qf`^EW'kHF/%S9MbXc;Eb&a!CH!4<02K2c9:%[fE?7X%l5Ci_E'%k"\K)`ht)<A304RIp;JU7CJBL%Ec\-(A]eFnqNM+:MOG$Q"sjTsM&YH,Kn+htP(87-&rlEi7VLTuG_A86PEO;EE)KSC"@HVjS)+tE>??VB.LB3:.LDIaO`0':\k+PN%7Eim(G!S\3BX(42U`:k4G(m<EU8%mO3!IrE8cdM1ljq]ofL)ePMWsoMlHRrDdDV1!M:J^Y`:#mF.1K6d1*Y=r(j2$K9LW?(Kl%*U%$CFbp"\6Pk/-l`Qe4L^$:2lH=4.V\[:SI%sU5C7P8!N'?=C;.UYl;d5P,#tET3=mJdW24GQQ-o_P!`_'3Ae[;6anXGTfV*Zd<APa%U;qlH#ageqJA;Dtj<u=D>>(!^jFbVu2ZUr4U\R+u->rm`/L.M$R%/E$Vef7EZ(VaW2?K`[#jW_?BbRPRdV<gQ0MR\E?6ap\.a6'F%Ko+USXa@nCq[`m#kc7lE*XdQe@k9S>.E];$+ojF]C_[6dpgP_%*@Ek?>I?MGVk-s:OrOi!P!`YaE[XU,#9^"np0upnUto3W&YY*F%<B2Jh<I@89jm9nnm8^+J7fH2C31d%Q_A9NK.eKdQ6O0tU&P;3-cL:B4X@)1,EVuJ%3,_k]Q*@DcF-09@4C\(FO5CU%n6M%DqPk/E%kiC<&KcqtTNj`bX:=OMS"6Ai&H-pRZUM=$WDXdp)]%YV8_GPN5P^L&:EPMa?VC2cjOF8<%h=%#.b+,=6,>IgsTT9job'J4fAJ@UO%GFJCi3q''s;*TsfA,Ffm$:B"&;SNO89eHXHO@CCb1_*Fs8Ro'_/F.ps8N%A@/TE%d4#M$[$-AFRhBPdV)_AC#f&3Il,*(]b0Ng;j%<aZgCeguqGU*NXP!cP%Fc:(bH#p>.p9oqnG_9'c),&+ha,`RXKdL]%sh6p"2l@>Kphbc7f*X`T0?qqmH_SL4u+p"qs`C*@p$85o1%9I,f51V&fCM""9%7^>(5KG%\Z!`T]\*4Y6DP"(s8$<S,h/eM#n9oMHd4i)*tfLfpX)KBOo@nn@bN+Gn#h8uJ>LEMdI?e)aX=HH)m%A!p;i6mtDb(BV%D,+4*kbU)CAA.j(8"Y\>?#h6_4=XIk$aWuj+RA;R'8VfcS8,ZYU2_50`BC,XPR,*`@(7g)'&[7kH$sRT]QH8.j%kY2]s5uAX>9ThI1.BsuY`C[C65@sY*!^]]i`EoBpGSX#iNcr?U"X-/)98o\FYN9J%a%oi:M^O^k#P!Uj;JJl`\qW1sR?BIuX.KIY%Z'R)9St,i5'J.lt'?[*@P0l:0W]?`MPi@3Yh_NNbk$Dih(4CoYE79EBGmsYXL8W1(3S56@@?C;)oL"W4&/B37'DWu7NfC%H^/#pm%M$-41a2AW"0?i>W<fNr?+9tH"Q>5g[Y=="rMejLp7JP#f`\9ppZ]']]bOIS]22+?la<teSeTpnJ?cF48bJ\'^%7tDo>&r@b#6nW-%XuhNc.4IG^@;JGa),+F<@EpmhTTShlV#W6(ps?GTPL)4A8OQ`qh+_8?6^Zr)EdcA@5D@3<DRFFV*q@Wc&LPnB$M1rTXbRKHl/3m+%T4LJ1_V5bOiGCS%:Y%#.9b#6>Eh<'fm@H&gb%<a]MJlFL)Nqr__G+GOi^So?.\KLY^p?&dAX2M8r'2OE/K1c[\Fl'$0-@i[Jt-0j%?U7g]eI"$.LBYTpeh0$PYaeVg`IE_YNWDC,[\2J<`675sAV2nFMV3enL_.W!#8@ce3DpGW)$`<aiN4a'@c_hK$"29e0;_*4]p/4e%3.fZlEFB"&ic+HBkN(,@?6mS7Ot-E0O"ek8$#`k-%hi,JLfe-fdldkGWK[k6H72*,c]oQ/8<R&e7h+=Y'd9<-7Ms=H#i`DANUqP^%*f)#?H5^BV@(\rQ#h2Y>nN':"8qOCc%&Op&GTm05noJTpp`Tra&e?6^I?JREFt-,t(C2*X8a&[)WG-&uOUi:@)'MS>diK!$an`N'%0h,SDe@JSPH'e0j04[^9V+;lSn:=l3ieTGB,:q$5<K[[o,b;"nK&ePNZm`JoY[Aki%j`::ADu)f0O1<-0q@>n]doHb5667bP+Ycb%"Thic<"E-mQoel%W+V/FRq8RJ1[!sGe[Rpk'fNpL9Oj+q4MW/:OE:^GlTPc_W$Gjb&$1$*Ph5;t;fVsR6)Vi7!YUrsP&G4/#W@A;%a"Bc9T;q\)O]k)cMGuKS)O)Oi.Z>%1=]9u[ob_c"ik@ngNDCdZ$6#,-2W5X9=$q$LH(g!0>e$Q(";E`QlZ24nfi"ZGBhV)FJO6>)%M&'bJ#h#I.SGMFuc<'WIiNA8)+Sm)(L)d:iDhrWE:s:#:4/gh00:L=Pa]i1kG![EE;-2$Weg!k5Y[E9kB;i\*&8e6U\`%;<UG1pH%[Y:0Lo:'/X4!H*[$a46>?tkj*jO_Q'N2+DB;kT.SESf%V.3rJZMXN!q2SA-7jKt^>@kJHP.Gk<*Dl&cg)cKO`g1rK)q+&sP.8%YS%AH!o,78mI(V/d[ji]UT;YFL[p+@j^EN<.E]SK&4S.r&N31[8&BT*mL9KH46?n0HDbLeu#aOR7T/K()_RQ#d]3;]4JF'U5tT0\Q7Z%&(0b91m[Xu+c)@SU>eqBeK@=fSd)Ba4G6X2M/f!M($^asc$gT+I6^*cmU/J^"'A0-O5dTN`^.1e4_,uH4*ZNbKK,5`A)cE8/5%9U%N#]KUAlNFp/b.&h.2$J#GD7+r!hP0K@]Z>W=!?G:X"a"^N%f;'@-^Ba-oWIsP1q#l&&<QNY#@F_X&JE*bd2u5G\CA-iX/SNp[BY+%4M6L2\N<VQh_!8'ZaKAd@Tu=WpYi*9/PP?d%9!j$]F#%Bd27.RC%C*2Q3"i88`T`MY`oi91;$7YHd+hqlR$mFR/hKK#Sc(+)Nr(*%WGGdFONjUqg(4GKa3%4ZF3mdk^2">&TfMn2E*`9K!;u*lO<c"1QnhO]k+O%'7$9<^(3^XD,&VC5+DFHK*s0D0.o[!F5XGrIKLlZ*%_B]?e)jcdNaY(A(AXQ.LOMRa'\e^qT@skMa+A"l7[ORUs<7-qrl9pVaU_#?5SY,FN.)K8G.ktJFc`f$%\cL8K"I*;IYcCqP]P5lB%enn%ZPZ=D!W,*p$V]\Bp'l&&F;@oek`2X)%eO^hf8&OrD.3m;Z;AZr;;D\q7aP*`X>AD#RG^jHSkJq7f.DVc&"A%ntNU[Vc,UBM@%.W9280/^X(q[A.^BRBj_N`)[K@#31(o*G[0E<um_PdlG/0o;hsKJ&];@>E]R,T'hVk)k)WQ#Xfp4G@KBimOM/">q*iJ^?VJ0,/K)%ZT8]@0qBP/`Y.!TGRpk`#N?2N\KaO@7_:_-6Jpk'PbuYH#^IP_#6cNCiL&if:9E1V#6\j;Q2?UJhgcrL5nW%6E/f\dXs#h8MV;[N%XhO9!^$fN?pE&lq5lm.4+9]i?Q$Hh@#ZS>;*QUMXdOd+o+Bjg\(]6`>+gjmO`$UlZC>cNgGu[YFcbu@W7>RH:.811)DZlR(BXR?#%'S0@%00CkPOOK#LEZ1.*TEq<V+P"&E0nhdo(K9Ou=u%/j-UA>6-UBa=d[>'MK?\$]Mr0iKd3PtXq4Du0@iD<+et!oA5u<6U5u<6V%5u<6^&(GhERA.q8aca>Z@a7KOjd;j-B'GhCC.!r5Zc<W^/r$6rp$Mf%dhX&Jd\\1NVQ+4j'aijm&T+P?5,&K@lePD8VRV(SlO$3'%S+i;2BN(9?Nc3a7\4J2H6).quKS#VOQ%)J^U1;k1+[CoG0=>IjLf9?sVR0!Uakh!=L]-90TXddr6Iai:.occq^Bq9O=f,D)Lu3If%e&#!k1*Y=r(j2$K6q+c-fGQ>QlN7kVrMafq40D[RkfW05$*<*dkHqmp>B/+Yb6p-n>bHg'.ug@kFi"_>9TF60L3IR1+LY8K6CIP@%%nZl-P^/tQ'L/$i!rp0*;.STb!;f0>gr1GB(pTHp+;`4_nJ<>]p`EoiaEebG\fnMR>.NaoA0<[kr\&.U9*+_5,LT3gOFpKFK-uu1%43q8+R5aqoQp;pH=CZLA%R#G7eWTl+`iVR<9)(9)dF@hGQLI)8`Y3dUXEkFQCI0uY;gp-T\VK^4.pu^9=,-sb.6pEC]dEAQ:WXTU%cWM&a7ZMFN]4f4B7ah>tFi)#c^<"#?72l\7F\J=TLmZ:YI/Hk"Q/SQO=,<Z\M@gqL8%jGU(,u=q2GmWhMa<:bLk65%3<,"+K\[!P%D37=PH:mc&'Z*%9oc>Fu(5;#U,/W28:9Qo.&I$oBX?*eWHP+1D5$0!sLZfmH21i35*UAcNRSl;c&t;C0QF,oZY>g$^rXQe-c!5G"%K-X*S>0\Ck2Q:@3<EO0.dR"T[</?eZ]391i(=Aq>Eu+>=#>taZ4!m-+&kO]OA]tGE9Ef'&+d/;$hha$;-`R2gDE_<'Cq=1obi]/l%De3sC*bGC^>Ib.R#pY5^Lq,;Q>e1%P'(AHkq&"+P;dlaT+d/);Wc%59DpCXmji.NCk`NkQCS;mcP&Wgg\0>`cc7'X^kbg+=23Sun%4MkkJY8:XIJql+)=RmC'q+b&a#X9\LaVju^<!NOl;CG/\;e`c$K'q<P#&NCs\rR-Ri[^4#$VF))fH6cB8T)5['Ih8H'Ic^bM@^qt%DIC^Xkm/4FG_+sroIVkE;7k:%M(6AknJ$cJ+Mp)V`-M@pan*)p'QQ-lH4NE0M4\78eammD.$(^S`+%4-m<:mU>RA>R*P:5rO!Le4%#FIL^*L[L0K-Ilq02P8T7@<^K\XSu].6M5q\H=-0!!e1U,),ik,)(#9&[n7?b8XU=_&g*R$`=XQ(`oTYA]3QL!Jj,Y.E%#".*P0r%72SH.+d*SJ#qN--4berT70q<kI-!n/&ljU,X]uc(kpKn9?AH?s>%UB^#n'n1MA-\XUpl%V2+%TQ@Ek_p9Yo+2@RgQ4<M=dfTF_5`%JT?i<.KIL(;(jrNLm=g[3&WT$Gia(MZ3MUBEf_M>Ef^CcoblYu,S21CnK'<XR!N?/3dQOmW<#bM%54PPeHlOY]A)uA>XqZ5n&2kC%)!;FiLTm/,G`UKiV@cDk<#@^TYb<Nq3&He_&k#E.fHDVFaOnZsOdVLdAAh009'@7,+Y0ii(:$8SY,fEm*FhaX,PB/g8Yt[GE'EWT%:$YJ;AO@M%fcm7%3E"/u>5CT@kFsR,Oe;.B#][;/`Ztjn@?Q:;X_TjQFhu)>`.[6_BfqZ;j!GnJ^0cZQUV$/NRl\p3\]t;RJqG't%j'=qJ<#Y=j.18.&r60CZZB2=;\^*OHO:`'6f4Q7:Y=`$iSsM9E70gq%cHF)\K.D5g$;h2\@?omsdk$hc`"3hlK1pm&Q49g=$!nYc%*>;nV;d/[Vj:K(VKE+H#\H'U!\H?p1H<?9:MD16*>8^,DdPc34\pst9;F!Q*T>k,d@_c7;IHt<p9fdNE;&L02*!-fVjoQ5I_aVDS%/-pn!ntN3p1Dg.BW6@kR5f/U>joQ5!joQ7%nNsC!?tCbY+K.ud9bU[L@43`r;%M<5./"7hb9G.C89=pr&RfCJ0,EgbQ5%X#:V&Gr%1jH'dN$+*>.nF1<r4>9[ZqJH6oC!#TEMB<@&NW&%C/C0'`sbaTI,Ya`^B5+o^B58,E#N4V)76!"Oj>+JI?N4j=5b0#7I5`/d,h>>%LF_[+PAaYKc3Y;kE;CS/GPYTJB/R;BmE13QL!st!q65/:'Y<Qt/CWjmT*TT9*ABo!L%4Cd:;+EbRg3&PZE#G7(6YPRO6Z:Sf$<4H%Ueupq9s(KdnP<mnQ<V<</%$XlMj\g#NH_'8g"RfQ&B\e\k`tGmTUZM.7#.l5lmJuB:e%#I@1;e0<e217d@`5f1uO>4a,J+<o>iQ/%@30)4l<T/2+:@A6WA'@T,)d)BaZQH_;.E:6i\gRqk0O8hO4[B0`hu![Sg[m2`gg6R`h3o&NuFcQW#egmB/,LVJk2FXqS5&6=HFpZ%MrS;UP0PZaQ8D<q\-Z(F3HbmBN6[VSgO;":f*njYb2;C@*8N6q2)r0%L:+$=01-h3%]@?b=VZP)&*5DEc2"mP')^N'F,!0"S=^a)%0+/f'k.72llAn[;6WH)NA_#3<=F%FXnuIS[gkZ[4Wc.HKCW'qQ)KT6QJ2uM.NAB&f#;u1IE*B&R*.Y>pN1WZ\^DdpS`U>(;eH'Sj%mY#kQ897QN0CWbi8)N-F6][&g*1Ydb$,/ri3@B$dS<Fm2[u'g-p^RFP+$/X.ncNlt;]'@j<dT]`^IFla7_CZ*]I)-0:BeLmqjdCV%3$5WLaN(C`p4i?Rj*f_-c%J1&@P1)Q.\G0eLMo9G/h$_LH_7AR%Nre*quU(G=#uO>n-7C<el9%V\Pr(IjJe[DS9I(uWZpk%_%%a-%1992(K]H^t5g%S5hl@.P`1g\OIM/=V'$T/;A&hLN&bdZk89l=%20HaG[DhZh(c`2@k6[!\4Ml*25cVVtOJ$u><8^]_gqr;<:EE?(%Vgnrs;o%&WA<Xr#Nsc&a*Z1Z2?1)u=BJUMr*.iFY3n&n/djWFeSg'+U:PbB91>HPoorgVn8Iu=]SYUJ*1%@@L?2Xr3a>DD>*+P[R%b,V=c7X,8$SbO!Y&B.q$qMU!1L9&F*G"cM5)0nW;WKUT5I*"hF]W]FdnM#/WSbSWbj*3HECU-pr8L,8NRNb.I9bA_dVLU\@&m?))%&HW,)6$TjNod\4Dka=2)%OqPN.XK-p/URlLRnVX_(K&:m5,tih+0&HsoWG%s&PHG=ltSjPF:3(GiRd?OM_;Z[?8@l<SgGFLbsGYt%9o<WDBi9c]B.-G9:"X]^l=4`NYcZHQigsfZ;EP(Qp$q<t`<'/0NPbTEeajJ\NBBp9B;(I7M\+8@,"t*n2G,#X:D:-Bl6o-eK<<Z-%GheV0Mn8FXk#;>AUq.`_^IK6Y]:&d5`.t-:jZQ=/cakU#Vb3q'-B9D^pj$k@\=!o,N&[*Dc%I1^W"`<P1LZ?CbdqgN.2n#3a\mEO%SC\IcR1p8LVoP<sM<;<?,@8aX(fIfG\'\?gFjIeZ3r[q3pqI%]X/heFKq493%\B5=r-!=(deWJ2j8V-,qfmMdj7MBr_,'jLgm=4W%hkr\6%d&4irUE+.^anjCKnZX!gR\?T@#Tk@~>%AI9_PrivateDataEnd